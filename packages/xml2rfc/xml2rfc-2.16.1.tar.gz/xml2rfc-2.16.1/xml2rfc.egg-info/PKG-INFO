Metadata-Version: 1.2
Name: xml2rfc
Version: 2.16.1
Summary: Xml2rfc generates RFCs and IETF drafts from document source in XML according to the dtd in RFC2629.
Home-page: https://tools.ietf.org/tools/xml2rfc/trac/
Author: Henrik Levkowetz, Josh Bothun
Author-email: tools-discuss@ietf.org
Maintainer: Henrik Levkowetz
Maintainer-email: henrik@levkowetz.com
License: Simplified BSD Licence
Download-URL: https://pypi.python.org/pypi/xml2rfc
Description: Introduction
        ============
        
        The IETF_ uses a specific format for the standards and other documents it
        publishes as RFCs_, and for the draft documents which are produced when
        developing documents for publications.  There exists a number of different
        tools to facilitate the formatting of drafts and RFCs according to the
        existing rules, and this tool, **xml2rfc**, is one of them.  It takes as input
        an xml file which contains the text and meta-information about author names
        etc., and transforms it into suitably formatted output.  The input xml file
        should follow the DTD given in RFC2629_ (or it's `inofficial successor`_).
        
        The current incarnation of **xml2rfc** provides output in the following
        formats: Paginated and unpaginated ascii text, html, nroff, and expanded xml.
        Only the paginated text format is currently (January 2013) accepable as draft
        submissions to the IETF.
        
        .. _IETF: https://www.ietf.org/
        .. _RFCs: https://www.rfc-editor.org/
        .. _RFC2629: https://tools.ietf.org/html/rfc2629
        .. _inofficial successor: https://tools.ietf.org/html/draft-mrose-writing-rfcs
        
        Installation
        ============
        
        Installation of the python package is done as usual with 'pip install xml2rfc',
        using appropriate switches and/or sudo.
        
        Installation of support libraries for the PDF-formatter
        -------------------------------------------------------
        
        In order to generate PDFs, xml2rfc uses the WeasyPrint module, which
        depends on external libaries that must be installed as native packages
        on your platform, separately from the xml2rfc install.
        
        First, install the Cairo, Pango, and GDK-PixBuf library files on your
        system.  See installation instructions on the WeasyPrint Docs:
        
            https://weasyprint.readthedocs.io/en/stable/install.html
        
        (Python 3 is not needed if your system Python is 2.7, though).
        
        (On some OS X systems with System Integrity Protection active, you may
        need to create a symlink from your home directory to the library installation
        directory (often /opt/local/lib):
        
            ln -s /opt/local/lib ~/lib
        
        in order for weasyprint to find the installed cairo and pango libraries.
        Whether this is needed or not depends on whether you used macports or homebrew
        to install cairo and pango, and the homebrew / macport version.)
        
        Next, install the pycairo and weasyprint python modules using pip.
        Depending on your system, you may need to use 'sudo' or install in
        user-specific directories, using the --user switch.  On OS X in
        particular, you may also need to install a newer version of setuptools
        using --user before weasyprint can be installed.  If you install with 
        the --user switch, you may need to also set PYTHONPATH, e.g.,
        
            PYTHONPATH=/Users/henrik/Library/Python/2.7/lib/python/site-packages
        
        for Python 2.7.
        
        The basic pip commands (modify as needed according to the text above)
        are:
        
            pip install 'pycairo>=1.18' 'weasyprint<=0.42.3'
        
        With these installed and available to xml2rfc, the --pdf switch will be
        enabled.
        
        For PDF output, you also need to install the Noto font set.  Download the full
        set from https://noto-website-2.storage.googleapis.com/pkgs/Noto-unhinted.zip,
        and install as appropriate for your platform.
        
        Usage
        =====
        
        xml2rfc accepts a single XML document as input and outputs to one or more conversion formats.
        
        **Basic Usage**: ``xml2rfc SOURCE [options] FORMATS...``
        
        Run ``xml2rfc --help`` for a full listing of command-line options.
        
        
        Changelog
        =========
        
        
        Version 2.16.1 (08 Jan 2019)
        ------------------------------------------------
        
        
          This is a minor release. prompted mostly by a change in the BaseV3Writer
          class in order to better be able to override logging when subclassing it.
        
          * Updated docker files.
        
          * Refactored some logging functionality.
        
          * Tweaked BaseV3Writer to make it possbile to override all error output.
        
          * Added a __str__ method for an exception class, and fixed an error case 
            return value.
        
          * Tweaked the mkrelease script
        
        
        
        
        
        
        Version 2.16.0 (22 Dec 2018)
        ------------------------------------------------
        
        
          This release provides support for generation of xml2rfc PDF output.
          However, a default pip install will only install the xml2rfc module
          itself; additional installation work is needed to enable PDF generation:
        
          In order to generate PDFs, xml2rfc uses the WeasyPrint module, which
          depends on external libaries that must be installed as native packages
          on your platform, separately from the xml2rfc install.
        
          First, install the Cairo, Pango, and GDK-PixBuf libs on your system.
          See installation instructions on the WeasyPrint Docs:
        
              https://weasyprint.readthedocs.io/en/stable/install.html
        
          (Python 3 is not needed if your system Python is 2.7, though).
        
          (On some OS X systems with System Integrity Protection active, you may
          need to create a symlink from your home directory to the library installation
          directory (often /opt/local/lib):
        
              ln -s /opt/local/lib ~/lib
        
          in order for weasyprint to find the installed cairo and pango libraries.
          Whether this is needed or not depends on whether you used macports or
          homebrew to install cairo and pango, and the homebrew / macport version.)
        
          Next, install the pycairo and weasyprint python modules using pip.
          Depending on your system, you may need to use 'sudo' or install in
          user-specific directories, using the --user switch.  On OS X in particular,
          you may also need to install a newer version of setuptools using --user
          switch before weasyprint can be installed.  If you install with the --user
          switch, you may also need to set PYTHONPATH in your shell environment, e.g.,
        
              PYTHONPATH=/Users/username/Library/Python/2.7/lib/python/site-packages
        
          for Python 2.7.
        
          The basic pip command (modify as needed according to the text above) is:
        
              pip install 'pycairo>=1.18' 'weasyprint<=0.42.3'
        
          With these installed and available to xml2rfc, the --pdf switch will be
          enabled.
        
          For correct PDF output, you also need to install the Noto font set.
          Download the full set from:
        
            https://noto-website-2.storage.googleapis.com/pkgs/Noto-unhinted.zip,
        
          and install as appropriate for your platform.
        
        
        
        
        
        
        
        Version 2.15.5 (21 Dec 2018)
        ------------------------------------------------
        
        
          * Added code to look for input marked as v3, and process that as v3 
            without requiring an explicit --v3 switch.  This should make it easier to 
            transition to v3 draft submissions.
        
          * Fixed a bug related to cref handling.  Fixes issue #389.
        
          * Ensured propagation of options to parser and url resolver, and improved 
            the error message for externals without .xml extension that give 404.
        
          * Fixed an include without explicit extension in a test input file, in 
            order to work with the stricter v3 formatter include processing.
        
        
        
        
        
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python
Classifier: Topic :: Text Processing
Classifier: Topic :: Text Processing :: Markup :: XML
Classifier: License :: OSI Approved :: BSD License
