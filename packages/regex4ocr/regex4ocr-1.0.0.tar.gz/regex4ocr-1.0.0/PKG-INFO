Metadata-Version: 1.0
Name: regex4ocr
Version: 1.0.0
Summary: Extract data from OCR string results based on Document Regexp Models (DRMs).
Home-page: https://github.com/juntossomosmais/regex4ocr
Author: Igor Grillo Peternella
Author-email: igor.feq@gmail.com
License: MIT
Description: # regex4ocr
        
        A simple library to plug regular expression models (Document Regex Models) to parse your favorite OCR string output and extract important fields
        from the OCR picture.
        
        ## Document Regexp Model (DRM)
        
        The DRM are yml files which describes the desired documents with many regular expressions. Those are used to extract the document data in order to transform the OCR results into a structured Python dict.
        
        ## Built with
        
        * Python 3.7.1 (but the library supports any Python 3.x);
        * PyYAML for yml parsing;
        * Tox and Pytest for testing.
        
        ## Transform OCR images into structured data
        
        This library allows one to convert the OCR result string to the following structured format:
        
        ```python
        {
            "fields": {
                "user_defined_field_1": "result_1",
                "user_defined_field_2": "result_2",
            },
            "table": {
                "header": "table header",
                "all_rows": "row 1 result row 2 result",
                "rows": ["row 1 result", "row 2 result"],
                "footer": "table footer"
            }
        }
        ```
        
        ## Getting ready with local development
        
        In a system with Python pip, install the dev requirements:
        
        ```bash
        pip install -r requirements_dev.txt
        ```
        
        To locally use the main parse function, create a Python module at the root of the project and import the parse function:
        
        ```python
        import regex4ocr
        
        regex4ocr.parse(ocr_result_string, folder_with_drms)
        ```
        
        ## Testing
        
        Regex4ocr has been tested under Python 3.x environments with tox and pytest. In order to run such tests:
        
        ```bash
        tox  # executes all tests for Python 3.0, 3.3, 3.5 and 3.7
        ```
        
        To execute the tests for a single environment (faster testing):
        
        ```bash
        tox -e 3.7
        ```
        
        ## Code Linting
        
        This project uses the following linters:
        
        * pylint;
        * flake8;
        * pep8.
        
        Also, the code is formatted with the Black formatter (https://github.com/ambv/black). Some Black configuration can be found
        at the ```pyproject.toml``` file.
        
        ### OCR and DRM example:
        
        Given the following DRM which exists at a folder named ```drms```:
        
        ```yml
        identifiers:
          - cupom fiscal
        fields:
          cnpj: 'cnpj:\s*(\d{2}\.\d{3}\.\d{3}\/\d{4}-\d{2})'
          coo: 'coo:\s*(\d{6})'
          date: '\d{2}\/\d{2}\/\d{4}\s*\d{2}:\d{2}:\d{2}'
        options:
          lowercase: true
          remove_whitespace: false
          force_ascii: true
          replace:
            - ['c00', 'coo']
            - ['c10', 'coo']
        table:
          header: (item|iten)\s+codigo.*vl.*(?=\n)
          line_start: \n\d*.+\d+
          footer: total\s*r\$
        ```
        
        And given the OCR string result from a picture (such as Google Vision, Tesseract OCR, etc.), import the
        regex4ocr library and use its parse function in order to extract structured data (Python dict) from it:
        
        
        ```python
        import regex4ocr  # import the library
        
        # stores the OCR string result generated by a computer vision package (Google Vision, etc.)
        ocr_result = """
        cnpj: 11.123.456/0001-99
        ie:111.111.111. 111
        im: 123456-7
        2570972078 17:54: ttccf 3045759 **** c00:047621
        cupom fiscal
        iten codigo descricao qid un vl unit r$ ) st vl item(r$)
        17273 breit grossa -7mts" bunx373 ft 288 026
        2 $17 pedra 1 (ht) 2unx84 694 f1
        169 38g
        003 515 cimento votoran todas as obras 50 kg
        cred)
        boun x 26.489 f1
        794,676
        total r$
        1.247.07
        cheque
        1.247.09
        troco r$
        """
        
        # insert the path to a folder where the DRM (yml files) are stored
        drms_folder_path = "./my_drms"
        
        # generate structured data (JSON-like) from the unstructured OCR string
        extracted_data = regex4ocr.parse(ocr_result, drms_folder_path)
        
        # prints the result
        print(extracted_data)
        ```
        
        Here's the final result:
        
        ```python
        {
            "fields": {
                "cnpk": "11.123.456/0001-99",
                "coo": "047621",
            },
            "table": {
                "header": "iten codigo descricao qid un vl unit r$ ) st vl item(r$)",
                "all_rows": "\n17273 breit grossa -7mts bunx373 ft 288 026\n2 $17 pedra 1 (ht) 2unx84 694 f1\n169 38g\n003 515 cimento votoran todas as obras 50 kg\ncred)\nboun x 26.489 f1\n794,676\n",
                "rows": ["17273 breit grossa -7mts bunx373 ft 288 026", "2 $17 pedra 1 (ht) 2unx84 694 f1", "169 38g", "003 515 cimento votoran todas as obras 50 kg cred) boun x 26.489 f1794,676"],
                "footer": "table footer"
            }
        }
        ```
Platform: UNKNOWN
