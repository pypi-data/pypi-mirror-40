import cerridwen.api_server

from cerridwen import LatLong
from .planets import Moon, Sun, Mercury, Venus, Mars, Jupiter, Saturn
from .utils import jd2iso, iso2jd, parse_jd_or_iso_date

from nose.tools import assert_equal, assert_almost_equal, raises, assert_sequence_equal
import unittest

# misc
def test_moon_age():
    assert_almost_equal(Moon(2456794.949305556).age(), 18.189345157705247)

def test_speed():
    assert_almost_equal(Moon(iso2jd('1983-07-01 7:40:00')).speed(), 11.989598784682862)

def test_period_length():
    assert_almost_equal(Moon(2456794.949305556).period_length(), 29.517968974076211)

# new/full moons
def test_next_new_moon():
    assert_almost_equal(Moon(2456794.9541666).next_new_moon().jd, 2456806.2779293722)

def test_next_full_moon():
    assert_almost_equal(Moon(2456731.376389).next_full_moon().jd, 2456733.2141234726)

# sun/moon rise/set
# compared with data generated by
#   http://aa.usno.navy.mil/data/docs/RS_OneYear.php (Form B, long=13E, lat=52N)
def test_rise_set():
    obs = LatLong(52, 13)
    assert_equal(Moon(2456798.2, obs).next_rise().iso_date, "2014-05-20 23:37:17")
    assert_equal(Sun(2456799.9, obs).next_rise().iso_date, "2014-05-23 03:03:05")

def test_iso_jd():
    time_iso = jd2iso(cerridwen.jd_now())
    assert_equal(jd2iso(iso2jd(time_iso)), time_iso)

def test_parse_date_valid_jd():
    parse_jd_or_iso_date(1)
    parse_jd_or_iso_date(2456799.9897213)

def test_parse_date_valid_iso():
    parse_jd_or_iso_date("2014-05-20T23:37:17")
    parse_jd_or_iso_date("2014-05-20 23:37:17")

def test_next_sign_change():
    nsc = Moon(2456867.914486644).next_sign_change()
    assert_equal(jd2iso(nsc), '2014-07-31 16:09:11')
    assert_sequence_equal(Moon(nsc).position().rel_tuple, ('Libra', 0, 0, 0))

def test_angle_finder():
    # TODO need more of those
    jd_new_moon_virgo_2014 = Moon(2456868).next_angle_to_planet(Sun(), 0)[0]
    assert_equal(jd2iso(jd_new_moon_virgo_2014), '2014-08-25 14:12:46')

def test_angle_finder_2():
    jd1 = Sun(2456868).next_angle_to_planet(Moon(), 0)[0]
    jd2 = Moon(2456868).next_angle_to_planet(Sun(), 0)[0]
    assert_equal(jd2iso(jd1), jd2iso(jd2))

def test_angle_finder_3():
    jd1 = Jupiter(2456868).next_angle_to_planet(Saturn(), 0)[0]
    jd2 = Saturn(2456868).next_angle_to_planet(Jupiter(), 0)[0]
    assert_equal(jd2iso(jd1), jd2iso(jd2))
    assert_equal(jd2iso(jd1), "2020-12-21 18:20:29")

def test_rx_finder_1():
    "Rx finder forwards search"
    mercury_retrograde_oct2014 = Mercury(iso2jd('2014-10-03 7:40:00')).next_rx_event(lookahead=30)
    assert_equal(mercury_retrograde_oct2014['type'], 'rx')
    assert_equal(jd2iso(mercury_retrograde_oct2014['jd']), '2014-10-04 17:02:15')

def test_rx_finder_2():
    "Rx finder backwards search"
    mercury_retrograde_oct2014 = Mercury(iso2jd('2014-10-30 7:40:00')).next_rx_event(lookahead=-30)
    assert_equal(mercury_retrograde_oct2014['type'], 'direct')
    assert_equal(jd2iso(mercury_retrograde_oct2014['jd']), '2014-10-25 19:16:33')

@raises(AssertionError)
def test_rx_finder_sun():
    "Sun does not rx"
    Sun().next_rx_event()

@raises(AssertionError)
def test_rx_finder_moon():
    "Moon does not rx"
    Moon().next_rx_event()

def test_sign_change_1():
    jd = Mercury(2445548.93216).next_sign_change()
    assert_equal(Mercury(jd).sign(), 'Libra')

def test_sign_change_2():
    jd = Mercury(2447727.9).next_sign_change()
    assert_equal(Mercury(jd).sign(), 'Virgo')

def test_mercury_semisextile_sun_impossible():
    assert_equal(Mercury(2460932).next_angle_to_planet(Sun(2460932), 30), None)

def test_zero_jd():
    assert_almost_equal(Mercury(0).position().absolute_degrees, 222.3977788981)


@raises(ValueError)
def test_parse_date_invalid_1():
    parse_jd_or_iso_date("2014-05-20T23:37:17X")

@raises(ValueError)
def test_parse_date_invalid_2():
    parse_jd_or_iso_date("123garbage.5")

class HTTP_TestCase(unittest.TestCase):
    def setUp(self):
        self.app = cerridwen.api_server.app.test_client()

    def simple_sun_test(self):
        response = self.app.get('/v1/sun')
        self.assertEqual(response.status_code, 200)

    def simple_moon_test(self):
        response = self.app.get('/v1/moon')
        self.assertEqual(response.status_code, 200)

    def simple_olivier_test(self):
        response = self.app.get('/v1/olivier')
        self.assertEqual(response.status_code, 200)

    def simple_events_test(self):
        import sqlite3
        conn = sqlite3.connect(cerridwen.dbfile)
        c = conn.cursor()
        c.execute('CREATE TABLE IF NOT EXISTS events (jd float, type text, subtype text, planet text, data text)')
        conn.commit()
        conn.close()

        response = self.app.get('/v1/events')
        self.assertEqual(response.status_code, 200)

    def jd_date_test(self):
        response = self.app.get('/v1/sun?date=2456805.9347222224')
        self.assertEqual(response.status_code, 200)

    def bogus_date_test(self):
        response = self.app.get('/v1/sun?date=jumble81923')
        self.assertEqual(response.status_code, 400)

    def root_404(self):
        response = self.app.get('/')
        self.assertEqual(response.status_code, 404)
