# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import pulumi
import pulumi.runtime
from .. import utilities, tables

class UptimeCheckConfig(pulumi.CustomResource):
    """
    This message configures which resources and services to monitor for availability.
    
    
    To get more information about UptimeCheckConfig, see:
    
    * [API documentation](https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.uptimeCheckConfigs)
    * How-to Guides
        * [Official Documentation](https://cloud.google.com/monitoring/api/v3/)
    
    <div class = "oics-button" style="float: right; margin: 0 0 -15px">
      <a href="https://console.cloud.google.com/cloudshell/open?cloudshell_git_repo=https%3A%2F%2Fgithub.com%2Fterraform-google-modules%2Fdocs-examples.git&cloudshell_working_dir=uptime_check_config_http&cloudshell_image=gcr.io%2Fgraphite-cloud-shell-images%2Fterraform%3Alatest&open_in_editor=main.tf&cloudshell_print=.%2Fmotd&cloudshell_tutorial=.%2Ftutorial.md" target="_blank">
        <img alt="Open in Cloud Shell" src="//gstatic.com/cloudssh/images/open-btn.svg" style="max-height: 44px; margin: 32px auto; max-width: 100%;">
      </a>
    </div>
    """
    def __init__(__self__, __name__, __opts__=None, content_matchers=None, display_name=None, http_check=None, internal_checkers=None, is_internal=None, monitored_resource=None, period=None, project=None, resource_group=None, selected_regions=None, tcp_check=None, timeout=None):
        """Create a UptimeCheckConfig resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['content_matchers'] = content_matchers

        if not display_name:
            raise TypeError('Missing required property display_name')
        __props__['display_name'] = display_name

        __props__['http_check'] = http_check

        __props__['internal_checkers'] = internal_checkers

        __props__['is_internal'] = is_internal

        __props__['monitored_resource'] = monitored_resource

        __props__['period'] = period

        __props__['project'] = project

        __props__['resource_group'] = resource_group

        __props__['selected_regions'] = selected_regions

        __props__['tcp_check'] = tcp_check

        if not timeout:
            raise TypeError('Missing required property timeout')
        __props__['timeout'] = timeout

        __props__['name'] = None

        super(UptimeCheckConfig, __self__).__init__(
            'gcp:monitoring/uptimeCheckConfig:UptimeCheckConfig',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

