#!/usr/bin/env python
from setuptools import setup
setup(
  name = 'cs.csvutils',
  description = 'CSV file related facilities',
  author = 'Cameron Simpson',
  author_email = 'cs@cskk.id.au',
  version = '20190103',
  url = 'https://bitbucket.org/cameron_simpson/css/commits/all',
  classifiers = ['Programming Language :: Python', 'Programming Language :: Python :: 2', 'Programming Language :: Python :: 3', 'Development Status :: 4 - Beta', 'Intended Audience :: Developers', 'Operating System :: OS Independent', 'Topic :: Software Development :: Libraries :: Python Modules', 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'],
  install_requires = ['cs.deco', 'cs.logutils', 'cs.mappings', 'cs.pfx'],
  keywords = ['python2', 'python3'],
  long_description = "Utility functions for CSV files.\n\nIn python 2 the stdlib CSV reader reads 8 bit byte data and returns str objects;\nthese need to be decoded into unicode objects.\nIn python 3 the stdlib CSV reader reads an open text file and returns str\nobjects (== unicode).\nSo we provide `csv_reader()` generators to yield rows containing unicode.\n\n## Function `csv_import(fp, class_name=None, column_names=None, computed=None, preprocess=None, mixin=None, **kw)`\n\nRead CSV data where the first row contains column headers.\nReturns a row namedtuple factory and an iterable of instances.\n\nParameters:\n* `fp`: a file object containing CSV data, or the name of such a file\n* `class_name`: optional class name for the namedtuple subclass\n  used for the row data.\n* `column_names`: optional iterable of column headings; if\n  provided then the file is not expected to have internal column\n  headings\n* `computed`: optional keyword parameter providing a mapping\n  of str to functions of `self`; these strings are available\n  via __getitem__\n* `preprocess`: optional keyword parameter providing a callable\n  to modify CSV rows before they are converted into the namedtuple.\n  It receives a context object an the data row. It may return\n  the row (possibly modified), or None to drop the row.\n* `mixin`: an optional mixin class for the generated namedtuple subclass\n  to provide extra methods or properties\n\nAll other keyword paramaters are passed to csv_reader(). This\nis a very thin shim around `cs.mappings.named_column_tuples`.\n\nExamples:\n\n      >>> cls, rows = csv_import(['a, b', '1,2', '3,4'], class_name='Example_AB')\n      >>> cls     #doctest: +ELLIPSIS\n      <function named_row_tuple.<locals>.factory at ...>\n      >>> list(rows)\n      [Example_AB(a='1', b='2'), Example_AB(a='3', b='4')]\n\n      >>> cls, rows = csv_import(['1,2', '3,4'], class_name='Example_DEFG', column_names=['D E', 'F G '])\n      >>> list(rows)\n      [Example_DEFG(d_e='1', f_g='2'), Example_DEFG(d_e='3', f_g='4')]\n\n## Function `csv_writerow(csvw, row, encoding='utf-8')`\n\nWrite the supplied row as strings encoded with the supplied `encoding`,\ndefault 'utf-8'.\n\n## Function `xl_import(workbook, sheet_name, skip_rows=0, **kw)`\n\nRead the named `sheet_name` from the Excel XLSX file named\n`filename` as for `csv_import`.\nReturns a row namedtuple factory and an iterable of instances.\n\nParameters:\n* `workbook`: Excel work book from which to load the sheet; if\n  this is a str then the work book is obtained from\n  openpyxl.load_workbook()\n* `sheet_name`: the name of the work book sheet whose data should be imported\n\nOther keyword parameters are as for cs.mappings.named_column_tuples.\n\nNOTE: this function requires the `openpyxl` module to be available.",
  long_description_content_type = 'text/markdown',
  package_dir = {'': 'lib/python'},
  py_modules = ['cs.csvutils'],
)
