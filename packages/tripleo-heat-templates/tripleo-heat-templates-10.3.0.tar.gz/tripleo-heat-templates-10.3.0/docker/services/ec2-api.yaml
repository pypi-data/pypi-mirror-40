heat_template_version: rocky

description: >
  OpenStack containerized EC2 API service

parameters:
  DockerEc2ApiImage:
    description: image
    type: string
  DockerEc2ApiConfigImage:
    description: The container image to use for the ec2_api config_volume
    type: string
  Ec2ApiLoggingSource:
    type: json
    default:
      tag: openstack.ec2.api
      path: /var/log/containers/ec2api/ec2api.log
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EnableInternalTLS:
    type: boolean
    default: false

conditions:

  internal_tls_enabled: {equals: [{get_param: EnableInternalTLS}, true]}

resources:

  ContainersCommon:
    type: ./containers-common.yaml

  MySQLClient:
    type: ../../puppet/services/database/mysql-client.yaml

  Ec2ApiPuppetBase:
      type: ../../puppet/services/ec2-api.yaml
      properties:
        EndpointMap: {get_param: EndpointMap}
        ServiceNetMap: {get_param: ServiceNetMap}
        DefaultPasswords: {get_param: DefaultPasswords}
        RoleName: {get_param: RoleName}
        RoleParameters: {get_param: RoleParameters}

outputs:
  role_data:
    description: Role data for the EC2 API role.
    value:
      service_name: {get_attr: [Ec2ApiPuppetBase, role_data, service_name]}
      config_settings: {get_attr: [Ec2ApiPuppetBase, role_data, config_settings]}
      service_config_settings:
        map_merge:
          - get_attr: [Ec2ApiPuppetBase, role_data, service_config_settings]
          - fluentd:
              tripleo_fluentd_groups_ec2_api:
                - nova
              tripleo_fluentd_sources_ec2_api:
                - {get_param: Ec2ApiLoggingSource}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: ec2_api
        puppet_tags: ec2api_api_paste_ini,ec2api_config
        step_config:
          list_join:
            - "\n"
            - - {get_attr: [Ec2ApiPuppetBase, role_data, step_config]}
              - {get_attr: [MySQLClient, role_data, step_config]}
        config_image: {get_param: DockerEc2ApiConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/ec2_api.json:
          command: /usr/bin/ec2-api
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/log/ec2api
              owner: ec2api:ec2api
              recurse: true
        /var/lib/kolla/config_files/ec2_api_tls_proxy.json:
          command: /usr/sbin/httpd -DFOREGROUND
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
        /var/lib/kolla/config_files/ec2_api_metadata.json:
          command: /usr/bin/ec2-api-metadata
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/log/ec2api # default log dir for metadata service as well
              owner: ec2api:ec2api
              recurse: true
      docker_config:
        # db sync runs before permissions set by kolla_config
        step_2:
          ec2_api_init_logs:
            image: &ec2_api_image {get_param: DockerEc2ApiImage}
            privileged: false
            user: root
            volumes:
              - /var/log/containers/ec2_api:/var/log/ec2api:z
              # mount ec2_api_metadata to "ec2api-metadata" only here to fix
              # permissions of both directories in one go
              - /var/log/containers/ec2_api_metadata:/var/log/ec2api-metadata:z
            command: ['/bin/bash', '-c', 'chown -R ec2api:ec2api /var/log/ec2api /var/log/ec2api-metadata']
        step_3:
          ec2_api_db_sync:
            image: *ec2_api_image
            net: host
            detach: false
            privileged: false
            user: root
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/config-data/ec2_api/etc/my.cnf.d/tripleo.cnf:/etc/my.cnf.d/tripleo.cnf:ro
                  - /var/lib/config-data/ec2_api/etc/ec2api/:/etc/ec2api/:ro
                  - /var/log/containers/ec2_api:/var/log/ec2api:z
            command: "/usr/bin/bootstrap_host_exec ec2_api su ec2api -s /bin/bash -c '/usr/bin/ec2-api-manage db_sync'"
        step_4:
          map_merge:
            - ec2_api:
                image: *ec2_api_image
                net: host
                privileged: false
                restart: always
                volumes:
                  list_concat:
                    - {get_attr: [ContainersCommon, volumes]}
                    -
                      - /var/lib/kolla/config_files/ec2_api.json:/var/lib/kolla/config_files/config.json:ro
                      - /var/lib/config-data/puppet-generated/ec2_api/:/var/lib/kolla/config_files/src:ro
                      - /var/log/containers/ec2_api:/var/log/ec2api:z
                environment:
                  - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
              ec2_api_metadata:
                image: *ec2_api_image
                net: host
                privileged: false
                restart: always
                volumes:
                  list_concat:
                    - {get_attr: [ContainersCommon, volumes]}
                    -
                      - /var/lib/kolla/config_files/ec2_api_metadata.json:/var/lib/kolla/config_files/config.json:ro
                      - /var/lib/config-data/puppet-generated/ec2_api/:/var/lib/kolla/config_files/src:ro
                      - /var/log/containers/ec2_api_metadata:/var/log/ec2api:z
                environment:
                  - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
            - if:
                - internal_tls_enabled
                - ec2_api_tls_proxy:
                    image: *ec2_api_image
                    net: host
                    user: root
                    restart: always
                    volumes:
                      list_concat:
                        - {get_attr: [ContainersCommon, volumes]}
                        -
                          - /var/lib/kolla/config_files/ec2_api_tls_proxy.json:/var/lib/kolla/config_files/config.json:ro
                          - /var/lib/config-data/puppet-generated/ec2_api/:/var/lib/kolla/config_files/src:ro
                          - /etc/pki/tls/certs/httpd:/etc/pki/tls/certs/httpd:ro
                          - /etc/pki/tls/private/httpd:/etc/pki/tls/private/httpd:ro
                    environment:
                      - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
                - {}
      host_prep_tasks:
        - name: create persistent log directories
          file:
            path: "{{ item.path }}"
            state: directory
            setype: "{{ item.setype }}"
          with_items:
            - { 'path': /var/log/containers/ec2_api, 'setype': svirt_sandbox_file_t }
            - { 'path': /var/log/containers/ec2_api_metadata, 'setype': svirt_sandbox_file_t }
        - name: ec2_api logs readme
          copy:
            dest: /var/log/{{ item }}/readme.txt
            content: |
              Log files from ec2api containers can be found under
              /var/log/containers/ec2_api and /var/log/containers/ec2_api_metadata.
            with_items:
              - ec2api
              - ec2api-metadata
          ignore_errors: true
      upgrade_tasks: []
      post_upgrade_tasks:
        - when: step|int == 1
          import_role:
            name: tripleo-docker-rm
          vars:
            containers_to_rm:
              with_items:
                list_concat:
                  - - ec2_api
                  - - ec2_api_metadata
                  - - if:
                        - internal_tls_enabled
                        - - ec2_api_tls_proxy
                        - null
      metadata_settings:
        get_attr: [Ec2ApiPuppetBase, role_data, metadata_settings]
