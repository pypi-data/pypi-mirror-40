{"contract_types":{"registry":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"name":"_package","type":"bytes32"},{"indexed":false,"name":"_version","type":"bytes32"},{"indexed":false,"name":"_uri","type":"bytes"}],"name":"Release","type":"event"},{"constant":false,"inputs":[],"name":"__init__","outputs":[],"payable":false,"type":"constructor"},{"constant":false,"gas":35627,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"type":"function"},{"constant":false,"gas":1960,"inputs":[{"name":"packageName","type":"bytes32"},{"name":"version","type":"bytes32"}],"name":"getReleaseId","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"gas":1509,"inputs":[{"name":"packageName","type":"bytes32"},{"name":"version","type":"bytes32"}],"name":"generateReleaseId","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"gas":1265,"inputs":[{"name":"packageId","type":"bytes32"}],"name":"getPackageName","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"gas":1871,"inputs":[{"name":"packageName","type":"bytes32"}],"name":"getPackageData","outputs":[{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"},{"name":"out","type":"int128"}],"payable":false,"type":"function"},{"constant":false,"gas":633,"inputs":[],"name":"numPackageIds","outputs":[{"name":"out","type":"int128"}],"payable":false,"type":"function"},{"constant":false,"gas":1442,"inputs":[{"name":"packageName","type":"bytes32"}],"name":"numReleaseIds","outputs":[{"name":"out","type":"int128"}],"payable":false,"type":"function"},{"constant":false,"gas":4856,"inputs":[{"name":"offset","type":"uint256"},{"name":"length","type":"uint256"}],"name":"getAllPackageIds","outputs":[{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"gas":15265,"inputs":[{"name":"packageName","type":"bytes32"},{"name":"offset","type":"uint256"},{"name":"length","type":"uint256"}],"name":"getAllReleaseIds","outputs":[{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"gas":15337,"inputs":[{"name":"releaseId","type":"bytes32"}],"name":"getReleaseData","outputs":[{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"},{"name":"out","type":"bytes"}],"payable":false,"type":"function"},{"constant":false,"gas":1865761,"inputs":[{"name":"packageName","type":"bytes32"},{"name":"version","type":"bytes32"},{"name":"manifestURI","type":"bytes"}],"name":"release","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"gas":873,"inputs":[],"name":"owner","outputs":[{"name":"out","type":"address"}],"payable":false,"type":"function"},{"constant":true,"gas":1114,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"packages__exists","outputs":[{"name":"out","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"gas":1138,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"packages__createdAt","outputs":[{"name":"out","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"gas":1174,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"packages__updatedAt","outputs":[{"name":"out","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"gas":1204,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"packages__name","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"gas":1234,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"packages__releaseCount","outputs":[{"name":"out","type":"int128"}],"payable":false,"type":"function"},{"constant":true,"gas":1264,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"releases__exists","outputs":[{"name":"out","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"gas":1288,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"releases__createdAt","outputs":[{"name":"out","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"gas":1324,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"releases__packageId","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"gas":1354,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"releases__version","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"gas":163068,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"releases__uri","outputs":[{"name":"out","type":"bytes"}],"payable":false,"type":"function"},{"constant":true,"gas":1203,"inputs":[],"name":"packageCount","outputs":[{"name":"out","type":"int128"}],"payable":false,"type":"function"},{"constant":true,"gas":1233,"inputs":[],"name":"releaseCount","outputs":[{"name":"out","type":"int128"}],"payable":false,"type":"function"}],"deployment_bytecode":{"bytecode":""},"natspec":{}}},"deployments":{"blockchain://16f4bc70c2a46fdf1d221b1c4778bce72c75275241bc37260ed0f3a832e6e231/block/2f98cccb87fa1b81415125350a62eb9a5767c674df5a753fae48f31220a94205":{"registry":{"address":"0xf2e246bb76df876cef8b38ae84130f4f55de395b","block":"0x2f98cccb87fa1b81415125350a62eb9a5767c674df5a753fae48f31220a94205","contract_type":"registry","transaction":"0xc24ea0243c963f34f9898614a2db206ad1db289245903f3f0ec102d497d3de30"}}},"manifest_version":"2","package_name":"vyper-registry","sources":{"./registry.vy":"# Vyper Reference Implementation of ERC1319\n# todo: delete pkgs\n\n# Events\nRelease: event({_package: indexed(bytes32), _version: bytes32, _uri: bytes[1000]})\n\nowner: public(address)\n\n# Package Data: (package_id => value)\npackages: public(\n    {\n        exists: bool,\n        createdAt: timestamp,\n        updatedAt: timestamp,\n        name: bytes32,\n        releaseCount: int128,\n    }[bytes32]\n)\n\n#  Release Data: (release_id => value)\nreleases: public(\n    {\n        exists: bool,\n        createdAt: timestamp,\n        packageId: bytes32,\n        version: bytes32,\n        uri: bytes[1000],\n    }[bytes32]\n)\n\n\n# package_id#release_count => release_id\npackageReleaseIndex: bytes32[bytes32]\n# Total number of packages in registry\npackageCount: public(int128)\n# Total number of releases in registry\nreleaseCount: public(int128)\n# Total package number (int128) => package_id (bytes32)\npackageIds: bytes32[int128]\n# Total release number (int128) => release_id (bytes32)\nreleaseIds: bytes32[int128]\n\nEMPTY_BYTES: bytes32\n\n\n@public\ndef __init__():\n    self.owner = msg.sender\n\n\n@public\ndef transferOwner(newOwner: address):\n    assert self.owner == msg.sender\n    self.owner = newOwner\n\n\n@public\ndef getReleaseId(packageName: bytes32, version: bytes32) -> bytes32:\n    releaseConcat: bytes[64] = concat(packageName, version)\n    releaseId: bytes32 = sha3(releaseConcat)\n    assert self.releases[releaseId].exists\n    return releaseId\n\n\n@public\ndef generateReleaseId(packageName: bytes32, version: bytes32) -> bytes32:\n    releaseConcat: bytes[64] = concat(packageName, version)\n    releaseId: bytes32 = sha3(releaseConcat)\n    return releaseId\n\n\n@public\ndef getPackageName(packageId: bytes32) -> bytes32:\n    assert self.packages[packageId].exists\n    return self.packages[packageId].name\n\n\n@public\ndef getPackageData(packageName: bytes32) -> (bytes32, bytes32, int128):\n    packageId: bytes32 = sha3(packageName)\n    assert self.packages[packageId].exists\n    return (\n        self.packages[packageId].name,\n        packageId,\n        self.packages[packageId].releaseCount,\n    )\n\n\n@public\ndef numPackageIds() -> int128:\n    return self.packageCount\n\n\n@public\ndef numReleaseIds(packageName: bytes32) -> int128:\n    packageId: bytes32 = sha3(packageName)\n    assert self.packages[packageId].exists\n    return self.packages[packageId].releaseCount\n\n\n@public\ndef getAllPackageIds(\n    offset: uint256, length: uint256\n) -> (bytes32, bytes32, bytes32, bytes32, bytes32):\n    offset_int: int128 = convert(offset, int128)\n    length_int: int128 = convert(length, int128)\n    assert length_int == 5\n    assert offset_int <= self.packageCount\n    ids: bytes32[5]\n    for idx in range(offset_int, offset_int + 4):\n        if idx <= self.packageCount:\n            packageId: bytes32 = self.packageIds[idx]\n            ids[(idx - offset_int)] = packageId\n        else:\n            ids[(idx - offset_int)] = self.EMPTY_BYTES\n    return (ids[0], ids[1], ids[2], ids[3], ids[4])\n\n\n@private\ndef generatePackageReleaseId(packageId: bytes32, count: int128) -> bytes32:\n    countBytes: bytes32 = convert(count, bytes32)\n    packageReleaseTag: bytes[64] = concat(packageId, countBytes)\n    packageReleaseId: bytes32 = sha3(packageReleaseTag)\n    return packageReleaseId\n\n\n@public\ndef getAllReleaseIds(\n    packageName: bytes32, offset: uint256, length: uint256\n) -> (bytes32, bytes32, bytes32, bytes32, bytes32):\n    offset_int: int128 = convert(offset, int128)\n    length_int: int128 = convert(length, int128)\n    assert length_int == 5\n    packageId: bytes32 = sha3(packageName)\n    assert self.packages[packageId].exists\n    assert offset_int <= self.packages[packageId].releaseCount\n    ids: bytes32[5]\n    for idx in range(offset_int, offset_int + 4):\n        if idx <= self.packages[packageId].releaseCount:\n            packageReleaseId: bytes32 = self.generatePackageReleaseId(\n                packageId, (idx + 1)\n            )\n            releaseId: bytes32 = self.packageReleaseIndex[packageReleaseId]\n            ids[(idx - offset_int)] = releaseId\n        else:\n            ids[(idx - offset_int)] = self.EMPTY_BYTES\n    return (ids[0], ids[1], ids[2], ids[3], ids[4])\n\n\n@public\ndef getReleaseData(releaseId: bytes32) -> (bytes32, bytes32, bytes[1000]):\n    assert self.releases[releaseId].exists\n    packageId: bytes32 = self.releases[releaseId].packageId\n    return (\n        self.packages[packageId].name,\n        self.releases[releaseId].version,\n        self.releases[releaseId].uri,\n    )\n\n\n@private\ndef cutRelease(\n    releaseId: bytes32,\n    packageId: bytes32,\n    version: bytes32,\n    uri: bytes[1000],\n    name: bytes32,\n):\n    self.releases[releaseId] = {\n        exists: True,\n        createdAt: block.timestamp,\n        packageId: packageId,\n        version: version,\n        uri: uri,\n    }\n    self.packages[packageId].releaseCount += 1\n    self.releaseIds[self.releaseCount] = releaseId\n    self.releaseCount += 1\n    packageReleaseId: bytes32 = self.generatePackageReleaseId(\n        packageId, self.packages[packageId].releaseCount\n    )\n    self.packageReleaseIndex[packageReleaseId] = releaseId\n    log.Release(name, version, uri)\n\n\n@public\ndef release(packageName: bytes32, version: bytes32, manifestURI: bytes[1000]) -> bytes32:\n    assert packageName != self.EMPTY_BYTES\n    assert version != self.EMPTY_BYTES\n    assert len(manifestURI) > 0\n    assert self.owner == msg.sender\n\n\n    packageId: bytes32 = sha3(packageName)\n    releaseId: bytes32 = self.generateReleaseId(packageName, version)\n\n    if self.packages[packageId].exists == True:\n        self.packages[packageId] = {\n            exists: True,\n            createdAt: self.packages[packageId].createdAt,\n            updatedAt: block.timestamp,\n            name: packageName,\n            releaseCount: self.packages[packageId].releaseCount,\n        }\n        assert self.releases[releaseId].exists == False\n        self.cutRelease(releaseId, packageId, version, manifestURI, packageName)\n        return releaseId\n    else:\n        self.packages[packageId] = {\n            exists: True,\n            createdAt: block.timestamp,\n            updatedAt: block.timestamp,\n            name: packageName,\n            releaseCount: 0,\n        }\n        self.packageIds[self.packageCount] = packageId\n        self.packageCount += 1\n        self.cutRelease(releaseId, packageId, version, manifestURI, packageName)\n        return releaseId\n"},"version":"1.0.0"}
