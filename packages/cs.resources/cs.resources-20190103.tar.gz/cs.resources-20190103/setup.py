#!/usr/bin/env python
from setuptools import setup
setup(
  name = 'cs.resources',
  description = 'resourcing related classes and functions',
  author = 'Cameron Simpson',
  author_email = 'cs@cskk.id.au',
  version = '20190103',
  url = 'https://bitbucket.org/cameron_simpson/css/commits/all',
  classifiers = ['Programming Language :: Python', 'Programming Language :: Python :: 2', 'Programming Language :: Python :: 3', 'Development Status :: 4 - Beta', 'Intended Audience :: Developers', 'Operating System :: OS Independent', 'Topic :: Software Development :: Libraries :: Python Modules', 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'],
  install_requires = ['cs.logutils', 'cs.obj', 'cs.py.func', 'cs.py.stack'],
  keywords = ['python2', 'python3'],
  long_description = "Resource management classes and functions.\n\n## Class `ClosedError`\n\nMRO: `builtins.Exception`, `builtins.BaseException`  \nException for operations invalid when something is closed.\n\n## Class `MultiOpen`\n\nMRO: `MultiOpenMixin`, `cs.obj.O`  \nContext manager class that manages a single open/close object\nusing a MultiOpenMixin.\n\n## Class `MultiOpenMixin`\n\nMRO: `cs.obj.O`  \nA mixin to count open and close calls, and to call .startup\non the first .open and to call .shutdown on the last .close.\n\nRecommended subclass implementations do as little as possible\nduring __init__, and do almost all setup during startup so\nthat the class may perform multiple startup/shutdown iterations.\n\nIf used as a context manager calls open()/close() from\n__enter__() and __exit__().\n\nMultithread safe.\n\nThis mixin defines ._lock = RLock(); subclasses need not\nbother, but may supply their own lock.\n\nClasses using this mixin need to define .startup and .shutdown.\n\n## Function `not_closed(func)`\n\nDecorator to wrap methods of objects with a .closed property\nwhich should raise when self.closed.\n\n## Class `Pool`\n\nMRO: `cs.obj.O`  \nA generic pool of objects on the premise that reuse is cheaper than recreation.\n\nAll the pool objects must be suitable for use, so the\n`new_object` callable will typically be a closure.\nFor example, here is the __init__ for a per-thread AWS Bucket using a\ndistinct Session:\n\n    def __init__(self, bucket_name):\n        Pool.__init__(self, lambda: boto3.session.Session().resource('s3').Bucket(bucket_name)\n\n## Class `RunState`\n\nA class to track a running task whose cancellation may be requested.\n\nIts purpose is twofold, to provide easily queriable state\naround tasks which can start and stop, and to provide control\nmethods to pronounce that a task has started, should stop\n(cancel) and has stopped (stop).\n\nA RunState can be used a a context manager, with the enter\nand exit methods calling .start and .stop respectively.\n\nMonitor or daemon processes can poll the RunState to see when\nthey should terminate, and may also manage the overall state\neasily using a context manager.\nExample:\n\n    def monitor(self):\n        with self.runstate:\n            while not self.runstate.cancelled:\n                ... main loop body here ...\n\nA RunState has three main methods:\n* `.start()`: set .running and clear .cancelled\n* `.cancel()`: set .cancelled\n* `.stop()`: clear .running\n\nA RunState has the following properties:\n* `cancelled`: true if .cancel has been called.\n* `running`: true if the task is running. Assigning a true value\n  to it also sets .start_time to now. Assigning a false value\n  to it also sets .stop_time to now.\n* `start_time`: the time .running was last set to true.\n* `stop_time`: the time .running was last set to false.\n* `run_time`: max(0, .stop_time - .start_time)\n* `stopped`: true if the task is not running.\n* `stopping`: true if the task is running but has been cancelled.\n* `notify_start`: a set of callables called with the RunState\n  instance to be called whenever .running becomes true.\n* `notify_end`: a set of callables called with the RunState\n  instance to be called whenever .running becomes false.\n* `notify_cancel`: a set of callables called with the RunState\n  instance to be called whenever .cancel is called.\n\n## Class `RunStateMixin`\n\nMixin to provide convenient access to a RunState.\nProvides: .runstate, .cancelled, .running, .stopping, .stopped.",
  long_description_content_type = 'text/markdown',
  package_dir = {'': 'lib/python'},
  py_modules = ['cs.resources'],
)
