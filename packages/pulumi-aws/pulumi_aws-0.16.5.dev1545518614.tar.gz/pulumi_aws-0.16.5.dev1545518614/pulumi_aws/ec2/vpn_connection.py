# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities, tables

class VpnConnection(pulumi.CustomResource):
    """
    Manages an EC2 VPN connection. These objects can be connected to customer gateways, and allow you to establish tunnels between your network and Amazon.
    
    ~> **Note:** All arguments including `tunnel1_preshared_key` and `tunnel2_preshared_key` will be stored in the raw state as plain-text.
    [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
    
    ~> **Note:** The CIDR blocks in the arguments `tunnel1_inside_cidr` and `tunnel2_inside_cidr` must have a prefix of /30 and be a part of a specific range.
    [Read more about this in the AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VpnTunnelOptionsSpecification.html).
    """
    def __init__(__self__, __name__, __opts__=None, customer_gateway_configuration=None, customer_gateway_id=None, routes=None, static_routes_only=None, tags=None, transit_gateway_id=None, tunnel1_inside_cidr=None, tunnel1_preshared_key=None, tunnel2_inside_cidr=None, tunnel2_preshared_key=None, type=None, vgw_telemetries=None, vpn_gateway_id=None):
        """Create a VpnConnection resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['customer_gateway_configuration'] = customer_gateway_configuration

        if not customer_gateway_id:
            raise TypeError('Missing required property customer_gateway_id')
        __props__['customer_gateway_id'] = customer_gateway_id

        __props__['routes'] = routes

        __props__['static_routes_only'] = static_routes_only

        __props__['tags'] = tags

        __props__['transit_gateway_id'] = transit_gateway_id

        __props__['tunnel1_inside_cidr'] = tunnel1_inside_cidr

        __props__['tunnel1_preshared_key'] = tunnel1_preshared_key

        __props__['tunnel2_inside_cidr'] = tunnel2_inside_cidr

        __props__['tunnel2_preshared_key'] = tunnel2_preshared_key

        if not type:
            raise TypeError('Missing required property type')
        __props__['type'] = type

        __props__['vgw_telemetries'] = vgw_telemetries

        __props__['vpn_gateway_id'] = vpn_gateway_id

        __props__['tunnel1_address'] = None
        __props__['tunnel1_bgp_asn'] = None
        __props__['tunnel1_bgp_holdtime'] = None
        __props__['tunnel1_cgw_inside_address'] = None
        __props__['tunnel1_vgw_inside_address'] = None
        __props__['tunnel2_address'] = None
        __props__['tunnel2_bgp_asn'] = None
        __props__['tunnel2_bgp_holdtime'] = None
        __props__['tunnel2_cgw_inside_address'] = None
        __props__['tunnel2_vgw_inside_address'] = None

        super(VpnConnection, __self__).__init__(
            'aws:ec2/vpnConnection:VpnConnection',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

