# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities, tables

class EipAssociation(pulumi.CustomResource):
    """
    Provides an AWS EIP Association as a top level resource, to associate and
    disassociate Elastic IPs from AWS Instances and Network Interfaces.
    
    ~> **NOTE:** Do not use this resource to associate an EIP to `aws_lb` or `aws_nat_gateway` resources. Instead use the `allocation_id` available in those resources to allow AWS to manage the association, otherwise you will see `AuthFailure` errors.
    
    ~> **NOTE:** `aws_eip_association` is useful in scenarios where EIPs are either
    pre-existing or distributed to customers or users and therefore cannot be changed.
    """
    def __init__(__self__, __name__, __opts__=None, allocation_id=None, allow_reassociation=None, instance_id=None, network_interface_id=None, private_ip_address=None, public_ip=None):
        """Create a EipAssociation resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['allocation_id'] = allocation_id

        __props__['allow_reassociation'] = allow_reassociation

        __props__['instance_id'] = instance_id

        __props__['network_interface_id'] = network_interface_id

        __props__['private_ip_address'] = private_ip_address

        __props__['public_ip'] = public_ip

        super(EipAssociation, __self__).__init__(
            'aws:ec2/eipAssociation:EipAssociation',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

