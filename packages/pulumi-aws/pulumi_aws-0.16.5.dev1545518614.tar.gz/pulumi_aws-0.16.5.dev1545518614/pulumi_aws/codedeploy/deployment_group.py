# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities, tables

class DeploymentGroup(pulumi.CustomResource):
    """
    Provides a CodeDeploy Deployment Group for a CodeDeploy Application
    
    ~> **NOTE on blue/green deployments:** When using `green_fleet_provisioning_option` with the `COPY_AUTO_SCALING_GROUP` action, CodeDeploy will create a new ASG with a different name. This ASG is _not_ managed by terraform and will conflict with existing configuration and state. You may want to use a different approach to managing deployments that involve multiple ASG, such as `DISCOVER_EXISTING` with separate blue and green ASG.
    """
    def __init__(__self__, __name__, __opts__=None, alarm_configuration=None, app_name=None, auto_rollback_configuration=None, autoscaling_groups=None, blue_green_deployment_config=None, deployment_config_name=None, deployment_group_name=None, deployment_style=None, ec2_tag_filters=None, ec2_tag_sets=None, ecs_service=None, load_balancer_info=None, on_premises_instance_tag_filters=None, service_role_arn=None, trigger_configurations=None):
        """Create a DeploymentGroup resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['alarm_configuration'] = alarm_configuration

        if not app_name:
            raise TypeError('Missing required property app_name')
        __props__['app_name'] = app_name

        __props__['auto_rollback_configuration'] = auto_rollback_configuration

        __props__['autoscaling_groups'] = autoscaling_groups

        __props__['blue_green_deployment_config'] = blue_green_deployment_config

        __props__['deployment_config_name'] = deployment_config_name

        if not deployment_group_name:
            raise TypeError('Missing required property deployment_group_name')
        __props__['deployment_group_name'] = deployment_group_name

        __props__['deployment_style'] = deployment_style

        __props__['ec2_tag_filters'] = ec2_tag_filters

        __props__['ec2_tag_sets'] = ec2_tag_sets

        __props__['ecs_service'] = ecs_service

        __props__['load_balancer_info'] = load_balancer_info

        __props__['on_premises_instance_tag_filters'] = on_premises_instance_tag_filters

        if not service_role_arn:
            raise TypeError('Missing required property service_role_arn')
        __props__['service_role_arn'] = service_role_arn

        __props__['trigger_configurations'] = trigger_configurations

        super(DeploymentGroup, __self__).__init__(
            'aws:codedeploy/deploymentGroup:DeploymentGroup',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

