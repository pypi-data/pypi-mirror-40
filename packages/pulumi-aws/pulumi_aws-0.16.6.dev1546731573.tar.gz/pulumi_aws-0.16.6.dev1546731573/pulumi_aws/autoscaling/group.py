# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities, tables

class Group(pulumi.CustomResource):
    """
    Provides an AutoScaling Group resource.
    
    -> **Note:** You must specify either `launch_configuration`, `launch_template`, or `mixed_instances_policy`.
    """
    def __init__(__self__, __name__, __opts__=None, availability_zones=None, default_cooldown=None, desired_capacity=None, enabled_metrics=None, force_delete=None, health_check_grace_period=None, health_check_type=None, initial_lifecycle_hooks=None, launch_configuration=None, launch_template=None, load_balancers=None, max_size=None, metrics_granularity=None, min_elb_capacity=None, min_size=None, mixed_instances_policy=None, name=None, name_prefix=None, placement_group=None, protect_from_scale_in=None, service_linked_role_arn=None, suspended_processes=None, tags=None, tags_collection=None, target_group_arns=None, termination_policies=None, vpc_zone_identifiers=None, wait_for_capacity_timeout=None, wait_for_elb_capacity=None):
        """Create a Group resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['availability_zones'] = availability_zones

        __props__['default_cooldown'] = default_cooldown

        __props__['desired_capacity'] = desired_capacity

        __props__['enabled_metrics'] = enabled_metrics

        __props__['force_delete'] = force_delete

        __props__['health_check_grace_period'] = health_check_grace_period

        __props__['health_check_type'] = health_check_type

        __props__['initial_lifecycle_hooks'] = initial_lifecycle_hooks

        __props__['launch_configuration'] = launch_configuration

        __props__['launch_template'] = launch_template

        __props__['load_balancers'] = load_balancers

        if not max_size:
            raise TypeError('Missing required property max_size')
        __props__['max_size'] = max_size

        __props__['metrics_granularity'] = metrics_granularity

        __props__['min_elb_capacity'] = min_elb_capacity

        if not min_size:
            raise TypeError('Missing required property min_size')
        __props__['min_size'] = min_size

        __props__['mixed_instances_policy'] = mixed_instances_policy

        __props__['name'] = name

        __props__['name_prefix'] = name_prefix

        __props__['placement_group'] = placement_group

        __props__['protect_from_scale_in'] = protect_from_scale_in

        __props__['service_linked_role_arn'] = service_linked_role_arn

        __props__['suspended_processes'] = suspended_processes

        __props__['tags'] = tags

        __props__['tags_collection'] = tags_collection

        __props__['target_group_arns'] = target_group_arns

        __props__['termination_policies'] = termination_policies

        __props__['vpc_zone_identifiers'] = vpc_zone_identifiers

        __props__['wait_for_capacity_timeout'] = wait_for_capacity_timeout

        __props__['wait_for_elb_capacity'] = wait_for_elb_capacity

        __props__['arn'] = None

        super(Group, __self__).__init__(
            'aws:autoscaling/group:Group',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

