# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import pulumi
import pulumi.runtime
from .. import utilities, tables

class IdentityPool(pulumi.CustomResource):
    """
    Provides an AWS Cognito Identity Pool.
    """
    def __init__(__self__, __name__, __opts__=None, allow_unauthenticated_identities=None, cognito_identity_providers=None, developer_provider_name=None, identity_pool_name=None, openid_connect_provider_arns=None, saml_provider_arns=None, supported_login_providers=None):
        """Create a IdentityPool resource with the given unique name, props, and options."""
        if not __name__:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(__name__, str):
            raise TypeError('Expected resource name to be a string')
        if __opts__ and not isinstance(__opts__, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['allow_unauthenticated_identities'] = allow_unauthenticated_identities

        __props__['cognito_identity_providers'] = cognito_identity_providers

        __props__['developer_provider_name'] = developer_provider_name

        if not identity_pool_name:
            raise TypeError('Missing required property identity_pool_name')
        __props__['identity_pool_name'] = identity_pool_name

        __props__['openid_connect_provider_arns'] = openid_connect_provider_arns

        __props__['saml_provider_arns'] = saml_provider_arns

        __props__['supported_login_providers'] = supported_login_providers

        __props__['arn'] = None

        super(IdentityPool, __self__).__init__(
            'aws:cognito/identityPool:IdentityPool',
            __name__,
            __props__,
            __opts__)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

