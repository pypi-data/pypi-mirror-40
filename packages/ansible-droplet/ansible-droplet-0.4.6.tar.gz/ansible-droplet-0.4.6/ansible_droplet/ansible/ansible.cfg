[defaults]
inventory = inventory
roles_path = roles/roles-on-localhost:roles/roles-on-droplet:roles/roles-on-droplet/roles-from-ansible-galaxy

# This option is to allow ansible to connect directly to the generated droplet without having
# to manually ssh first and add the public key to `known_hosts`
#
# A better solution would be to enable "host_key_checking = True" but automatically add to
# `known_hosts` after Droplet creation (in `create-droplet-playbook.yml`)
#
# See: https://serverfault.com/questions/132970/can-i-automatically-add-a-new-host-to-known-hosts
#
# Note on ansible website:
# If the task seems to be hanging, first verify remote host is in known_hosts. SSH will prompt user to authorize the first contact with a remote host. To avoid this prompt, one solution is to use the option accept_hostkey. Another solution is to add the remote host public key in /etc/ssh/ssh_known_hosts before calling the git module, with the following command: ssh-keyscan -H remote_host.com >> /etc/ssh/ssh_known_hosts.
# Source: http://docs.ansible.com/ansible/latest/git_module.html
#
# . . . Or actually live it like that . . . adding automatically to known_hosts... doesn't bring more security
# than just . . . not checking in the first place.
# In both case, in case of MiTM . . . we got hacked
host_key_checking = False

# Disables `cowsay`
nocows = 1
# Disables *.retry files
retry_files_enabled = False
