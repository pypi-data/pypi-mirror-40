[
  {
    "name": "Get a blob",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/git/blobs/:file_sha",
    "previews": [],
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "file_sha",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "The `content` in the response will always be Base64 encoded.\n\n_Note_: This API supports blobs up to 100 megabytes in size.",
    "responses": [
      {
        "headers": {
          "status": "200 OK",
          "content-type": "application/json; charset=utf-8"
        },
        "body": {
          "content": "Q29udGVudCBvZiB0aGUgYmxvYg==\n",
          "encoding": "base64",
          "url": "https://api.github.com/repos/octocat/example/git/blobs/3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15",
          "sha": "3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15",
          "size": 19
        }
      }
    ],
    "idName": "get-blob",
    "documentationUrl": "https://developer.github.com/enterprise/2.13/v3/git/blobs/#get-a-blob"
  },
  {
    "name": "Create a blob",
    "enabledForApps": true,
    "method": "POST",
    "path": "/repos/:owner/:repo/git/blobs",
    "previews": [],
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "content",
        "type": "string",
        "description": "The new blob's content.",
        "required": true,
        "location": "body"
      },
      {
        "name": "encoding",
        "type": "string",
        "description": "The encoding used for `content`. Currently, `\"utf-8\"` and `\"base64\"` are supported.",
        "default": "\"utf-8\"",
        "required": false,
        "location": "body"
      }
    ],
    "requests": [
      {
        "content": "Content of the blob",
        "encoding": "utf-8"
      }
    ],
    "description": "",
    "responses": [
      {
        "headers": {
          "status": "201 Created",
          "content-type": "application/json; charset=utf-8"
        },
        "body": {
          "url": "https://api.github.com/repos/octocat/example/git/blobs/3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15",
          "sha": "3a0f86fb8db8eea7ccbb9a95f325ddbedfb25e15"
        }
      }
    ],
    "idName": "create-blob",
    "documentationUrl": "https://developer.github.com/enterprise/2.13/v3/git/blobs/#create-a-blob"
  },
  {
    "name": "Get a commit",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/git/commits/:commit_sha",
    "previews": [],
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "commit_sha",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).",
    "responses": [
      {
        "headers": {
          "status": "200 OK",
          "content-type": "application/json; charset=utf-8"
        },
        "body": {
          "sha": "7638417db6d59f3c431d3e1f261cc637155684cd",
          "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd",
          "author": {
            "date": "2014-11-07T22:01:45Z",
            "name": "Scott Chacon",
            "email": "schacon@gmail.com"
          },
          "committer": {
            "date": "2014-11-07T22:01:45Z",
            "name": "Scott Chacon",
            "email": "schacon@gmail.com"
          },
          "message": "added readme, because im a good github citizen",
          "tree": {
            "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/691272480426f78a0138979dd3ce63b77f706feb",
            "sha": "691272480426f78a0138979dd3ce63b77f706feb"
          },
          "parents": [
            {
              "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/1acc419d4d6a9ce985db7be48c6349a0475975b5",
              "sha": "1acc419d4d6a9ce985db7be48c6349a0475975b5"
            }
          ],
          "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null
          }
        }
      }
    ],
    "idName": "get-commit",
    "documentationUrl": "https://developer.github.com/enterprise/2.13/v3/git/commits/#get-a-commit"
  },
  {
    "name": "Create a commit",
    "enabledForApps": true,
    "method": "POST",
    "path": "/repos/:owner/:repo/git/commits",
    "previews": [],
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "message",
        "type": "string",
        "description": "The commit message",
        "required": true,
        "location": "body"
      },
      {
        "name": "tree",
        "type": "string",
        "description": "The SHA of the tree object this commit points to",
        "required": true,
        "location": "body"
      },
      {
        "name": "parents",
        "type": "string[]",
        "description": "The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.",
        "required": true,
        "location": "body"
      },
      {
        "name": "committer",
        "type": "object",
        "description": "object containing information about the committer.",
        "location": "body"
      },
      {
        "name": "author",
        "type": "object",
        "description": "object containing information about the author.",
        "location": "body"
      }
    ],
    "requests": [
      {
        "message": "my commit message",
        "author": {
          "name": "Scott Chacon",
          "email": "schacon@gmail.com",
          "date": "2008-07-09T16:13:30+12:00"
        },
        "parents": [
          "7d1b31e74ee336d15cbd21741bc88a537ed063a0"
        ],
        "tree": "827efc6d56897b048c772eb4087f854f46256132",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABAQAdFiEESn/54jMNIrGSE6Tp6cQjvhfv7nAFAlnT71cACgkQ6cQjvhfv\n7nCWwA//XVqBKWO0zF+bZl6pggvky3Oc2j1pNFuRWZ29LXpNuD5WUGXGG209B0hI\nDkmcGk19ZKUTnEUJV2Xd0R7AW01S/YSub7OYcgBkI7qUE13FVHN5ln1KvH2all2n\n2+JCV1HcJLEoTjqIFZSSu/sMdhkLQ9/NsmMAzpf/iIM0nQOyU4YRex9eD1bYj6nA\nOQPIDdAuaTQj1gFPHYLzM4zJnCqGdRlg0sOM/zC5apBNzIwlgREatOYQSCfCKV7k\nnrU34X8b9BzQaUx48Qa+Dmfn5KQ8dl27RNeWAqlkuWyv3pUauH9UeYW+KyuJeMkU\n+NyHgAsWFaCFl23kCHThbLStMZOYEnGagrd0hnm1TPS4GJkV4wfYMwnI4KuSlHKB\njHl3Js9vNzEUQipQJbgCgTiWvRJoK3ENwBTMVkKHaqT4x9U4Jk/XZB6Q8MA09ezJ\n3QgiTjTAGcum9E9QiJqMYdWQPWkaBIRRz5cET6HPB48YNXAAUsfmuYsGrnVLYbG+\nUpC6I97VybYHTy2O9XSGoaLeMI9CsFn38ycAxxbWagk5mhclNTP5mezIq6wKSwmr\nX11FW3n1J23fWZn5HJMBsRnUCgzqzX3871IqLYHqRJ/bpZ4h20RhTyPj5c/z7QXp\neSakNQMfbbMcljkha+ZMuVQX1K9aRlVqbmv3ZMWh+OijLYVU2bc=\n=5Io4\n-----END PGP SIGNATURE-----\n"
      }
    ],
    "description": "Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).\n\nThe `committer` section is optional and will be filled with the `author` data if omitted. If the `author` section is omitted, it will be filled in with the authenticated user's information and the current date.\n\nBoth the `author` and `committer` parameters have the same keys:\n\n| name  | type   | description                                                                                                             |\n| ----- | ------ | ----------------------------------------------------------------------------------------------------------------------- |\n| name  | string | The name of the author (or committer) of the commit                                                                     |\n| email | string | The email of the author (or committer) of the commit                                                                    |\n| date  | string | Indicates when this commit was authored (or committed). This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. |\n\nYou can also provide an optional string `signature` parameter. This value will be added to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database.\n\n**Note**: To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.\n\nIn this example, the payload that the signature is over would have been:\n\n",
    "responses": [
      {
        "headers": {
          "status": "201 Created",
          "content-type": "application/json; charset=utf-8"
        },
        "body": {
          "sha": "7638417db6d59f3c431d3e1f261cc637155684cd",
          "node_id": "MDY6Q29tbWl0NzYzODQxN2RiNmQ1OWYzYzQzMWQzZTFmMjYxY2M2MzcxNTU2ODRjZA==",
          "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7638417db6d59f3c431d3e1f261cc637155684cd",
          "author": {
            "date": "2014-11-07T22:01:45Z",
            "name": "Scott Chacon",
            "email": "schacon@gmail.com"
          },
          "committer": {
            "date": "2014-11-07T22:01:45Z",
            "name": "Scott Chacon",
            "email": "schacon@gmail.com"
          },
          "message": "my commit message",
          "tree": {
            "url": "https://api.github.com/repos/octocat/Hello-World/git/trees/827efc6d56897b048c772eb4087f854f46256132",
            "sha": "827efc6d56897b048c772eb4087f854f46256132"
          },
          "parents": [
            {
              "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/7d1b31e74ee336d15cbd21741bc88a537ed063a0",
              "sha": "7d1b31e74ee336d15cbd21741bc88a537ed063a0"
            }
          ],
          "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null
          }
        }
      }
    ],
    "idName": "create-commit",
    "documentationUrl": "https://developer.github.com/enterprise/2.13/v3/git/commits/#create-a-commit"
  },
  {
    "name": "Get a reference",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/git/refs/:ref",
    "previews": [],
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "ref",
        "type": "string",
        "description": "Must be formatted as `heads/branch`, not just `branch`",
        "required": true,
        "location": "url"
      }
    ],
    "description": "Returns a branch or tag reference. Other than the [REST API](https://developer.github.com/v3/git/refs/#get-a-reference) it always returns a single reference. If the REST API returns with an array then the method responds with an error.",
    "idName": "get-ref",
    "documentationUrl": "https://developer.github.com/enterprise/2.13/v3/git/refs/#get-a-reference",
    "isOverride": true
  },
  {
    "name": "Get all references",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/git/refs/:namespace",
    "previews": [],
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "namespace",
        "type": "string",
        "description": "Filter by sub-namespace (reference prefix). Most commen examples would be `'heads/'` and `'tags/'` to retrieve branches or tags",
        "required": false,
        "location": "url"
      },
      {
        "name": "per_page",
        "type": "integer",
        "required": false,
        "description": "Results per page (max 100)",
        "default": 30,
        "location": "query"
      },
      {
        "name": "page",
        "type": "integer",
        "required": false,
        "description": "Page number of the results to fetch.",
        "default": 1,
        "location": "query"
      }
    ],
    "description": "This will return an array of all the references on the system, including things like notes and stashes if they exist on the server",
    "idName": "list-refs",
    "documentationUrl": "https://developer.github.com/enterprise/2.13/v3/git/refs/#get-all-references",
    "isOverride": true
  },
  {
    "name": "Create a reference",
    "enabledForApps": true,
    "method": "POST",
    "path": "/repos/:owner/:repo/git/refs",
    "previews": [],
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "ref",
        "type": "string",
        "description": "The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.",
        "required": true,
        "location": "body"
      },
      {
        "name": "sha",
        "type": "string",
        "description": "The SHA1 value for this reference.",
        "required": true,
        "location": "body"
      }
    ],
    "requests": [
      {
        "ref": "refs/heads/featureA",
        "sha": "aa218f56b14c9653891f9e74264a383fa43fefbd"
      }
    ],
    "description": "Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.",
    "responses": [
      {
        "headers": {
          "status": "201 Created",
          "content-type": "application/json; charset=utf-8"
        },
        "body": {
          "ref": "refs/heads/featureA",
          "node_id": "MDM6UmVmcmVmcy9oZWFkcy9mZWF0dXJlQQ==",
          "url": "https://api.github.com/repos/octocat/Hello-World/git/refs/heads/featureA",
          "object": {
            "type": "commit",
            "sha": "aa218f56b14c9653891f9e74264a383fa43fefbd",
            "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/aa218f56b14c9653891f9e74264a383fa43fefbd"
          }
        }
      }
    ],
    "idName": "create-ref",
    "documentationUrl": "https://developer.github.com/enterprise/2.13/v3/git/refs/#create-a-reference"
  },
  {
    "name": "Update a reference",
    "enabledForApps": true,
    "method": "PATCH",
    "path": "/repos/:owner/:repo/git/refs/:ref",
    "previews": [],
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "ref",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "sha",
        "type": "string",
        "description": "The SHA1 value to set this reference to",
        "required": true,
        "location": "body"
      },
      {
        "name": "force",
        "type": "boolean",
        "description": "Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.",
        "default": false,
        "required": false,
        "location": "body"
      }
    ],
    "requests": [
      {
        "sha": "aa218f56b14c9653891f9e74264a383fa43fefbd",
        "force": true
      }
    ],
    "description": "",
    "responses": [
      {
        "headers": {
          "status": "200 OK",
          "content-type": "application/json; charset=utf-8"
        },
        "body": {
          "ref": "refs/heads/featureA",
          "node_id": "MDM6UmVmcmVmcy9oZWFkcy9mZWF0dXJlQQ==",
          "url": "https://api.github.com/repos/octocat/Hello-World/git/refs/heads/featureA",
          "object": {
            "type": "commit",
            "sha": "aa218f56b14c9653891f9e74264a383fa43fefbd",
            "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/aa218f56b14c9653891f9e74264a383fa43fefbd"
          }
        }
      }
    ],
    "idName": "update-ref",
    "documentationUrl": "https://developer.github.com/enterprise/2.13/v3/git/refs/#update-a-reference"
  },
  {
    "name": "Delete a reference",
    "enabledForApps": true,
    "method": "DELETE",
    "path": "/repos/:owner/:repo/git/refs/:ref",
    "previews": [],
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "ref",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "Example: Deleting a branch:\n\n```\nDELETE /repos/octocat/Hello-World/git/refs/heads/feature-a\n```\n\nExample: Deleting a tag:\n\n```\nDELETE /repos/octocat/Hello-World/git/refs/tags/v1.0\n```",
    "responses": [
      {
        "headers": {
          "status": "204 No Content",
          "content-type": "application/json; charset=utf-8"
        }
      }
    ],
    "idName": "delete-ref",
    "documentationUrl": "https://developer.github.com/enterprise/2.13/v3/git/refs/#delete-a-reference"
  },
  {
    "name": "Get a tag",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/git/tags/:tag_sha",
    "previews": [],
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "tag_sha",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      }
    ],
    "description": "",
    "responses": [
      {
        "headers": {
          "status": "200 OK",
          "content-type": "application/json; charset=utf-8"
        },
        "body": {
          "node_id": "MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==",
          "tag": "v0.0.1",
          "sha": "940bd336248efae0f9ee5bc7b2d5c985887b16ac",
          "url": "https://api.github.com/repos/octocat/Hello-World/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac",
          "message": "initial version",
          "tagger": {
            "name": "Scott Chacon",
            "email": "schacon@gmail.com",
            "date": "2014-11-07T22:01:45Z"
          },
          "object": {
            "type": "commit",
            "sha": "c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c",
            "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c"
          },
          "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null
          }
        }
      }
    ],
    "idName": "get-tag",
    "documentationUrl": "https://developer.github.com/enterprise/2.13/v3/git/tags/#get-a-tag"
  },
  {
    "name": "Create a tag object",
    "enabledForApps": true,
    "method": "POST",
    "path": "/repos/:owner/:repo/git/tags",
    "previews": [],
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "tag",
        "type": "string",
        "description": "The tag's name. This is typically a version (e.g., \"v0.0.1\").",
        "required": true,
        "location": "body"
      },
      {
        "name": "message",
        "type": "string",
        "description": "The tag message.",
        "required": true,
        "location": "body"
      },
      {
        "name": "object",
        "type": "string",
        "description": "The SHA of the git object this is tagging.",
        "required": true,
        "location": "body"
      },
      {
        "name": "type",
        "type": "string",
        "description": "The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.",
        "required": true,
        "enum": [
          "commit",
          "tree",
          "blob"
        ],
        "location": "body"
      },
      {
        "name": "tagger",
        "type": "object",
        "description": "An object with information about the individual creating the tag.",
        "required": false,
        "location": "body"
      },
      {
        "name": "tagger.name",
        "type": "string",
        "description": "The name of the author of the tag",
        "required": false,
        "location": "body"
      },
      {
        "name": "tagger.email",
        "type": "string",
        "description": "The email of the author of the tag",
        "required": false,
        "location": "body"
      },
      {
        "name": "tagger.date",
        "type": "string",
        "description": "When this object was tagged. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.",
        "required": false,
        "location": "body"
      }
    ],
    "requests": [
      {
        "tag": "v0.0.1",
        "message": "initial version\n",
        "object": "c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c",
        "type": "commit",
        "tagger": {
          "name": "Scott Chacon",
          "email": "schacon@gmail.com",
          "date": "2011-06-17T14:53:35-07:00"
        }
      }
    ],
    "description": "Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](/enterprise/2.13/v3/git/refs/#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](/enterprise/2.13/v3/git/refs/#create-a-reference) the tag reference - this call would be unnecessary.",
    "responses": [
      {
        "headers": {
          "status": "201 Created",
          "content-type": "application/json; charset=utf-8"
        },
        "body": {
          "node_id": "MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw==",
          "tag": "v0.0.1",
          "sha": "940bd336248efae0f9ee5bc7b2d5c985887b16ac",
          "url": "https://api.github.com/repos/octocat/Hello-World/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac",
          "message": "initial version",
          "tagger": {
            "name": "Scott Chacon",
            "email": "schacon@gmail.com",
            "date": "2014-11-07T22:01:45Z"
          },
          "object": {
            "type": "commit",
            "sha": "c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c",
            "url": "https://api.github.com/repos/octocat/Hello-World/git/commits/c3d0be41ecbe669545ee3e94d31ed9a4bc91ee3c"
          },
          "verification": {
            "verified": false,
            "reason": "unsigned",
            "signature": null,
            "payload": null
          }
        }
      }
    ],
    "idName": "create-tag",
    "documentationUrl": "https://developer.github.com/enterprise/2.13/v3/git/tags/#create-a-tag-object"
  },
  {
    "name": "Get a tree",
    "enabledForApps": true,
    "method": "GET",
    "path": "/repos/:owner/:repo/git/trees/:tree_sha",
    "previews": [],
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "tree_sha",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "recursive",
        "type": "integer",
        "description": "",
        "enum": [
          1
        ],
        "location": "query"
      }
    ],
    "description": "If `truncated` in the response is `true`, the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, omit the `recursive` parameter, and fetch one sub-tree at a time. If you need to fetch even more items, you can clone the repository and iterate over the Git data locally.",
    "idName": "get-tree",
    "documentationUrl": "https://developer.github.com/enterprise/2.13/v3/git/trees/#get-a-tree",
    "isOverride": true
  },
  {
    "name": "Create a tree",
    "enabledForApps": true,
    "method": "POST",
    "path": "/repos/:owner/:repo/git/trees",
    "previews": [],
    "params": [
      {
        "name": "owner",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "repo",
        "type": "string",
        "required": true,
        "description": "",
        "location": "url"
      },
      {
        "name": "tree",
        "type": "object[]",
        "description": "Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure",
        "required": true,
        "location": "body"
      },
      {
        "name": "tree[].path",
        "type": "string",
        "description": "The file referenced in the tree",
        "required": false,
        "location": "body"
      },
      {
        "name": "tree[].mode",
        "type": "string",
        "description": "The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink",
        "required": false,
        "enum": [
          "100644",
          "100755",
          "040000",
          "160000",
          "120000"
        ],
        "location": "body"
      },
      {
        "name": "tree[].type",
        "type": "string",
        "description": "Either `blob`, `tree`, or `commit`",
        "required": false,
        "enum": [
          "blob",
          "tree",
          "commit"
        ],
        "location": "body"
      },
      {
        "name": "tree[].sha",
        "type": "string",
        "description": "The SHA1 checksum ID of the object in the tree",
        "required": false,
        "location": "body"
      },
      {
        "name": "tree[].content",
        "type": "string",
        "description": "The content you want this file to have. GitHub Enterprise will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.",
        "required": false,
        "location": "body"
      },
      {
        "name": "base_tree",
        "type": "string",
        "description": "The SHA1 of the tree you want to update with new data. If you don't set this, the commit will be created on top of everything; however, it will only contain your change, the rest of your files will show up as deleted.",
        "required": false,
        "location": "body"
      }
    ],
    "requests": [
      {
        "base_tree": "9fb037999f264ba9a7fc6274d15fa3ae2ab98312",
        "tree": [
          {
            "path": "file.rb",
            "mode": "100644",
            "type": "blob",
            "sha": "44b4fc6d56897b048c772eb4087f854f46256132"
          }
        ]
      }
    ],
    "description": "The tree creation API will take nested entries as well. If both a tree and a nested path modifying that tree are specified, it will overwrite the contents of that tree with the new path contents and write a new tree out.",
    "responses": [
      {
        "headers": {
          "status": "201 Created",
          "content-type": "application/json; charset=utf-8"
        },
        "body": {
          "sha": "cd8274d15fa3ae2ab983129fb037999f264ba9a7",
          "url": "https://api.github.com/repos/octocat/Hello-World/trees/cd8274d15fa3ae2ab983129fb037999f264ba9a7",
          "tree": [
            {
              "path": "file.rb",
              "mode": "100644",
              "type": "blob",
              "size": 132,
              "sha": "7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b",
              "url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/7c258a9869f33c1e1e1f74fbb32f07c86cb5a75b"
            }
          ]
        }
      }
    ],
    "idName": "create-tree",
    "documentationUrl": "https://developer.github.com/enterprise/2.13/v3/git/trees/#create-a-tree"
  }
]
