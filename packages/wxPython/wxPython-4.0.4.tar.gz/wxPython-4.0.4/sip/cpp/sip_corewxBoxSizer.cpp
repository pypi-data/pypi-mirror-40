/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/sizer.h>

        #include <wx/gdicmn.h>
        #include <wx/sizer.h>
        #include <wx/window.h>
        #include <wx/sizer.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/gdicmn.h>
        #include <wx/sizer.h>
        
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxBoxSizer : public  ::wxBoxSizer
{
public:
    sipwxBoxSizer(int);
    virtual ~sipwxBoxSizer();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxSize CalcMin();
    void RecalcSizes();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxBoxSizer(const sipwxBoxSizer &);
    sipwxBoxSizer &operator = (const sipwxBoxSizer &);

    char sipPyMethods[2];
};

sipwxBoxSizer::sipwxBoxSizer(int orient):  ::wxBoxSizer(orient), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxBoxSizer::~sipwxBoxSizer()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxSize sipwxBoxSizer::CalcMin()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_CalcMin);

    if (!sipMeth)
        return  ::wxBoxSizer::CalcMin();

    extern  ::wxSize sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxBoxSizer::RecalcSizes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_RecalcSizes);

    if (!sipMeth)
    {
         ::wxBoxSizer::RecalcSizes();
        return;
    }

    extern void sipVH__core_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_48(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxBoxSizer_AddSpacer, "AddSpacer(size) -> SizerItem\n"
"\n"
"Adds non-stretchable space to the main orientation of the sizer only.");

extern "C" {static PyObject *meth_wxBoxSizer_AddSpacer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBoxSizer_AddSpacer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int size;
         ::wxBoxSizer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxBoxSizer, &sipCpp, &size))
        {
             ::wxSizerItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddSpacer(size);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxSizerItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoxSizer, sipName_AddSpacer, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxBoxSizer_CalcMin, "CalcMin() -> Size\n"
"\n"
"Implements the calculation of a box sizer's minimal.");

extern "C" {static PyObject *meth_wxBoxSizer_CalcMin(PyObject *, PyObject *);}
static PyObject *meth_wxBoxSizer_CalcMin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxBoxSizer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBoxSizer, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize((sipSelfWasArg ? sipCpp-> ::wxBoxSizer::CalcMin() : sipCpp->CalcMin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoxSizer, sipName_CalcMin, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxBoxSizer_GetOrientation, "GetOrientation() -> int\n"
"\n"
"Returns the orientation of the box sizer, either wxVERTICAL or\n"
"wxHORIZONTAL.");

extern "C" {static PyObject *meth_wxBoxSizer_GetOrientation(PyObject *, PyObject *);}
static PyObject *meth_wxBoxSizer_GetOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxBoxSizer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBoxSizer, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetOrientation();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoxSizer, sipName_GetOrientation, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxBoxSizer_SetOrientation, "SetOrientation(orient)\n"
"\n"
"Sets the orientation of the box sizer, either wxVERTICAL or\n"
"wxHORIZONTAL.");

extern "C" {static PyObject *meth_wxBoxSizer_SetOrientation(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxBoxSizer_SetOrientation(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int orient;
         ::wxBoxSizer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_orient,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxBoxSizer, &sipCpp, &orient))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetOrientation(orient);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoxSizer, sipName_SetOrientation, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxBoxSizer_RecalcSizes, "RecalcSizes()\n"
"\n"
"Implements the calculation of a box sizer's dimensions and then sets\n"
"the size of its children (calling wxWindow::SetSize if the child is a\n"
"window).");

extern "C" {static PyObject *meth_wxBoxSizer_RecalcSizes(PyObject *, PyObject *);}
static PyObject *meth_wxBoxSizer_RecalcSizes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxBoxSizer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxBoxSizer, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxBoxSizer::RecalcSizes() : sipCpp->RecalcSizes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_BoxSizer, sipName_RecalcSizes, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxBoxSizer(void *, const sipTypeDef *);}
static void *cast_wxBoxSizer(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxBoxSizer *sipCpp = reinterpret_cast< ::wxBoxSizer *>(sipCppV);

    if (targetType == sipType_wxSizer)
        return static_cast< ::wxSizer *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxBoxSizer(void *, int);}
static void release_wxBoxSizer(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxBoxSizer *>(sipCppV);
    else
        delete reinterpret_cast< ::wxBoxSizer *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxBoxSizer(sipSimpleWrapper *);}
static void dealloc_wxBoxSizer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxBoxSizer *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxBoxSizer(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxBoxSizer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxBoxSizer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxBoxSizer *sipCpp = 0;

    {
        int orient = wxHORIZONTAL;

        static const char *sipKwdList[] = {
            sipName_orient,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|i", &orient))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxBoxSizer(orient);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxBoxSizer[] = {{464, 255, 1}};


static PyMethodDef methods_wxBoxSizer[] = {
    {SIP_MLNAME_CAST(sipName_AddSpacer), (PyCFunction)meth_wxBoxSizer_AddSpacer, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBoxSizer_AddSpacer)},
    {SIP_MLNAME_CAST(sipName_CalcMin), meth_wxBoxSizer_CalcMin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBoxSizer_CalcMin)},
    {SIP_MLNAME_CAST(sipName_GetOrientation), meth_wxBoxSizer_GetOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBoxSizer_GetOrientation)},
    {SIP_MLNAME_CAST(sipName_RecalcSizes), meth_wxBoxSizer_RecalcSizes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxBoxSizer_RecalcSizes)},
    {SIP_MLNAME_CAST(sipName_SetOrientation), (PyCFunction)meth_wxBoxSizer_SetOrientation, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxBoxSizer_SetOrientation)}
};

sipVariableDef variables_wxBoxSizer[] = {
    {PropertyVariable, sipName_Orientation, &methods_wxBoxSizer[2], &methods_wxBoxSizer[4], NULL, NULL},
};

PyDoc_STRVAR(doc_wxBoxSizer, "BoxSizer(orient=HORIZONTAL)\n"
"\n"
"The basic idea behind a box sizer is that windows will most often be\n"
"laid out in rather simple basic geometry, typically in a row or a\n"
"column or several hierarchies of either.");


sipClassTypeDef sipTypeDef__core_wxBoxSizer = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxBoxSizer,
        {0},
        0
    },
    {
        sipNameNr_BoxSizer,
        {0, 0, 1},
        5, methods_wxBoxSizer,
        0, 0,
        1, variables_wxBoxSizer,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxBoxSizer,
    -1,
    -1,
    supers_wxBoxSizer,
    0,
    init_type_wxBoxSizer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxBoxSizer,
    0,
    0,
    0,
    release_wxBoxSizer,
    cast_wxBoxSizer,
    0,
    0,
    0,
    0,
    0,
    0
};
