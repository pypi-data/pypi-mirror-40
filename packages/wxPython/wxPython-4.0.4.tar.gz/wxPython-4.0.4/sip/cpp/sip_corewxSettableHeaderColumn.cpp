/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/headercol.h>

        #include <wx/bitmap.h>


class sipwxSettableHeaderColumn : public  ::wxSettableHeaderColumn
{
public:
    sipwxSettableHeaderColumn();
    sipwxSettableHeaderColumn(const  ::wxSettableHeaderColumn&);
    virtual ~sipwxSettableHeaderColumn();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void SetSortOrder(bool);
    void SetHidden(bool);
    void SetReorderable(bool);
    void SetSortable(bool);
    void SetResizeable(bool);
    void SetFlags(int);
    void SetAlignment( ::wxAlignment);
    void SetMinWidth(int);
    void SetWidth(int);
    void SetBitmap(const  ::wxBitmap&);
    void SetTitle(const  ::wxString&);
     ::wxString GetTitle() const;
     ::wxBitmap GetBitmap() const;
    int GetWidth() const;
    int GetMinWidth() const;
     ::wxAlignment GetAlignment() const;
    int GetFlags() const;
    bool IsResizeable() const;
    bool IsSortable() const;
    bool IsReorderable() const;
    bool IsHidden() const;
    bool IsSortKey() const;
    bool IsSortOrderAscending() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxSettableHeaderColumn(const sipwxSettableHeaderColumn &);
    sipwxSettableHeaderColumn &operator = (const sipwxSettableHeaderColumn &);

    char sipPyMethods[23];
};

sipwxSettableHeaderColumn::sipwxSettableHeaderColumn():  ::wxSettableHeaderColumn(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxSettableHeaderColumn::sipwxSettableHeaderColumn(const  ::wxSettableHeaderColumn& a0):  ::wxSettableHeaderColumn(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxSettableHeaderColumn::~sipwxSettableHeaderColumn()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxSettableHeaderColumn::SetSortOrder(bool ascending)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_SettableHeaderColumn,sipName_SetSortOrder);

    if (!sipMeth)
        return;

    extern void sipVH__core_87(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_87(sipGILState, 0, sipPySelf, sipMeth, ascending);
}

void sipwxSettableHeaderColumn::SetHidden(bool hidden)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_SetHidden);

    if (!sipMeth)
    {
         ::wxSettableHeaderColumn::SetHidden(hidden);
        return;
    }

    extern void sipVH__core_87(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_87(sipGILState, 0, sipPySelf, sipMeth, hidden);
}

void sipwxSettableHeaderColumn::SetReorderable(bool reorderable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_SetReorderable);

    if (!sipMeth)
    {
         ::wxSettableHeaderColumn::SetReorderable(reorderable);
        return;
    }

    extern void sipVH__core_87(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_87(sipGILState, 0, sipPySelf, sipMeth, reorderable);
}

void sipwxSettableHeaderColumn::SetSortable(bool sortable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_SetSortable);

    if (!sipMeth)
    {
         ::wxSettableHeaderColumn::SetSortable(sortable);
        return;
    }

    extern void sipVH__core_87(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_87(sipGILState, 0, sipPySelf, sipMeth, sortable);
}

void sipwxSettableHeaderColumn::SetResizeable(bool resizable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_SetResizeable);

    if (!sipMeth)
    {
         ::wxSettableHeaderColumn::SetResizeable(resizable);
        return;
    }

    extern void sipVH__core_87(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_87(sipGILState, 0, sipPySelf, sipMeth, resizable);
}

void sipwxSettableHeaderColumn::SetFlags(int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,sipName_SettableHeaderColumn,sipName_SetFlags);

    if (!sipMeth)
        return;

    extern void sipVH__core_102(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__core_102(sipGILState, 0, sipPySelf, sipMeth, flags);
}

void sipwxSettableHeaderColumn::SetAlignment( ::wxAlignment align)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,sipName_SettableHeaderColumn,sipName_SetAlignment);

    if (!sipMeth)
        return;

    extern void sipVH__core_155(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxAlignment);

    sipVH__core_155(sipGILState, 0, sipPySelf, sipMeth, align);
}

void sipwxSettableHeaderColumn::SetMinWidth(int minWidth)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,sipName_SettableHeaderColumn,sipName_SetMinWidth);

    if (!sipMeth)
        return;

    extern void sipVH__core_102(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__core_102(sipGILState, 0, sipPySelf, sipMeth, minWidth);
}

void sipwxSettableHeaderColumn::SetWidth(int width)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,sipName_SettableHeaderColumn,sipName_SetWidth);

    if (!sipMeth)
        return;

    extern void sipVH__core_102(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__core_102(sipGILState, 0, sipPySelf, sipMeth, width);
}

void sipwxSettableHeaderColumn::SetBitmap(const  ::wxBitmap& bitmap)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,sipName_SettableHeaderColumn,sipName_SetBitmap);

    if (!sipMeth)
        return;

    extern void sipVH__core_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxBitmap&);

    sipVH__core_73(sipGILState, 0, sipPySelf, sipMeth, bitmap);
}

void sipwxSettableHeaderColumn::SetTitle(const  ::wxString& title)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,sipName_SettableHeaderColumn,sipName_SetTitle);

    if (!sipMeth)
        return;

    extern void sipVH__core_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&);

    sipVH__core_51(sipGILState, 0, sipPySelf, sipMeth, title);
}

 ::wxString sipwxSettableHeaderColumn::GetTitle() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,sipName_SettableHeaderColumn,sipName_GetTitle);

    if (!sipMeth)
        return  ::wxString();

    extern  ::wxString sipVH__core_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_13(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBitmap sipwxSettableHeaderColumn::GetBitmap() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,sipName_SettableHeaderColumn,sipName_GetBitmap);

    if (!sipMeth)
        return  ::wxBitmap();

    extern  ::wxBitmap sipVH__core_72(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_72(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxSettableHeaderColumn::GetWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,sipName_SettableHeaderColumn,sipName_GetWidth);

    if (!sipMeth)
        return 0;

    extern int sipVH__core_101(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_101(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxSettableHeaderColumn::GetMinWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,sipName_SettableHeaderColumn,sipName_GetMinWidth);

    if (!sipMeth)
        return 0;

    extern int sipVH__core_101(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_101(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxAlignment sipwxSettableHeaderColumn::GetAlignment() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,sipName_SettableHeaderColumn,sipName_GetAlignment);

    if (!sipMeth)
        return ::wxALIGN_INVALID;

    extern  ::wxAlignment sipVH__core_154(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_154(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxSettableHeaderColumn::GetFlags() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,sipName_SettableHeaderColumn,sipName_GetFlags);

    if (!sipMeth)
        return 0;

    extern int sipVH__core_101(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_101(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxSettableHeaderColumn::IsResizeable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_IsResizeable);

    if (!sipMeth)
        return  ::wxSettableHeaderColumn::IsResizeable();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxSettableHeaderColumn::IsSortable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_IsSortable);

    if (!sipMeth)
        return  ::wxSettableHeaderColumn::IsSortable();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxSettableHeaderColumn::IsReorderable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_IsReorderable);

    if (!sipMeth)
        return  ::wxSettableHeaderColumn::IsReorderable();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxSettableHeaderColumn::IsHidden() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_IsHidden);

    if (!sipMeth)
        return  ::wxSettableHeaderColumn::IsHidden();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxSettableHeaderColumn::IsSortKey() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,sipName_SettableHeaderColumn,sipName_IsSortKey);

    if (!sipMeth)
        return 0;

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxSettableHeaderColumn::IsSortOrderAscending() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,sipName_SettableHeaderColumn,sipName_IsSortOrderAscending);

    if (!sipMeth)
        return 0;

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetTitle, "SetTitle(title)\n"
"\n"
"Set the text to display in the column header.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetTitle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetTitle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxString* title;
        int titleState = 0;
         ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_title,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, sipType_wxString,&title, &titleState))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_SettableHeaderColumn, sipName_SetTitle);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetTitle(*title);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(title),sipType_wxString,titleState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetTitle, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetBitmap, "SetBitmap(bitmap)\n"
"\n"
"Set the bitmap to be displayed in the column header.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetBitmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetBitmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxBitmap* bitmap;
         ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_bitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, sipType_wxBitmap, &bitmap))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_SettableHeaderColumn, sipName_SetBitmap);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBitmap(*bitmap);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetBitmap, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetWidth, "SetWidth(width)\n"
"\n"
"Set the column width.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int width;
         ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &width))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_SettableHeaderColumn, sipName_SetWidth);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetWidth(width);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetWidth, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetMinWidth, "SetMinWidth(minWidth)\n"
"\n"
"Set the minimal column width.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetMinWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetMinWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int minWidth;
         ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minWidth,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &minWidth))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_SettableHeaderColumn, sipName_SetMinWidth);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetMinWidth(minWidth);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetMinWidth, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetAlignment, "SetAlignment(align)\n"
"\n"
"Set the alignment of the column header.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetAlignment(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetAlignment(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxAlignment align;
         ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_align,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, sipType_wxAlignment, &align))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_SettableHeaderColumn, sipName_SetAlignment);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetAlignment(align);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetAlignment, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetFlags, "SetFlags(flags)\n"
"\n"
"Set the column flags.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetFlags(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetFlags(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int flags;
         ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_SettableHeaderColumn, sipName_SetFlags);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFlags(flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetFlags, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_ChangeFlag, "ChangeFlag(flag, set)\n"
"\n"
"Set or clear the given flag.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_ChangeFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_ChangeFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int flag;
        bool set;
         ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flag,
            sipName_set,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bib", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &flag, &set))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ChangeFlag(flag,set);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_ChangeFlag, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetFlag, "SetFlag(flag)\n"
"\n"
"Set the specified flag for the column.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int flag;
         ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flag,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &flag))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFlag(flag);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetFlag, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_ClearFlag, "ClearFlag(flag)\n"
"\n"
"Clear the specified flag for the column.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_ClearFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_ClearFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int flag;
         ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flag,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &flag))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ClearFlag(flag);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_ClearFlag, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_ToggleFlag, "ToggleFlag(flag)\n"
"\n"
"Toggle the specified flag for the column.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_ToggleFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_ToggleFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int flag;
         ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flag,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &flag))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ToggleFlag(flag);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_ToggleFlag, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetResizeable, "SetResizeable(resizable)\n"
"\n"
"Call this to enable or disable interactive resizing of the column by\n"
"the user.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetResizeable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetResizeable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool resizable;
         ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_resizable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &resizable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxSettableHeaderColumn::SetResizeable(resizable) : sipCpp->SetResizeable(resizable));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetResizeable, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetSortable, "SetSortable(sortable)\n"
"\n"
"Allow clicking the column to sort the control contents by the field in\n"
"this column.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetSortable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetSortable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool sortable;
         ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_sortable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &sortable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxSettableHeaderColumn::SetSortable(sortable) : sipCpp->SetSortable(sortable));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetSortable, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetReorderable, "SetReorderable(reorderable)\n"
"\n"
"Allow changing the column order by dragging it.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetReorderable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetReorderable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool reorderable;
         ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_reorderable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &reorderable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxSettableHeaderColumn::SetReorderable(reorderable) : sipCpp->SetReorderable(reorderable));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetReorderable, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetHidden, "SetHidden(hidden)\n"
"\n"
"Hide or show the column.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetHidden(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetHidden(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool hidden;
         ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_hidden,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &hidden))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxSettableHeaderColumn::SetHidden(hidden) : sipCpp->SetHidden(hidden));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetHidden, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_UnsetAsSortKey, "UnsetAsSortKey()\n"
"\n"
"Don't use this column for sorting.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_UnsetAsSortKey(PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_UnsetAsSortKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxSettableHeaderColumn *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->UnsetAsSortKey();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_UnsetAsSortKey, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_SetSortOrder, "SetSortOrder(ascending)\n"
"\n"
"Sets this column as the sort key for the associated control.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_SetSortOrder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_SetSortOrder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        bool ascending;
         ::wxSettableHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_ascending,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp, &ascending))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_SettableHeaderColumn, sipName_SetSortOrder);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSortOrder(ascending);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_SetSortOrder, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxSettableHeaderColumn_ToggleSortOrder, "ToggleSortOrder()\n"
"\n"
"Inverses the sort order.");

extern "C" {static PyObject *meth_wxSettableHeaderColumn_ToggleSortOrder(PyObject *, PyObject *);}
static PyObject *meth_wxSettableHeaderColumn_ToggleSortOrder(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxSettableHeaderColumn *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSettableHeaderColumn, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ToggleSortOrder();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SettableHeaderColumn, sipName_ToggleSortOrder, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxSettableHeaderColumn(void *, const sipTypeDef *);}
static void *cast_wxSettableHeaderColumn(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxSettableHeaderColumn *sipCpp = reinterpret_cast< ::wxSettableHeaderColumn *>(sipCppV);

    if (targetType == sipType_wxHeaderColumn)
        return static_cast< ::wxHeaderColumn *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxSettableHeaderColumn(void *, int);}
static void release_wxSettableHeaderColumn(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxSettableHeaderColumn *>(sipCppV);
    else
        delete reinterpret_cast< ::wxSettableHeaderColumn *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxSettableHeaderColumn(sipSimpleWrapper *);}
static void dealloc_wxSettableHeaderColumn(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxSettableHeaderColumn *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxSettableHeaderColumn(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxSettableHeaderColumn(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxSettableHeaderColumn(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxSettableHeaderColumn *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxSettableHeaderColumn();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxSettableHeaderColumn* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxSettableHeaderColumn, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxSettableHeaderColumn(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxSettableHeaderColumn[] = {{231, 255, 1}};


static PyMethodDef methods_wxSettableHeaderColumn[] = {
    {SIP_MLNAME_CAST(sipName_ChangeFlag), (PyCFunction)meth_wxSettableHeaderColumn_ChangeFlag, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSettableHeaderColumn_ChangeFlag)},
    {SIP_MLNAME_CAST(sipName_ClearFlag), (PyCFunction)meth_wxSettableHeaderColumn_ClearFlag, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSettableHeaderColumn_ClearFlag)},
    {SIP_MLNAME_CAST(sipName_SetAlignment), (PyCFunction)meth_wxSettableHeaderColumn_SetAlignment, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSettableHeaderColumn_SetAlignment)},
    {SIP_MLNAME_CAST(sipName_SetBitmap), (PyCFunction)meth_wxSettableHeaderColumn_SetBitmap, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSettableHeaderColumn_SetBitmap)},
    {SIP_MLNAME_CAST(sipName_SetFlag), (PyCFunction)meth_wxSettableHeaderColumn_SetFlag, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSettableHeaderColumn_SetFlag)},
    {SIP_MLNAME_CAST(sipName_SetFlags), (PyCFunction)meth_wxSettableHeaderColumn_SetFlags, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSettableHeaderColumn_SetFlags)},
    {SIP_MLNAME_CAST(sipName_SetHidden), (PyCFunction)meth_wxSettableHeaderColumn_SetHidden, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSettableHeaderColumn_SetHidden)},
    {SIP_MLNAME_CAST(sipName_SetMinWidth), (PyCFunction)meth_wxSettableHeaderColumn_SetMinWidth, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSettableHeaderColumn_SetMinWidth)},
    {SIP_MLNAME_CAST(sipName_SetReorderable), (PyCFunction)meth_wxSettableHeaderColumn_SetReorderable, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSettableHeaderColumn_SetReorderable)},
    {SIP_MLNAME_CAST(sipName_SetResizeable), (PyCFunction)meth_wxSettableHeaderColumn_SetResizeable, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSettableHeaderColumn_SetResizeable)},
    {SIP_MLNAME_CAST(sipName_SetSortOrder), (PyCFunction)meth_wxSettableHeaderColumn_SetSortOrder, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSettableHeaderColumn_SetSortOrder)},
    {SIP_MLNAME_CAST(sipName_SetSortable), (PyCFunction)meth_wxSettableHeaderColumn_SetSortable, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSettableHeaderColumn_SetSortable)},
    {SIP_MLNAME_CAST(sipName_SetTitle), (PyCFunction)meth_wxSettableHeaderColumn_SetTitle, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSettableHeaderColumn_SetTitle)},
    {SIP_MLNAME_CAST(sipName_SetWidth), (PyCFunction)meth_wxSettableHeaderColumn_SetWidth, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSettableHeaderColumn_SetWidth)},
    {SIP_MLNAME_CAST(sipName_ToggleFlag), (PyCFunction)meth_wxSettableHeaderColumn_ToggleFlag, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSettableHeaderColumn_ToggleFlag)},
    {SIP_MLNAME_CAST(sipName_ToggleSortOrder), meth_wxSettableHeaderColumn_ToggleSortOrder, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSettableHeaderColumn_ToggleSortOrder)},
    {SIP_MLNAME_CAST(sipName_UnsetAsSortKey), meth_wxSettableHeaderColumn_UnsetAsSortKey, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSettableHeaderColumn_UnsetAsSortKey)}
};

PyDoc_STRVAR(doc_wxSettableHeaderColumn, "Adds methods to set the column attributes to wxHeaderColumn.");


sipClassTypeDef sipTypeDef__core_wxSettableHeaderColumn = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_wxSettableHeaderColumn,
        {0},
        0
    },
    {
        sipNameNr_SettableHeaderColumn,
        {0, 0, 1},
        17, methods_wxSettableHeaderColumn,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxSettableHeaderColumn,
    -1,
    -1,
    supers_wxSettableHeaderColumn,
    0,
    init_type_wxSettableHeaderColumn,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxSettableHeaderColumn,
    0,
    0,
    0,
    release_wxSettableHeaderColumn,
    cast_wxSettableHeaderColumn,
    0,
    0,
    0,
    0,
    0,
    0
};
