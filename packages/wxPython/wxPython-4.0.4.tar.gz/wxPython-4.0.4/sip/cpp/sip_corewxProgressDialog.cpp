/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/progdlg.h>

        #include <wx/window.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/validate.h>
        #include <wx/gdicmn.h>
        #include <wx/dialog.h>
        #include <wx/iconbndl.h>
        #include <wx/icon.h>
        #include <wx/sizer.h>
        #include <wx/sizer.h>
        #include <wx/region.h>
        #include <wx/graphics.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxProgressDialog : public  ::wxProgressDialog
{
public:
    sipwxProgressDialog(const  ::wxString&,const  ::wxString&,int, ::wxWindow*,int);
    virtual ~sipwxProgressDialog();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxWindow* GetContentWindow() const;
    void RemoveChild( ::wxWindowBase*);
    void AddChild( ::wxWindowBase*);
    bool ProcessEvent( ::wxEvent&);
    bool TryBefore( ::wxEvent&);
    bool TryAfter( ::wxEvent&);
    bool AcceptsFocus() const;
    bool AcceptsFocusFromKeyboard() const;
    bool AcceptsFocusRecursively() const;
    void SetCanFocus(bool);
    bool InformFirstDirection(int,int,int);
     ::wxPoint GetClientAreaOrigin() const;
    bool HasTransparentBackground();
    bool ShouldInheritColours() const;
     ::wxValidator* GetValidator();
    void SetValidator(const  ::wxValidator&);
    bool TransferDataFromWindow();
    bool TransferDataToWindow();
    bool Validate();
    bool Destroy();
    void InheritAttributes();
    void InitDialog();
    void OnInternalIdle();
     ::wxWindow* GetMainWindowOfCompositeControl();
    void DoEnable(bool);
    void DoGetPosition(int*,int*) const;
    void DoGetSize(int*,int*) const;
    void DoGetClientSize(int*,int*) const;
    void DoSetSize(int,int,int,int,int);
    void DoSetClientSize(int,int);
    void DoSetSizeHints(int,int,int,int,int,int);
     ::wxSize DoGetBorderSize() const;
    void DoMoveWindow(int,int,int,int);
    void DoSetWindowVariant( ::wxWindowVariant);
     ::wxBorder GetDefaultBorder() const;
     ::wxBorder GetDefaultBorderForControl() const;
    void DoFreeze();
    void DoThaw();
     ::wxSize DoGetBestSize() const;
     ::wxSize DoGetBestClientSize() const;
    bool ShouldPreventAppExit() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxProgressDialog(const sipwxProgressDialog &);
    sipwxProgressDialog &operator = (const sipwxProgressDialog &);

    char sipPyMethods[41];
};

sipwxProgressDialog::sipwxProgressDialog(const  ::wxString& title,const  ::wxString& message,int maximum, ::wxWindow*parent,int style):  ::wxProgressDialog(title,message,maximum,parent,style), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxProgressDialog::~sipwxProgressDialog()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxWindow* sipwxProgressDialog::GetContentWindow() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_GetContentWindow);

    if (!sipMeth)
        return  ::wxProgressDialog::GetContentWindow();

    extern  ::wxWindow* sipVH__core_119(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_119(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxProgressDialog::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxProgressDialog::RemoveChild(child);
        return;
    }

    extern void sipVH__core_114(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__core_114(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxProgressDialog::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxProgressDialog::AddChild(child);
        return;
    }

    extern void sipVH__core_114(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__core_114(sipGILState, 0, sipPySelf, sipMeth, child);
}

bool sipwxProgressDialog::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxProgressDialog::ProcessEvent(event);

    extern bool sipVH__core_94(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_94(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxProgressDialog::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxProgressDialog::TryBefore(event);

    extern bool sipVH__core_94(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_94(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxProgressDialog::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxProgressDialog::TryAfter(event);

    extern bool sipVH__core_94(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_94(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxProgressDialog::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxProgressDialog::AcceptsFocus();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxProgressDialog::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxProgressDialog::AcceptsFocusFromKeyboard();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxProgressDialog::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxProgressDialog::AcceptsFocusRecursively();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxProgressDialog::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxProgressDialog::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__core_87(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_87(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

bool sipwxProgressDialog::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxProgressDialog::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__core_115(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__core_115(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

 ::wxPoint sipwxProgressDialog::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxProgressDialog::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__core_116(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_116(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxProgressDialog::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxProgressDialog::HasTransparentBackground();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxProgressDialog::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxProgressDialog::ShouldInheritColours();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxValidator* sipwxProgressDialog::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxProgressDialog::GetValidator();

    extern  ::wxValidator* sipVH__core_117(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_117(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxProgressDialog::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxProgressDialog::SetValidator(validator);
        return;
    }

    extern void sipVH__core_118(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__core_118(sipGILState, 0, sipPySelf, sipMeth, validator);
}

bool sipwxProgressDialog::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxProgressDialog::TransferDataFromWindow();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxProgressDialog::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxProgressDialog::TransferDataToWindow();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxProgressDialog::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_Validate);

    if (!sipMeth)
        return  ::wxProgressDialog::Validate();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxProgressDialog::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_Destroy);

    if (!sipMeth)
        return  ::wxProgressDialog::Destroy();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxProgressDialog::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxProgressDialog::InheritAttributes();
        return;
    }

    extern void sipVH__core_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_48(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxProgressDialog::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxProgressDialog::InitDialog();
        return;
    }

    extern void sipVH__core_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_48(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxProgressDialog::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxProgressDialog::OnInternalIdle();
        return;
    }

    extern void sipVH__core_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_48(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxWindow* sipwxProgressDialog::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxProgressDialog::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__core_119(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_119(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxProgressDialog::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxProgressDialog::DoEnable(enable);
        return;
    }

    extern void sipVH__core_87(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_87(sipGILState, 0, sipPySelf, sipMeth, enable);
}

void sipwxProgressDialog::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxProgressDialog::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__core_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_120(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxProgressDialog::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxProgressDialog::DoGetSize(width,height);
        return;
    }

    extern void sipVH__core_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_120(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxProgressDialog::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxProgressDialog::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__core_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_120(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxProgressDialog::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxProgressDialog::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__core_121(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__core_121(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxProgressDialog::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxProgressDialog::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__core_122(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__core_122(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxProgressDialog::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxProgressDialog::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__core_123(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__core_123(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

 ::wxSize sipwxProgressDialog::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxProgressDialog::DoGetBorderSize();

    extern  ::wxSize sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxProgressDialog::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxProgressDialog::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__core_124(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__core_124(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

void sipwxProgressDialog::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxProgressDialog::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__core_125(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__core_125(sipGILState, 0, sipPySelf, sipMeth, variant);
}

 ::wxBorder sipwxProgressDialog::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxProgressDialog::GetDefaultBorder();

    extern  ::wxBorder sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxProgressDialog::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[35]),sipPySelf,NULL,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxProgressDialog::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxProgressDialog::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxProgressDialog::DoFreeze();
        return;
    }

    extern void sipVH__core_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_48(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxProgressDialog::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxProgressDialog::DoThaw();
        return;
    }

    extern void sipVH__core_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_48(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxProgressDialog::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxProgressDialog::DoGetBestSize();

    extern  ::wxSize sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxProgressDialog::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxProgressDialog::DoGetBestClientSize();

    extern  ::wxSize sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxProgressDialog::ShouldPreventAppExit() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_ShouldPreventAppExit);

    if (!sipMeth)
        return  ::wxProgressDialog::ShouldPreventAppExit();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxProgressDialog::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sipwxProgressDialog::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxProgressDialog::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxProgressDialog::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxProgressDialog::DoEnable(enable) : DoEnable(enable));
}

void sipwxProgressDialog::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxProgressDialog::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxProgressDialog::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxProgressDialog::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxProgressDialog::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxProgressDialog::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxProgressDialog::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxProgressDialog::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxProgressDialog::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxProgressDialog::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxProgressDialog::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxProgressDialog::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxProgressDialog::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxProgressDialog::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxProgressDialog::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxProgressDialog::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxProgressDialog::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxProgressDialog::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxProgressDialog::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxProgressDialog::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxProgressDialog::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxProgressDialog::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxProgressDialog::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxProgressDialog::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxProgressDialog::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxProgressDialog::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxProgressDialog::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxProgressDialog::DoFreeze() : DoFreeze());
}

void sipwxProgressDialog::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxProgressDialog::DoThaw() : DoThaw());
}

bool sipwxProgressDialog::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxProgressDialog::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxProgressDialog::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxProgressDialog::TryBefore(event) : TryBefore(event));
}

bool sipwxProgressDialog::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxProgressDialog::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxProgressDialog_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxProgressDialog_SendDestroyEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipwxProgressDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_SendDestroyEvent, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxProgressDialog_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxProgressDialog::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_GetClientAreaOrigin, doc_wxProgressDialog_GetClientAreaOrigin);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxProgressDialog_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxProgressDialog::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_Validate, doc_wxProgressDialog_Validate);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxProgressDialog_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxProgressDialog::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_TransferDataToWindow, doc_wxProgressDialog_TransferDataToWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxProgressDialog_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxProgressDialog::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_TransferDataFromWindow, doc_wxProgressDialog_TransferDataFromWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxProgressDialog_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxProgressDialog::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_InitDialog, doc_wxProgressDialog_InitDialog);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxProgressDialog_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxProgressDialog::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_AcceptsFocus, doc_wxProgressDialog_AcceptsFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxProgressDialog_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxProgressDialog::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_AcceptsFocusRecursively, doc_wxProgressDialog_AcceptsFocusRecursively);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxProgressDialog_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxProgressDialog::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_AcceptsFocusFromKeyboard, doc_wxProgressDialog_AcceptsFocusFromKeyboard);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxProgressDialog_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxProgressDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxProgressDialog, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxProgressDialog::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_AddChild, doc_wxProgressDialog_AddChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxProgressDialog_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxProgressDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxProgressDialog, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxProgressDialog::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_RemoveChild, doc_wxProgressDialog_RemoveChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxProgressDialog_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxProgressDialog::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_InheritAttributes, doc_wxProgressDialog_InheritAttributes);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxProgressDialog_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxProgressDialog::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_ShouldInheritColours, doc_wxProgressDialog_ShouldInheritColours);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxProgressDialog_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxProgressDialog::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_OnInternalIdle, doc_wxProgressDialog_OnInternalIdle);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxProgressDialog_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxProgressDialog::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_GetMainWindowOfCompositeControl, doc_wxProgressDialog_GetMainWindowOfCompositeControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxProgressDialog_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxProgressDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biii", &sipSelf, sipType_wxProgressDialog, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxProgressDialog::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_InformFirstDirection, doc_wxProgressDialog_InformFirstDirection);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxProgressDialog_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxProgressDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxProgressDialog, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxProgressDialog::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_SetCanFocus, doc_wxProgressDialog_SetCanFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxProgressDialog_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxProgressDialog::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_Destroy, doc_wxProgressDialog_Destroy);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxProgressDialog_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxProgressDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxProgressDialog, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxProgressDialog::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_SetValidator, doc_wxProgressDialog_SetValidator);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxProgressDialog_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxProgressDialog::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_GetValidator, doc_wxProgressDialog_GetValidator);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxProgressDialog_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxProgressDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxProgressDialog, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_ProcessEvent, doc_wxProgressDialog_ProcessEvent);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxProgressDialog_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxProgressDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxProgressDialog, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_DoEnable, doc_wxProgressDialog_DoEnable);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxProgressDialog_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxProgressDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_DoGetPosition, doc_wxProgressDialog_DoGetPosition);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxProgressDialog_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxProgressDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_DoGetSize, doc_wxProgressDialog_DoGetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxProgressDialog_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxProgressDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_DoGetClientSize, doc_wxProgressDialog_DoGetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxProgressDialog_DoGetBestSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxProgressDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_DoGetBestSize, doc_wxProgressDialog_DoGetBestSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxProgressDialog_DoGetBestClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxProgressDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_DoGetBestClientSize, doc_wxProgressDialog_DoGetBestClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxProgressDialog_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxProgressDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiii", &sipSelf, sipType_wxProgressDialog, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_DoSetSize, doc_wxProgressDialog_DoSetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxProgressDialog_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxProgressDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxProgressDialog, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_DoSetClientSize, doc_wxProgressDialog_DoSetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxProgressDialog_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxProgressDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiiii", &sipSelf, sipType_wxProgressDialog, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_DoSetSizeHints, doc_wxProgressDialog_DoSetSizeHints);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxProgressDialog_DoGetBorderSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxProgressDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_DoGetBorderSize, doc_wxProgressDialog_DoGetBorderSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxProgressDialog_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxProgressDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiii", &sipSelf, sipType_wxProgressDialog, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_DoMoveWindow, doc_wxProgressDialog_DoMoveWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxProgressDialog_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxProgressDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE", &sipSelf, sipType_wxProgressDialog, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_DoSetWindowVariant, doc_wxProgressDialog_DoSetWindowVariant);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxProgressDialog_GetDefaultBorder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxProgressDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_GetDefaultBorder, doc_wxProgressDialog_GetDefaultBorder);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxProgressDialog_GetDefaultBorderForControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxProgressDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_GetDefaultBorderForControl, doc_wxProgressDialog_GetDefaultBorderForControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxProgressDialog_DoFreeze(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_DoFreeze(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxProgressDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_DoFreeze, doc_wxProgressDialog_DoFreeze);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxProgressDialog_DoThaw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_DoThaw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxProgressDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_DoThaw, doc_wxProgressDialog_DoThaw);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxProgressDialog_HasTransparentBackground(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxProgressDialog *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_HasTransparentBackground, doc_wxProgressDialog_HasTransparentBackground);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxProgressDialog_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxProgressDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxProgressDialog, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_TryBefore, doc_wxProgressDialog_TryBefore);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxProgressDialog_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxProgressDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxProgressDialog, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_TryAfter, doc_wxProgressDialog_TryAfter);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant: WindowVariant = wxWINDOW_VARIANT_NORMAL) -> VisualAttributes");

extern "C" {static PyObject *meth_wxProgressDialog_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxProgressDialog::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_GetClassDefaultAttributes, doc_wxProgressDialog_GetClassDefaultAttributes);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_GetValue, "GetValue() -> int\n"
"\n"
"Returns the last value passed to the Update() function or wxNOT_FOUND\n"
"if the dialog has no progress bar.");

extern "C" {static PyObject *meth_wxProgressDialog_GetValue(PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_GetValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetValue();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_GetValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_GetRange, "GetRange() -> int\n"
"\n"
"Returns the maximum value of the progress meter, as passed to the\n"
"constructor or wxNOT_FOUND if the dialog has no progress bar.");

extern "C" {static PyObject *meth_wxProgressDialog_GetRange(PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_GetRange(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetRange();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_GetRange, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_GetMessage, "GetMessage() -> String\n"
"\n"
"Returns the last message passed to the Update() function; if you\n"
"always passed wxEmptyString to Update() then the message set through\n"
"the constructor is returned.");

extern "C" {static PyObject *meth_wxProgressDialog_GetMessage(PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_GetMessage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetMessage());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_GetMessage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_Pulse, "Pulse(newmsg=EmptyString) -> (bool, skip)\n"
"\n"
"Like Update() but makes the gauge control run in indeterminate mode.");

extern "C" {static PyObject *meth_wxProgressDialog_Pulse(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_Pulse(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString& newmsgdef = wxEmptyString;
        const  ::wxString* newmsg = &newmsgdef;
        int newmsgState = 0;
        bool skip;
         ::wxProgressDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_newmsg,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|J1", &sipSelf, sipType_wxProgressDialog, &sipCpp, sipType_wxString,&newmsg, &newmsgState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Pulse(*newmsg,&skip);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(newmsg),sipType_wxString,newmsgState);

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bb)",sipRes,skip);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_Pulse, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_Resume, "Resume()\n"
"\n"
"Can be used to continue with the dialog, after the user had clicked\n"
"the \"Abort\" button.");

extern "C" {static PyObject *meth_wxProgressDialog_Resume(PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_Resume(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Resume();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_Resume, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_SetRange, "SetRange(maximum)\n"
"\n"
"Changes the maximum value of the progress meter given in the\n"
"constructor.");

extern "C" {static PyObject *meth_wxProgressDialog_SetRange(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_SetRange(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int maximum;
         ::wxProgressDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_maximum,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxProgressDialog, &sipCpp, &maximum))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetRange(maximum);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_SetRange, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_WasCancelled, "WasCancelled() -> bool\n"
"\n"
"Returns true if the \"Cancel\" button was pressed.");

extern "C" {static PyObject *meth_wxProgressDialog_WasCancelled(PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_WasCancelled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->WasCancelled();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_WasCancelled, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_WasSkipped, "WasSkipped() -> bool\n"
"\n"
"Returns true if the \"Skip\" button was pressed.");

extern "C" {static PyObject *meth_wxProgressDialog_WasSkipped(PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_WasSkipped(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxProgressDialog *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxProgressDialog, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->WasSkipped();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_WasSkipped, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxProgressDialog_Update, "Update(value, newmsg=EmptyString) -> (bool, skip)\n"
"\n"
"Updates the dialog, setting the progress bar to the new value and\n"
"updating the message if new one is specified.");

extern "C" {static PyObject *meth_wxProgressDialog_Update(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxProgressDialog_Update(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int value;
        const  ::wxString& newmsgdef = wxEmptyString;
        const  ::wxString* newmsg = &newmsgdef;
        int newmsgState = 0;
        bool skip;
         ::wxProgressDialog *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
            sipName_newmsg,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|J1", &sipSelf, sipType_wxProgressDialog, &sipCpp, &value, sipType_wxString,&newmsg, &newmsgState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Update(value,*newmsg,&skip);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(newmsg),sipType_wxString,newmsgState);

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bb)",sipRes,skip);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ProgressDialog, sipName_Update, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxProgressDialog(void *, const sipTypeDef *);}
static void *cast_wxProgressDialog(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxProgressDialog *sipCpp = reinterpret_cast< ::wxProgressDialog *>(sipCppV);

    if (targetType == sipType_wxGenericProgressDialog)
        return static_cast< ::wxGenericProgressDialog *>(sipCpp);

    if (targetType == sipType_wxDialog)
        return static_cast< ::wxDialog *>(sipCpp);

    if (targetType == sipType_wxTopLevelWindow)
        return static_cast< ::wxTopLevelWindow *>(sipCpp);

    if (targetType == sipType_wxNonOwnedWindow)
        return static_cast< ::wxNonOwnedWindow *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxProgressDialog(void *, int);}
static void release_wxProgressDialog(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxProgressDialog *>(sipCppV);
    else
        delete reinterpret_cast< ::wxProgressDialog *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxProgressDialog(sipSimpleWrapper *);}
static void dealloc_wxProgressDialog(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxProgressDialog *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxProgressDialog(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxProgressDialog(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxProgressDialog(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxProgressDialog *sipCpp = 0;

    {
        const  ::wxString* title;
        int titleState = 0;
        const  ::wxString* message;
        int messageState = 0;
        int maximum = 100;
         ::wxWindow* parent = 0;
        int style = wxPD_APP_MODAL|wxPD_AUTO_HIDE;

        static const char *sipKwdList[] = {
            sipName_title,
            sipName_message,
            sipName_maximum,
            sipName_parent,
            sipName_style,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1J1|iJHi", sipType_wxString,&title, &titleState, sipType_wxString,&message, &messageState, &maximum, sipType_wxWindow, &parent, sipOwner, &style))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxProgressDialog(*title,*message,maximum,parent,style);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(title),sipType_wxString,titleState);
            sipReleaseType(const_cast< ::wxString *>(message),sipType_wxString,messageState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxProgressDialog[] = {{212, 255, 1}};


static PyMethodDef methods_wxProgressDialog[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxProgressDialog_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxProgressDialog_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxProgressDialog_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxProgressDialog_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxProgressDialog_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxProgressDialog_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_AddChild), (PyCFunction)meth_wxProgressDialog_AddChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_AddChild)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxProgressDialog_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxProgressDialog_Destroy)},
    {SIP_MLNAME_CAST(sipName_DoEnable), (PyCFunction)meth_wxProgressDialog_DoEnable, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), (PyCFunction)meth_wxProgressDialog_DoFreeze, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), (PyCFunction)meth_wxProgressDialog_DoGetBestClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), (PyCFunction)meth_wxProgressDialog_DoGetBestSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), (PyCFunction)meth_wxProgressDialog_DoGetBorderSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), (PyCFunction)meth_wxProgressDialog_DoGetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), (PyCFunction)meth_wxProgressDialog_DoGetPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), (PyCFunction)meth_wxProgressDialog_DoGetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), (PyCFunction)meth_wxProgressDialog_DoMoveWindow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), (PyCFunction)meth_wxProgressDialog_DoSetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), (PyCFunction)meth_wxProgressDialog_DoSetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), (PyCFunction)meth_wxProgressDialog_DoSetSizeHints, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), (PyCFunction)meth_wxProgressDialog_DoSetWindowVariant, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoThaw), (PyCFunction)meth_wxProgressDialog_DoThaw, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_DoThaw)},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), (PyCFunction)meth_wxProgressDialog_GetClassDefaultAttributes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxProgressDialog_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxProgressDialog_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), (PyCFunction)meth_wxProgressDialog_GetDefaultBorder, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), (PyCFunction)meth_wxProgressDialog_GetDefaultBorderForControl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxProgressDialog_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxProgressDialog_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetMessage), meth_wxProgressDialog_GetMessage, METH_VARARGS, SIP_MLDOC_CAST(doc_wxProgressDialog_GetMessage)},
    {SIP_MLNAME_CAST(sipName_GetRange), meth_wxProgressDialog_GetRange, METH_VARARGS, SIP_MLDOC_CAST(doc_wxProgressDialog_GetRange)},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxProgressDialog_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxProgressDialog_GetValidator)},
    {SIP_MLNAME_CAST(sipName_GetValue), meth_wxProgressDialog_GetValue, METH_VARARGS, SIP_MLDOC_CAST(doc_wxProgressDialog_GetValue)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), (PyCFunction)meth_wxProgressDialog_HasTransparentBackground, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), (PyCFunction)meth_wxProgressDialog_InformFirstDirection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxProgressDialog_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxProgressDialog_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxProgressDialog_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxProgressDialog_InitDialog)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxProgressDialog_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxProgressDialog_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), (PyCFunction)meth_wxProgressDialog_ProcessEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_Pulse), (PyCFunction)meth_wxProgressDialog_Pulse, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_Pulse)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), (PyCFunction)meth_wxProgressDialog_RemoveChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_Resume), meth_wxProgressDialog_Resume, METH_VARARGS, SIP_MLDOC_CAST(doc_wxProgressDialog_Resume)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), (PyCFunction)meth_wxProgressDialog_SendDestroyEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), (PyCFunction)meth_wxProgressDialog_SetCanFocus, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetRange), (PyCFunction)meth_wxProgressDialog_SetRange, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_SetRange)},
    {SIP_MLNAME_CAST(sipName_SetValidator), (PyCFunction)meth_wxProgressDialog_SetValidator, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_SetValidator)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxProgressDialog_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxProgressDialog_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxProgressDialog_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxProgressDialog_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxProgressDialog_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxProgressDialog_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), (PyCFunction)meth_wxProgressDialog_TryAfter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), (PyCFunction)meth_wxProgressDialog_TryBefore, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_TryBefore)},
    {SIP_MLNAME_CAST(sipName_Update), (PyCFunction)meth_wxProgressDialog_Update, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxProgressDialog_Update)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxProgressDialog_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxProgressDialog_Validate)},
    {SIP_MLNAME_CAST(sipName_WasCancelled), meth_wxProgressDialog_WasCancelled, METH_VARARGS, SIP_MLDOC_CAST(doc_wxProgressDialog_WasCancelled)},
    {SIP_MLNAME_CAST(sipName_WasSkipped), meth_wxProgressDialog_WasSkipped, METH_VARARGS, SIP_MLDOC_CAST(doc_wxProgressDialog_WasSkipped)}
};

sipVariableDef variables_wxProgressDialog[] = {
    {PropertyVariable, sipName_Value, &methods_wxProgressDialog[27], NULL, NULL, NULL},
    {PropertyVariable, sipName_Range, &methods_wxProgressDialog[25], &methods_wxProgressDialog[39], NULL, NULL},
    {PropertyVariable, sipName_Message, &methods_wxProgressDialog[24], NULL, NULL, NULL},
};

PyDoc_STRVAR(doc_wxProgressDialog, "ProgressDialog(title, message, maximum=100, parent=None, style=PD_APP_MODAL|PD_AUTO_HIDE)\n"
"\n"
"If supported by the platform this class will provide the platform's\n"
"native progress dialog, else it will simply be the\n"
"wxGenericProgressDialog.");


sipClassTypeDef sipTypeDef__core_wxProgressDialog = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxProgressDialog,
        {0},
        0
    },
    {
        sipNameNr_ProgressDialog,
        {0, 0, 1},
        50, methods_wxProgressDialog,
        0, 0,
        3, variables_wxProgressDialog,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxProgressDialog,
    -1,
    -1,
    supers_wxProgressDialog,
    0,
    init_type_wxProgressDialog,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxProgressDialog,
    0,
    0,
    0,
    release_wxProgressDialog,
    cast_wxProgressDialog,
    0,
    0,
    0,
    0,
    0,
    0
};
