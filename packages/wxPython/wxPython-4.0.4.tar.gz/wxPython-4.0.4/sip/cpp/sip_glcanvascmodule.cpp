/*
 * Module code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_glcanvas.h"

        #include <wx/object.h>
        #include <wx/glcanvas.h>
        #include <wx/gdicmn.h>
        #include <wx/window.h>
        #include <wx/validate.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>

/* Define the strings used by this module. */
const char sipStrings__glcanvas[] = {
    'G', 'e', 't', 'M', 'a', 'i', 'n', 'W', 'i', 'n', 'd', 'o', 'w', 'O', 'f', 'C', 'o', 'm', 'p', 'o', 's', 'i', 't', 'e', 'C', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'G', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'B', 'o', 'r', 'd', 'e', 'r', 'F', 'o', 'r', 'C', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'G', 'e', 't', 'C', 'l', 'a', 's', 's', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', 0,
    'H', 'a', 's', 'T', 'r', 'a', 'n', 's', 'p', 'a', 'r', 'e', 'n', 't', 'B', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 0,
    'A', 'c', 'c', 'e', 'p', 't', 's', 'F', 'o', 'c', 'u', 's', 'F', 'r', 'o', 'm', 'K', 'e', 'y', 'b', 'o', 'a', 'r', 'd', 0,
    'A', 'c', 'c', 'e', 'p', 't', 's', 'F', 'o', 'c', 'u', 's', 'R', 'e', 'c', 'u', 'r', 's', 'i', 'v', 'e', 'l', 'y', 0,
    'T', 'r', 'a', 'n', 's', 'f', 'e', 'r', 'D', 'a', 't', 'a', 'F', 'r', 'o', 'm', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'W', 'X', '_', 'G', 'L', '_', 'M', 'I', 'N', '_', 'A', 'C', 'C', 'U', 'M', '_', 'A', 'L', 'P', 'H', 'A', 0,
    'W', 'X', '_', 'G', 'L', '_', 'M', 'I', 'N', '_', 'A', 'C', 'C', 'U', 'M', '_', 'G', 'R', 'E', 'E', 'N', 0,
    'I', 's', 'E', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 'S', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 0,
    'W', 'X', '_', 'G', 'L', '_', 'S', 'A', 'M', 'P', 'L', 'E', '_', 'B', 'U', 'F', 'F', 'E', 'R', 'S', 0,
    'W', 'X', '_', 'G', 'L', '_', 'M', 'I', 'N', '_', 'A', 'C', 'C', 'U', 'M', '_', 'B', 'L', 'U', 'E', 0,
    'T', 'r', 'a', 'n', 's', 'f', 'e', 'r', 'D', 'a', 't', 'a', 'T', 'o', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'S', 'h', 'o', 'u', 'l', 'd', 'I', 'n', 'h', 'e', 'r', 'i', 't', 'C', 'o', 'l', 'o', 'u', 'r', 's', 0,
    'I', 'n', 'f', 'o', 'r', 'm', 'F', 'i', 'r', 's', 't', 'D', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'W', 'X', '_', 'G', 'L', '_', 'M', 'I', 'N', 'O', 'R', '_', 'V', 'E', 'R', 'S', 'I', 'O', 'N', 0,
    'W', 'X', '_', 'G', 'L', '_', 'M', 'A', 'J', 'O', 'R', '_', 'V', 'E', 'R', 'S', 'I', 'O', 'N', 0,
    'W', 'X', '_', 'G', 'L', '_', 'M', 'I', 'N', '_', 'A', 'C', 'C', 'U', 'M', '_', 'R', 'E', 'D', 0,
    'D', 'o', 'G', 'e', 't', 'B', 'e', 's', 't', 'C', 'l', 'i', 'e', 'n', 't', 'S', 'i', 'z', 'e', 0,
    'G', 'e', 't', 'C', 'l', 'i', 'e', 'n', 't', 'A', 'r', 'e', 'a', 'O', 'r', 'i', 'g', 'i', 'n', 0,
    'I', 's', 'D', 'i', 's', 'p', 'l', 'a', 'y', 'S', 'u', 'p', 'p', 'o', 'r', 't', 'e', 'd', 0,
    'W', 'X', '_', 'G', 'L', '_', 'C', 'O', 'R', 'E', '_', 'P', 'R', 'O', 'F', 'I', 'L', 'E', 0,
    'W', 'X', '_', 'G', 'L', '_', 'S', 'T', 'E', 'N', 'C', 'I', 'L', '_', 'S', 'I', 'Z', 'E', 0,
    'W', 'X', '_', 'G', 'L', '_', 'D', 'O', 'U', 'B', 'L', 'E', 'B', 'U', 'F', 'F', 'E', 'R', 0,
    'D', 'o', 'S', 'e', 't', 'W', 'i', 'n', 'd', 'o', 'w', 'V', 'a', 'r', 'i', 'a', 'n', 't', 0,
    'W', 'X', '_', 'G', 'L', '_', 'A', 'U', 'X', '_', 'B', 'U', 'F', 'F', 'E', 'R', 'S', 0,
    'W', 'X', '_', 'G', 'L', '_', 'B', 'U', 'F', 'F', 'E', 'R', '_', 'S', 'I', 'Z', 'E', 0,
    'I', 'n', 'h', 'e', 'r', 'i', 't', 'A', 't', 't', 'r', 'i', 'b', 'u', 't', 'e', 's', 0,
    'a', 'v', 'a', 'i', 'l', 'a', 'b', 'l', 'e', 'O', 't', 'h', 'e', 'r', 'D', 'i', 'r', 0,
    'W', 'X', '_', 'G', 'L', '_', 'D', 'E', 'P', 'T', 'H', '_', 'S', 'I', 'Z', 'E', 0,
    'i', 'n', 'i', 't', 'i', 'a', 'l', 'S', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'S', 'e', 'n', 'd', 'D', 'e', 's', 't', 'r', 'o', 'y', 'E', 'v', 'e', 'n', 't', 0,
    'G', 'e', 't', 'D', 'e', 'f', 'a', 'u', 'l', 't', 'B', 'o', 'r', 'd', 'e', 'r', 0,
    'n', 'a', 't', 'i', 'v', 'e', 'I', 'n', 'f', 'o', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'W', 'X', '_', 'G', 'L', '_', 'M', 'I', 'N', '_', 'A', 'L', 'P', 'H', 'A', 0,
    'W', 'X', '_', 'G', 'L', '_', 'M', 'I', 'N', '_', 'G', 'R', 'E', 'E', 'N', 0,
    'D', 'o', 'G', 'e', 't', 'B', 'o', 'r', 'd', 'e', 'r', 'S', 'i', 'z', 'e', 0,
    'D', 'o', 'S', 'e', 't', 'C', 'l', 'i', 'e', 'n', 't', 'S', 'i', 'z', 'e', 0,
    'D', 'o', 'G', 'e', 't', 'C', 'l', 'i', 'e', 'n', 't', 'S', 'i', 'z', 'e', 0,
    'b', 'a', 'c', 'k', 'g', 'r', 'o', 'u', 'n', 'd', 'B', 'r', 'u', 's', 'h', 0,
    'W', 'X', '_', 'G', 'L', '_', 'M', 'I', 'N', '_', 'B', 'L', 'U', 'E', 0,
    'b', 'o', 'u', 'n', 'd', 'i', 'n', 'g', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'D', 'o', 'S', 'e', 't', 'S', 'i', 'z', 'e', 'H', 'i', 'n', 't', 's', 0,
    'O', 'n', 'I', 'n', 't', 'e', 'r', 'n', 'a', 'l', 'I', 'd', 'l', 'e', 0,
    'W', 'X', '_', 'G', 'L', '_', 'S', 'A', 'M', 'P', 'L', 'E', 'S', 0,
    'W', 'X', '_', 'G', 'L', '_', 'M', 'I', 'N', '_', 'R', 'E', 'D', 0,
    'D', 'o', 'G', 'e', 't', 'B', 'e', 's', 't', 'S', 'i', 'z', 'e', 0,
    'D', 'o', 'G', 'e', 't', 'P', 'o', 's', 'i', 't', 'i', 'o', 'n', 0,
    'i', 'n', 'i', 't', 'i', 'a', 'l', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'm', 's', 'g', 'I', 'd', 'L', 'a', 'n', 'g', 'u', 'a', 'g', 'e', 0,
    'U', 'S', 'E', '_', 'G', 'L', 'C', 'A', 'N', 'V', 'A', 'S', 0,
    'W', 'X', '_', 'G', 'L', '_', 'S', 'T', 'E', 'R', 'E', 'O', 0,
    'D', 'o', 'M', 'o', 'v', 'e', 'W', 'i', 'n', 'd', 'o', 'w', 0,
    'S', 'e', 't', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', 0,
    'G', 'e', 't', 'V', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', 0,
    'A', 'c', 'c', 'e', 'p', 't', 's', 'F', 'o', 'c', 'u', 's', 0,
    'P', 'r', 'o', 'c', 'e', 's', 's', 'E', 'v', 'e', 'n', 't', 0,
    's', 'i', 'z', 'e', 'I', 'n', 'P', 'i', 'x', 'e', 'l', 's', 0,
    'c', 'i', 'r', 'c', 'l', 'e', 'C', 'e', 'n', 't', 'e', 'r', 0,
    'm', 's', 'g', 'I', 'd', 'C', 'h', 'a', 'r', 's', 'e', 't', 0,
    'b', 'L', 'o', 'a', 'd', 'D', 'e', 'f', 'a', 'u', 'l', 't', 0,
    'w', 'x', '.', '_', 'g', 'l', 'c', 'a', 'n', 'v', 'a', 's', 0,
    'S', 'w', 'a', 'p', 'B', 'u', 'f', 'f', 'e', 'r', 's', 0,
    'w', 'x', 'G', 'L', 'C', 'o', 'n', 't', 'e', 'x', 't', 0,
    'W', 'X', '_', 'G', 'L', '_', 'L', 'E', 'V', 'E', 'L', 0,
    'b', 'm', 'p', 'D', 'i', 's', 'a', 'b', 'l', 'e', 'd', 0,
    'S', 'e', 't', 'C', 'a', 'n', 'F', 'o', 'c', 'u', 's', 0,
    'R', 'e', 'm', 'o', 'v', 'e', 'C', 'h', 'i', 'l', 'd', 0,
    'e', 'x', 'c', 'l', 'u', 'd', 'e', 'I', 't', 'e', 'm', 0,
    'a', 'u', 't', 'o', 'P', 'a', 'i', 'n', 't', 'D', 'C', 0,
    't', 'r', 'a', 'n', 's', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'o', 'r', 'i', 'g', 'S', 't', 'r', 'i', 'n', 'g', '2', 0,
    'a', 't', 't', 'r', 'i', 'b', 'L', 'i', 's', 't', 0,
    'w', 'x', 'G', 'L', 'C', 'a', 'n', 'v', 'a', 's', 0,
    'S', 'e', 't', 'C', 'u', 'r', 'r', 'e', 'n', 't', 0,
    'W', 'X', '_', 'G', 'L', '_', 'R', 'G', 'B', 'A', 0,
    'i', 'm', 'a', 'g', 'e', 'I', 'n', 'd', 'e', 'x', 0,
    'w', 'i', 'd', 't', 'h', 'T', 'i', 't', 'l', 'e', 0,
    'c', 'l', 'i', 'e', 'n', 't', 'D', 'a', 't', 'a', 0,
    'h', 'e', 'l', 'p', 'S', 't', 'r', 'i', 'n', 'g', 0,
    'I', 'n', 'i', 't', 'D', 'i', 'a', 'l', 'o', 'g', 0,
    'p', 'r', 'o', 'p', 'o', 'r', 't', 'i', 'o', 'n', 0,
    'm', 'a', 's', 'k', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    's', 't', 'a', 'r', 't', 'A', 'n', 'g', 'l', 'e', 0,
    'm', 'e', 't', 'a', 'F', 'i', 'l', 'e', 'D', 'C', 0,
    'd', 'e', 's', 't', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    'i', 'n', 'd', 'e', 'x', 'A', 'c', 'c', 'e', 'l', 0,
    'n', 'a', 't', 'i', 'v', 'e', 'I', 'n', 'f', 'o', 0,
    'n', 'e', 'w', '_', 'h', 'e', 'i', 'g', 'h', 't', 0,
    'b', 'i', 'n', 'a', 'r', 'y', 'd', 'a', 't', 'a', 0,
    's', 't', 'r', 'e', 'a', 'm', '_', 'o', 'u', 't', 0,
    'b', 'r', 'i', 'g', 'h', 't', 'n', 'e', 's', 's', 0,
    'o', 'r', 'i', 'g', 'S', 't', 'r', 'i', 'n', 'g', 0,
    's', 'e', 'c', 't', 'i', 'o', 'n', 'N', 'o', 0,
    's', 'h', 'o', 'r', 't', 'H', 'e', 'l', 'p', 0,
    'c', 'o', 'm', 'p', 'l', 'e', 't', 'e', 'r', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 'M', 'a', 'x', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 'M', 'i', 'n', 0,
    'D', 'o', 'S', 'e', 't', 'S', 'i', 'z', 'e', 0,
    'D', 'o', 'G', 'e', 't', 'S', 'i', 'z', 'e', 0,
    'v', 'a', 'l', 'i', 'd', 'a', 't', 'o', 'r', 0,
    's', 'i', 'z', 'e', 'F', 'l', 'a', 'g', 's', 0,
    'r', 'e', 'c', 'u', 'r', 's', 'i', 'v', 'e', 0,
    'T', 'r', 'y', 'B', 'e', 'f', 'o', 'r', 'e', 0,
    'p', 'r', 'i', 'n', 't', 'e', 'r', 'D', 'C', 0,
    'a', 'l', 'i', 'g', 'n', 'm', 'e', 'n', 't', 0,
    'f', 'i', 'l', 'l', 'S', 't', 'y', 'l', 'e', 0,
    't', 'o', 'l', 'e', 'r', 'a', 'n', 'c', 'e', 0,
    'f', 'a', 'c', 'e', 'n', 'a', 'm', 'e', 's', 0,
    'u', 'n', 'd', 'e', 'r', 'l', 'i', 'n', 'e', 0,
    'p', 'i', 'x', 'e', 'l', 'S', 'i', 'z', 'e', 0,
    'p', 'o', 'i', 'n', 't', 'S', 'i', 'z', 'e', 0,
    'i', 'm', 'a', 'g', 'e', 'T', 'y', 'p', 'e', 0,
    'e', 'x', 't', 'e', 'n', 's', 'i', 'o', 'n', 0,
    'n', 'e', 'w', '_', 'w', 'i', 'd', 't', 'h', 0,
    't', 'h', 'r', 'e', 's', 'h', 'o', 'l', 'd', 0,
    'c', 'l', 'o', 'c', 'k', 'w', 'i', 's', 'e', 0,
    's', 't', 'r', 'e', 'a', 'm', '_', 'i', 'n', 0,
    'd', 'i', 'r', 'e', 'c', 't', 'i', 'o', 'n', 0,
    'S', 'e', 't', 'C', 'o', 'l', 'o', 'u', 'r', 0,
    's', 'h', 'o', 'r', 't', 'N', 'a', 'm', 'e', 0,
    's', 'e', 'l', 'I', 'm', 'a', 'g', 'e', 0,
    'l', 'o', 'n', 'g', 'H', 'e', 'l', 'p', 0,
    'm', 'e', 'n', 'u', 'I', 't', 'e', 'm', 0,
    'D', 'o', 'F', 'r', 'e', 'e', 'z', 'e', 0,
    'D', 'o', 'E', 'n', 'a', 'b', 'l', 'e', 0,
    'V', 'a', 'l', 'i', 'd', 'a', 't', 'e', 0,
    'c', 'a', 'n', 'F', 'o', 'c', 'u', 's', 0,
    'A', 'd', 'd', 'C', 'h', 'i', 'l', 'd', 0,
    'u', 's', 'e', 'r', 'D', 'a', 't', 'a', 0,
    'T', 'r', 'y', 'A', 'f', 't', 'e', 'r', 0,
    'e', 'n', 'd', 'A', 'n', 'g', 'l', 'e', 0,
    'm', 'e', 'm', 'o', 'r', 'y', 'D', 'C', 0,
    'w', 'i', 'n', 'd', 'o', 'w', 'D', 'C', 0,
    'f', 'a', 'c', 'e', 'n', 'a', 'm', 'e', 0,
    'e', 'n', 'c', 'o', 'd', 'i', 'n', 'g', 0,
    'f', 'a', 'c', 'e', 'N', 'a', 'm', 'e', 0,
    't', 'e', 'x', 't', 'd', 'a', 't', 'a', 0,
    'm', 'i', 'm', 'e', 't', 'y', 'p', 'e', 0,
    'l', 'o', 'c', 'a', 't', 'i', 'o', 'n', 0,
    'w', 'e', 'i', 'g', 'h', 't', '_', 'b', 0,
    'w', 'e', 'i', 'g', 'h', 't', '_', 'g', 0,
    'w', 'e', 'i', 'g', 'h', 't', '_', 'r', 0,
    'f', 'i', 'l', 'e', 'n', 'a', 'm', 'e', 0,
    'h', 'o', 't', 's', 'p', 'o', 't', 0,
    'c', 'a', 'p', 't', 'i', 'o', 'n', 0,
    'c', 'o', 'l', 'n', 'a', 'm', 'e', 0,
    'h', 'e', 'a', 'd', 'i', 'n', 'g', 0,
    'c', 'o', 'n', 't', 'r', 'o', 'l', 0,
    'i', 'm', 'a', 'g', 'e', 'I', 'd', 0,
    'c', 'h', 'o', 'i', 'c', 'e', 's', 0,
    'u', 'n', 'i', 't', 'M', 'a', 'x', 0,
    'u', 'n', 'i', 't', 'M', 'i', 'n', 0,
    's', 'u', 'b', 'm', 'e', 'n', 'u', 0,
    's', 'u', 'b', 'M', 'e', 'n', 'u', 0,
    'v', 'a', 'r', 'i', 'a', 'n', 't', 0,
    'i', 'n', 'c', 'S', 'i', 'z', 'e', 0,
    'm', 'a', 'x', 'S', 'i', 'z', 'e', 0,
    'm', 'i', 'n', 'S', 'i', 'z', 'e', 0,
    'n', 'e', 'w', 'i', 't', 'e', 'm', 0,
    'o', 'v', 'e', 'r', 'l', 'a', 'y', 0,
    'c', 'o', 'n', 't', 'e', 'x', 't', 0,
    'm', 'e', 's', 's', 'a', 'g', 'e', 0,
    'u', 's', 'e', 'M', 'a', 's', 'k', 0,
    'p', 't', 'S', 't', 'a', 'r', 't', 0,
    'p', 'a', 'l', 'e', 't', 't', 'e', 0,
    'w', 'e', 'e', 'k', 'd', 'a', 'y', 0,
    'D', 'e', 's', 't', 'r', 'o', 'y', 0,
    'c', 'l', 'i', 'e', 'n', 't', 0,
    's', 'e', 'r', 'v', 'e', 'r', 0,
    'd', 'i', 'a', 'l', 'o', 'g', 0,
    't', 'o', 'o', 'l', 'I', 'd', 0,
    'r', 'o', 'w', 'M', 'a', 'x', 0,
    'r', 'o', 'w', 'M', 'i', 'n', 0,
    'D', 'o', 'T', 'h', 'a', 'w', 0,
    'p', 'a', 'r', 'e', 'n', 't', 0,
    'b', 'o', 'r', 'd', 'e', 'r', 0,
    'e', 'n', 'a', 'b', 'l', 'e', 0,
    'w', 'i', 'n', 'd', 'o', 'w', 0,
    'r', 'a', 'd', 'i', 'u', 's', 0,
    'c', 'e', 'n', 't', 'r', 'e', 0,
    'r', 'e', 'g', 'i', 'o', 'n', 0,
    'w', 'e', 'i', 'g', 'h', 't', 0,
    'f', 'a', 'm', 'i', 'l', 'y', 0,
    'b', 'i', 't', 'm', 'a', 'p', 0,
    's', 't', 'r', 'e', 'a', 'm', 0,
    'b', 'u', 'f', 'f', 'e', 'r', 0,
    'i', 'a', 'l', 'p', 'h', 'a', 0,
    'c', 'o', 'l', 'u', 'm', 'n', 0,
    'c', 'o', 'l', 'o', 'u', 'r', 0,
    'b', 'o', 't', 't', 'o', 'm', 0,
    'p', 'l', 'u', 'r', 'a', 'l', 0,
    's', 't', 'r', 'i', 'n', 'g', 0,
    'd', 'o', 'm', 'a', 'i', 'n', 0,
    'l', 'o', 'c', 'a', 'l', 'e', 0,
    'f', 'o', 'r', 'm', 'a', 't', 0,
    'p', 'o', 'p', 'u', 'p', 0,
    'i', 't', 'e', 'm', 's', 0,
    't', 's', 'i', 'z', 'e', 0,
    'l', 'a', 'b', 'e', 'l', 0,
    'n', 'e', 'w', 's', 'z', 0,
    'o', 'l', 'd', 's', 'z', 0,
    'r', 'a', 't', 'i', 'o', 0,
    's', 'i', 'z', 'e', 'r', 0,
    'e', 'v', 'e', 'n', 't', 0,
    'l', 'e', 'v', 'e', 'l', 0,
    'c', 'h', 'i', 'l', 'd', 0,
    's', 't', 'o', 'p', 's', 0,
    'p', 'o', 'i', 'n', 't', 0,
    's', 't', 'a', 'r', 't', 0,
    'p', 't', 'E', 'n', 'd', 0,
    'b', 'r', 'u', 's', 'h', 0,
    's', 't', 'y', 'l', 'e', 0,
    'a', 'n', 'g', 'l', 'e', 0,
    'c', 'l', 'e', 'a', 'r', 0,
    'i', 'm', 'a', 'g', 'e', 0,
    'g', 'r', 'e', 'e', 'n', 0,
    'd', 'e', 'n', 'u', 'm', 0,
    'r', 'i', 'g', 'h', 't', 0,
    'i', 'n', 'd', 'e', 'x', 0,
    'd', 'e', 'p', 't', 'h', 0,
    'c', 'o', 'u', 'n', 't', 0,
    'f', 'l', 'a', 'g', 's', 0,
    'm', 'o', 'n', 't', 'h', 0,
    'o', 't', 'h', 'e', 'r', 0,
    'v', 'a', 'l', 'u', 'e', 0,
    't', 'o', 'o', 'l', 0,
    'f', 'r', 'o', 'm', 0,
    'u', 'n', 'i', 't', 0,
    'h', 'e', 'l', 'p', 0,
    'k', 'i', 'n', 'd', 0,
    'i', 'n', 'c', 'H', 0,
    'i', 'n', 'c', 'W', 0,
    'm', 'a', 'x', 'H', 0,
    'm', 'a', 'x', 'W', 0,
    'm', 'i', 'n', 'H', 0,
    'm', 'i', 'n', 'W', 0,
    's', 'p', 'a', 'n', 0,
    's', 'h', 'o', 'w', 0,
    'b', 'a', 's', 'e', 0,
    'f', 'o', 'n', 't', 0,
    'i', 'c', 'o', 'n', 0,
    'f', 'i', 'l', 'e', 0,
    'p', 'a', 't', 'h', 0,
    'b', 'l', 'u', 'e', 0,
    'd', 'e', 's', 't', 0,
    's', 'r', 'c', '2', 0,
    's', 'r', 'c', '1', 0,
    'l', 'e', 'f', 't', 0,
    'r', 'e', 'c', 't', 0,
    'f', 'l', 'a', 'g', 0,
    'l', 'a', 'n', 'g', 0,
    't', 'i', 'm', 'e', 0,
    'd', 'i', 'f', 'f', 0,
    'y', 'e', 'a', 'r', 0,
    'i', 'n', 'f', 'o', 0,
    'i', 'd', 'x', 0,
    't', 'i', 'p', 0,
    'l', 'e', 'n', 0,
    'b', 'u', 'f', 0,
    'm', 's', 'g', 0,
    'p', 't', '2', 0,
    'p', 't', '1', 0,
    'p', 'e', 'n', 0,
    'b', 'm', 'p', 0,
    'R', 'G', 'B', 0,
    'r', 'e', 'd', 0,
    'c', 'o', 'l', 0,
    'r', 'o', 'w', 0,
    't', 'o', 'p', 0,
    'p', 'o', 's', 0,
    'w', 'i', 'n', 0,
    's', 't', 'r', 0,
    't', 'o', 0,
    'y', 'o', 0,
    'x', 'o', 0,
    'd', 'c', 0,
    'y', '3', 0,
    'x', '3', 0,
    'y', '2', 0,
    'x', '2', 0,
    'y', '1', 0,
    'x', '1', 0,
    'e', 'a', 0,
    's', 'a', 0,
    'y', 'c', 0,
    'x', 'c', 0,
    'm', 'b', 0,
    'm', 'g', 0,
    'm', 'r', 0,
    'd', 'y', 0,
    'p', 't', 0,
    'i', 'd', 0,
    'd', 't', 0,
};

void sipVH__glcanvas_18(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxWindowBase*child)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", child, sipType_wxWindowBase, NULL);
}

bool sipVH__glcanvas_17(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxEvent& event)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D", &event, sipType_wxEvent, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

bool sipVH__glcanvas_16(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int direction,int size,int availableOtherDir)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "iii", direction, size, availableOtherDir);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::wxPoint sipVH__glcanvas_15(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxPoint sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxPoint, &sipRes);

    return sipRes;
}

 ::wxValidator* sipVH__glcanvas_14(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxValidator* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_wxValidator, &sipRes);

    return sipRes;
}

void sipVH__glcanvas_13(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxValidator& validator)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "D", const_cast< ::wxValidator *>(&validator), sipType_wxValidator, NULL);
}

bool sipVH__glcanvas_12(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}

 ::wxWindow* sipVH__glcanvas_11(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxWindow* sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H0", sipType_wxWindow, &sipRes);

    return sipRes;
}

void sipVH__glcanvas_10(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, bool enable)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "b", enable);
}

void sipVH__glcanvas_9(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int*width,int*height)
{
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "(ii)", width, height);
}

void sipVH__glcanvas_8(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int x,int y,int width,int height,int sizeFlags)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "iiiii", x, y, width, height, sizeFlags);
}

void sipVH__glcanvas_7(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int width,int height)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "ii", width, height);
}

void sipVH__glcanvas_6(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "iiiiii", minW, minH, maxW, maxH, incW, incH);
}

void sipVH__glcanvas_5(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, int x,int y,int width,int height)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "iiii", x, y, width, height);
}

void sipVH__glcanvas_4(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod,  ::wxWindowVariant variant)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "F", variant, sipType_wxWindowVariant);
}

 ::wxBorder sipVH__glcanvas_3(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxBorder sipRes = ::wxBORDER_DEFAULT;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "F", sipType_wxBorder, &sipRes);

    return sipRes;
}

void sipVH__glcanvas_2(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
    sipCallProcedureMethod(sipGILState, sipErrorHandler, sipPySelf, sipMethod, "");
}

 ::wxSize sipVH__glcanvas_1(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod)
{
     ::wxSize sipRes;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "");

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "H5", sipType_wxSize, &sipRes);

    return sipRes;
}

bool sipVH__glcanvas_0(sip_gilstate_t sipGILState, sipVirtErrorHandlerFunc sipErrorHandler, sipSimpleWrapper *sipPySelf, PyObject *sipMethod, const  ::wxGLCanvas& win)
{
    bool sipRes = 0;
    PyObject *sipResObj = sipCallMethod(0, sipMethod, "D", const_cast< ::wxGLCanvas *>(&win), sipType_wxGLCanvas, NULL);

    sipParseResultEx(sipGILState, sipErrorHandler, sipPySelf, sipMethod, sipResObj, "b", &sipRes);

    return sipRes;
}


/*
 * This defines each type in this module.
 */
sipTypeDef *sipExportedTypes__glcanvas[] = {
    &sipTypeDef__glcanvas_wxGLCanvas.ctd_base,
    &sipTypeDef__glcanvas_wxGLContext.ctd_base,
};


/* This defines the types that this module needs to import from _core. */
sipImportedTypeDef sipImportedTypes__glcanvas__core[] = {
    {"wxArrayInt"},
    {"wxBorder"},
    {"wxEvent"},
    {"wxEvtHandler"},
    {"wxObject"},
    {"wxPalette"},
    {"wxPoint"},
    {"wxSize"},
    {"wxString"},
    {"wxTrackable"},
    {"wxValidator"},
    {"wxVisualAttributes"},
    {"wxWindow"},
    {"wxWindowBase"},
    {"wxWindowVariant"},
    {NULL}
};


/* This defines the modules that this module needs to import. */
static sipImportedModuleDef importsTable[] = {
    {"wx._core", sipImportedTypes__glcanvas__core, NULL, NULL},
    {NULL, NULL, NULL, NULL}
};


/* Define the ints to be added to this module dictionary. */
static sipIntInstanceDef intInstances[] = {
    {sipName_USE_GLCANVAS, wxUSE_GLCANVAS},
    {sipName_WX_GL_RGBA, WX_GL_RGBA},
    {sipName_WX_GL_BUFFER_SIZE, WX_GL_BUFFER_SIZE},
    {sipName_WX_GL_LEVEL, WX_GL_LEVEL},
    {sipName_WX_GL_DOUBLEBUFFER, WX_GL_DOUBLEBUFFER},
    {sipName_WX_GL_STEREO, WX_GL_STEREO},
    {sipName_WX_GL_AUX_BUFFERS, WX_GL_AUX_BUFFERS},
    {sipName_WX_GL_MIN_RED, WX_GL_MIN_RED},
    {sipName_WX_GL_MIN_GREEN, WX_GL_MIN_GREEN},
    {sipName_WX_GL_MIN_BLUE, WX_GL_MIN_BLUE},
    {sipName_WX_GL_MIN_ALPHA, WX_GL_MIN_ALPHA},
    {sipName_WX_GL_DEPTH_SIZE, WX_GL_DEPTH_SIZE},
    {sipName_WX_GL_STENCIL_SIZE, WX_GL_STENCIL_SIZE},
    {sipName_WX_GL_MIN_ACCUM_RED, WX_GL_MIN_ACCUM_RED},
    {sipName_WX_GL_MIN_ACCUM_GREEN, WX_GL_MIN_ACCUM_GREEN},
    {sipName_WX_GL_MIN_ACCUM_BLUE, WX_GL_MIN_ACCUM_BLUE},
    {sipName_WX_GL_MIN_ACCUM_ALPHA, WX_GL_MIN_ACCUM_ALPHA},
    {sipName_WX_GL_SAMPLE_BUFFERS, WX_GL_SAMPLE_BUFFERS},
    {sipName_WX_GL_SAMPLES, WX_GL_SAMPLES},
    {sipName_WX_GL_CORE_PROFILE, WX_GL_CORE_PROFILE},
    {sipName_WX_GL_MAJOR_VERSION, WX_GL_MAJOR_VERSION},
    {sipName_WX_GL_MINOR_VERSION, WX_GL_MINOR_VERSION},
    {0, 0}
};


/* This defines this module. */
sipExportedModuleDef sipModuleAPI__glcanvas = {
    0,
    SIP_API_MINOR_NR,
    sipNameNr_wx__glcanvas,
    0,
    sipStrings__glcanvas,
    importsTable,
    NULL,
    2,
    sipExportedTypes__glcanvas,
    NULL,
    0,
    NULL,
    0,
    NULL,
    NULL,
    NULL,
    {NULL, NULL, NULL, NULL, intInstances, NULL, NULL, NULL, NULL, NULL},
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL,
    NULL
};


/* The SIP API and the APIs of any imported modules. */
const sipAPIDef *sipAPI__glcanvas;


/* The Python module initialisation function. */
#if PY_MAJOR_VERSION >= 3
#define SIP_MODULE_ENTRY        PyInit__glcanvas
#define SIP_MODULE_TYPE         PyObject *
#define SIP_MODULE_DISCARD(r)   Py_DECREF(r)
#define SIP_MODULE_RETURN(r)    return (r)
#else
#define SIP_MODULE_ENTRY        init_glcanvas
#define SIP_MODULE_TYPE         void
#define SIP_MODULE_DISCARD(r)
#define SIP_MODULE_RETURN(r)    return
#endif

#if defined(SIP_STATIC_MODULE)
extern "C" SIP_MODULE_TYPE SIP_MODULE_ENTRY()
#else
PyMODINIT_FUNC SIP_MODULE_ENTRY()
#endif
{
    static PyMethodDef sip_methods[] = {
        {0, 0, 0, 0}
    };

#if PY_MAJOR_VERSION >= 3
    static PyModuleDef sip_module_def = {
        PyModuleDef_HEAD_INIT,
        "wx._glcanvas",
        NULL,
        -1,
        sip_methods,
        NULL,
        NULL,
        NULL,
        NULL
    };
#endif

    PyObject *sipModule, *sipModuleDict;
    PyObject *sip_sipmod, *sip_capiobj;

    /* Initialise the module and get it's dictionary. */
#if PY_MAJOR_VERSION >= 3
    sipModule = PyModule_Create(&sip_module_def);
#elif PY_VERSION_HEX >= 0x02050000
    sipModule = Py_InitModule(sipName_wx__glcanvas, sip_methods);
#else
    sipModule = Py_InitModule(const_cast<char *>(sipName_wx__glcanvas), sip_methods);
#endif

    if (sipModule == NULL)
        SIP_MODULE_RETURN(NULL);

    sipModuleDict = PyModule_GetDict(sipModule);

    /* Get the SIP module's API. */
#if PY_VERSION_HEX >= 0x02050000
    sip_sipmod = PyImport_ImportModule("wx.siplib");
#else
    sip_sipmod = PyImport_ImportModule(const_cast<char *>("wx.siplib"));
#endif

    if (sip_sipmod == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

    sip_capiobj = PyDict_GetItemString(PyModule_GetDict(sip_sipmod), "_C_API");
    Py_DECREF(sip_sipmod);

#if defined(SIP_USE_PYCAPSULE)
    if (sip_capiobj == NULL || !PyCapsule_CheckExact(sip_capiobj))
#else
    if (sip_capiobj == NULL || !PyCObject_Check(sip_capiobj))
#endif
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }

#if defined(SIP_USE_PYCAPSULE)
    sipAPI__glcanvas = reinterpret_cast<const sipAPIDef *>(PyCapsule_GetPointer(sip_capiobj, "wx.siplib._C_API"));
#else
    sipAPI__glcanvas = reinterpret_cast<const sipAPIDef *>(PyCObject_AsVoidPtr(sip_capiobj));
#endif

#if defined(SIP_USE_PYCAPSULE)
    if (sipAPI__glcanvas == NULL)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(NULL);
    }
#endif

    /* Export the module and publish it's API. */
    if (sipExportModule(&sipModuleAPI__glcanvas,SIP_API_MAJOR_NR,SIP_API_MINOR_NR,0) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }
    /* Initialise the module now all its dependencies have been set up. */
    if (sipInitModule(&sipModuleAPI__glcanvas,sipModuleDict) < 0)
    {
        SIP_MODULE_DISCARD(sipModule);
        SIP_MODULE_RETURN(0);
    }

    SIP_MODULE_RETURN(sipModule);
}
