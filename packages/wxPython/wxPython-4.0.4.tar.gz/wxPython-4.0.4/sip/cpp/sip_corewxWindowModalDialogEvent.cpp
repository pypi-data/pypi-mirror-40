/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/dialog.h>

        #include <wx/event.h>
        #include <wx/dialog.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxWindowModalDialogEvent : public  ::wxWindowModalDialogEvent
{
public:
    sipwxWindowModalDialogEvent( ::wxEventType,int);
    sipwxWindowModalDialogEvent(const  ::wxWindowModalDialogEvent&);
    virtual ~sipwxWindowModalDialogEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxEventCategory GetEventCategory() const;
     ::wxEvent* Clone() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxWindowModalDialogEvent(const sipwxWindowModalDialogEvent &);
    sipwxWindowModalDialogEvent &operator = (const sipwxWindowModalDialogEvent &);

    char sipPyMethods[2];
};

sipwxWindowModalDialogEvent::sipwxWindowModalDialogEvent( ::wxEventType commandType,int id):  ::wxWindowModalDialogEvent(commandType,id), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxWindowModalDialogEvent::sipwxWindowModalDialogEvent(const  ::wxWindowModalDialogEvent& a0):  ::wxWindowModalDialogEvent(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxWindowModalDialogEvent::~sipwxWindowModalDialogEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxEventCategory sipwxWindowModalDialogEvent::GetEventCategory() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_GetEventCategory);

    if (!sipMeth)
        return  ::wxWindowModalDialogEvent::GetEventCategory();

    extern  ::wxEventCategory sipVH__core_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_96(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxEvent* sipwxWindowModalDialogEvent::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_Clone);

    if (!sipMeth)
        return  ::wxWindowModalDialogEvent::Clone();

    extern  ::wxEvent* sipVH__core_95(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_95(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxWindowModalDialogEvent_GetDialog, "GetDialog() -> Dialog\n"
"\n"
"Return the corresponding dialog.");

extern "C" {static PyObject *meth_wxWindowModalDialogEvent_GetDialog(PyObject *, PyObject *);}
static PyObject *meth_wxWindowModalDialogEvent_GetDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxWindowModalDialogEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWindowModalDialogEvent, &sipCpp))
        {
             ::wxDialog*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetDialog();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDialog,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WindowModalDialogEvent, sipName_GetDialog, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxWindowModalDialogEvent_GetReturnCode, "GetReturnCode() -> int\n"
"\n"
"Return the dialog's return code.");

extern "C" {static PyObject *meth_wxWindowModalDialogEvent_GetReturnCode(PyObject *, PyObject *);}
static PyObject *meth_wxWindowModalDialogEvent_GetReturnCode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxWindowModalDialogEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWindowModalDialogEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetReturnCode();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WindowModalDialogEvent, sipName_GetReturnCode, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxWindowModalDialogEvent_Clone, "Clone() -> Event\n"
"\n"
"Clone the event.");

extern "C" {static PyObject *meth_wxWindowModalDialogEvent_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxWindowModalDialogEvent_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxWindowModalDialogEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxWindowModalDialogEvent, &sipCpp))
        {
             ::wxEvent*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxWindowModalDialogEvent::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxEvent,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WindowModalDialogEvent, sipName_Clone, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxWindowModalDialogEvent(void *, const sipTypeDef *);}
static void *cast_wxWindowModalDialogEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxWindowModalDialogEvent *sipCpp = reinterpret_cast< ::wxWindowModalDialogEvent *>(sipCppV);

    if (targetType == sipType_wxCommandEvent)
        return static_cast< ::wxCommandEvent *>(sipCpp);

    if (targetType == sipType_wxEvent)
        return static_cast< ::wxEvent *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxWindowModalDialogEvent(void *, int);}
static void release_wxWindowModalDialogEvent(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxWindowModalDialogEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::wxWindowModalDialogEvent *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxWindowModalDialogEvent(sipSimpleWrapper *);}
static void dealloc_wxWindowModalDialogEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxWindowModalDialogEvent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxWindowModalDialogEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxWindowModalDialogEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxWindowModalDialogEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxWindowModalDialogEvent *sipCpp = 0;

    {
         ::wxEventType commandType = wxEVT_NULL;
        int id = 0;

        static const char *sipKwdList[] = {
            sipName_commandType,
            sipName_id,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|ii", &commandType, &id))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxWindowModalDialogEvent(commandType,id);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxWindowModalDialogEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxWindowModalDialogEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxWindowModalDialogEvent(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxWindowModalDialogEvent[] = {{78, 255, 1}};


static PyMethodDef methods_wxWindowModalDialogEvent[] = {
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxWindowModalDialogEvent_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxWindowModalDialogEvent_Clone)},
    {SIP_MLNAME_CAST(sipName_GetDialog), meth_wxWindowModalDialogEvent_GetDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxWindowModalDialogEvent_GetDialog)},
    {SIP_MLNAME_CAST(sipName_GetReturnCode), meth_wxWindowModalDialogEvent_GetReturnCode, METH_VARARGS, SIP_MLDOC_CAST(doc_wxWindowModalDialogEvent_GetReturnCode)}
};

sipVariableDef variables_wxWindowModalDialogEvent[] = {
    {PropertyVariable, sipName_ReturnCode, &methods_wxWindowModalDialogEvent[2], NULL, NULL, NULL},
    {PropertyVariable, sipName_Dialog, &methods_wxWindowModalDialogEvent[1], NULL, NULL, NULL},
};

PyDoc_STRVAR(doc_wxWindowModalDialogEvent, "WindowModalDialogEvent(commandType=wxEVT_NULL, id=0)\n"
"\n"
"Event sent by wxDialog::ShowWindowModal() when the dialog closes.");


sipClassTypeDef sipTypeDef__core_wxWindowModalDialogEvent = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxWindowModalDialogEvent,
        {0},
        0
    },
    {
        sipNameNr_WindowModalDialogEvent,
        {0, 0, 1},
        3, methods_wxWindowModalDialogEvent,
        0, 0,
        2, variables_wxWindowModalDialogEvent,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxWindowModalDialogEvent,
    -1,
    -1,
    supers_wxWindowModalDialogEvent,
    0,
    init_type_wxWindowModalDialogEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxWindowModalDialogEvent,
    0,
    0,
    0,
    release_wxWindowModalDialogEvent,
    cast_wxWindowModalDialogEvent,
    0,
    0,
    0,
    0,
    0,
    0
};
