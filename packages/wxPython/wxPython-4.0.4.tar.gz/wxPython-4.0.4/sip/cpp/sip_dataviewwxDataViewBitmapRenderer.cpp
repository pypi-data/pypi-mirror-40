/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_dataview.h"

        #include <wx/dataview.h>

        #include <wx/dataview.h>
        #include <wx/window.h>
        #include <wx/dataview.h>
        #include <wx/gdicmn.h>
        #include <wx/dataview.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxDataViewBitmapRenderer : public  ::wxDataViewBitmapRenderer
{
public:
    sipwxDataViewBitmapRenderer(const  ::wxString&, ::wxDataViewCellMode,int);
    virtual ~sipwxDataViewBitmapRenderer();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::wxDataViewCtrl* sipProtect_GetView() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int GetAlignment() const;
     ::wxDataViewCellMode GetMode() const;
    bool GetValue( ::wxVariant&) const;
    void SetAlignment(int);
    bool SetValue(const  ::wxVariant&);
    bool Validate( ::wxDVCVariant&);
    bool HasEditorCtrl() const;
     ::wxWindow* CreateEditorCtrl( ::wxWindow*, ::wxRect,const  ::wxVariant&);
    bool GetValueFromEditorCtrl( ::wxWindow*, ::wxVariant&);
    bool StartEditing(const  ::wxDataViewItem&, ::wxRect);
    void CancelEditing();
    bool FinishEditing();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxDataViewBitmapRenderer(const sipwxDataViewBitmapRenderer &);
    sipwxDataViewBitmapRenderer &operator = (const sipwxDataViewBitmapRenderer &);

    char sipPyMethods[12];
};

sipwxDataViewBitmapRenderer::sipwxDataViewBitmapRenderer(const  ::wxString& varianttype, ::wxDataViewCellMode mode,int align):  ::wxDataViewBitmapRenderer(varianttype,mode,align), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxDataViewBitmapRenderer::~sipwxDataViewBitmapRenderer()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

int sipwxDataViewBitmapRenderer::GetAlignment() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_GetAlignment);

    if (!sipMeth)
        return  ::wxDataViewBitmapRenderer::GetAlignment();

    extern int sipVH__dataview_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_20(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxDataViewCellMode sipwxDataViewBitmapRenderer::GetMode() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_GetMode);

    if (!sipMeth)
        return  ::wxDataViewBitmapRenderer::GetMode();

    extern  ::wxDataViewCellMode sipVH__dataview_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_21(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewBitmapRenderer::GetValue( ::wxVariant& value) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_GetValue);

    if (!sipMeth)
        return  ::wxDataViewBitmapRenderer::GetValue(value);

    extern bool sipVH__dataview_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxVariant&);

    return sipVH__dataview_22(sipGILState, 0, sipPySelf, sipMeth, value);
}

void sipwxDataViewBitmapRenderer::SetAlignment(int align)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_SetAlignment);

    if (!sipMeth)
    {
         ::wxDataViewBitmapRenderer::SetAlignment(align);
        return;
    }

    extern void sipVH__dataview_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__dataview_23(sipGILState, 0, sipPySelf, sipMeth, align);
}

bool sipwxDataViewBitmapRenderer::SetValue(const  ::wxVariant& value)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_SetValue);

    if (!sipMeth)
        return  ::wxDataViewBitmapRenderer::SetValue(value);

    extern bool sipVH__dataview_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxVariant&);

    return sipVH__dataview_24(sipGILState, 0, sipPySelf, sipMeth, value);
}

bool sipwxDataViewBitmapRenderer::Validate( ::wxDVCVariant& value)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_Validate);

    if (!sipMeth)
        return  ::wxDataViewBitmapRenderer::Validate(value);

    extern bool sipVH__dataview_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDVCVariant&);

    return sipVH__dataview_25(sipGILState, 0, sipPySelf, sipMeth, value);
}

bool sipwxDataViewBitmapRenderer::HasEditorCtrl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_HasEditorCtrl);

    if (!sipMeth)
        return  ::wxDataViewBitmapRenderer::HasEditorCtrl();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxWindow* sipwxDataViewBitmapRenderer::CreateEditorCtrl( ::wxWindow*parent, ::wxRect labelRect,const  ::wxVariant& value)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_CreateEditorCtrl);

    if (!sipMeth)
        return  ::wxDataViewBitmapRenderer::CreateEditorCtrl(parent,labelRect,value);

    extern  ::wxWindow* sipVH__dataview_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindow*, ::wxRect,const  ::wxVariant&);

    return sipVH__dataview_26(sipGILState, 0, sipPySelf, sipMeth, parent, labelRect, value);
}

bool sipwxDataViewBitmapRenderer::GetValueFromEditorCtrl( ::wxWindow*editor, ::wxVariant& value)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_GetValueFromEditorCtrl);

    if (!sipMeth)
        return  ::wxDataViewBitmapRenderer::GetValueFromEditorCtrl(editor,value);

    extern bool sipVH__dataview_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindow*, ::wxVariant&);

    return sipVH__dataview_27(sipGILState, 0, sipPySelf, sipMeth, editor, value);
}

bool sipwxDataViewBitmapRenderer::StartEditing(const  ::wxDataViewItem& item, ::wxRect labelRect)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_StartEditing);

    if (!sipMeth)
        return  ::wxDataViewBitmapRenderer::StartEditing(item,labelRect);

    extern bool sipVH__dataview_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&, ::wxRect);

    return sipVH__dataview_28(sipGILState, 0, sipPySelf, sipMeth, item, labelRect);
}

void sipwxDataViewBitmapRenderer::CancelEditing()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_CancelEditing);

    if (!sipMeth)
    {
         ::wxDataViewBitmapRenderer::CancelEditing();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewBitmapRenderer::FinishEditing()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_FinishEditing);

    if (!sipMeth)
        return  ::wxDataViewBitmapRenderer::FinishEditing();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxDataViewCtrl* sipwxDataViewBitmapRenderer::sipProtect_GetView() const
{
    return  ::wxDataViewRenderer::GetView();
}


PyDoc_STRVAR(doc_wxDataViewBitmapRenderer_GetView, "GetView() -> DataViewCtrl");

extern "C" {static PyObject *meth_wxDataViewBitmapRenderer_GetView(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewBitmapRenderer_GetView(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipwxDataViewBitmapRenderer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewBitmapRenderer, &sipCpp))
        {
             ::wxDataViewCtrl*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_GetView();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewCtrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewBitmapRenderer, sipName_GetView, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewBitmapRenderer_SetValue, "SetValue(self, value: object) -> bool");

extern "C" {static PyObject *meth_wxDataViewBitmapRenderer_SetValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewBitmapRenderer_SetValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDVCVariant* value;
        int valueState = 0;
         ::wxDataViewBitmapRenderer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxDataViewBitmapRenderer, &sipCpp, sipType_wxDVCVariant,&value, &valueState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewBitmapRenderer::SetValue(*value) : sipCpp->SetValue(*value));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxDVCVariant *>(value),sipType_wxDVCVariant,valueState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewBitmapRenderer, sipName_SetValue, doc_wxDataViewBitmapRenderer_SetValue);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewBitmapRenderer_GetValue, "GetValue(self) -> object");

extern "C" {static PyObject *meth_wxDataViewBitmapRenderer_GetValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewBitmapRenderer_GetValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDVCVariant* value;
        const  ::wxDataViewBitmapRenderer *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewBitmapRenderer, &sipCpp))
        {
            value = new  ::wxDVCVariant();

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewBitmapRenderer::GetValue(*value) : sipCpp->GetValue(*value));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(value,sipType_wxDVCVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewBitmapRenderer, sipName_GetValue, doc_wxDataViewBitmapRenderer_GetValue);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxDataViewBitmapRenderer(void *, const sipTypeDef *);}
static void *cast_wxDataViewBitmapRenderer(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxDataViewBitmapRenderer *sipCpp = reinterpret_cast< ::wxDataViewBitmapRenderer *>(sipCppV);

    if (targetType == sipType_wxDataViewRenderer)
        return static_cast< ::wxDataViewRenderer *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxDataViewBitmapRenderer(void *, int);}
static void release_wxDataViewBitmapRenderer(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxDataViewBitmapRenderer *>(sipCppV);
    else
        delete reinterpret_cast< ::wxDataViewBitmapRenderer *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxDataViewBitmapRenderer(sipSimpleWrapper *);}
static void dealloc_wxDataViewBitmapRenderer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxDataViewBitmapRenderer *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxDataViewBitmapRenderer(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxDataViewBitmapRenderer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxDataViewBitmapRenderer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxDataViewBitmapRenderer *sipCpp = 0;

    {
        const  ::wxString& varianttypedef = "wxBitmap";
        const  ::wxString* varianttype = &varianttypedef;
        int varianttypeState = 0;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int align = wxDVR_DEFAULT_ALIGNMENT;

        static const char *sipKwdList[] = {
            sipName_varianttype,
            sipName_mode,
            sipName_align,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1Ei", sipType_wxString,&varianttype, &varianttypeState, sipType_wxDataViewCellMode, &mode, &align))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxDataViewBitmapRenderer(*varianttype,mode,align);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(varianttype),sipType_wxString,varianttypeState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxDataViewBitmapRenderer[] = {{23, 255, 1}};


static PyMethodDef methods_wxDataViewBitmapRenderer[] = {
    {SIP_MLNAME_CAST(sipName_GetValue), (PyCFunction)meth_wxDataViewBitmapRenderer_GetValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewBitmapRenderer_GetValue)},
    {SIP_MLNAME_CAST(sipName_GetView), (PyCFunction)meth_wxDataViewBitmapRenderer_GetView, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_SetValue), (PyCFunction)meth_wxDataViewBitmapRenderer_SetValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewBitmapRenderer_SetValue)}
};

sipVariableDef variables_wxDataViewBitmapRenderer[] = {
    {PropertyVariable, sipName_Value, &methods_wxDataViewBitmapRenderer[0], &methods_wxDataViewBitmapRenderer[2], NULL, NULL},
};

PyDoc_STRVAR(doc_wxDataViewBitmapRenderer, "DataViewBitmapRenderer(varianttype=\"wxBitmap\", mode=DATAVIEW_CELL_INERT, align=DVR_DEFAULT_ALIGNMENT)\n"
"\n"
"This class is used by wxDataViewCtrl to render bitmap controls.");


sipClassTypeDef sipTypeDef__dataview_wxDataViewBitmapRenderer = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxDataViewBitmapRenderer,
        {0},
        0
    },
    {
        sipNameNr_DataViewBitmapRenderer,
        {0, 0, 1},
        3, methods_wxDataViewBitmapRenderer,
        0, 0,
        1, variables_wxDataViewBitmapRenderer,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxDataViewBitmapRenderer,
    -1,
    -1,
    supers_wxDataViewBitmapRenderer,
    0,
    init_type_wxDataViewBitmapRenderer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxDataViewBitmapRenderer,
    0,
    0,
    0,
    release_wxDataViewBitmapRenderer,
    cast_wxDataViewBitmapRenderer,
    0,
    0,
    0,
    0,
    0,
    0
};
