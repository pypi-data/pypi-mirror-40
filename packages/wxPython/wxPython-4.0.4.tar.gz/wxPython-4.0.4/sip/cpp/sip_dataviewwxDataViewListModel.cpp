/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_dataview.h"

        #include <wx/dataview.h>

        #include <wx/dataview.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>


class sipwxDataViewListModel : public  ::wxDataViewListModel
{
public:
    sipwxDataViewListModel();
    virtual ~sipwxDataViewListModel();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool SetValueByRow(const  ::wxDVCVariant&,uint,uint);
    void GetValueByRow( ::wxDVCVariant&,uint,uint) const;
    uint GetRow(const  ::wxDataViewItem&) const;
    uint GetCount() const;
    bool IsEnabledByRow(uint,uint) const;
    bool GetAttrByRow(uint,uint, ::wxDataViewItemAttr&) const;
    bool Cleared();
    int Compare(const  ::wxDataViewItem&,const  ::wxDataViewItem&,uint,bool) const;
    bool GetAttr(const  ::wxDataViewItem&,uint, ::wxDataViewItemAttr&) const;
    bool IsEnabled(const  ::wxDataViewItem&,uint) const;
    uint GetChildren(const  ::wxDataViewItem&, ::wxDataViewItemArray&) const;
    uint GetColumnCount() const;
     ::wxString GetColumnType(uint) const;
     ::wxDataViewItem GetParent(const  ::wxDataViewItem&) const;
    void GetValue( ::wxDVCVariant&,const  ::wxDataViewItem&,uint) const;
    bool HasContainerColumns(const  ::wxDataViewItem&) const;
    bool HasDefaultCompare() const;
    bool IsContainer(const  ::wxDataViewItem&) const;
    void Resort();
    bool SetValue(const  ::wxDVCVariant&,const  ::wxDataViewItem&,uint);
    bool ValueChanged(const  ::wxDataViewItem&,uint);
    bool IsListModel() const;
    bool IsVirtualListModel() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxDataViewListModel(const sipwxDataViewListModel &);
    sipwxDataViewListModel &operator = (const sipwxDataViewListModel &);

    char sipPyMethods[23];
};

sipwxDataViewListModel::sipwxDataViewListModel():  ::wxDataViewListModel(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxDataViewListModel::~sipwxDataViewListModel()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxDataViewListModel::SetValueByRow(const  ::wxDVCVariant& variant,uint row,uint col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_DataViewListModel,sipName_SetValueByRow);

    if (!sipMeth)
        return 0;

    extern bool sipVH__dataview_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDVCVariant&,uint,uint);

    return sipVH__dataview_19(sipGILState, 0, sipPySelf, sipMeth, variant, row, col);
}

void sipwxDataViewListModel::GetValueByRow( ::wxDVCVariant& variant,uint row,uint col) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,sipName_DataViewListModel,sipName_GetValueByRow);

    if (!sipMeth)
        return;

    extern void sipVH__dataview_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDVCVariant&,uint,uint);

    sipVH__dataview_18(sipGILState, 0, sipPySelf, sipMeth, variant, row, col);
}

uint sipwxDataViewListModel::GetRow(const  ::wxDataViewItem& item) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,sipName_DataViewListModel,sipName_GetRow);

    if (!sipMeth)
        return 0;

    extern uint sipVH__dataview_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&);

    return sipVH__dataview_17(sipGILState, 0, sipPySelf, sipMeth, item);
}

uint sipwxDataViewListModel::GetCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,sipName_DataViewListModel,sipName_GetCount);

    if (!sipMeth)
        return 0;

    extern uint sipVH__dataview_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_10(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewListModel::IsEnabledByRow(uint row,uint col) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_IsEnabledByRow);

    if (!sipMeth)
        return  ::wxDataViewListModel::IsEnabledByRow(row,col);

    extern bool sipVH__dataview_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, uint,uint);

    return sipVH__dataview_16(sipGILState, 0, sipPySelf, sipMeth, row, col);
}

bool sipwxDataViewListModel::GetAttrByRow(uint row,uint col, ::wxDataViewItemAttr& attr) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_GetAttrByRow);

    if (!sipMeth)
        return  ::wxDataViewListModel::GetAttrByRow(row,col,attr);

    extern bool sipVH__dataview_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, uint,uint, ::wxDataViewItemAttr&);

    return sipVH__dataview_15(sipGILState, 0, sipPySelf, sipMeth, row, col, attr);
}

bool sipwxDataViewListModel::Cleared()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_Cleared);

    if (!sipMeth)
        return  ::wxDataViewListModel::Cleared();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxDataViewListModel::Compare(const  ::wxDataViewItem& item1,const  ::wxDataViewItem& item2,uint column,bool ascending) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_Compare);

    if (!sipMeth)
        return  ::wxDataViewListModel::Compare(item1,item2,column,ascending);

    extern int sipVH__dataview_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&,const  ::wxDataViewItem&,uint,bool);

    return sipVH__dataview_7(sipGILState, 0, sipPySelf, sipMeth, item1, item2, column, ascending);
}

bool sipwxDataViewListModel::GetAttr(const  ::wxDataViewItem& item,uint col, ::wxDataViewItemAttr& attr) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_GetAttr);

    if (!sipMeth)
        return  ::wxDataViewListModel::GetAttr(item,col,attr);

    extern bool sipVH__dataview_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&,uint, ::wxDataViewItemAttr&);

    return sipVH__dataview_8(sipGILState, 0, sipPySelf, sipMeth, item, col, attr);
}

bool sipwxDataViewListModel::IsEnabled(const  ::wxDataViewItem& item,uint col) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_IsEnabled);

    if (!sipMeth)
        return  ::wxDataViewListModel::IsEnabled(item,col);

    extern bool sipVH__dataview_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&,uint);

    return sipVH__dataview_6(sipGILState, 0, sipPySelf, sipMeth, item, col);
}

uint sipwxDataViewListModel::GetChildren(const  ::wxDataViewItem& item, ::wxDataViewItemArray& children) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,sipName_DataViewListModel,sipName_GetChildren);

    if (!sipMeth)
        return 0;

    extern uint sipVH__dataview_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&, ::wxDataViewItemArray&);

    return sipVH__dataview_9(sipGILState, 0, sipPySelf, sipMeth, item, children);
}

uint sipwxDataViewListModel::GetColumnCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,sipName_DataViewListModel,sipName_GetColumnCount);

    if (!sipMeth)
        return 0;

    extern uint sipVH__dataview_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_10(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxString sipwxDataViewListModel::GetColumnType(uint col) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,sipName_DataViewListModel,sipName_GetColumnType);

    if (!sipMeth)
        return  ::wxString();

    extern  ::wxString sipVH__dataview_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, uint);

    return sipVH__dataview_11(sipGILState, 0, sipPySelf, sipMeth, col);
}

 ::wxDataViewItem sipwxDataViewListModel::GetParent(const  ::wxDataViewItem& item) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_GetParent);

    if (!sipMeth)
        return  ::wxDataViewListModel::GetParent(item);

    extern  ::wxDataViewItem sipVH__dataview_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&);

    return sipVH__dataview_12(sipGILState, 0, sipPySelf, sipMeth, item);
}

void sipwxDataViewListModel::GetValue( ::wxDVCVariant& variant,const  ::wxDataViewItem& item,uint col) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_GetValue);

    if (!sipMeth)
    {
         ::wxDataViewListModel::GetValue(variant,item,col);
        return;
    }

    extern void sipVH__dataview_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDVCVariant&,const  ::wxDataViewItem&,uint);

    sipVH__dataview_13(sipGILState, 0, sipPySelf, sipMeth, variant, item, col);
}

bool sipwxDataViewListModel::HasContainerColumns(const  ::wxDataViewItem& item) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_HasContainerColumns);

    if (!sipMeth)
        return  ::wxDataViewListModel::HasContainerColumns(item);

    extern bool sipVH__dataview_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&);

    return sipVH__dataview_2(sipGILState, 0, sipPySelf, sipMeth, item);
}

bool sipwxDataViewListModel::HasDefaultCompare() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_HasDefaultCompare);

    if (!sipMeth)
        return  ::wxDataViewListModel::HasDefaultCompare();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewListModel::IsContainer(const  ::wxDataViewItem& item) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_IsContainer);

    if (!sipMeth)
        return  ::wxDataViewListModel::IsContainer(item);

    extern bool sipVH__dataview_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&);

    return sipVH__dataview_2(sipGILState, 0, sipPySelf, sipMeth, item);
}

void sipwxDataViewListModel::Resort()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_Resort);

    if (!sipMeth)
    {
         ::wxDataViewListModel::Resort();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewListModel::SetValue(const  ::wxDVCVariant& variant,const  ::wxDataViewItem& item,uint col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_SetValue);

    if (!sipMeth)
        return  ::wxDataViewListModel::SetValue(variant,item,col);

    extern bool sipVH__dataview_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDVCVariant&,const  ::wxDataViewItem&,uint);

    return sipVH__dataview_14(sipGILState, 0, sipPySelf, sipMeth, variant, item, col);
}

bool sipwxDataViewListModel::ValueChanged(const  ::wxDataViewItem& item,uint col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_ValueChanged);

    if (!sipMeth)
        return  ::wxDataViewListModel::ValueChanged(item,col);

    extern bool sipVH__dataview_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxDataViewItem&,uint);

    return sipVH__dataview_6(sipGILState, 0, sipPySelf, sipMeth, item, col);
}

bool sipwxDataViewListModel::IsListModel() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_IsListModel);

    if (!sipMeth)
        return  ::wxDataViewListModel::IsListModel();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewListModel::IsVirtualListModel() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_IsVirtualListModel);

    if (!sipMeth)
        return  ::wxDataViewListModel::IsVirtualListModel();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxDataViewListModel_Compare, "Compare(item1, item2, column, ascending) -> int\n"
"\n"
"Compare method that sorts the items by their index.");

extern "C" {static PyObject *meth_wxDataViewListModel_Compare(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListModel_Compare(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewItem* item1;
        const  ::wxDataViewItem* item2;
        uint column;
        bool ascending;
        const  ::wxDataViewListModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item1,
            sipName_item2,
            sipName_column,
            sipName_ascending,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9ub", &sipSelf, sipType_wxDataViewListModel, &sipCpp, sipType_wxDataViewItem, &item1, sipType_wxDataViewItem, &item2, &column, &ascending))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewListModel::Compare(*item1,*item2,column,ascending) : sipCpp->Compare(*item1,*item2,column,ascending));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListModel, sipName_Compare, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListModel_GetAttrByRow, "GetAttrByRow(row, col, attr) -> bool\n"
"\n"
"Override this to indicate that the row has special font attributes.");

extern "C" {static PyObject *meth_wxDataViewListModel_GetAttrByRow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListModel_GetAttrByRow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        uint row;
        uint col;
         ::wxDataViewItemAttr* attr;
        const  ::wxDataViewListModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
            sipName_attr,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BuuJ9", &sipSelf, sipType_wxDataViewListModel, &sipCpp, &row, &col, sipType_wxDataViewItemAttr, &attr))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewListModel::GetAttrByRow(row,col,*attr) : sipCpp->GetAttrByRow(row,col,*attr));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListModel, sipName_GetAttrByRow, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListModel_IsEnabledByRow, "IsEnabledByRow(row, col) -> bool\n"
"\n"
"Override this if you want to disable specific items.");

extern "C" {static PyObject *meth_wxDataViewListModel_IsEnabledByRow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListModel_IsEnabledByRow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        uint row;
        uint col;
        const  ::wxDataViewListModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Buu", &sipSelf, sipType_wxDataViewListModel, &sipCpp, &row, &col))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewListModel::IsEnabledByRow(row,col) : sipCpp->IsEnabledByRow(row,col));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListModel, sipName_IsEnabledByRow, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListModel_GetCount, "GetCount() -> unsignedint\n"
"\n"
"Returns the number of items (or rows) in the list.");

extern "C" {static PyObject *meth_wxDataViewListModel_GetCount(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListModel_GetCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxDataViewListModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListModel, &sipCpp))
        {
            uint sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_DataViewListModel, sipName_GetCount);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListModel, sipName_GetCount, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListModel_GetRow, "GetRow(item) -> unsignedint\n"
"\n"
"Returns the position of given item.");

extern "C" {static PyObject *meth_wxDataViewListModel_GetRow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListModel_GetRow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxDataViewItem* item;
        const  ::wxDataViewListModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewListModel, &sipCpp, sipType_wxDataViewItem, &item))
        {
            uint sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_DataViewListModel, sipName_GetRow);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetRow(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListModel, sipName_GetRow, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListModel_GetValueByRow, "GetValueByRow(row, col) -> variant\n"
"\n"
"Override this to allow getting values from the model.");

extern "C" {static PyObject *meth_wxDataViewListModel_GetValueByRow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListModel_GetValueByRow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxDVCVariant* variant;
        uint row;
        uint col;
        const  ::wxDataViewListModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Buu", &sipSelf, sipType_wxDataViewListModel, &sipCpp, &row, &col))
        {
            variant = new  ::wxDVCVariant();

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_DataViewListModel, sipName_GetValueByRow);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->GetValueByRow(*variant,row,col);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(variant,sipType_wxDVCVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListModel, sipName_GetValueByRow, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListModel_SetValueByRow, "SetValueByRow(variant, row, col) -> bool\n"
"\n"
"Called in order to set a value in the model.");

extern "C" {static PyObject *meth_wxDataViewListModel_SetValueByRow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListModel_SetValueByRow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxDVCVariant* variant;
        int variantState = 0;
        uint row;
        uint col;
         ::wxDataViewListModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1uu", &sipSelf, sipType_wxDataViewListModel, &sipCpp, sipType_wxDVCVariant,&variant, &variantState, &row, &col))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_DataViewListModel, sipName_SetValueByRow);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetValueByRow(*variant,row,col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxDVCVariant *>(variant),sipType_wxDVCVariant,variantState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListModel, sipName_SetValueByRow, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListModel_GetParent, "GetParent(self, item: DataViewItem) -> DataViewItem");

extern "C" {static PyObject *meth_wxDataViewListModel_GetParent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListModel_GetParent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewItem* item;
        const  ::wxDataViewListModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewListModel, &sipCpp, sipType_wxDataViewItem, &item))
        {
             ::wxDataViewItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxDataViewItem((sipSelfWasArg ? sipCpp-> ::wxDataViewListModel::GetParent(*item) : sipCpp->GetParent(*item)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxDataViewItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListModel, sipName_GetParent, doc_wxDataViewListModel_GetParent);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListModel_IsContainer, "IsContainer(self, item: DataViewItem) -> bool");

extern "C" {static PyObject *meth_wxDataViewListModel_IsContainer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListModel_IsContainer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewItem* item;
        const  ::wxDataViewListModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewListModel, &sipCpp, sipType_wxDataViewItem, &item))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewListModel::IsContainer(*item) : sipCpp->IsContainer(*item));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListModel, sipName_IsContainer, doc_wxDataViewListModel_IsContainer);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListModel_GetValue, "GetValue(self, item: DataViewItem, col: int) -> object");

extern "C" {static PyObject *meth_wxDataViewListModel_GetValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListModel_GetValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDVCVariant* variant;
        const  ::wxDataViewItem* item;
        uint col;
        const  ::wxDataViewListModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9u", &sipSelf, sipType_wxDataViewListModel, &sipCpp, sipType_wxDataViewItem, &item, &col))
        {
            variant = new  ::wxDVCVariant();

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewListModel::GetValue(*variant,*item,col) : sipCpp->GetValue(*variant,*item,col));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(variant,sipType_wxDVCVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListModel, sipName_GetValue, doc_wxDataViewListModel_GetValue);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListModel_SetValue, "SetValue(self, variant: object, item: DataViewItem, col: int) -> bool");

extern "C" {static PyObject *meth_wxDataViewListModel_SetValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListModel_SetValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDVCVariant* variant;
        int variantState = 0;
        const  ::wxDataViewItem* item;
        uint col;
         ::wxDataViewListModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
            sipName_item,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J9u", &sipSelf, sipType_wxDataViewListModel, &sipCpp, sipType_wxDVCVariant,&variant, &variantState, sipType_wxDataViewItem, &item, &col))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewListModel::SetValue(*variant,*item,col) : sipCpp->SetValue(*variant,*item,col));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxDVCVariant *>(variant),sipType_wxDVCVariant,variantState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListModel, sipName_SetValue, doc_wxDataViewListModel_SetValue);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListModel_GetAttr, "GetAttr(self, item: DataViewItem, col: int, attr: DataViewItemAttr) -> bool");

extern "C" {static PyObject *meth_wxDataViewListModel_GetAttr(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListModel_GetAttr(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewItem* item;
        uint col;
         ::wxDataViewItemAttr* attr;
        const  ::wxDataViewListModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_col,
            sipName_attr,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9uJ9", &sipSelf, sipType_wxDataViewListModel, &sipCpp, sipType_wxDataViewItem, &item, &col, sipType_wxDataViewItemAttr, &attr))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewListModel::GetAttr(*item,col,*attr) : sipCpp->GetAttr(*item,col,*attr));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListModel, sipName_GetAttr, doc_wxDataViewListModel_GetAttr);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListModel_IsEnabled, "IsEnabled(self, item: DataViewItem, col: int) -> bool");

extern "C" {static PyObject *meth_wxDataViewListModel_IsEnabled(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListModel_IsEnabled(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewItem* item;
        uint col;
        const  ::wxDataViewListModel *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9u", &sipSelf, sipType_wxDataViewListModel, &sipCpp, sipType_wxDataViewItem, &item, &col))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewListModel::IsEnabled(*item,col) : sipCpp->IsEnabled(*item,col));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListModel, sipName_IsEnabled, doc_wxDataViewListModel_IsEnabled);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListModel_IsListModel, "IsListModel(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewListModel_IsListModel(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListModel_IsListModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewListModel *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListModel, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewListModel::IsListModel() : sipCpp->IsListModel());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListModel, sipName_IsListModel, doc_wxDataViewListModel_IsListModel);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxDataViewListModel(void *, const sipTypeDef *);}
static void *cast_wxDataViewListModel(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxDataViewListModel *sipCpp = reinterpret_cast< ::wxDataViewListModel *>(sipCppV);

    if (targetType == sipType_wxDataViewModel)
        return static_cast< ::wxDataViewModel *>(sipCpp);

    if (targetType == sipType_wxRefCounter)
        return static_cast< ::wxRefCounter *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxDataViewListModel(void *, int);}
static void release_wxDataViewListModel(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxDataViewListModel *>(sipCppV);
    else
        delete reinterpret_cast< ::wxDataViewListModel *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxDataViewListModel(sipSimpleWrapper *);}
static void dealloc_wxDataViewListModel(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxDataViewListModel *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxDataViewListModel(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxDataViewListModel(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxDataViewListModel(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxDataViewListModel *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxDataViewListModel();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxDataViewListModel[] = {{20, 255, 1}};


static PyMethodDef methods_wxDataViewListModel[] = {
    {SIP_MLNAME_CAST(sipName_Compare), (PyCFunction)meth_wxDataViewListModel_Compare, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListModel_Compare)},
    {SIP_MLNAME_CAST(sipName_GetAttr), (PyCFunction)meth_wxDataViewListModel_GetAttr, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListModel_GetAttr)},
    {SIP_MLNAME_CAST(sipName_GetAttrByRow), (PyCFunction)meth_wxDataViewListModel_GetAttrByRow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListModel_GetAttrByRow)},
    {SIP_MLNAME_CAST(sipName_GetCount), meth_wxDataViewListModel_GetCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListModel_GetCount)},
    {SIP_MLNAME_CAST(sipName_GetParent), (PyCFunction)meth_wxDataViewListModel_GetParent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListModel_GetParent)},
    {SIP_MLNAME_CAST(sipName_GetRow), (PyCFunction)meth_wxDataViewListModel_GetRow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListModel_GetRow)},
    {SIP_MLNAME_CAST(sipName_GetValue), (PyCFunction)meth_wxDataViewListModel_GetValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListModel_GetValue)},
    {SIP_MLNAME_CAST(sipName_GetValueByRow), (PyCFunction)meth_wxDataViewListModel_GetValueByRow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListModel_GetValueByRow)},
    {SIP_MLNAME_CAST(sipName_IsContainer), (PyCFunction)meth_wxDataViewListModel_IsContainer, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListModel_IsContainer)},
    {SIP_MLNAME_CAST(sipName_IsEnabled), (PyCFunction)meth_wxDataViewListModel_IsEnabled, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListModel_IsEnabled)},
    {SIP_MLNAME_CAST(sipName_IsEnabledByRow), (PyCFunction)meth_wxDataViewListModel_IsEnabledByRow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListModel_IsEnabledByRow)},
    {SIP_MLNAME_CAST(sipName_IsListModel), meth_wxDataViewListModel_IsListModel, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListModel_IsListModel)},
    {SIP_MLNAME_CAST(sipName_SetValue), (PyCFunction)meth_wxDataViewListModel_SetValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListModel_SetValue)},
    {SIP_MLNAME_CAST(sipName_SetValueByRow), (PyCFunction)meth_wxDataViewListModel_SetValueByRow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListModel_SetValueByRow)}
};

sipVariableDef variables_wxDataViewListModel[] = {
    {PropertyVariable, sipName_Count, &methods_wxDataViewListModel[3], NULL, NULL, NULL},
};

PyDoc_STRVAR(doc_wxDataViewListModel, "Base class with abstract API for wxDataViewIndexListModel and\n"
"wxDataViewVirtualListModel.");


sipClassTypeDef sipTypeDef__dataview_wxDataViewListModel = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_wxDataViewListModel,
        {0},
        0
    },
    {
        sipNameNr_DataViewListModel,
        {0, 0, 1},
        14, methods_wxDataViewListModel,
        0, 0,
        1, variables_wxDataViewListModel,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxDataViewListModel,
    -1,
    -1,
    supers_wxDataViewListModel,
    0,
    init_type_wxDataViewListModel,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxDataViewListModel,
    0,
    0,
    0,
    release_wxDataViewListModel,
    cast_wxDataViewListModel,
    0,
    0,
    0,
    0,
    0,
    0
};
