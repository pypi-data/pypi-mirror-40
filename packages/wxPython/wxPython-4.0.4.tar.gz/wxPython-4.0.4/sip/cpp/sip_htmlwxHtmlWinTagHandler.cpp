/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_html.h"

        #include <wx/html/winpars.h>

        #include <wx/html/winpars.h>
        #include <wx/html/htmltag.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>
    wxHtmlWinParser* _wxHtmlWinTagHandler_GetParser(wxHtmlWinTagHandler* self)
    {
        return (wxHtmlWinParser*)self->GetParser();
    }


class sipwxHtmlWinTagHandler : public  ::wxHtmlWinTagHandler
{
public:
    sipwxHtmlWinTagHandler();
    virtual ~sipwxHtmlWinTagHandler();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_ParseInner(const  ::wxHtmlTag&);
    void sipProtect_ParseInnerSource(const  ::wxString&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void SetParser( ::wxHtmlWinParser*);
     ::wxString GetSupportedTags();
    bool HandleTag(const  ::wxHtmlTag&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxHtmlWinTagHandler(const sipwxHtmlWinTagHandler &);
    sipwxHtmlWinTagHandler &operator = (const sipwxHtmlWinTagHandler &);

    char sipPyMethods[3];
};

sipwxHtmlWinTagHandler::sipwxHtmlWinTagHandler():  ::wxHtmlWinTagHandler(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxHtmlWinTagHandler::~sipwxHtmlWinTagHandler()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxHtmlWinTagHandler::SetParser( ::wxHtmlWinParser*parser)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_SetParser);

    if (!sipMeth)
    {
         ::wxHtmlWinTagHandler::SetParser(parser);
        return;
    }

    extern void sipVH__html_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxHtmlWinParser*);

    sipVH__html_59(sipGILState, 0, sipPySelf, sipMeth, parser);
}

 ::wxString sipwxHtmlWinTagHandler::GetSupportedTags()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_HtmlWinTagHandler,sipName_GetSupportedTags);

    if (!sipMeth)
        return  ::wxString();

    extern  ::wxString sipVH__html_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_16(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHtmlWinTagHandler::HandleTag(const  ::wxHtmlTag& tag)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_HtmlWinTagHandler,sipName_HandleTag);

    if (!sipMeth)
        return 0;

    extern bool sipVH__html_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxHtmlTag&);

    return sipVH__html_17(sipGILState, 0, sipPySelf, sipMeth, tag);
}

void sipwxHtmlWinTagHandler::sipProtect_ParseInner(const  ::wxHtmlTag& tag)
{
     ::wxHtmlTagHandler::ParseInner(tag);
}

void sipwxHtmlWinTagHandler::sipProtect_ParseInnerSource(const  ::wxString& source)
{
     ::wxHtmlTagHandler::ParseInnerSource(source);
}


PyDoc_STRVAR(doc_wxHtmlWinTagHandler_ParseInner, "ParseInner(tag)\n"
"\n"
"This method calls parser's wxHtmlParser::DoParsing method for the\n"
"string between this tag and the paired ending tag:");

extern "C" {static PyObject *meth_wxHtmlWinTagHandler_ParseInner(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWinTagHandler_ParseInner(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxHtmlTag* tag;
        sipwxHtmlWinTagHandler *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tag,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxHtmlWinTagHandler, &sipCpp, sipType_wxHtmlTag, &tag))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_ParseInner(*tag);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWinTagHandler, sipName_ParseInner, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWinTagHandler_ParseInnerSource, "ParseInnerSource(source)\n"
"\n"
"Parses given source as if it was tag's inner code (see\n"
"wxHtmlParser::GetInnerSource).");

extern "C" {static PyObject *meth_wxHtmlWinTagHandler_ParseInnerSource(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWinTagHandler_ParseInnerSource(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* source;
        int sourceState = 0;
        sipwxHtmlWinTagHandler *sipCpp;

        static const char *sipKwdList[] = {
            sipName_source,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxHtmlWinTagHandler, &sipCpp, sipType_wxString,&source, &sourceState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_ParseInnerSource(*source);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(source),sipType_wxString,sourceState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWinTagHandler, sipName_ParseInnerSource, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWinTagHandler_SetParser, "SetParser(parser)\n"
"\n"
"Assigns parser to this handler.");

extern "C" {static PyObject *meth_wxHtmlWinTagHandler_SetParser(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWinTagHandler_SetParser(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHtmlWinParser* parser;
         ::wxHtmlWinTagHandler *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parser,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxHtmlWinTagHandler, &sipCpp, sipType_wxHtmlWinParser, &parser))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHtmlWinTagHandler::SetParser(parser) : sipCpp->SetParser(parser));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWinTagHandler, sipName_SetParser, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWinTagHandler_GetParser, "GetParser() -> HtmlWinParser");

extern "C" {static PyObject *meth_wxHtmlWinTagHandler_GetParser(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWinTagHandler_GetParser(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxHtmlWinTagHandler *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWinTagHandler, &sipCpp))
        {
             ::wxHtmlWinParser*sipRes = 0;
            int sipIsErr = 0;

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxHtmlWinTagHandler_GetParser(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_wxHtmlWinParser,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWinTagHandler, sipName_GetParser, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxHtmlWinTagHandler(void *, const sipTypeDef *);}
static void *cast_wxHtmlWinTagHandler(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxHtmlWinTagHandler *sipCpp = reinterpret_cast< ::wxHtmlWinTagHandler *>(sipCppV);

    if (targetType == sipType_wxHtmlTagHandler)
        return static_cast< ::wxHtmlTagHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxHtmlWinTagHandler(void *, int);}
static void release_wxHtmlWinTagHandler(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxHtmlWinTagHandler *>(sipCppV);
    else
        delete reinterpret_cast< ::wxHtmlWinTagHandler *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxHtmlWinTagHandler(sipSimpleWrapper *);}
static void dealloc_wxHtmlWinTagHandler(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxHtmlWinTagHandler *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxHtmlWinTagHandler(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxHtmlWinTagHandler(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxHtmlWinTagHandler(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxHtmlWinTagHandler *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxHtmlWinTagHandler();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxHtmlWinTagHandler[] = {{31, 255, 1}};


static PyMethodDef methods_wxHtmlWinTagHandler[] = {
    {SIP_MLNAME_CAST(sipName_GetParser), meth_wxHtmlWinTagHandler_GetParser, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWinTagHandler_GetParser)},
    {SIP_MLNAME_CAST(sipName_ParseInner), (PyCFunction)meth_wxHtmlWinTagHandler_ParseInner, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_ParseInnerSource), (PyCFunction)meth_wxHtmlWinTagHandler_ParseInnerSource, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_SetParser), (PyCFunction)meth_wxHtmlWinTagHandler_SetParser, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWinTagHandler_SetParser)}
};

sipVariableDef variables_wxHtmlWinTagHandler[] = {
    {PropertyVariable, sipName_Parser, &methods_wxHtmlWinTagHandler[0], &methods_wxHtmlWinTagHandler[3], NULL, NULL},
};

PyDoc_STRVAR(doc_wxHtmlWinTagHandler, "HtmlWinTagHandler()\n"
"\n"
"This is basically wxHtmlTagHandler except that it is extended with\n"
"protected member m_WParser pointing to the wxHtmlWinParser object\n"
"(value of this member is identical to wxHtmlParser's m_Parser).");


sipClassTypeDef sipTypeDef__html_wxHtmlWinTagHandler = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxHtmlWinTagHandler,
        {0},
        0
    },
    {
        sipNameNr_HtmlWinTagHandler,
        {0, 0, 1},
        4, methods_wxHtmlWinTagHandler,
        0, 0,
        1, variables_wxHtmlWinTagHandler,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxHtmlWinTagHandler,
    -1,
    -1,
    supers_wxHtmlWinTagHandler,
    0,
    init_type_wxHtmlWinTagHandler,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxHtmlWinTagHandler,
    0,
    0,
    0,
    release_wxHtmlWinTagHandler,
    cast_wxHtmlWinTagHandler,
    0,
    0,
    0,
    0,
    0,
    0
};
