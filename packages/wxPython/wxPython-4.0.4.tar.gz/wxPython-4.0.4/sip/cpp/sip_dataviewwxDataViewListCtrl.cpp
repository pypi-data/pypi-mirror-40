/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_dataview.h"

        #include <wx/dataview.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/validate.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/dataview.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>
        #include <wx/gdicmn.h>
        #include <wx/dataobj.h>
        #include <wx/bitmap.h>
        #include <wx/dc.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/region.h>
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxDataViewListCtrl : public  ::wxDataViewListCtrl
{
public:
    sipwxDataViewListCtrl();
    sipwxDataViewListCtrl( ::wxWindow*, ::wxWindowID,const  ::wxPoint&,const  ::wxSize&,long,const  ::wxValidator&);
    virtual ~sipwxDataViewListCtrl();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void RemoveChild( ::wxWindowBase*);
    void AddChild( ::wxWindowBase*);
    bool ProcessEvent( ::wxEvent&);
    bool TryBefore( ::wxEvent&);
    bool TryAfter( ::wxEvent&);
    bool AcceptsFocus() const;
    bool AcceptsFocusFromKeyboard() const;
    bool AcceptsFocusRecursively() const;
    void SetCanFocus(bool);
    bool InformFirstDirection(int,int,int);
     ::wxPoint GetClientAreaOrigin() const;
    bool HasTransparentBackground();
    bool ShouldInheritColours() const;
     ::wxValidator* GetValidator();
    void SetValidator(const  ::wxValidator&);
    bool TransferDataFromWindow();
    bool TransferDataToWindow();
    bool Validate();
    bool Destroy();
    void InheritAttributes();
    void InitDialog();
    void OnInternalIdle();
     ::wxWindow* GetMainWindowOfCompositeControl();
    void DoEnable(bool);
    void DoGetPosition(int*,int*) const;
    void DoGetSize(int*,int*) const;
    void DoGetClientSize(int*,int*) const;
    void DoSetSize(int,int,int,int,int);
    void DoSetClientSize(int,int);
    void DoSetSizeHints(int,int,int,int,int,int);
     ::wxSize DoGetBorderSize() const;
    void DoMoveWindow(int,int,int,int);
    void DoSetWindowVariant( ::wxWindowVariant);
     ::wxBorder GetDefaultBorder() const;
     ::wxBorder GetDefaultBorderForControl() const;
    void DoFreeze();
    void DoThaw();
     ::wxSize DoGetBestSize() const;
     ::wxSize DoGetBestClientSize() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxDataViewListCtrl(const sipwxDataViewListCtrl &);
    sipwxDataViewListCtrl &operator = (const sipwxDataViewListCtrl &);

    char sipPyMethods[39];
};

sipwxDataViewListCtrl::sipwxDataViewListCtrl():  ::wxDataViewListCtrl(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxDataViewListCtrl::sipwxDataViewListCtrl( ::wxWindow*parent, ::wxWindowID id,const  ::wxPoint& pos,const  ::wxSize& size,long style,const  ::wxValidator& validator):  ::wxDataViewListCtrl(parent,id,pos,size,style,validator), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxDataViewListCtrl::~sipwxDataViewListCtrl()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxDataViewListCtrl::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxDataViewListCtrl::RemoveChild(child);
        return;
    }

    extern void sipVH__dataview_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__dataview_43(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxDataViewListCtrl::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxDataViewListCtrl::AddChild(child);
        return;
    }

    extern void sipVH__dataview_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__dataview_43(sipGILState, 0, sipPySelf, sipMeth, child);
}

bool sipwxDataViewListCtrl::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxDataViewListCtrl::ProcessEvent(event);

    extern bool sipVH__dataview_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__dataview_44(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxDataViewListCtrl::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxDataViewListCtrl::TryBefore(event);

    extern bool sipVH__dataview_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__dataview_44(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxDataViewListCtrl::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxDataViewListCtrl::TryAfter(event);

    extern bool sipVH__dataview_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__dataview_44(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxDataViewListCtrl::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxDataViewListCtrl::AcceptsFocus();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewListCtrl::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxDataViewListCtrl::AcceptsFocusFromKeyboard();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewListCtrl::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxDataViewListCtrl::AcceptsFocusRecursively();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewListCtrl::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxDataViewListCtrl::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__dataview_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__dataview_36(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

bool sipwxDataViewListCtrl::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxDataViewListCtrl::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__dataview_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__dataview_45(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

 ::wxPoint sipwxDataViewListCtrl::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxDataViewListCtrl::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__dataview_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_46(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewListCtrl::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxDataViewListCtrl::HasTransparentBackground();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewListCtrl::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxDataViewListCtrl::ShouldInheritColours();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxValidator* sipwxDataViewListCtrl::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxDataViewListCtrl::GetValidator();

    extern  ::wxValidator* sipVH__dataview_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_47(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewListCtrl::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxDataViewListCtrl::SetValidator(validator);
        return;
    }

    extern void sipVH__dataview_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__dataview_48(sipGILState, 0, sipPySelf, sipMeth, validator);
}

bool sipwxDataViewListCtrl::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxDataViewListCtrl::TransferDataFromWindow();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewListCtrl::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxDataViewListCtrl::TransferDataToWindow();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewListCtrl::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_Validate);

    if (!sipMeth)
        return  ::wxDataViewListCtrl::Validate();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewListCtrl::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_Destroy);

    if (!sipMeth)
        return  ::wxDataViewListCtrl::Destroy();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewListCtrl::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxDataViewListCtrl::InheritAttributes();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewListCtrl::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxDataViewListCtrl::InitDialog();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewListCtrl::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxDataViewListCtrl::OnInternalIdle();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxWindow* sipwxDataViewListCtrl::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxDataViewListCtrl::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__dataview_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_49(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewListCtrl::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxDataViewListCtrl::DoEnable(enable);
        return;
    }

    extern void sipVH__dataview_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__dataview_36(sipGILState, 0, sipPySelf, sipMeth, enable);
}

void sipwxDataViewListCtrl::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxDataViewListCtrl::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__dataview_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__dataview_50(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxDataViewListCtrl::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxDataViewListCtrl::DoGetSize(width,height);
        return;
    }

    extern void sipVH__dataview_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__dataview_50(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxDataViewListCtrl::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxDataViewListCtrl::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__dataview_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__dataview_50(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxDataViewListCtrl::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxDataViewListCtrl::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__dataview_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__dataview_51(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxDataViewListCtrl::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxDataViewListCtrl::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__dataview_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__dataview_52(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxDataViewListCtrl::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxDataViewListCtrl::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__dataview_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__dataview_53(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

 ::wxSize sipwxDataViewListCtrl::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxDataViewListCtrl::DoGetBorderSize();

    extern  ::wxSize sipVH__dataview_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_31(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewListCtrl::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxDataViewListCtrl::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__dataview_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__dataview_54(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

void sipwxDataViewListCtrl::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxDataViewListCtrl::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__dataview_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__dataview_55(sipGILState, 0, sipPySelf, sipMeth, variant);
}

 ::wxBorder sipwxDataViewListCtrl::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxDataViewListCtrl::GetDefaultBorder();

    extern  ::wxBorder sipVH__dataview_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_56(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxDataViewListCtrl::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxDataViewListCtrl::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__dataview_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_56(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewListCtrl::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxDataViewListCtrl::DoFreeze();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewListCtrl::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxDataViewListCtrl::DoThaw();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxDataViewListCtrl::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxDataViewListCtrl::DoGetBestSize();

    extern  ::wxSize sipVH__dataview_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_31(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxDataViewListCtrl::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxDataViewListCtrl::DoGetBestClientSize();

    extern  ::wxSize sipVH__dataview_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_31(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewListCtrl::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sipwxDataViewListCtrl::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxDataViewListCtrl::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxDataViewListCtrl::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxDataViewListCtrl::DoEnable(enable) : DoEnable(enable));
}

void sipwxDataViewListCtrl::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxDataViewListCtrl::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxDataViewListCtrl::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxDataViewListCtrl::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxDataViewListCtrl::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxDataViewListCtrl::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxDataViewListCtrl::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxDataViewListCtrl::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxDataViewListCtrl::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxDataViewListCtrl::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxDataViewListCtrl::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxDataViewListCtrl::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxDataViewListCtrl::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxDataViewListCtrl::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxDataViewListCtrl::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxDataViewListCtrl::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxDataViewListCtrl::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxDataViewListCtrl::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxDataViewListCtrl::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxDataViewListCtrl::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxDataViewListCtrl::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxDataViewListCtrl::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxDataViewListCtrl::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxDataViewListCtrl::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxDataViewListCtrl::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxDataViewListCtrl::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxDataViewListCtrl::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxDataViewListCtrl::DoFreeze() : DoFreeze());
}

void sipwxDataViewListCtrl::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxDataViewListCtrl::DoThaw() : DoThaw());
}

bool sipwxDataViewListCtrl::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxDataViewListCtrl::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxDataViewListCtrl::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxDataViewListCtrl::TryBefore(event) : TryBefore(event));
}

bool sipwxDataViewListCtrl::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxDataViewListCtrl::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_SendDestroyEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipwxDataViewListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_SendDestroyEvent, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_GetStore, "GetStore() -> DataViewListStore\n"
"\n"
"Returns the store.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_GetStore(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_GetStore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxDataViewListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
             ::wxDataViewListStore*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetStore();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewListStore,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_GetStore, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_GetSelectedRow, "GetSelectedRow() -> int\n"
"\n"
"Returns index of the selected row or wxNOT_FOUND.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_GetSelectedRow(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_GetSelectedRow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSelectedRow();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_GetSelectedRow, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_SelectRow, "SelectRow(row)\n"
"\n"
"Selects given row.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_SelectRow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_SelectRow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint row;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bu", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, &row))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SelectRow(row);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_SelectRow, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_UnselectRow, "UnselectRow(row)\n"
"\n"
"Unselects given row.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_UnselectRow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_UnselectRow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint row;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bu", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, &row))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->UnselectRow(row);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_UnselectRow, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_IsRowSelected, "IsRowSelected(row) -> bool\n"
"\n"
"Returns true if row is selected.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_IsRowSelected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_IsRowSelected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint row;
        const  ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bu", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, &row))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsRowSelected(row);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_IsRowSelected, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_AppendColumn, "AppendColumn(column) -> bool\n"
"AppendColumn(column, varianttype)\n"
"\n"
"Appends a column to the control and additionally appends a column to\n"
"the store with the type string.\n"
"");

extern "C" {static PyObject *meth_wxDataViewListCtrl_AppendColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_AppendColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxDataViewColumn* column;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxDataViewColumn, &column))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendColumn(column);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::wxDataViewColumn* column;
        const  ::wxString* varianttype;
        int varianttypeState = 0;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_column,
            sipName_varianttype,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:J1", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxDataViewColumn, &column, sipType_wxString,&varianttype, &varianttypeState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->AppendColumn(column,*varianttype);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(varianttype),sipType_wxString,varianttypeState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_AppendColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_AppendTextColumn, "AppendTextColumn(label, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_LEFT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"\n"
"Appends a text column to the control and the store.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_AppendTextColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_AppendTextColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* label;
        int labelState = 0;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = -1;
         ::wxAlignment align = wxALIGN_LEFT;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|EiEi", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxString,&label, &labelState, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendTextColumn(*label,mode,width,align,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_AppendTextColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_AppendToggleColumn, "AppendToggleColumn(label, mode=DATAVIEW_CELL_ACTIVATABLE, width=-1, align=wx.ALIGN_LEFT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"\n"
"Appends a toggle column to the control and the store.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_AppendToggleColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_AppendToggleColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* label;
        int labelState = 0;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_ACTIVATABLE;
        int width = -1;
         ::wxAlignment align = wxALIGN_LEFT;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|EiEi", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxString,&label, &labelState, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendToggleColumn(*label,mode,width,align,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_AppendToggleColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_AppendProgressColumn, "AppendProgressColumn(label, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_LEFT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"\n"
"Appends a progress column to the control and the store.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_AppendProgressColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_AppendProgressColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* label;
        int labelState = 0;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = -1;
         ::wxAlignment align = wxALIGN_LEFT;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|EiEi", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxString,&label, &labelState, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendProgressColumn(*label,mode,width,align,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_AppendProgressColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_AppendIconTextColumn, "AppendIconTextColumn(label, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_LEFT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"\n"
"Appends an icon-and-text column to the control and the store.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_AppendIconTextColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_AppendIconTextColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* label;
        int labelState = 0;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = -1;
         ::wxAlignment align = wxALIGN_LEFT;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|EiEi", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxString,&label, &labelState, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendIconTextColumn(*label,mode,width,align,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_AppendIconTextColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_InsertColumn, "InsertColumn(pos, column) -> bool\n"
"InsertColumn(pos, column, varianttype)\n"
"\n"
"Inserts a column to the control and additionally inserts a column to\n"
"the store with the type string.\n"
"");

extern "C" {static PyObject *meth_wxDataViewListCtrl_InsertColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_InsertColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint pos;
         ::wxDataViewColumn* column;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BuJ:", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, &pos, sipType_wxDataViewColumn, &column))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertColumn(pos,column);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    {
        uint pos;
         ::wxDataViewColumn* column;
        const  ::wxString* varianttype;
        int varianttypeState = 0;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_column,
            sipName_varianttype,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BuJ:J1", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, &pos, sipType_wxDataViewColumn, &column, sipType_wxString,&varianttype, &varianttypeState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->InsertColumn(pos,column,*varianttype);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(varianttype),sipType_wxString,varianttypeState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_InsertColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_PrependColumn, "PrependColumn(column) -> bool\n"
"PrependColumn(column, varianttype)\n"
"\n"
"Prepends a column to the control and additionally prepends a column to\n"
"the store with the type string.\n"
"");

extern "C" {static PyObject *meth_wxDataViewListCtrl_PrependColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_PrependColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxDataViewColumn* column;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxDataViewColumn, &column))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->PrependColumn(column);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::wxDataViewColumn* column;
        const  ::wxString* varianttype;
        int varianttypeState = 0;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_column,
            sipName_varianttype,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:J1", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxDataViewColumn, &column, sipType_wxString,&varianttype, &varianttypeState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->PrependColumn(column,*varianttype);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(varianttype),sipType_wxString,varianttypeState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_PrependColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_AppendItem, "AppendItem(values, data=None)\n"
"\n"
"Appends an item (=row) to the control and store.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_AppendItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_AppendItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxVariantVector* values;
        int valuesState = 0;
         ::wxUIntPtr datadef = 0;
         ::wxUIntPtr* data = &datadef;
        int dataState = 0;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_values,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxVariantVector,&values, &valuesState, sipType_wxUIntPtr,&data, &dataState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->AppendItem(*values,*data);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxVariantVector *>(values),sipType_wxVariantVector,valuesState);
            sipReleaseType(data,sipType_wxUIntPtr,dataState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_AppendItem, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_PrependItem, "PrependItem(values, data=None)\n"
"\n"
"Prepends an item (=row) to the control and store.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_PrependItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_PrependItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxVariantVector* values;
        int valuesState = 0;
         ::wxUIntPtr datadef = 0;
         ::wxUIntPtr* data = &datadef;
        int dataState = 0;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_values,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|J1", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxVariantVector,&values, &valuesState, sipType_wxUIntPtr,&data, &dataState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->PrependItem(*values,*data);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxVariantVector *>(values),sipType_wxVariantVector,valuesState);
            sipReleaseType(data,sipType_wxUIntPtr,dataState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_PrependItem, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_InsertItem, "InsertItem(row, values, data=None)\n"
"\n"
"Inserts an item (=row) to the control and store.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_InsertItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_InsertItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint row;
        const  ::wxVariantVector* values;
        int valuesState = 0;
         ::wxUIntPtr datadef = 0;
         ::wxUIntPtr* data = &datadef;
        int dataState = 0;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_values,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BuJ1|J1", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, &row, sipType_wxVariantVector,&values, &valuesState, sipType_wxUIntPtr,&data, &dataState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->InsertItem(row,*values,*data);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxVariantVector *>(values),sipType_wxVariantVector,valuesState);
            sipReleaseType(data,sipType_wxUIntPtr,dataState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_InsertItem, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_DeleteItem, "DeleteItem(row)\n"
"\n"
"Delete the row at position row.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_DeleteItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_DeleteItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint row;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bu", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, &row))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DeleteItem(row);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_DeleteItem, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_DeleteAllItems, "DeleteAllItems()\n"
"\n"
"Delete all items (= all rows).");

extern "C" {static PyObject *meth_wxDataViewListCtrl_DeleteAllItems(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_DeleteAllItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxDataViewListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DeleteAllItems();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_DeleteAllItems, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_GetItemCount, "GetItemCount() -> unsignedint\n"
"\n"
"Returns the number of items (=rows) in the control.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_GetItemCount(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_GetItemCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
            uint sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetItemCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_GetItemCount, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_GetItemData, "GetItemData(item) -> UIntPtr\n"
"\n"
"Returns the client data associated with the item.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_GetItemData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_GetItemData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewItem* item;
        const  ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxDataViewItem, &item))
        {
             ::wxUIntPtr*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxUIntPtr(sipCpp->GetItemData(*item));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxUIntPtr,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_GetItemData, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_SetValue, "SetValue(value, row, col)\n"
"\n"
"Sets the value in the store and update the control.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_SetValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_SetValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDVCVariant* value;
        int valueState = 0;
        uint row;
        uint col;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1uu", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxDVCVariant,&value, &valueState, &row, &col))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetValue(*value,row,col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxDVCVariant *>(value),sipType_wxDVCVariant,valueState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_SetValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_GetValue, "GetValue(row, col) -> value\n"
"\n"
"Returns the value from the store.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_GetValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_GetValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxDVCVariant* value;
        uint row;
        uint col;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Buu", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, &row, &col))
        {
            value = new  ::wxDVCVariant();

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->GetValue(*value,row,col);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(value,sipType_wxDVCVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_GetValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_SetTextValue, "SetTextValue(value, row, col)\n"
"\n"
"Sets the value in the store and update the control.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_SetTextValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_SetTextValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* value;
        int valueState = 0;
        uint row;
        uint col;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1uu", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxString,&value, &valueState, &row, &col))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetTextValue(*value,row,col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(value),sipType_wxString,valueState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_SetTextValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_GetTextValue, "GetTextValue(row, col) -> String\n"
"\n"
"Returns the value from the store.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_GetTextValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_GetTextValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint row;
        uint col;
        const  ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Buu", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, &row, &col))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetTextValue(row,col));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_GetTextValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_SetToggleValue, "SetToggleValue(value, row, col)\n"
"\n"
"Sets the value in the store and update the control.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_SetToggleValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_SetToggleValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool value;
        uint row;
        uint col;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bbuu", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, &value, &row, &col))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToggleValue(value,row,col);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_SetToggleValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_GetToggleValue, "GetToggleValue(row, col) -> bool\n"
"\n"
"Returns the value from the store.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_GetToggleValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_GetToggleValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint row;
        uint col;
        const  ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Buu", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, &row, &col))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToggleValue(row,col);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_GetToggleValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_SetItemData, "SetItemData(item, data)\n"
"\n"
"Associates a client data pointer with the given item.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_SetItemData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_SetItemData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewItem* item;
         ::wxUIntPtr* data;
        int dataState = 0;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxDataViewItem, &item, sipType_wxUIntPtr,&data, &dataState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetItemData(*item,*data);
            Py_END_ALLOW_THREADS
            sipReleaseType(data,sipType_wxUIntPtr,dataState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_SetItemData, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_Create, "Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=DV_ROW_LINES, validator=wx.DefaultValidator) -> bool\n"
"\n"
"Creates the control and a wxDataViewListStore as its internal model.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxDV_ROW_LINES;
        const  ::wxValidator& validatordef = wxDefaultValidator;
        const  ::wxValidator* validator = &validatordef;
        sipWrapper *sipOwner = 0;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJH|iJ1J1lJ9", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxWindow, &parent, &sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxValidator, &validator))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,id,*pos,*size,style,*validator);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_Create, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_ItemToRow, "ItemToRow(item) -> int\n"
"\n"
"Returns the position of given item or wxNOT_FOUND if it's not a valid\n"
"item.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_ItemToRow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_ItemToRow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewItem* item;
        const  ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxDataViewItem, &item))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ItemToRow(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_ItemToRow, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_RowToItem, "RowToItem(row) -> DataViewItem\n"
"\n"
"Returns the wxDataViewItem at the given row.");

extern "C" {static PyObject *meth_wxDataViewListCtrl_RowToItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_RowToItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int row;
        const  ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, &row))
        {
             ::wxDataViewItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxDataViewItem(sipCpp->RowToItem(row));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxDataViewItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_RowToItem, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxDataViewListCtrl_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxDataViewListCtrl::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_GetClientAreaOrigin, doc_wxDataViewListCtrl_GetClientAreaOrigin);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewListCtrl_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewListCtrl::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_Validate, doc_wxDataViewListCtrl_Validate);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewListCtrl_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewListCtrl::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_TransferDataToWindow, doc_wxDataViewListCtrl_TransferDataToWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewListCtrl_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewListCtrl::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_TransferDataFromWindow, doc_wxDataViewListCtrl_TransferDataFromWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxDataViewListCtrl_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewListCtrl::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_InitDialog, doc_wxDataViewListCtrl_InitDialog);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewListCtrl_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewListCtrl::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_AcceptsFocus, doc_wxDataViewListCtrl_AcceptsFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewListCtrl_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewListCtrl::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_AcceptsFocusRecursively, doc_wxDataViewListCtrl_AcceptsFocusRecursively);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewListCtrl_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewListCtrl::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_AcceptsFocusFromKeyboard, doc_wxDataViewListCtrl_AcceptsFocusFromKeyboard);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxDataViewListCtrl_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewListCtrl::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_AddChild, doc_wxDataViewListCtrl_AddChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxDataViewListCtrl_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewListCtrl::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_RemoveChild, doc_wxDataViewListCtrl_RemoveChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxDataViewListCtrl_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewListCtrl::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_InheritAttributes, doc_wxDataViewListCtrl_InheritAttributes);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewListCtrl_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewListCtrl::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_ShouldInheritColours, doc_wxDataViewListCtrl_ShouldInheritColours);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxDataViewListCtrl_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewListCtrl::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_OnInternalIdle, doc_wxDataViewListCtrl_OnInternalIdle);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxDataViewListCtrl_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewListCtrl::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_GetMainWindowOfCompositeControl, doc_wxDataViewListCtrl_GetMainWindowOfCompositeControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxDataViewListCtrl_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biii", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewListCtrl::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_InformFirstDirection, doc_wxDataViewListCtrl_InformFirstDirection);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxDataViewListCtrl_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewListCtrl::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_SetCanFocus, doc_wxDataViewListCtrl_SetCanFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewListCtrl_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewListCtrl::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_Destroy, doc_wxDataViewListCtrl_Destroy);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxDataViewListCtrl_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewListCtrl::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_SetValidator, doc_wxDataViewListCtrl_SetValidator);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxDataViewListCtrl_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewListCtrl::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_GetValidator, doc_wxDataViewListCtrl_GetValidator);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxDataViewListCtrl_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_ProcessEvent, doc_wxDataViewListCtrl_ProcessEvent);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxDataViewListCtrl_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_DoEnable, doc_wxDataViewListCtrl_DoEnable);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxDataViewListCtrl_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxDataViewListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_DoGetPosition, doc_wxDataViewListCtrl_DoGetPosition);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxDataViewListCtrl_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxDataViewListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_DoGetSize, doc_wxDataViewListCtrl_DoGetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxDataViewListCtrl_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxDataViewListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_DoGetClientSize, doc_wxDataViewListCtrl_DoGetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxDataViewListCtrl_DoGetBestSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxDataViewListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_DoGetBestSize, doc_wxDataViewListCtrl_DoGetBestSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxDataViewListCtrl_DoGetBestClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxDataViewListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_DoGetBestClientSize, doc_wxDataViewListCtrl_DoGetBestClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxDataViewListCtrl_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiii", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_DoSetSize, doc_wxDataViewListCtrl_DoSetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxDataViewListCtrl_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_DoSetClientSize, doc_wxDataViewListCtrl_DoSetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxDataViewListCtrl_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiiii", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_DoSetSizeHints, doc_wxDataViewListCtrl_DoSetSizeHints);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxDataViewListCtrl_DoGetBorderSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxDataViewListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_DoGetBorderSize, doc_wxDataViewListCtrl_DoGetBorderSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxDataViewListCtrl_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiii", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_DoMoveWindow, doc_wxDataViewListCtrl_DoMoveWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxDataViewListCtrl_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_DoSetWindowVariant, doc_wxDataViewListCtrl_DoSetWindowVariant);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxDataViewListCtrl_GetDefaultBorder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxDataViewListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_GetDefaultBorder, doc_wxDataViewListCtrl_GetDefaultBorder);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxDataViewListCtrl_GetDefaultBorderForControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxDataViewListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_GetDefaultBorderForControl, doc_wxDataViewListCtrl_GetDefaultBorderForControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxDataViewListCtrl_DoFreeze(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_DoFreeze(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxDataViewListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_DoFreeze, doc_wxDataViewListCtrl_DoFreeze);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxDataViewListCtrl_DoThaw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_DoThaw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxDataViewListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_DoThaw, doc_wxDataViewListCtrl_DoThaw);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewListCtrl_HasTransparentBackground(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxDataViewListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_HasTransparentBackground, doc_wxDataViewListCtrl_HasTransparentBackground);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxDataViewListCtrl_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_TryBefore, doc_wxDataViewListCtrl_TryBefore);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxDataViewListCtrl_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxDataViewListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewListCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_TryAfter, doc_wxDataViewListCtrl_TryAfter);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewListCtrl_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant: WindowVariant = wxWINDOW_VARIANT_NORMAL) -> VisualAttributes");

extern "C" {static PyObject *meth_wxDataViewListCtrl_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewListCtrl_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxDataViewListCtrl::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewListCtrl, sipName_GetClassDefaultAttributes, doc_wxDataViewListCtrl_GetClassDefaultAttributes);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxDataViewListCtrl(void *, const sipTypeDef *);}
static void *cast_wxDataViewListCtrl(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxDataViewListCtrl *sipCpp = reinterpret_cast< ::wxDataViewListCtrl *>(sipCppV);

    if (targetType == sipType_wxDataViewCtrl)
        return static_cast< ::wxDataViewCtrl *>(sipCpp);

    if (targetType == sipType_wxControl)
        return static_cast< ::wxControl *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxDataViewListCtrl(void *, int);}
static void release_wxDataViewListCtrl(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxDataViewListCtrl *>(sipCppV);
    else
        delete reinterpret_cast< ::wxDataViewListCtrl *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxDataViewListCtrl(sipSimpleWrapper *);}
static void dealloc_wxDataViewListCtrl(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxDataViewListCtrl *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxDataViewListCtrl(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxDataViewListCtrl(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxDataViewListCtrl(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxDataViewListCtrl *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxDataViewListCtrl();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxDV_ROW_LINES;
        const  ::wxValidator& validatordef = wxDefaultValidator;
        const  ::wxValidator* validator = &validatordef;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_validator,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J1lJ9", sipType_wxWindow, &parent, sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxValidator, &validator))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxDataViewListCtrl(parent,id,*pos,*size,style,*validator);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxDataViewListCtrl[] = {{7, 255, 1}};


static PyMethodDef methods_wxDataViewListCtrl[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxDataViewListCtrl_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxDataViewListCtrl_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxDataViewListCtrl_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_AddChild), (PyCFunction)meth_wxDataViewListCtrl_AddChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_AddChild)},
    {SIP_MLNAME_CAST(sipName_AppendColumn), (PyCFunction)meth_wxDataViewListCtrl_AppendColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_AppendColumn)},
    {SIP_MLNAME_CAST(sipName_AppendIconTextColumn), (PyCFunction)meth_wxDataViewListCtrl_AppendIconTextColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_AppendIconTextColumn)},
    {SIP_MLNAME_CAST(sipName_AppendItem), (PyCFunction)meth_wxDataViewListCtrl_AppendItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_AppendItem)},
    {SIP_MLNAME_CAST(sipName_AppendProgressColumn), (PyCFunction)meth_wxDataViewListCtrl_AppendProgressColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_AppendProgressColumn)},
    {SIP_MLNAME_CAST(sipName_AppendTextColumn), (PyCFunction)meth_wxDataViewListCtrl_AppendTextColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_AppendTextColumn)},
    {SIP_MLNAME_CAST(sipName_AppendToggleColumn), (PyCFunction)meth_wxDataViewListCtrl_AppendToggleColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_AppendToggleColumn)},
    {SIP_MLNAME_CAST(sipName_Create), (PyCFunction)meth_wxDataViewListCtrl_Create, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_Create)},
    {SIP_MLNAME_CAST(sipName_DeleteAllItems), meth_wxDataViewListCtrl_DeleteAllItems, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_DeleteAllItems)},
    {SIP_MLNAME_CAST(sipName_DeleteItem), (PyCFunction)meth_wxDataViewListCtrl_DeleteItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_DeleteItem)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxDataViewListCtrl_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_Destroy)},
    {SIP_MLNAME_CAST(sipName_DoEnable), (PyCFunction)meth_wxDataViewListCtrl_DoEnable, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), (PyCFunction)meth_wxDataViewListCtrl_DoFreeze, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), (PyCFunction)meth_wxDataViewListCtrl_DoGetBestClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), (PyCFunction)meth_wxDataViewListCtrl_DoGetBestSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), (PyCFunction)meth_wxDataViewListCtrl_DoGetBorderSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), (PyCFunction)meth_wxDataViewListCtrl_DoGetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), (PyCFunction)meth_wxDataViewListCtrl_DoGetPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), (PyCFunction)meth_wxDataViewListCtrl_DoGetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), (PyCFunction)meth_wxDataViewListCtrl_DoMoveWindow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), (PyCFunction)meth_wxDataViewListCtrl_DoSetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), (PyCFunction)meth_wxDataViewListCtrl_DoSetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), (PyCFunction)meth_wxDataViewListCtrl_DoSetSizeHints, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), (PyCFunction)meth_wxDataViewListCtrl_DoSetWindowVariant, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoThaw), (PyCFunction)meth_wxDataViewListCtrl_DoThaw, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_DoThaw)},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), (PyCFunction)meth_wxDataViewListCtrl_GetClassDefaultAttributes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxDataViewListCtrl_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), (PyCFunction)meth_wxDataViewListCtrl_GetDefaultBorder, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), (PyCFunction)meth_wxDataViewListCtrl_GetDefaultBorderForControl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetItemCount), meth_wxDataViewListCtrl_GetItemCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_GetItemCount)},
    {SIP_MLNAME_CAST(sipName_GetItemData), (PyCFunction)meth_wxDataViewListCtrl_GetItemData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_GetItemData)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxDataViewListCtrl_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetSelectedRow), meth_wxDataViewListCtrl_GetSelectedRow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_GetSelectedRow)},
    {SIP_MLNAME_CAST(sipName_GetStore), meth_wxDataViewListCtrl_GetStore, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_GetStore)},
    {SIP_MLNAME_CAST(sipName_GetTextValue), (PyCFunction)meth_wxDataViewListCtrl_GetTextValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_GetTextValue)},
    {SIP_MLNAME_CAST(sipName_GetToggleValue), (PyCFunction)meth_wxDataViewListCtrl_GetToggleValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_GetToggleValue)},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxDataViewListCtrl_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_GetValidator)},
    {SIP_MLNAME_CAST(sipName_GetValue), (PyCFunction)meth_wxDataViewListCtrl_GetValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_GetValue)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), (PyCFunction)meth_wxDataViewListCtrl_HasTransparentBackground, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), (PyCFunction)meth_wxDataViewListCtrl_InformFirstDirection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxDataViewListCtrl_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxDataViewListCtrl_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_InitDialog)},
    {SIP_MLNAME_CAST(sipName_InsertColumn), (PyCFunction)meth_wxDataViewListCtrl_InsertColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_InsertColumn)},
    {SIP_MLNAME_CAST(sipName_InsertItem), (PyCFunction)meth_wxDataViewListCtrl_InsertItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_InsertItem)},
    {SIP_MLNAME_CAST(sipName_IsRowSelected), (PyCFunction)meth_wxDataViewListCtrl_IsRowSelected, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_IsRowSelected)},
    {SIP_MLNAME_CAST(sipName_ItemToRow), (PyCFunction)meth_wxDataViewListCtrl_ItemToRow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_ItemToRow)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxDataViewListCtrl_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_PrependColumn), (PyCFunction)meth_wxDataViewListCtrl_PrependColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_PrependColumn)},
    {SIP_MLNAME_CAST(sipName_PrependItem), (PyCFunction)meth_wxDataViewListCtrl_PrependItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_PrependItem)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), (PyCFunction)meth_wxDataViewListCtrl_ProcessEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), (PyCFunction)meth_wxDataViewListCtrl_RemoveChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_RowToItem), (PyCFunction)meth_wxDataViewListCtrl_RowToItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_RowToItem)},
    {SIP_MLNAME_CAST(sipName_SelectRow), (PyCFunction)meth_wxDataViewListCtrl_SelectRow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_SelectRow)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), (PyCFunction)meth_wxDataViewListCtrl_SendDestroyEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), (PyCFunction)meth_wxDataViewListCtrl_SetCanFocus, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetItemData), (PyCFunction)meth_wxDataViewListCtrl_SetItemData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_SetItemData)},
    {SIP_MLNAME_CAST(sipName_SetTextValue), (PyCFunction)meth_wxDataViewListCtrl_SetTextValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_SetTextValue)},
    {SIP_MLNAME_CAST(sipName_SetToggleValue), (PyCFunction)meth_wxDataViewListCtrl_SetToggleValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_SetToggleValue)},
    {SIP_MLNAME_CAST(sipName_SetValidator), (PyCFunction)meth_wxDataViewListCtrl_SetValidator, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_SetValidator)},
    {SIP_MLNAME_CAST(sipName_SetValue), (PyCFunction)meth_wxDataViewListCtrl_SetValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_SetValue)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxDataViewListCtrl_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxDataViewListCtrl_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxDataViewListCtrl_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), (PyCFunction)meth_wxDataViewListCtrl_TryAfter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), (PyCFunction)meth_wxDataViewListCtrl_TryBefore, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_TryBefore)},
    {SIP_MLNAME_CAST(sipName_UnselectRow), (PyCFunction)meth_wxDataViewListCtrl_UnselectRow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_UnselectRow)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxDataViewListCtrl_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewListCtrl_Validate)}
};

sipVariableDef variables_wxDataViewListCtrl[] = {
    {PropertyVariable, sipName_Store, &methods_wxDataViewListCtrl[36], NULL, NULL, NULL},
    {PropertyVariable, sipName_SelectedRow, &methods_wxDataViewListCtrl[35], NULL, NULL, NULL},
    {PropertyVariable, sipName_ItemCount, &methods_wxDataViewListCtrl[32], NULL, NULL, NULL},
};

PyDoc_STRVAR(doc_wxDataViewListCtrl, "DataViewListCtrl()\n"
"DataViewListCtrl(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=DV_ROW_LINES, validator=wx.DefaultValidator)\n"
"\n"
"This class is a wxDataViewCtrl which internally uses a\n"
"wxDataViewListStore and forwards most of its API to that class.");


sipClassTypeDef sipTypeDef__dataview_wxDataViewListCtrl = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxDataViewListCtrl,
        {0},
        0
    },
    {
        sipNameNr_DataViewListCtrl,
        {0, 0, 1},
        70, methods_wxDataViewListCtrl,
        0, 0,
        3, variables_wxDataViewListCtrl,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxDataViewListCtrl,
    -1,
    -1,
    supers_wxDataViewListCtrl,
    0,
    init_type_wxDataViewListCtrl,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxDataViewListCtrl,
    0,
    0,
    0,
    release_wxDataViewListCtrl,
    cast_wxDataViewListCtrl,
    0,
    0,
    0,
    0,
    0,
    0
};
