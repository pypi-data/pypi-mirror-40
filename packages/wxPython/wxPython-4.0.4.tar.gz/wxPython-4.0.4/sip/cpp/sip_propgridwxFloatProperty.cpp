/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_propgrid.h"

        #include <wx/propgrid/props.h>

        #include <wx/validate.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/propgrid.h>
        #include <wx/bitmap.h>
        #include <wx/colour.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/editors.h>
        #include <wx/propgrid/propgrid.h>
        #include <wx/propgrid/editors.h>
        #include <wx/propgrid/property.h>
        #include <wx/dc.h>
        #include <wx/gdicmn.h>
        #include <wx/propgrid/property.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxFloatProperty : public  ::wxFloatProperty
{
public:
    sipwxFloatProperty(const  ::wxString&,const  ::wxString&,double);
    sipwxFloatProperty(const  ::wxFloatProperty&);
    virtual ~sipwxFloatProperty();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void OnSetValue();
     ::wxPGVariant DoGetValue() const;
    bool ValidateValue( ::wxPGVariant&, ::wxPGValidationInfo&) const;
    bool StringToValue( ::wxPGVariant&,const  ::wxString&,int) const;
    bool IntToValue( ::wxPGVariant&,int,int) const;
     ::wxString ValueToString( ::wxPGVariant&,int) const;
     ::wxSize OnMeasureImage(int) const;
    bool OnEvent( ::wxPropertyGrid*, ::wxWindow*, ::wxEvent&);
     ::wxPGVariant ChildChanged( ::wxPGVariant&,int, ::wxPGVariant&) const;
    const  ::wxPGEditor* DoGetEditorClass() const;
     ::wxValidator* DoGetValidator() const;
    void OnCustomPaint( ::wxDC&,const  ::wxRect&, ::wxPGPaintData&);
     ::wxPGCellRenderer* GetCellRenderer(int) const;
    int GetChoiceSelection() const;
    void RefreshChildren();
    bool DoSetAttribute(const  ::wxString&, ::wxPGVariant&);
     ::wxPGVariant DoGetAttribute(const  ::wxString&) const;
     ::wxPGEditorDialogAdapter* GetEditorDialog() const;
    void OnValidationFailure( ::wxPGVariant&);
     ::wxString GetValueAsString(int) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxFloatProperty(const sipwxFloatProperty &);
    sipwxFloatProperty &operator = (const sipwxFloatProperty &);

    char sipPyMethods[20];
};

sipwxFloatProperty::sipwxFloatProperty(const  ::wxString& label,const  ::wxString& name,double value):  ::wxFloatProperty(label,name,value), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxFloatProperty::sipwxFloatProperty(const  ::wxFloatProperty& a0):  ::wxFloatProperty(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxFloatProperty::~sipwxFloatProperty()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxFloatProperty::OnSetValue()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_OnSetValue);

    if (!sipMeth)
    {
         ::wxFloatProperty::OnSetValue();
        return;
    }

    extern void sipVH__propgrid_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__propgrid_3(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPGVariant sipwxFloatProperty::DoGetValue() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_DoGetValue);

    if (!sipMeth)
        return  ::wxFloatProperty::DoGetValue();

    extern  ::wxPGVariant sipVH__propgrid_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_4(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxFloatProperty::ValidateValue( ::wxPGVariant& value, ::wxPGValidationInfo& validationInfo) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_ValidateValue);

    if (!sipMeth)
        return  ::wxFloatProperty::ValidateValue(value,validationInfo);

    extern bool sipVH__propgrid_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGVariant&, ::wxPGValidationInfo&);

    return sipVH__propgrid_5(sipGILState, 0, sipPySelf, sipMeth, value, validationInfo);
}

bool sipwxFloatProperty::StringToValue( ::wxPGVariant& variant,const  ::wxString& text,int argFlags) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_StringToValue);

    if (!sipMeth)
        return  ::wxFloatProperty::StringToValue(variant,text,argFlags);

    extern bool sipVH__propgrid_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGVariant&,const  ::wxString&,int);

    return sipVH__propgrid_6(sipGILState, 0, sipPySelf, sipMeth, variant, text, argFlags);
}

bool sipwxFloatProperty::IntToValue( ::wxPGVariant& variant,int number,int argFlags) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_IntToValue);

    if (!sipMeth)
        return  ::wxFloatProperty::IntToValue(variant,number,argFlags);

    extern bool sipVH__propgrid_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGVariant&,int,int);

    return sipVH__propgrid_7(sipGILState, 0, sipPySelf, sipMeth, variant, number, argFlags);
}

 ::wxString sipwxFloatProperty::ValueToString( ::wxPGVariant& value,int argFlags) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_ValueToString);

    if (!sipMeth)
        return  ::wxFloatProperty::ValueToString(value,argFlags);

    extern  ::wxString sipVH__propgrid_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGVariant&,int);

    return sipVH__propgrid_8(sipGILState, 0, sipPySelf, sipMeth, value, argFlags);
}

 ::wxSize sipwxFloatProperty::OnMeasureImage(int item) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_OnMeasureImage);

    if (!sipMeth)
        return  ::wxFloatProperty::OnMeasureImage(item);

    extern  ::wxSize sipVH__propgrid_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__propgrid_9(sipGILState, 0, sipPySelf, sipMeth, item);
}

bool sipwxFloatProperty::OnEvent( ::wxPropertyGrid*propgrid, ::wxWindow*wnd_primary, ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_OnEvent);

    if (!sipMeth)
        return  ::wxFloatProperty::OnEvent(propgrid,wnd_primary,event);

    extern bool sipVH__propgrid_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPropertyGrid*, ::wxWindow*, ::wxEvent&);

    return sipVH__propgrid_10(sipGILState, 0, sipPySelf, sipMeth, propgrid, wnd_primary, event);
}

 ::wxPGVariant sipwxFloatProperty::ChildChanged( ::wxPGVariant& thisValue,int childIndex, ::wxPGVariant& childValue) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_ChildChanged);

    if (!sipMeth)
        return  ::wxFloatProperty::ChildChanged(thisValue,childIndex,childValue);

    extern  ::wxPGVariant sipVH__propgrid_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGVariant&,int, ::wxPGVariant&);

    return sipVH__propgrid_11(sipGILState, 0, sipPySelf, sipMeth, thisValue, childIndex, childValue);
}

const  ::wxPGEditor* sipwxFloatProperty::DoGetEditorClass() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_DoGetEditorClass);

    if (!sipMeth)
        return  ::wxFloatProperty::DoGetEditorClass();

    extern const  ::wxPGEditor* sipVH__propgrid_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_12(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxValidator* sipwxFloatProperty::DoGetValidator() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_DoGetValidator);

    if (!sipMeth)
        return  ::wxFloatProperty::DoGetValidator();

    extern  ::wxValidator* sipVH__propgrid_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_13(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxFloatProperty::OnCustomPaint( ::wxDC& dc,const  ::wxRect& rect, ::wxPGPaintData& paintdata)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_OnCustomPaint);

    if (!sipMeth)
    {
         ::wxFloatProperty::OnCustomPaint(dc,rect,paintdata);
        return;
    }

    extern void sipVH__propgrid_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&,const  ::wxRect&, ::wxPGPaintData&);

    sipVH__propgrid_14(sipGILState, 0, sipPySelf, sipMeth, dc, rect, paintdata);
}

 ::wxPGCellRenderer* sipwxFloatProperty::GetCellRenderer(int column) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_GetCellRenderer);

    if (!sipMeth)
        return  ::wxFloatProperty::GetCellRenderer(column);

    extern  ::wxPGCellRenderer* sipVH__propgrid_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__propgrid_15(sipGILState, 0, sipPySelf, sipMeth, column);
}

int sipwxFloatProperty::GetChoiceSelection() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_GetChoiceSelection);

    if (!sipMeth)
        return  ::wxFloatProperty::GetChoiceSelection();

    extern int sipVH__propgrid_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_16(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxFloatProperty::RefreshChildren()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_RefreshChildren);

    if (!sipMeth)
    {
         ::wxFloatProperty::RefreshChildren();
        return;
    }

    extern void sipVH__propgrid_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__propgrid_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxFloatProperty::DoSetAttribute(const  ::wxString& name, ::wxPGVariant& value)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_DoSetAttribute);

    if (!sipMeth)
        return  ::wxFloatProperty::DoSetAttribute(name,value);

    extern bool sipVH__propgrid_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&, ::wxPGVariant&);

    return sipVH__propgrid_17(sipGILState, 0, sipPySelf, sipMeth, name, value);
}

 ::wxPGVariant sipwxFloatProperty::DoGetAttribute(const  ::wxString& name) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_DoGetAttribute);

    if (!sipMeth)
        return  ::wxFloatProperty::DoGetAttribute(name);

    extern  ::wxPGVariant sipVH__propgrid_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&);

    return sipVH__propgrid_18(sipGILState, 0, sipPySelf, sipMeth, name);
}

 ::wxPGEditorDialogAdapter* sipwxFloatProperty::GetEditorDialog() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_GetEditorDialog);

    if (!sipMeth)
        return  ::wxFloatProperty::GetEditorDialog();

    extern  ::wxPGEditorDialogAdapter* sipVH__propgrid_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__propgrid_19(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxFloatProperty::OnValidationFailure( ::wxPGVariant& pendingValue)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_OnValidationFailure);

    if (!sipMeth)
    {
         ::wxFloatProperty::OnValidationFailure(pendingValue);
        return;
    }

    extern void sipVH__propgrid_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPGVariant&);

    sipVH__propgrid_20(sipGILState, 0, sipPySelf, sipMeth, pendingValue);
}

 ::wxString sipwxFloatProperty::GetValueAsString(int argFlags) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[19]),sipPySelf,NULL,sipName_GetValueAsString);

    if (!sipMeth)
        return  ::wxFloatProperty::GetValueAsString(argFlags);

    extern  ::wxString sipVH__propgrid_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__propgrid_21(sipGILState, 0, sipPySelf, sipMeth, argFlags);
}


PyDoc_STRVAR(doc_wxFloatProperty_ValueToString, "ValueToString(value, argFlags=0) -> String\n"
"\n"
"Converts property value into a text representation.");

extern "C" {static PyObject *meth_wxFloatProperty_ValueToString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFloatProperty_ValueToString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPGVariant* value;
        int valueState = 0;
        int argFlags = 0;
        const  ::wxFloatProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
            sipName_argFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_wxFloatProperty, &sipCpp, sipType_wxPGVariant,&value, &valueState, &argFlags))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxFloatProperty::ValueToString(*value,argFlags) : sipCpp->ValueToString(*value,argFlags)));
            Py_END_ALLOW_THREADS
            sipReleaseType(value,sipType_wxPGVariant,valueState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FloatProperty, sipName_ValueToString, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFloatProperty_StringToValue, "StringToValue(text, argFlags=0) -> (bool, variant)\n"
"\n"
"Converts text into wxVariant value appropriate for this property.");

extern "C" {static PyObject *meth_wxFloatProperty_StringToValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFloatProperty_StringToValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPGVariant* variant;
        const  ::wxString* text;
        int textState = 0;
        int argFlags = 0;
        const  ::wxFloatProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_text,
            sipName_argFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|i", &sipSelf, sipType_wxFloatProperty, &sipCpp, sipType_wxString,&text, &textState, &argFlags))
        {
            bool sipRes;
            variant = new  ::wxPGVariant();

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxFloatProperty::StringToValue(*variant,*text,argFlags) : sipCpp->StringToValue(*variant,*text,argFlags));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bN)",sipRes,variant,sipType_wxPGVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FloatProperty, sipName_StringToValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFloatProperty_DoSetAttribute, "DoSetAttribute(name, value) -> bool\n"
"\n"
"Reimplement this member function to add special handling for\n"
"attributes of this property.");

extern "C" {static PyObject *meth_wxFloatProperty_DoSetAttribute(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFloatProperty_DoSetAttribute(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* name;
        int nameState = 0;
         ::wxPGVariant* value;
        int valueState = 0;
         ::wxFloatProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1", &sipSelf, sipType_wxFloatProperty, &sipCpp, sipType_wxString,&name, &nameState, sipType_wxPGVariant,&value, &valueState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxFloatProperty::DoSetAttribute(*name,*value) : sipCpp->DoSetAttribute(*name,*value));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);
            sipReleaseType(value,sipType_wxPGVariant,valueState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FloatProperty, sipName_DoSetAttribute, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFloatProperty_DoGetAttribute, "DoGetAttribute(name) -> PGVariant\n"
"\n"
"Returns value of an attribute.");

extern "C" {static PyObject *meth_wxFloatProperty_DoGetAttribute(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFloatProperty_DoGetAttribute(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* name;
        int nameState = 0;
        const  ::wxFloatProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxFloatProperty, &sipCpp, sipType_wxString,&name, &nameState))
        {
             ::wxPGVariant*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPGVariant((sipSelfWasArg ? sipCpp-> ::wxFloatProperty::DoGetAttribute(*name) : sipCpp->DoGetAttribute(*name)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPGVariant,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FloatProperty, sipName_DoGetAttribute, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFloatProperty_ValidateValue, "ValidateValue(value, validationInfo) -> bool\n"
"\n"
"Implement this function in derived class to check the value.");

extern "C" {static PyObject *meth_wxFloatProperty_ValidateValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFloatProperty_ValidateValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPGVariant* value;
        int valueState = 0;
         ::wxPGValidationInfo* validationInfo;
        const  ::wxFloatProperty *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
            sipName_validationInfo,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J9", &sipSelf, sipType_wxFloatProperty, &sipCpp, sipType_wxPGVariant,&value, &valueState, sipType_wxPGValidationInfo, &validationInfo))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxFloatProperty::ValidateValue(*value,*validationInfo) : sipCpp->ValidateValue(*value,*validationInfo));
            Py_END_ALLOW_THREADS
            sipReleaseType(value,sipType_wxPGVariant,valueState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FloatProperty, sipName_ValidateValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFloatProperty_DoGetValidator, "DoGetValidator() -> wx.Validator\n"
"\n"
"Returns pointer to the wxValidator that should be used with the editor\n"
"of this property (NULL for no validator).");

extern "C" {static PyObject *meth_wxFloatProperty_DoGetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxFloatProperty_DoGetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxFloatProperty *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFloatProperty, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxFloatProperty::DoGetValidator() : sipCpp->DoGetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FloatProperty, sipName_DoGetValidator, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFloatProperty_DoValidation, "DoValidation(property, value, pValidationInfo, mode=PG_PROPERTY_VALIDATION_ERROR_MESSAGE) -> bool\n"
"\n"
"Validation helper.");

extern "C" {static PyObject *meth_wxFloatProperty_DoValidation(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFloatProperty_DoValidation(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPGProperty* property;
        double value;
         ::wxPGValidationInfo* pValidationInfo;
        int mode = wxPG_PROPERTY_VALIDATION_ERROR_MESSAGE;

        static const char *sipKwdList[] = {
            sipName_property,
            sipName_pValidationInfo,
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8J8|i", sipType_wxPGProperty, &property, sipType_wxPGValidationInfo, &pValidationInfo, &mode))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxFloatProperty::DoValidation(property,value,pValidationInfo,mode);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bd)",sipRes,value);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FloatProperty, sipName_DoValidation, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFloatProperty_GetClassValidator, "GetClassValidator() -> wx.Validator");

extern "C" {static PyObject *meth_wxFloatProperty_GetClassValidator(PyObject *, PyObject *);}
static PyObject *meth_wxFloatProperty_GetClassValidator(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxFloatProperty::GetClassValidator();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FloatProperty, sipName_GetClassValidator, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxFloatProperty(void *, const sipTypeDef *);}
static void *cast_wxFloatProperty(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxFloatProperty *sipCpp = reinterpret_cast< ::wxFloatProperty *>(sipCppV);

    if (targetType == sipType_wxPGProperty)
        return static_cast< ::wxPGProperty *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxFloatProperty(void *, int);}
static void release_wxFloatProperty(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxFloatProperty *>(sipCppV);
    else
        delete reinterpret_cast< ::wxFloatProperty *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_wxFloatProperty(void *, SIP_SSIZE_T, void *);}
static void assign_wxFloatProperty(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxFloatProperty *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxFloatProperty *>(sipSrc);
}


extern "C" {static void *array_wxFloatProperty(SIP_SSIZE_T);}
static void *array_wxFloatProperty(SIP_SSIZE_T sipNrElem)
{
    return new  ::wxFloatProperty[sipNrElem];
}


extern "C" {static void *copy_wxFloatProperty(const void *, SIP_SSIZE_T);}
static void *copy_wxFloatProperty(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxFloatProperty(reinterpret_cast<const  ::wxFloatProperty *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxFloatProperty(sipSimpleWrapper *);}
static void dealloc_wxFloatProperty(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxFloatProperty *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxFloatProperty(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxFloatProperty(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxFloatProperty(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxFloatProperty *sipCpp = 0;

    {
        const  ::wxString& labeldef = wxPG_LABEL;
        const  ::wxString* label = &labeldef;
        int labelState = 0;
        const  ::wxString& namedef = wxPG_LABEL;
        const  ::wxString* name = &namedef;
        int nameState = 0;
        double value = 0;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_name,
            sipName_value,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1J1d", sipType_wxString,&label, &labelState, sipType_wxString,&name, &nameState, &value))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxFloatProperty(*label,*name,value);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxFloatProperty* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxFloatProperty, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxFloatProperty(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxFloatProperty[] = {{43, 255, 1}};


static PyMethodDef methods_wxFloatProperty[] = {
    {SIP_MLNAME_CAST(sipName_DoGetAttribute), (PyCFunction)meth_wxFloatProperty_DoGetAttribute, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFloatProperty_DoGetAttribute)},
    {SIP_MLNAME_CAST(sipName_DoGetValidator), meth_wxFloatProperty_DoGetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFloatProperty_DoGetValidator)},
    {SIP_MLNAME_CAST(sipName_DoSetAttribute), (PyCFunction)meth_wxFloatProperty_DoSetAttribute, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFloatProperty_DoSetAttribute)},
    {SIP_MLNAME_CAST(sipName_DoValidation), (PyCFunction)meth_wxFloatProperty_DoValidation, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFloatProperty_DoValidation)},
    {SIP_MLNAME_CAST(sipName_GetClassValidator), meth_wxFloatProperty_GetClassValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFloatProperty_GetClassValidator)},
    {SIP_MLNAME_CAST(sipName_StringToValue), (PyCFunction)meth_wxFloatProperty_StringToValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFloatProperty_StringToValue)},
    {SIP_MLNAME_CAST(sipName_ValidateValue), (PyCFunction)meth_wxFloatProperty_ValidateValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFloatProperty_ValidateValue)},
    {SIP_MLNAME_CAST(sipName_ValueToString), (PyCFunction)meth_wxFloatProperty_ValueToString, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFloatProperty_ValueToString)}
};

PyDoc_STRVAR(doc_wxFloatProperty, "FloatProperty(label=PG_LABEL, name=PG_LABEL, value=0.0)\n"
"\n"
"Basic property with double-precision floating point value.");


sipClassTypeDef sipTypeDef__propgrid_wxFloatProperty = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxFloatProperty,
        {0},
        0
    },
    {
        sipNameNr_FloatProperty,
        {0, 0, 1},
        8, methods_wxFloatProperty,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxFloatProperty,
    -1,
    -1,
    supers_wxFloatProperty,
    0,
    init_type_wxFloatProperty,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxFloatProperty,
    assign_wxFloatProperty,
    array_wxFloatProperty,
    copy_wxFloatProperty,
    release_wxFloatProperty,
    cast_wxFloatProperty,
    0,
    0,
    0,
    0,
    0,
    0
};
