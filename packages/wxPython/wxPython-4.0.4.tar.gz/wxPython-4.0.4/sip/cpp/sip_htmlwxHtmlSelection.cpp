/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_html.h"

        #include <wx/html/htmlcell.h>

        #include <wx/gdicmn.h>
        #include <wx/html/htmlcell.h>


PyDoc_STRVAR(doc_wxHtmlSelection_Set, "Set(fromPos, fromCell, toPos, toCell)\n"
"Set(fromCell, toCell)\n"
"");

extern "C" {static PyObject *meth_wxHtmlSelection_Set(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlSelection_Set(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPoint* fromPos;
        int fromPosState = 0;
        const  ::wxHtmlCell* fromCell;
        const  ::wxPoint* toPos;
        int toPosState = 0;
        const  ::wxHtmlCell* toCell;
         ::wxHtmlSelection *sipCpp;

        static const char *sipKwdList[] = {
            sipName_fromPos,
            sipName_fromCell,
            sipName_toPos,
            sipName_toCell,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J8J1J8", &sipSelf, sipType_wxHtmlSelection, &sipCpp, sipType_wxPoint, &fromPos, &fromPosState, sipType_wxHtmlCell, &fromCell, sipType_wxPoint, &toPos, &toPosState, sipType_wxHtmlCell, &toCell))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Set(*fromPos,fromCell,*toPos,toCell);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(fromPos),sipType_wxPoint,fromPosState);
            sipReleaseType(const_cast< ::wxPoint *>(toPos),sipType_wxPoint,toPosState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::wxHtmlCell* fromCell;
        const  ::wxHtmlCell* toCell;
         ::wxHtmlSelection *sipCpp;

        static const char *sipKwdList[] = {
            sipName_fromCell,
            sipName_toCell,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J8", &sipSelf, sipType_wxHtmlSelection, &sipCpp, sipType_wxHtmlCell, &fromCell, sipType_wxHtmlCell, &toCell))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Set(fromCell,toCell);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlSelection, sipName_Set, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlSelection_GetFromCell, "GetFromCell() -> HtmlCell");

extern "C" {static PyObject *meth_wxHtmlSelection_GetFromCell(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlSelection_GetFromCell(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxHtmlSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlSelection, &sipCpp))
        {
            const  ::wxHtmlCell*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetFromCell();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(const_cast< ::wxHtmlCell *>(sipRes),sipType_wxHtmlCell,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlSelection, sipName_GetFromCell, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlSelection_GetToCell, "GetToCell() -> HtmlCell");

extern "C" {static PyObject *meth_wxHtmlSelection_GetToCell(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlSelection_GetToCell(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxHtmlSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlSelection, &sipCpp))
        {
            const  ::wxHtmlCell*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToCell();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(const_cast< ::wxHtmlCell *>(sipRes),sipType_wxHtmlCell,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlSelection, sipName_GetToCell, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlSelection_GetFromPos, "GetFromPos() -> wx.Point");

extern "C" {static PyObject *meth_wxHtmlSelection_GetFromPos(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlSelection_GetFromPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxHtmlSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlSelection, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint(sipCpp->GetFromPos());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlSelection, sipName_GetFromPos, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlSelection_GetToPos, "GetToPos() -> wx.Point");

extern "C" {static PyObject *meth_wxHtmlSelection_GetToPos(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlSelection_GetToPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxHtmlSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlSelection, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint(sipCpp->GetToPos());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlSelection, sipName_GetToPos, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlSelection_ClearFromToCharacterPos, "ClearFromToCharacterPos()");

extern "C" {static PyObject *meth_wxHtmlSelection_ClearFromToCharacterPos(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlSelection_ClearFromToCharacterPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxHtmlSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlSelection, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ClearFromToCharacterPos();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlSelection, sipName_ClearFromToCharacterPos, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlSelection_AreFromToCharacterPosSet, "AreFromToCharacterPosSet() -> bool");

extern "C" {static PyObject *meth_wxHtmlSelection_AreFromToCharacterPosSet(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlSelection_AreFromToCharacterPosSet(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxHtmlSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlSelection, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AreFromToCharacterPosSet();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlSelection, sipName_AreFromToCharacterPosSet, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlSelection_SetFromCharacterPos, "SetFromCharacterPos(pos)");

extern "C" {static PyObject *meth_wxHtmlSelection_SetFromCharacterPos(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlSelection_SetFromCharacterPos(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxCoord pos;
         ::wxHtmlSelection *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxHtmlSelection, &sipCpp, &pos))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFromCharacterPos(pos);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlSelection, sipName_SetFromCharacterPos, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlSelection_SetToCharacterPos, "SetToCharacterPos(pos)");

extern "C" {static PyObject *meth_wxHtmlSelection_SetToCharacterPos(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlSelection_SetToCharacterPos(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxCoord pos;
         ::wxHtmlSelection *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxHtmlSelection, &sipCpp, &pos))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToCharacterPos(pos);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlSelection, sipName_SetToCharacterPos, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlSelection_GetFromCharacterPos, "GetFromCharacterPos() -> Coord");

extern "C" {static PyObject *meth_wxHtmlSelection_GetFromCharacterPos(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlSelection_GetFromCharacterPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxHtmlSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlSelection, &sipCpp))
        {
             ::wxCoord sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetFromCharacterPos();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlSelection, sipName_GetFromCharacterPos, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlSelection_GetToCharacterPos, "GetToCharacterPos() -> Coord");

extern "C" {static PyObject *meth_wxHtmlSelection_GetToCharacterPos(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlSelection_GetToCharacterPos(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxHtmlSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlSelection, &sipCpp))
        {
             ::wxCoord sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToCharacterPos();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlSelection, sipName_GetToCharacterPos, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlSelection_IsEmpty, "IsEmpty() -> bool");

extern "C" {static PyObject *meth_wxHtmlSelection_IsEmpty(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlSelection_IsEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxHtmlSelection *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlSelection, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsEmpty();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlSelection, sipName_IsEmpty, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxHtmlSelection(void *, int);}
static void release_wxHtmlSelection(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::wxHtmlSelection *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_wxHtmlSelection(void *, SIP_SSIZE_T, void *);}
static void assign_wxHtmlSelection(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxHtmlSelection *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxHtmlSelection *>(sipSrc);
}


extern "C" {static void *array_wxHtmlSelection(SIP_SSIZE_T);}
static void *array_wxHtmlSelection(SIP_SSIZE_T sipNrElem)
{
    return new  ::wxHtmlSelection[sipNrElem];
}


extern "C" {static void *copy_wxHtmlSelection(const void *, SIP_SSIZE_T);}
static void *copy_wxHtmlSelection(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxHtmlSelection(reinterpret_cast<const  ::wxHtmlSelection *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxHtmlSelection(sipSimpleWrapper *);}
static void dealloc_wxHtmlSelection(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxHtmlSelection(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_wxHtmlSelection(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxHtmlSelection(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::wxHtmlSelection *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxHtmlSelection();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            return sipCpp;
        }
    }

    {
        const  ::wxHtmlSelection* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxHtmlSelection, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxHtmlSelection(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_wxHtmlSelection[] = {
    {SIP_MLNAME_CAST(sipName_AreFromToCharacterPosSet), meth_wxHtmlSelection_AreFromToCharacterPosSet, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlSelection_AreFromToCharacterPosSet)},
    {SIP_MLNAME_CAST(sipName_ClearFromToCharacterPos), meth_wxHtmlSelection_ClearFromToCharacterPos, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlSelection_ClearFromToCharacterPos)},
    {SIP_MLNAME_CAST(sipName_GetFromCell), meth_wxHtmlSelection_GetFromCell, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlSelection_GetFromCell)},
    {SIP_MLNAME_CAST(sipName_GetFromCharacterPos), meth_wxHtmlSelection_GetFromCharacterPos, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlSelection_GetFromCharacterPos)},
    {SIP_MLNAME_CAST(sipName_GetFromPos), meth_wxHtmlSelection_GetFromPos, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlSelection_GetFromPos)},
    {SIP_MLNAME_CAST(sipName_GetToCell), meth_wxHtmlSelection_GetToCell, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlSelection_GetToCell)},
    {SIP_MLNAME_CAST(sipName_GetToCharacterPos), meth_wxHtmlSelection_GetToCharacterPos, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlSelection_GetToCharacterPos)},
    {SIP_MLNAME_CAST(sipName_GetToPos), meth_wxHtmlSelection_GetToPos, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlSelection_GetToPos)},
    {SIP_MLNAME_CAST(sipName_IsEmpty), meth_wxHtmlSelection_IsEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlSelection_IsEmpty)},
    {SIP_MLNAME_CAST(sipName_Set), (PyCFunction)meth_wxHtmlSelection_Set, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlSelection_Set)},
    {SIP_MLNAME_CAST(sipName_SetFromCharacterPos), (PyCFunction)meth_wxHtmlSelection_SetFromCharacterPos, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlSelection_SetFromCharacterPos)},
    {SIP_MLNAME_CAST(sipName_SetToCharacterPos), (PyCFunction)meth_wxHtmlSelection_SetToCharacterPos, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlSelection_SetToCharacterPos)}
};

sipVariableDef variables_wxHtmlSelection[] = {
    {PropertyVariable, sipName_ToPos, &methods_wxHtmlSelection[7], NULL, NULL, NULL},
    {PropertyVariable, sipName_ToCharacterPos, &methods_wxHtmlSelection[6], &methods_wxHtmlSelection[11], NULL, NULL},
    {PropertyVariable, sipName_ToCell, &methods_wxHtmlSelection[5], NULL, NULL, NULL},
    {PropertyVariable, sipName_FromPos, &methods_wxHtmlSelection[4], NULL, NULL, NULL},
    {PropertyVariable, sipName_FromCharacterPos, &methods_wxHtmlSelection[3], &methods_wxHtmlSelection[10], NULL, NULL},
    {PropertyVariable, sipName_FromCell, &methods_wxHtmlSelection[2], NULL, NULL, NULL},
};

PyDoc_STRVAR(doc_wxHtmlSelection, "HtmlSelection()");


sipClassTypeDef sipTypeDef__html_wxHtmlSelection = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxHtmlSelection,
        {0},
        0
    },
    {
        sipNameNr_HtmlSelection,
        {0, 0, 1},
        12, methods_wxHtmlSelection,
        0, 0,
        6, variables_wxHtmlSelection,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxHtmlSelection,
    -1,
    -1,
    0,
    0,
    init_type_wxHtmlSelection,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxHtmlSelection,
    assign_wxHtmlSelection,
    array_wxHtmlSelection,
    copy_wxHtmlSelection,
    release_wxHtmlSelection,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
