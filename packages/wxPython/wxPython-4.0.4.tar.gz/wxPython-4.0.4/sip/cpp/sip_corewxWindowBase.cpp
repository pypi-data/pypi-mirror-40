/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"


        #include <wx/event.h>
        #include <wx/eventfilter.h>
        #include <wx/event.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


PyDoc_STRVAR(doc_wxWindowBase_AddChild, "AddChild(child)");

extern "C" {static PyObject *meth_wxWindowBase_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWindowBase_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxWindowBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxWindowBase, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxWindowBase::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WindowBase, sipName_AddChild, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxWindowBase_RemoveChild, "RemoveChild(child)");

extern "C" {static PyObject *meth_wxWindowBase_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxWindowBase_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxWindowBase *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxWindowBase, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxWindowBase::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_WindowBase, sipName_RemoveChild, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxWindowBase(void *, const sipTypeDef *);}
static void *cast_wxWindowBase(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxWindowBase *sipCpp = reinterpret_cast< ::wxWindowBase *>(sipCppV);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxWindowBase(void *, int);}
static void release_wxWindowBase(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::wxWindowBase *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxWindowBase(sipSimpleWrapper *);}
static void dealloc_wxWindowBase(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxWindowBase(sipGetAddress(sipSelf), 0);
    }
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxWindowBase[] = {{148, 255, 1}};


static PyMethodDef methods_wxWindowBase[] = {
    {SIP_MLNAME_CAST(sipName_AddChild), (PyCFunction)meth_wxWindowBase_AddChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxWindowBase_AddChild)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), (PyCFunction)meth_wxWindowBase_RemoveChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxWindowBase_RemoveChild)}
};

PyDoc_STRVAR(doc_wxWindowBase, "");


sipClassTypeDef sipTypeDef__core_wxWindowBase = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxWindowBase,
        {0},
        0
    },
    {
        sipNameNr_WindowBase,
        {0, 0, 1},
        2, methods_wxWindowBase,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxWindowBase,
    -1,
    -1,
    supers_wxWindowBase,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxWindowBase,
    0,
    0,
    0,
    release_wxWindowBase,
    cast_wxWindowBase,
    0,
    0,
    0,
    0,
    0,
    0
};
