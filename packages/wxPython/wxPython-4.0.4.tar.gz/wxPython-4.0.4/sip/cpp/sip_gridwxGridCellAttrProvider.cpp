/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_grid.h"

        #include <wx/grid.h>

        #include <wx/grid.h>
        #include <wx/grid.h>
        #include <wx/grid.h>
        #include <wx/grid.h>


class sipwxGridCellAttrProvider : public  ::wxGridCellAttrProvider
{
public:
    sipwxGridCellAttrProvider();
    virtual ~sipwxGridCellAttrProvider();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxGridCellAttr* GetAttr(int,int, ::wxGridCellAttr::wxAttrKind) const;
    const  ::wxGridCornerHeaderRenderer& GetCornerRenderer();
    const  ::wxGridRowHeaderRenderer& GetRowHeaderRenderer(int);
    const  ::wxGridColumnHeaderRenderer& GetColumnHeaderRenderer(int);
    void SetColAttr( ::wxGridCellAttr*,int);
    void SetRowAttr( ::wxGridCellAttr*,int);
    void SetAttr( ::wxGridCellAttr*,int,int);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxGridCellAttrProvider(const sipwxGridCellAttrProvider &);
    sipwxGridCellAttrProvider &operator = (const sipwxGridCellAttrProvider &);

    char sipPyMethods[7];
};

sipwxGridCellAttrProvider::sipwxGridCellAttrProvider():  ::wxGridCellAttrProvider(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxGridCellAttrProvider::~sipwxGridCellAttrProvider()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxGridCellAttr* sipwxGridCellAttrProvider::GetAttr(int row,int col, ::wxGridCellAttr::wxAttrKind kind) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_GetAttr);

    if (!sipMeth)
        return  ::wxGridCellAttrProvider::GetAttr(row,col,kind);

    extern  ::wxGridCellAttr* sipVH__grid_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int, ::wxGridCellAttr::wxAttrKind);

    return sipVH__grid_22(sipGILState, 0, sipPySelf, sipMeth, row, col, kind);
}

const  ::wxGridCornerHeaderRenderer& sipwxGridCellAttrProvider::GetCornerRenderer()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_GetCornerRenderer);

    if (!sipMeth)
        return  ::wxGridCellAttrProvider::GetCornerRenderer();

    extern const  ::wxGridCornerHeaderRenderer& sipVH__grid_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__grid_21(sipGILState, 0, sipPySelf, sipMeth);
}

const  ::wxGridRowHeaderRenderer& sipwxGridCellAttrProvider::GetRowHeaderRenderer(int row)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_GetRowHeaderRenderer);

    if (!sipMeth)
        return  ::wxGridCellAttrProvider::GetRowHeaderRenderer(row);

    extern const  ::wxGridRowHeaderRenderer& sipVH__grid_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__grid_20(sipGILState, 0, sipPySelf, sipMeth, row);
}

const  ::wxGridColumnHeaderRenderer& sipwxGridCellAttrProvider::GetColumnHeaderRenderer(int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_GetColumnHeaderRenderer);

    if (!sipMeth)
        return  ::wxGridCellAttrProvider::GetColumnHeaderRenderer(col);

    extern const  ::wxGridColumnHeaderRenderer& sipVH__grid_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__grid_19(sipGILState, 0, sipPySelf, sipMeth, col);
}

void sipwxGridCellAttrProvider::SetColAttr( ::wxGridCellAttr*attr,int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_SetColAttr);

    if (!sipMeth)
    {
         ::wxGridCellAttrProvider::SetColAttr(attr,col);
        return;
    }

    extern void sipVH__grid_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxGridCellAttr*,int);

    sipVH__grid_18(sipGILState, 0, sipPySelf, sipMeth, attr, col);
}

void sipwxGridCellAttrProvider::SetRowAttr( ::wxGridCellAttr*attr,int row)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_SetRowAttr);

    if (!sipMeth)
    {
         ::wxGridCellAttrProvider::SetRowAttr(attr,row);
        return;
    }

    extern void sipVH__grid_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxGridCellAttr*,int);

    sipVH__grid_18(sipGILState, 0, sipPySelf, sipMeth, attr, row);
}

void sipwxGridCellAttrProvider::SetAttr( ::wxGridCellAttr*attr,int row,int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_SetAttr);

    if (!sipMeth)
    {
         ::wxGridCellAttrProvider::SetAttr(attr,row,col);
        return;
    }

    extern void sipVH__grid_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxGridCellAttr*,int,int);

    sipVH__grid_17(sipGILState, 0, sipPySelf, sipMeth, attr, row, col);
}


PyDoc_STRVAR(doc_wxGridCellAttrProvider_SetAttr, "SetAttr(attr, row, col)\n"
"\n"
"Set attribute for the specified cell.");

extern "C" {static PyObject *meth_wxGridCellAttrProvider_SetAttr(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridCellAttrProvider_SetAttr(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxGridCellAttr* attr;
        int row;
        int col;
         ::wxGridCellAttrProvider *sipCpp;

        static const char *sipKwdList[] = {
            sipName_attr,
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:ii", &sipSelf, sipType_wxGridCellAttrProvider, &sipCpp, sipType_wxGridCellAttr, &attr, &row, &col))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxGridCellAttrProvider::SetAttr(attr,row,col) : sipCpp->SetAttr(attr,row,col));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridCellAttrProvider, sipName_SetAttr, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxGridCellAttrProvider_SetRowAttr, "SetRowAttr(attr, row)\n"
"\n"
"Set attribute for the specified row.");

extern "C" {static PyObject *meth_wxGridCellAttrProvider_SetRowAttr(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridCellAttrProvider_SetRowAttr(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxGridCellAttr* attr;
        int row;
         ::wxGridCellAttrProvider *sipCpp;

        static const char *sipKwdList[] = {
            sipName_attr,
            sipName_row,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:i", &sipSelf, sipType_wxGridCellAttrProvider, &sipCpp, sipType_wxGridCellAttr, &attr, &row))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxGridCellAttrProvider::SetRowAttr(attr,row) : sipCpp->SetRowAttr(attr,row));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridCellAttrProvider, sipName_SetRowAttr, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxGridCellAttrProvider_SetColAttr, "SetColAttr(attr, col)\n"
"\n"
"Set attribute for the specified column.");

extern "C" {static PyObject *meth_wxGridCellAttrProvider_SetColAttr(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridCellAttrProvider_SetColAttr(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxGridCellAttr* attr;
        int col;
         ::wxGridCellAttrProvider *sipCpp;

        static const char *sipKwdList[] = {
            sipName_attr,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:i", &sipSelf, sipType_wxGridCellAttrProvider, &sipCpp, sipType_wxGridCellAttr, &attr, &col))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxGridCellAttrProvider::SetColAttr(attr,col) : sipCpp->SetColAttr(attr,col));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridCellAttrProvider, sipName_SetColAttr, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxGridCellAttrProvider_GetColumnHeaderRenderer, "GetColumnHeaderRenderer(col) -> GridColumnHeaderRenderer\n"
"\n"
"Return the renderer used for drawing column headers.");

extern "C" {static PyObject *meth_wxGridCellAttrProvider_GetColumnHeaderRenderer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridCellAttrProvider_GetColumnHeaderRenderer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int col;
         ::wxGridCellAttrProvider *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxGridCellAttrProvider, &sipCpp, &col))
        {
            const  ::wxGridColumnHeaderRenderer*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(sipSelfWasArg ? sipCpp-> ::wxGridCellAttrProvider::GetColumnHeaderRenderer(col) : sipCpp->GetColumnHeaderRenderer(col));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(const_cast< ::wxGridColumnHeaderRenderer *>(sipRes),sipType_wxGridColumnHeaderRenderer,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridCellAttrProvider, sipName_GetColumnHeaderRenderer, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxGridCellAttrProvider_GetRowHeaderRenderer, "GetRowHeaderRenderer(row) -> GridRowHeaderRenderer\n"
"\n"
"Return the renderer used for drawing row headers.");

extern "C" {static PyObject *meth_wxGridCellAttrProvider_GetRowHeaderRenderer(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridCellAttrProvider_GetRowHeaderRenderer(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
         ::wxGridCellAttrProvider *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxGridCellAttrProvider, &sipCpp, &row))
        {
            const  ::wxGridRowHeaderRenderer*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(sipSelfWasArg ? sipCpp-> ::wxGridCellAttrProvider::GetRowHeaderRenderer(row) : sipCpp->GetRowHeaderRenderer(row));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(const_cast< ::wxGridRowHeaderRenderer *>(sipRes),sipType_wxGridRowHeaderRenderer,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridCellAttrProvider, sipName_GetRowHeaderRenderer, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxGridCellAttrProvider_GetCornerRenderer, "GetCornerRenderer() -> GridCornerHeaderRenderer\n"
"\n"
"Return the renderer used for drawing the corner window.");

extern "C" {static PyObject *meth_wxGridCellAttrProvider_GetCornerRenderer(PyObject *, PyObject *);}
static PyObject *meth_wxGridCellAttrProvider_GetCornerRenderer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxGridCellAttrProvider *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridCellAttrProvider, &sipCpp))
        {
            const  ::wxGridCornerHeaderRenderer*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &(sipSelfWasArg ? sipCpp-> ::wxGridCellAttrProvider::GetCornerRenderer() : sipCpp->GetCornerRenderer());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(const_cast< ::wxGridCornerHeaderRenderer *>(sipRes),sipType_wxGridCornerHeaderRenderer,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridCellAttrProvider, sipName_GetCornerRenderer, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxGridCellAttrProvider_GetAttr, "GetAttr(row, col, kind) -> GridCellAttr\n"
"\n"
"Get the attribute to use for the specified cell.");

extern "C" {static PyObject *meth_wxGridCellAttrProvider_GetAttr(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridCellAttrProvider_GetAttr(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
        int col;
         ::wxGridCellAttr::wxAttrKind kind;
        const  ::wxGridCellAttrProvider *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
            sipName_kind,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiiE", &sipSelf, sipType_wxGridCellAttrProvider, &sipCpp, &row, &col, sipType_wxGridCellAttr_wxAttrKind, &kind))
        {
             ::wxGridCellAttr*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridCellAttrProvider::GetAttr(row,col,kind) : sipCpp->GetAttr(row,col,kind));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxGridCellAttr,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridCellAttrProvider, sipName_GetAttr, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxGridCellAttrProvider(void *, const sipTypeDef *);}
static void *cast_wxGridCellAttrProvider(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxGridCellAttrProvider *sipCpp = reinterpret_cast< ::wxGridCellAttrProvider *>(sipCppV);

    if (targetType == sipType_wxClientDataContainer)
        return static_cast< ::wxClientDataContainer *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxGridCellAttrProvider(void *, int);}
static void release_wxGridCellAttrProvider(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxGridCellAttrProvider *>(sipCppV);
    else
        delete reinterpret_cast< ::wxGridCellAttrProvider *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxGridCellAttrProvider(sipSimpleWrapper *);}
static void dealloc_wxGridCellAttrProvider(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxGridCellAttrProvider *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxGridCellAttrProvider(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxGridCellAttrProvider(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxGridCellAttrProvider(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxGridCellAttrProvider *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxGridCellAttrProvider();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxGridCellAttrProvider[] = {{5, 0, 1}};


static PyMethodDef methods_wxGridCellAttrProvider[] = {
    {SIP_MLNAME_CAST(sipName_GetAttr), (PyCFunction)meth_wxGridCellAttrProvider_GetAttr, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridCellAttrProvider_GetAttr)},
    {SIP_MLNAME_CAST(sipName_GetColumnHeaderRenderer), (PyCFunction)meth_wxGridCellAttrProvider_GetColumnHeaderRenderer, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridCellAttrProvider_GetColumnHeaderRenderer)},
    {SIP_MLNAME_CAST(sipName_GetCornerRenderer), meth_wxGridCellAttrProvider_GetCornerRenderer, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridCellAttrProvider_GetCornerRenderer)},
    {SIP_MLNAME_CAST(sipName_GetRowHeaderRenderer), (PyCFunction)meth_wxGridCellAttrProvider_GetRowHeaderRenderer, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridCellAttrProvider_GetRowHeaderRenderer)},
    {SIP_MLNAME_CAST(sipName_SetAttr), (PyCFunction)meth_wxGridCellAttrProvider_SetAttr, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridCellAttrProvider_SetAttr)},
    {SIP_MLNAME_CAST(sipName_SetColAttr), (PyCFunction)meth_wxGridCellAttrProvider_SetColAttr, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridCellAttrProvider_SetColAttr)},
    {SIP_MLNAME_CAST(sipName_SetRowAttr), (PyCFunction)meth_wxGridCellAttrProvider_SetRowAttr, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridCellAttrProvider_SetRowAttr)}
};

sipVariableDef variables_wxGridCellAttrProvider[] = {
    {PropertyVariable, sipName_CornerRenderer, &methods_wxGridCellAttrProvider[2], NULL, NULL, NULL},
};

PyDoc_STRVAR(doc_wxGridCellAttrProvider, "GridCellAttrProvider()\n"
"\n"
"Class providing attributes to be used for the grid cells.");


sipClassTypeDef sipTypeDef__grid_wxGridCellAttrProvider = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxGridCellAttrProvider,
        {0},
        0
    },
    {
        sipNameNr_GridCellAttrProvider,
        {0, 0, 1},
        7, methods_wxGridCellAttrProvider,
        0, 0,
        1, variables_wxGridCellAttrProvider,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxGridCellAttrProvider,
    -1,
    -1,
    supers_wxGridCellAttrProvider,
    0,
    init_type_wxGridCellAttrProvider,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxGridCellAttrProvider,
    0,
    0,
    0,
    release_wxGridCellAttrProvider,
    cast_wxGridCellAttrProvider,
    0,
    0,
    0,
    0,
    0,
    0
};
