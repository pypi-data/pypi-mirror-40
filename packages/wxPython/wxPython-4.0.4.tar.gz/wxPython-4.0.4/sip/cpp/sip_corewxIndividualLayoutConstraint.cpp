/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/layout.h>

        #include <wx/window.h>
        #include <wx/layout.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>
    wxWindow * _wxIndividualLayoutConstraint_GetOtherWindow(wxIndividualLayoutConstraint* self)
    {
        return (wxWindow*)self->GetOtherWindow();
    }


class sipwxIndividualLayoutConstraint : public  ::wxIndividualLayoutConstraint
{
public:
    sipwxIndividualLayoutConstraint();
    sipwxIndividualLayoutConstraint(const  ::wxIndividualLayoutConstraint&);
    ~sipwxIndividualLayoutConstraint();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxIndividualLayoutConstraint(const sipwxIndividualLayoutConstraint &);
    sipwxIndividualLayoutConstraint &operator = (const sipwxIndividualLayoutConstraint &);
};

sipwxIndividualLayoutConstraint::sipwxIndividualLayoutConstraint():  ::wxIndividualLayoutConstraint(), sipPySelf(0)
{
}

sipwxIndividualLayoutConstraint::sipwxIndividualLayoutConstraint(const  ::wxIndividualLayoutConstraint& a0):  ::wxIndividualLayoutConstraint(a0), sipPySelf(0)
{
}

sipwxIndividualLayoutConstraint::~sipwxIndividualLayoutConstraint()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_Set, "Set(rel, otherW, otherE, val=0, margin=LAYOUT_DEFAULT_MARGIN)");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_Set(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_Set(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxRelationship rel;
         ::wxWindow* otherW;
         ::wxEdge otherE;
        int val = 0;
        int margin = wxLAYOUT_DEFAULT_MARGIN;
         ::wxIndividualLayoutConstraint *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rel,
            sipName_otherW,
            sipName_otherE,
            sipName_val,
            sipName_margin,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ8E|ii", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp, sipType_wxRelationship, &rel, sipType_wxWindow, &otherW, sipType_wxEdge, &otherE, &val, &margin))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Set(rel,otherW,otherE,val,margin);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_Set, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_LeftOf, "LeftOf(sibling, margin=LAYOUT_DEFAULT_MARGIN)");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_LeftOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_LeftOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* sibling;
        int margin = wxLAYOUT_DEFAULT_MARGIN;
         ::wxIndividualLayoutConstraint *sipCpp;

        static const char *sipKwdList[] = {
            sipName_sibling,
            sipName_margin,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|i", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp, sipType_wxWindow, &sibling, &margin))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->LeftOf(sibling,margin);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_LeftOf, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_RightOf, "RightOf(sibling, margin=LAYOUT_DEFAULT_MARGIN)");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_RightOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_RightOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* sibling;
        int margin = wxLAYOUT_DEFAULT_MARGIN;
         ::wxIndividualLayoutConstraint *sipCpp;

        static const char *sipKwdList[] = {
            sipName_sibling,
            sipName_margin,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|i", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp, sipType_wxWindow, &sibling, &margin))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->RightOf(sibling,margin);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_RightOf, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_Above, "Above(sibling, margin=LAYOUT_DEFAULT_MARGIN)");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_Above(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_Above(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* sibling;
        int margin = wxLAYOUT_DEFAULT_MARGIN;
         ::wxIndividualLayoutConstraint *sipCpp;

        static const char *sipKwdList[] = {
            sipName_sibling,
            sipName_margin,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|i", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp, sipType_wxWindow, &sibling, &margin))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Above(sibling,margin);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_Above, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_Below, "Below(sibling, margin=LAYOUT_DEFAULT_MARGIN)");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_Below(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_Below(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* sibling;
        int margin = wxLAYOUT_DEFAULT_MARGIN;
         ::wxIndividualLayoutConstraint *sipCpp;

        static const char *sipKwdList[] = {
            sipName_sibling,
            sipName_margin,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|i", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp, sipType_wxWindow, &sibling, &margin))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Below(sibling,margin);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_Below, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_SameAs, "SameAs(otherW, edge, margin=LAYOUT_DEFAULT_MARGIN)");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_SameAs(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_SameAs(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* otherW;
         ::wxEdge edge;
        int margin = wxLAYOUT_DEFAULT_MARGIN;
         ::wxIndividualLayoutConstraint *sipCpp;

        static const char *sipKwdList[] = {
            sipName_otherW,
            sipName_edge,
            sipName_margin,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8E|i", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp, sipType_wxWindow, &otherW, sipType_wxEdge, &edge, &margin))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SameAs(otherW,edge,margin);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_SameAs, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_PercentOf, "PercentOf(otherW, wh, per)");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_PercentOf(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_PercentOf(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* otherW;
         ::wxEdge wh;
        int per;
         ::wxIndividualLayoutConstraint *sipCpp;

        static const char *sipKwdList[] = {
            sipName_otherW,
            sipName_wh,
            sipName_per,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8Ei", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp, sipType_wxWindow, &otherW, sipType_wxEdge, &wh, &per))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->PercentOf(otherW,wh,per);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_PercentOf, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_Absolute, "Absolute(val)");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_Absolute(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_Absolute(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int val;
         ::wxIndividualLayoutConstraint *sipCpp;

        static const char *sipKwdList[] = {
            sipName_val,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp, &val))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Absolute(val);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_Absolute, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_Unconstrained, "Unconstrained()");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_Unconstrained(PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_Unconstrained(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxIndividualLayoutConstraint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Unconstrained();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_Unconstrained, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_AsIs, "AsIs()");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_AsIs(PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_AsIs(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxIndividualLayoutConstraint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->AsIs();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_AsIs, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_GetOtherWindow, "GetOtherWindow() -> Window");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_GetOtherWindow(PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_GetOtherWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxIndividualLayoutConstraint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp))
        {
             ::wxWindow*sipRes = 0;
            int sipIsErr = 0;

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxIndividualLayoutConstraint_GetOtherWindow(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_GetOtherWindow, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_GetMyEdge, "GetMyEdge() -> Edge");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_GetMyEdge(PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_GetMyEdge(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxIndividualLayoutConstraint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp))
        {
             ::wxEdge sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetMyEdge();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxEdge);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_GetMyEdge, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_SetEdge, "SetEdge(which)");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_SetEdge(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_SetEdge(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxEdge which;
         ::wxIndividualLayoutConstraint *sipCpp;

        static const char *sipKwdList[] = {
            sipName_which,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp, sipType_wxEdge, &which))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetEdge(which);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_SetEdge, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_SetValue, "SetValue(v)");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_SetValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_SetValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int v;
         ::wxIndividualLayoutConstraint *sipCpp;

        static const char *sipKwdList[] = {
            sipName_v,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp, &v))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetValue(v);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_SetValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_GetMargin, "GetMargin() -> int");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_GetMargin(PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_GetMargin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxIndividualLayoutConstraint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetMargin();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_GetMargin, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_SetMargin, "SetMargin(m)");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_SetMargin(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_SetMargin(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int m;
         ::wxIndividualLayoutConstraint *sipCpp;

        static const char *sipKwdList[] = {
            sipName_m,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp, &m))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetMargin(m);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_SetMargin, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_GetValue, "GetValue() -> int");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_GetValue(PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_GetValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxIndividualLayoutConstraint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetValue();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_GetValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_GetPercent, "GetPercent() -> int");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_GetPercent(PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_GetPercent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxIndividualLayoutConstraint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetPercent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_GetPercent, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_GetOtherEdge, "GetOtherEdge() -> int");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_GetOtherEdge(PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_GetOtherEdge(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxIndividualLayoutConstraint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetOtherEdge();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_GetOtherEdge, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_GetDone, "GetDone() -> bool");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_GetDone(PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_GetDone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxIndividualLayoutConstraint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetDone();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_GetDone, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_SetDone, "SetDone(d)");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_SetDone(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_SetDone(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool d;
         ::wxIndividualLayoutConstraint *sipCpp;

        static const char *sipKwdList[] = {
            sipName_d,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp, &d))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetDone(d);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_SetDone, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_GetRelationship, "GetRelationship() -> Relationship");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_GetRelationship(PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_GetRelationship(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxIndividualLayoutConstraint *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp))
        {
             ::wxRelationship sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetRelationship();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxRelationship);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_GetRelationship, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_SetRelationship, "SetRelationship(r)");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_SetRelationship(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_SetRelationship(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxRelationship r;
         ::wxIndividualLayoutConstraint *sipCpp;

        static const char *sipKwdList[] = {
            sipName_r,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp, sipType_wxRelationship, &r))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetRelationship(r);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_SetRelationship, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_ResetIfWin, "ResetIfWin(otherW) -> bool");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_ResetIfWin(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_ResetIfWin(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* otherW;
         ::wxIndividualLayoutConstraint *sipCpp;

        static const char *sipKwdList[] = {
            sipName_otherW,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp, sipType_wxWindow, &otherW))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ResetIfWin(otherW);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_ResetIfWin, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_SatisfyConstraint, "SatisfyConstraint(constraints, win) -> bool");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_SatisfyConstraint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_SatisfyConstraint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxLayoutConstraints* constraints;
         ::wxWindow* win;
         ::wxIndividualLayoutConstraint *sipCpp;

        static const char *sipKwdList[] = {
            sipName_constraints,
            sipName_win,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J8", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp, sipType_wxLayoutConstraints, &constraints, sipType_wxWindow, &win))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SatisfyConstraint(constraints,win);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_SatisfyConstraint, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxIndividualLayoutConstraint_GetEdge, "GetEdge(which, thisWin, other) -> int");

extern "C" {static PyObject *meth_wxIndividualLayoutConstraint_GetEdge(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxIndividualLayoutConstraint_GetEdge(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxEdge which;
         ::wxWindow* thisWin;
         ::wxWindow* other;
        const  ::wxIndividualLayoutConstraint *sipCpp;

        static const char *sipKwdList[] = {
            sipName_which,
            sipName_thisWin,
            sipName_other,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ8J8", &sipSelf, sipType_wxIndividualLayoutConstraint, &sipCpp, sipType_wxEdge, &which, sipType_wxWindow, &thisWin, sipType_wxWindow, &other))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetEdge(which,thisWin,other);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_IndividualLayoutConstraint, sipName_GetEdge, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxIndividualLayoutConstraint(void *, const sipTypeDef *);}
static void *cast_wxIndividualLayoutConstraint(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxIndividualLayoutConstraint *sipCpp = reinterpret_cast< ::wxIndividualLayoutConstraint *>(sipCppV);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxIndividualLayoutConstraint(void *, int);}
static void release_wxIndividualLayoutConstraint(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxIndividualLayoutConstraint *>(sipCppV);
    else
        delete reinterpret_cast< ::wxIndividualLayoutConstraint *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_wxIndividualLayoutConstraint(void *, SIP_SSIZE_T, void *);}
static void assign_wxIndividualLayoutConstraint(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxIndividualLayoutConstraint *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxIndividualLayoutConstraint *>(sipSrc);
}


extern "C" {static void *array_wxIndividualLayoutConstraint(SIP_SSIZE_T);}
static void *array_wxIndividualLayoutConstraint(SIP_SSIZE_T sipNrElem)
{
    return new  ::wxIndividualLayoutConstraint[sipNrElem];
}


extern "C" {static void *copy_wxIndividualLayoutConstraint(const void *, SIP_SSIZE_T);}
static void *copy_wxIndividualLayoutConstraint(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxIndividualLayoutConstraint(reinterpret_cast<const  ::wxIndividualLayoutConstraint *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxIndividualLayoutConstraint(sipSimpleWrapper *);}
static void dealloc_wxIndividualLayoutConstraint(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxIndividualLayoutConstraint *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxIndividualLayoutConstraint(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxIndividualLayoutConstraint(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxIndividualLayoutConstraint(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxIndividualLayoutConstraint *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxIndividualLayoutConstraint();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxIndividualLayoutConstraint* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxIndividualLayoutConstraint, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxIndividualLayoutConstraint(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxIndividualLayoutConstraint[] = {{358, 255, 1}};


static PyMethodDef methods_wxIndividualLayoutConstraint[] = {
    {SIP_MLNAME_CAST(sipName_Above), (PyCFunction)meth_wxIndividualLayoutConstraint_Above, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_Above)},
    {SIP_MLNAME_CAST(sipName_Absolute), (PyCFunction)meth_wxIndividualLayoutConstraint_Absolute, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_Absolute)},
    {SIP_MLNAME_CAST(sipName_AsIs), meth_wxIndividualLayoutConstraint_AsIs, METH_VARARGS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_AsIs)},
    {SIP_MLNAME_CAST(sipName_Below), (PyCFunction)meth_wxIndividualLayoutConstraint_Below, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_Below)},
    {SIP_MLNAME_CAST(sipName_GetDone), meth_wxIndividualLayoutConstraint_GetDone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_GetDone)},
    {SIP_MLNAME_CAST(sipName_GetEdge), (PyCFunction)meth_wxIndividualLayoutConstraint_GetEdge, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_GetEdge)},
    {SIP_MLNAME_CAST(sipName_GetMargin), meth_wxIndividualLayoutConstraint_GetMargin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_GetMargin)},
    {SIP_MLNAME_CAST(sipName_GetMyEdge), meth_wxIndividualLayoutConstraint_GetMyEdge, METH_VARARGS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_GetMyEdge)},
    {SIP_MLNAME_CAST(sipName_GetOtherEdge), meth_wxIndividualLayoutConstraint_GetOtherEdge, METH_VARARGS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_GetOtherEdge)},
    {SIP_MLNAME_CAST(sipName_GetOtherWindow), meth_wxIndividualLayoutConstraint_GetOtherWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_GetOtherWindow)},
    {SIP_MLNAME_CAST(sipName_GetPercent), meth_wxIndividualLayoutConstraint_GetPercent, METH_VARARGS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_GetPercent)},
    {SIP_MLNAME_CAST(sipName_GetRelationship), meth_wxIndividualLayoutConstraint_GetRelationship, METH_VARARGS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_GetRelationship)},
    {SIP_MLNAME_CAST(sipName_GetValue), meth_wxIndividualLayoutConstraint_GetValue, METH_VARARGS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_GetValue)},
    {SIP_MLNAME_CAST(sipName_LeftOf), (PyCFunction)meth_wxIndividualLayoutConstraint_LeftOf, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_LeftOf)},
    {SIP_MLNAME_CAST(sipName_PercentOf), (PyCFunction)meth_wxIndividualLayoutConstraint_PercentOf, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_PercentOf)},
    {SIP_MLNAME_CAST(sipName_ResetIfWin), (PyCFunction)meth_wxIndividualLayoutConstraint_ResetIfWin, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_ResetIfWin)},
    {SIP_MLNAME_CAST(sipName_RightOf), (PyCFunction)meth_wxIndividualLayoutConstraint_RightOf, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_RightOf)},
    {SIP_MLNAME_CAST(sipName_SameAs), (PyCFunction)meth_wxIndividualLayoutConstraint_SameAs, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_SameAs)},
    {SIP_MLNAME_CAST(sipName_SatisfyConstraint), (PyCFunction)meth_wxIndividualLayoutConstraint_SatisfyConstraint, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_SatisfyConstraint)},
    {SIP_MLNAME_CAST(sipName_Set), (PyCFunction)meth_wxIndividualLayoutConstraint_Set, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_Set)},
    {SIP_MLNAME_CAST(sipName_SetDone), (PyCFunction)meth_wxIndividualLayoutConstraint_SetDone, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_SetDone)},
    {SIP_MLNAME_CAST(sipName_SetEdge), (PyCFunction)meth_wxIndividualLayoutConstraint_SetEdge, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_SetEdge)},
    {SIP_MLNAME_CAST(sipName_SetMargin), (PyCFunction)meth_wxIndividualLayoutConstraint_SetMargin, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_SetMargin)},
    {SIP_MLNAME_CAST(sipName_SetRelationship), (PyCFunction)meth_wxIndividualLayoutConstraint_SetRelationship, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_SetRelationship)},
    {SIP_MLNAME_CAST(sipName_SetValue), (PyCFunction)meth_wxIndividualLayoutConstraint_SetValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_SetValue)},
    {SIP_MLNAME_CAST(sipName_Unconstrained), meth_wxIndividualLayoutConstraint_Unconstrained, METH_VARARGS, SIP_MLDOC_CAST(doc_wxIndividualLayoutConstraint_Unconstrained)}
};

sipVariableDef variables_wxIndividualLayoutConstraint[] = {
    {PropertyVariable, sipName_Value, &methods_wxIndividualLayoutConstraint[12], &methods_wxIndividualLayoutConstraint[24], NULL, NULL},
    {PropertyVariable, sipName_Relationship, &methods_wxIndividualLayoutConstraint[11], &methods_wxIndividualLayoutConstraint[23], NULL, NULL},
    {PropertyVariable, sipName_Percent, &methods_wxIndividualLayoutConstraint[10], NULL, NULL, NULL},
    {PropertyVariable, sipName_OtherWindow, &methods_wxIndividualLayoutConstraint[9], NULL, NULL, NULL},
    {PropertyVariable, sipName_OtherEdge, &methods_wxIndividualLayoutConstraint[8], NULL, NULL, NULL},
    {PropertyVariable, sipName_MyEdge, &methods_wxIndividualLayoutConstraint[7], NULL, NULL, NULL},
    {PropertyVariable, sipName_Margin, &methods_wxIndividualLayoutConstraint[6], &methods_wxIndividualLayoutConstraint[22], NULL, NULL},
    {PropertyVariable, sipName_Done, &methods_wxIndividualLayoutConstraint[4], &methods_wxIndividualLayoutConstraint[20], NULL, NULL},
};

PyDoc_STRVAR(doc_wxIndividualLayoutConstraint, "IndividualLayoutConstraint()");


sipClassTypeDef sipTypeDef__core_wxIndividualLayoutConstraint = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxIndividualLayoutConstraint,
        {0},
        0
    },
    {
        sipNameNr_IndividualLayoutConstraint,
        {0, 0, 1},
        26, methods_wxIndividualLayoutConstraint,
        0, 0,
        8, variables_wxIndividualLayoutConstraint,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxIndividualLayoutConstraint,
    -1,
    -1,
    supers_wxIndividualLayoutConstraint,
    0,
    init_type_wxIndividualLayoutConstraint,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxIndividualLayoutConstraint,
    assign_wxIndividualLayoutConstraint,
    array_wxIndividualLayoutConstraint,
    copy_wxIndividualLayoutConstraint,
    release_wxIndividualLayoutConstraint,
    cast_wxIndividualLayoutConstraint,
    0,
    0,
    0,
    0,
    0,
    0
};
