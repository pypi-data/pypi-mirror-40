/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_html.h"

        #include <wx/html/htmlwin.h>

        #include <wx/html/htmlcell.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxHtmlCellEvent : public  ::wxHtmlCellEvent
{
public:
    sipwxHtmlCellEvent( ::wxEventType,int, ::wxHtmlCell*,const  ::wxPoint&,const  ::wxMouseEvent&);
    sipwxHtmlCellEvent(const  ::wxHtmlCellEvent&);
    virtual ~sipwxHtmlCellEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxEventCategory GetEventCategory() const;
     ::wxEvent* Clone() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxHtmlCellEvent(const sipwxHtmlCellEvent &);
    sipwxHtmlCellEvent &operator = (const sipwxHtmlCellEvent &);

    char sipPyMethods[2];
};

sipwxHtmlCellEvent::sipwxHtmlCellEvent( ::wxEventType commandType,int id, ::wxHtmlCell*cell,const  ::wxPoint& point,const  ::wxMouseEvent& ev):  ::wxHtmlCellEvent(commandType,id,cell,point,ev), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxHtmlCellEvent::sipwxHtmlCellEvent(const  ::wxHtmlCellEvent& a0):  ::wxHtmlCellEvent(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxHtmlCellEvent::~sipwxHtmlCellEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxEventCategory sipwxHtmlCellEvent::GetEventCategory() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_GetEventCategory);

    if (!sipMeth)
        return  ::wxHtmlCellEvent::GetEventCategory();

    extern  ::wxEventCategory sipVH__html_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_55(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxEvent* sipwxHtmlCellEvent::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_Clone);

    if (!sipMeth)
        return  ::wxHtmlCellEvent::Clone();

    extern  ::wxEvent* sipVH__html_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_54(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxHtmlCellEvent_GetCell, "GetCell() -> HtmlCell\n"
"\n"
"Returns the wxHtmlCellEvent associated with the event.");

extern "C" {static PyObject *meth_wxHtmlCellEvent_GetCell(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlCellEvent_GetCell(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxHtmlCellEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlCellEvent, &sipCpp))
        {
             ::wxHtmlCell*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetCell();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxHtmlCell,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlCellEvent, sipName_GetCell, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlCellEvent_GetLinkClicked, "GetLinkClicked() -> bool\n"
"\n"
"Returns true if SetLinkClicked(true) has previously been called; false\n"
"otherwise.");

extern "C" {static PyObject *meth_wxHtmlCellEvent_GetLinkClicked(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlCellEvent_GetLinkClicked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxHtmlCellEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlCellEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetLinkClicked();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlCellEvent, sipName_GetLinkClicked, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlCellEvent_GetPoint, "GetPoint() -> wx.Point\n"
"\n"
"Returns the wxPoint associated with the event.");

extern "C" {static PyObject *meth_wxHtmlCellEvent_GetPoint(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlCellEvent_GetPoint(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxHtmlCellEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlCellEvent, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint(sipCpp->GetPoint());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlCellEvent, sipName_GetPoint, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlCellEvent_SetLinkClicked, "SetLinkClicked(linkclicked)\n"
"\n"
"Call this function with linkclicked set to true if the cell which has\n"
"been clicked contained a link or false otherwise (which is the\n"
"default).");

extern "C" {static PyObject *meth_wxHtmlCellEvent_SetLinkClicked(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlCellEvent_SetLinkClicked(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool linkclicked;
         ::wxHtmlCellEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_linkclicked,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxHtmlCellEvent, &sipCpp, &linkclicked))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetLinkClicked(linkclicked);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlCellEvent, sipName_SetLinkClicked, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlCellEvent_Clone, "Clone(self) -> Event");

extern "C" {static PyObject *meth_wxHtmlCellEvent_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlCellEvent_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHtmlCellEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlCellEvent, &sipCpp))
        {
             ::wxEvent*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHtmlCellEvent::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxEvent,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlCellEvent, sipName_Clone, doc_wxHtmlCellEvent_Clone);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxHtmlCellEvent(void *, const sipTypeDef *);}
static void *cast_wxHtmlCellEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxHtmlCellEvent *sipCpp = reinterpret_cast< ::wxHtmlCellEvent *>(sipCppV);

    if (targetType == sipType_wxCommandEvent)
        return static_cast< ::wxCommandEvent *>(sipCpp);

    if (targetType == sipType_wxEvent)
        return static_cast< ::wxEvent *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxHtmlCellEvent(void *, int);}
static void release_wxHtmlCellEvent(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxHtmlCellEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::wxHtmlCellEvent *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxHtmlCellEvent(sipSimpleWrapper *);}
static void dealloc_wxHtmlCellEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxHtmlCellEvent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxHtmlCellEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxHtmlCellEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxHtmlCellEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxHtmlCellEvent *sipCpp = 0;

    {
         ::wxEventType commandType;
        int id;
         ::wxHtmlCell* cell;
        const  ::wxPoint* point;
        int pointState = 0;
        const  ::wxMouseEvent* ev;

        static const char *sipKwdList[] = {
            sipName_commandType,
            sipName_id,
            sipName_cell,
            sipName_point,
            sipName_ev,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "iiJ8J1J9", &commandType, &id, sipType_wxHtmlCell, &cell, sipType_wxPoint, &point, &pointState, sipType_wxMouseEvent, &ev))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxHtmlCellEvent(commandType,id,cell,*point,*ev);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(point),sipType_wxPoint,pointState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxHtmlCellEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxHtmlCellEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxHtmlCellEvent(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxHtmlCellEvent[] = {{7, 0, 1}};


static PyMethodDef methods_wxHtmlCellEvent[] = {
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxHtmlCellEvent_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlCellEvent_Clone)},
    {SIP_MLNAME_CAST(sipName_GetCell), meth_wxHtmlCellEvent_GetCell, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlCellEvent_GetCell)},
    {SIP_MLNAME_CAST(sipName_GetLinkClicked), meth_wxHtmlCellEvent_GetLinkClicked, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlCellEvent_GetLinkClicked)},
    {SIP_MLNAME_CAST(sipName_GetPoint), meth_wxHtmlCellEvent_GetPoint, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlCellEvent_GetPoint)},
    {SIP_MLNAME_CAST(sipName_SetLinkClicked), (PyCFunction)meth_wxHtmlCellEvent_SetLinkClicked, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlCellEvent_SetLinkClicked)}
};

sipVariableDef variables_wxHtmlCellEvent[] = {
    {PropertyVariable, sipName_Point, &methods_wxHtmlCellEvent[3], NULL, NULL, NULL},
    {PropertyVariable, sipName_LinkClicked, &methods_wxHtmlCellEvent[2], &methods_wxHtmlCellEvent[4], NULL, NULL},
    {PropertyVariable, sipName_Cell, &methods_wxHtmlCellEvent[1], NULL, NULL, NULL},
};

PyDoc_STRVAR(doc_wxHtmlCellEvent, "HtmlCellEvent(commandType, id, cell, point, ev)\n"
"\n"
"This event class is used for the events generated by wxHtmlWindow.");


sipClassTypeDef sipTypeDef__html_wxHtmlCellEvent = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxHtmlCellEvent,
        {0},
        0
    },
    {
        sipNameNr_HtmlCellEvent,
        {0, 0, 1},
        5, methods_wxHtmlCellEvent,
        0, 0,
        3, variables_wxHtmlCellEvent,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxHtmlCellEvent,
    -1,
    -1,
    supers_wxHtmlCellEvent,
    0,
    init_type_wxHtmlCellEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxHtmlCellEvent,
    0,
    0,
    0,
    release_wxHtmlCellEvent,
    cast_wxHtmlCellEvent,
    0,
    0,
    0,
    0,
    0,
    0
};
