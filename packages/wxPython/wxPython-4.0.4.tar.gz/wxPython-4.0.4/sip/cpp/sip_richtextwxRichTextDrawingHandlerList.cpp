/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_richtext.h"

        typedef wxList wxRichTextDrawingHandlerList;

        #include <wx/richtext/richtextbuffer.h>
        typedef wxList wxRichTextDrawingHandlerList;
        class wxRichTextDrawingHandlerList_iterator {
        public:
            wxRichTextDrawingHandlerList_iterator(wxRichTextDrawingHandlerList::compatibility_iterator start)
                : m_node(start) {}

            wxRichTextDrawingHandler* __next__() {
                wxRichTextDrawingHandler* obj = NULL;
                if (m_node) {
                    obj = (wxRichTextDrawingHandler*) m_node->GetData();
                    m_node = m_node->GetNext();
                }
                else {
                    PyErr_SetString(PyExc_StopIteration, "");
                }
                return (wxRichTextDrawingHandler*)obj;
            }
        private:
            wxRichTextDrawingHandlerList::compatibility_iterator m_node;
        };


PyDoc_STRVAR(doc_wxRichTextDrawingHandlerList_index, "index(self, obj: RichTextDrawingHandler) -> int");

extern "C" {static PyObject *meth_wxRichTextDrawingHandlerList_index(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextDrawingHandlerList_index(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxRichTextDrawingHandler* obj;
         ::wxRichTextDrawingHandlerList *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxRichTextDrawingHandlerList, &sipCpp, sipType_wxRichTextDrawingHandler, &obj))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

        int idx = sipCpp->IndexOf((wxRichTextDrawingHandler*)obj);
        if (idx == wxNOT_FOUND) {
            sipError = sipErrorFail;
            wxPyErr_SetString(PyExc_ValueError,
                              "sequence.index(x): x not in sequence");
        }
        sipRes = idx;

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextDrawingHandlerList, sipName_index, doc_wxRichTextDrawingHandlerList_index);

    return NULL;
}


extern "C" {static PyObject *slot_wxRichTextDrawingHandlerList___iter__(PyObject *);}
static PyObject *slot_wxRichTextDrawingHandlerList___iter__(PyObject *sipSelf)
{
     ::wxRichTextDrawingHandlerList *sipCpp = reinterpret_cast< ::wxRichTextDrawingHandlerList *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxRichTextDrawingHandlerList));

    if (!sipCpp)
        return 0;


    {
        {
             ::wxRichTextDrawingHandlerList_iterator*sipRes = 0;

        sipRes =  new wxRichTextDrawingHandlerList_iterator(sipCpp->GetFirst());

            return sipConvertFromNewType(sipRes,sipType_wxRichTextDrawingHandlerList_iterator,NULL);
        }
    }

    return 0;
}


extern "C" {static int slot_wxRichTextDrawingHandlerList___contains__(PyObject *,PyObject *);}
static int slot_wxRichTextDrawingHandlerList___contains__(PyObject *sipSelf,PyObject *sipArg)
{
     ::wxRichTextDrawingHandlerList *sipCpp = reinterpret_cast< ::wxRichTextDrawingHandlerList *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxRichTextDrawingHandlerList));

    if (!sipCpp)
        return -1;

    PyObject *sipParseErr = NULL;

    {
        const  ::wxRichTextDrawingHandler* obj;

        if (sipParseArgs(&sipParseErr, sipArg, "1J8", sipType_wxRichTextDrawingHandler, &obj))
        {
            int sipRes = 0;

        wxRichTextDrawingHandlerList::compatibility_iterator node;
        node = sipCpp->Find((wxRichTextDrawingHandler*)obj);
        sipRes = node != NULL;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextDrawingHandlerList, sipName___contains__, NULL);

    return -1;
}


extern "C" {static PyObject *slot_wxRichTextDrawingHandlerList___getitem__(PyObject *,PyObject *);}
static PyObject *slot_wxRichTextDrawingHandlerList___getitem__(PyObject *sipSelf,PyObject *sipArg)
{
     ::wxRichTextDrawingHandlerList *sipCpp = reinterpret_cast< ::wxRichTextDrawingHandlerList *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxRichTextDrawingHandlerList));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        long index;

        if (sipParseArgs(&sipParseErr, sipArg, "1l", &index))
        {
             ::wxRichTextDrawingHandler*sipRes = 0;
            sipErrorState sipError = sipErrorNone;

        if (0 > index)
            index += sipCpp->size();

        if (index < sipCpp->size() && (0 <= index)) {
            wxRichTextDrawingHandlerList::compatibility_iterator node = sipCpp->Item(index);
            if (node)
                sipRes = (wxRichTextDrawingHandler*)node->GetData();
        }
        else {
            wxPyErr_SetString(PyExc_IndexError, "sequence index out of range");
            sipError = sipErrorFail;
        }

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return sipConvertFromType(sipRes,sipType_wxRichTextDrawingHandler,NULL);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextDrawingHandlerList, sipName___getitem__, NULL);

    return 0;
}


extern "C" {static SIP_SSIZE_T slot_wxRichTextDrawingHandlerList___len__(PyObject *);}
static SIP_SSIZE_T slot_wxRichTextDrawingHandlerList___len__(PyObject *sipSelf)
{
     ::wxRichTextDrawingHandlerList *sipCpp = reinterpret_cast< ::wxRichTextDrawingHandlerList *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxRichTextDrawingHandlerList));

    if (!sipCpp)
        return 0;


    {
        {
            SIP_SSIZE_T sipRes = 0;

        sipRes = sipCpp->size();

            return sipRes;
        }
    }

    return 0;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxRichTextDrawingHandlerList(void *, int);}
static void release_wxRichTextDrawingHandlerList(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::wxRichTextDrawingHandlerList *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_wxRichTextDrawingHandlerList(void *, SIP_SSIZE_T, void *);}
static void assign_wxRichTextDrawingHandlerList(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxRichTextDrawingHandlerList *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxRichTextDrawingHandlerList *>(sipSrc);
}


extern "C" {static void *array_wxRichTextDrawingHandlerList(SIP_SSIZE_T);}
static void *array_wxRichTextDrawingHandlerList(SIP_SSIZE_T sipNrElem)
{
    return new  ::wxRichTextDrawingHandlerList[sipNrElem];
}


extern "C" {static void *copy_wxRichTextDrawingHandlerList(const void *, SIP_SSIZE_T);}
static void *copy_wxRichTextDrawingHandlerList(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxRichTextDrawingHandlerList(reinterpret_cast<const  ::wxRichTextDrawingHandlerList *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxRichTextDrawingHandlerList(sipSimpleWrapper *);}
static void dealloc_wxRichTextDrawingHandlerList(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxRichTextDrawingHandlerList(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_wxRichTextDrawingHandlerList(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxRichTextDrawingHandlerList(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::wxRichTextDrawingHandlerList *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxRichTextDrawingHandlerList();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::wxRichTextDrawingHandlerList* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxRichTextDrawingHandlerList, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxRichTextDrawingHandlerList(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_wxRichTextDrawingHandlerList[] = {
    {(void *)slot_wxRichTextDrawingHandlerList___iter__, iter_slot},
    {(void *)slot_wxRichTextDrawingHandlerList___contains__, contains_slot},
    {(void *)slot_wxRichTextDrawingHandlerList___getitem__, getitem_slot},
    {(void *)slot_wxRichTextDrawingHandlerList___len__, len_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_wxRichTextDrawingHandlerList[] = {
    {SIP_MLNAME_CAST(sipName_index), (PyCFunction)meth_wxRichTextDrawingHandlerList_index, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextDrawingHandlerList_index)}
};

PyDoc_STRVAR(doc_wxRichTextDrawingHandlerList, "\1RichTextDrawingHandlerList()\n"
"RichTextDrawingHandlerList(RichTextDrawingHandlerList)");


sipClassTypeDef sipTypeDef__richtext_wxRichTextDrawingHandlerList = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxRichTextDrawingHandlerList,
        {0},
        0
    },
    {
        sipNameNr_RichTextDrawingHandlerList,
        {0, 0, 1},
        1, methods_wxRichTextDrawingHandlerList,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxRichTextDrawingHandlerList,
    -1,
    -1,
    0,
    slots_wxRichTextDrawingHandlerList,
    init_type_wxRichTextDrawingHandlerList,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxRichTextDrawingHandlerList,
    assign_wxRichTextDrawingHandlerList,
    array_wxRichTextDrawingHandlerList,
    copy_wxRichTextDrawingHandlerList,
    release_wxRichTextDrawingHandlerList,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
