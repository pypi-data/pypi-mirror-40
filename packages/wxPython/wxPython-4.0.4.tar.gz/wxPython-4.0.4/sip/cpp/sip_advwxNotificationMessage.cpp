/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_adv.h"

        #include <wx/notifmsg.h>

        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/eventfilter.h>
        #include <wx/event.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxNotificationMessage : public  ::wxNotificationMessage
{
public:
    sipwxNotificationMessage();
    sipwxNotificationMessage(const  ::wxString&,const  ::wxString&, ::wxWindow*,int);
    virtual ~sipwxNotificationMessage();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool Show(int);
    bool Close();
    bool ProcessEvent( ::wxEvent&);
    bool TryBefore( ::wxEvent&);
    bool TryAfter( ::wxEvent&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxNotificationMessage(const sipwxNotificationMessage &);
    sipwxNotificationMessage &operator = (const sipwxNotificationMessage &);

    char sipPyMethods[5];
};

sipwxNotificationMessage::sipwxNotificationMessage():  ::wxNotificationMessage(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxNotificationMessage::sipwxNotificationMessage(const  ::wxString& title,const  ::wxString& message, ::wxWindow*parent,int flags):  ::wxNotificationMessage(title,message,parent,flags), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxNotificationMessage::~sipwxNotificationMessage()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxNotificationMessage::Show(int timeout)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_Show);

    if (!sipMeth)
        return  ::wxNotificationMessage::Show(timeout);

    extern bool sipVH__adv_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__adv_10(sipGILState, 0, sipPySelf, sipMeth, timeout);
}

bool sipwxNotificationMessage::Close()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_Close);

    if (!sipMeth)
        return  ::wxNotificationMessage::Close();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxNotificationMessage::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxNotificationMessage::ProcessEvent(event);

    extern bool sipVH__adv_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__adv_13(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxNotificationMessage::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxNotificationMessage::TryBefore(event);

    extern bool sipVH__adv_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__adv_13(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxNotificationMessage::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxNotificationMessage::TryAfter(event);

    extern bool sipVH__adv_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__adv_13(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxNotificationMessage::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxEvtHandler::TryBefore(event) : TryBefore(event));
}

bool sipwxNotificationMessage::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxEvtHandler::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxNotificationMessage_TryBefore, "TryBefore(event) -> bool\n"
"\n"
"Method called by ProcessEvent() before examining this object event\n"
"tables.");

extern "C" {static PyObject *meth_wxNotificationMessage_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxNotificationMessage_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxNotificationMessage *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxNotificationMessage, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NotificationMessage, sipName_TryBefore, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxNotificationMessage_TryAfter, "TryAfter(event) -> bool\n"
"\n"
"Method called by ProcessEvent() as last resort.");

extern "C" {static PyObject *meth_wxNotificationMessage_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxNotificationMessage_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxNotificationMessage *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxNotificationMessage, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NotificationMessage, sipName_TryAfter, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxNotificationMessage_Close, "Close() -> bool\n"
"\n"
"Hides the notification.");

extern "C" {static PyObject *meth_wxNotificationMessage_Close(PyObject *, PyObject *);}
static PyObject *meth_wxNotificationMessage_Close(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxNotificationMessage *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxNotificationMessage, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxNotificationMessage::Close() : sipCpp->Close());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NotificationMessage, sipName_Close, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxNotificationMessage_SetFlags, "SetFlags(flags)\n"
"\n"
"This parameter can be currently used to specify the icon to show in\n"
"the notification.");

extern "C" {static PyObject *meth_wxNotificationMessage_SetFlags(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxNotificationMessage_SetFlags(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int flags;
         ::wxNotificationMessage *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxNotificationMessage, &sipCpp, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFlags(flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NotificationMessage, sipName_SetFlags, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxNotificationMessage_SetMessage, "SetMessage(message)\n"
"\n"
"Set the main text of the notification.");

extern "C" {static PyObject *meth_wxNotificationMessage_SetMessage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxNotificationMessage_SetMessage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* message;
        int messageState = 0;
         ::wxNotificationMessage *sipCpp;

        static const char *sipKwdList[] = {
            sipName_message,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxNotificationMessage, &sipCpp, sipType_wxString,&message, &messageState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetMessage(*message);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(message),sipType_wxString,messageState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NotificationMessage, sipName_SetMessage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxNotificationMessage_SetParent, "SetParent(parent)\n"
"\n"
"Set the parent for this notification: the notification will be\n"
"associated with the top level parent of this window or, if this method\n"
"is not called, with the main application window by default.");

extern "C" {static PyObject *meth_wxNotificationMessage_SetParent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxNotificationMessage_SetParent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* parent;
         ::wxNotificationMessage *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxNotificationMessage, &sipCpp, sipType_wxWindow, &parent))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetParent(parent);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NotificationMessage, sipName_SetParent, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxNotificationMessage_SetTitle, "SetTitle(title)\n"
"\n"
"Set the title, it must be a concise string (not more than 64\n"
"characters), use SetMessage() to give the user more details.");

extern "C" {static PyObject *meth_wxNotificationMessage_SetTitle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxNotificationMessage_SetTitle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* title;
        int titleState = 0;
         ::wxNotificationMessage *sipCpp;

        static const char *sipKwdList[] = {
            sipName_title,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxNotificationMessage, &sipCpp, sipType_wxString,&title, &titleState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetTitle(*title);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(title),sipType_wxString,titleState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NotificationMessage, sipName_SetTitle, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxNotificationMessage_Show, "Show(timeout=Timeout_Auto) -> bool\n"
"\n"
"Show the notification to the user and hides it after timeout seconds\n"
"are elapsed.");

extern "C" {static PyObject *meth_wxNotificationMessage_Show(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxNotificationMessage_Show(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int timeout =  ::wxNotificationMessage::Timeout_Auto;
         ::wxNotificationMessage *sipCpp;

        static const char *sipKwdList[] = {
            sipName_timeout,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|i", &sipSelf, sipType_wxNotificationMessage, &sipCpp, &timeout))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxNotificationMessage::Show(timeout) : sipCpp->Show(timeout));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_NotificationMessage, sipName_Show, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxNotificationMessage(void *, const sipTypeDef *);}
static void *cast_wxNotificationMessage(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxNotificationMessage *sipCpp = reinterpret_cast< ::wxNotificationMessage *>(sipCppV);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxNotificationMessage(void *, int);}
static void release_wxNotificationMessage(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxNotificationMessage *>(sipCppV);
    else
        delete reinterpret_cast< ::wxNotificationMessage *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxNotificationMessage(sipSimpleWrapper *);}
static void dealloc_wxNotificationMessage(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxNotificationMessage *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxNotificationMessage(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxNotificationMessage(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxNotificationMessage(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxNotificationMessage *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxNotificationMessage();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxString* title;
        int titleState = 0;
        const  ::wxString& messagedef = wxEmptyString;
        const  ::wxString* message = &messagedef;
        int messageState = 0;
         ::wxWindow* parent = 0;
        int flags = wxICON_INFORMATION;

        static const char *sipKwdList[] = {
            sipName_title,
            sipName_message,
            sipName_parent,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|J1J8i", sipType_wxString,&title, &titleState, sipType_wxString,&message, &messageState, sipType_wxWindow, &parent, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxNotificationMessage(*title,*message,parent,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(title),sipType_wxString,titleState);
            sipReleaseType(const_cast< ::wxString *>(message),sipType_wxString,messageState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxNotificationMessage[] = {{22, 0, 1}};


static PyMethodDef methods_wxNotificationMessage[] = {
    {SIP_MLNAME_CAST(sipName_Close), meth_wxNotificationMessage_Close, METH_VARARGS, SIP_MLDOC_CAST(doc_wxNotificationMessage_Close)},
    {SIP_MLNAME_CAST(sipName_SetFlags), (PyCFunction)meth_wxNotificationMessage_SetFlags, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxNotificationMessage_SetFlags)},
    {SIP_MLNAME_CAST(sipName_SetMessage), (PyCFunction)meth_wxNotificationMessage_SetMessage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxNotificationMessage_SetMessage)},
    {SIP_MLNAME_CAST(sipName_SetParent), (PyCFunction)meth_wxNotificationMessage_SetParent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxNotificationMessage_SetParent)},
    {SIP_MLNAME_CAST(sipName_SetTitle), (PyCFunction)meth_wxNotificationMessage_SetTitle, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxNotificationMessage_SetTitle)},
    {SIP_MLNAME_CAST(sipName_Show), (PyCFunction)meth_wxNotificationMessage_Show, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxNotificationMessage_Show)},
    {SIP_MLNAME_CAST(sipName_TryAfter), (PyCFunction)meth_wxNotificationMessage_TryAfter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_TryBefore), (PyCFunction)meth_wxNotificationMessage_TryBefore, METH_VARARGS|METH_KEYWORDS, NULL}
};

static sipEnumMemberDef enummembers_wxNotificationMessage[] = {
    {sipName_Timeout_Auto, static_cast<int>( ::wxNotificationMessage::Timeout_Auto), -1},
    {sipName_Timeout_Never, static_cast<int>( ::wxNotificationMessage::Timeout_Never), -1},
};

PyDoc_STRVAR(doc_wxNotificationMessage, "NotificationMessage()\n"
"NotificationMessage(title, message=wx.EmptyString, parent=None, flags=wx.ICON_INFORMATION)\n"
"\n"
"This class allows to show the user a message non intrusively.");


sipClassTypeDef sipTypeDef__adv_wxNotificationMessage = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxNotificationMessage,
        {0},
        0
    },
    {
        sipNameNr_NotificationMessage,
        {0, 0, 1},
        8, methods_wxNotificationMessage,
        2, enummembers_wxNotificationMessage,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxNotificationMessage,
    -1,
    -1,
    supers_wxNotificationMessage,
    0,
    init_type_wxNotificationMessage,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxNotificationMessage,
    0,
    0,
    0,
    release_wxNotificationMessage,
    cast_wxNotificationMessage,
    0,
    0,
    0,
    0,
    0,
    0
};
