/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_aui.h"

        #include <wx/aui/auibar.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/dc.h>
        #include <wx/aui/auibar.h>
        #include <wx/gdicmn.h>
        #include <wx/font.h>


class sipwxAuiToolBarArt : public  ::wxAuiToolBarArt
{
public:
    sipwxAuiToolBarArt();
    sipwxAuiToolBarArt(const  ::wxAuiToolBarArt&);
    virtual ~sipwxAuiToolBarArt();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    int ShowDropDown( ::wxWindow*,const  ::wxAuiToolBarItemArray&);
    void SetElementSize(int,int);
    int GetElementSize(int);
     ::wxSize GetToolSize( ::wxDC&, ::wxWindow*,const  ::wxAuiToolBarItem&);
     ::wxSize GetLabelSize( ::wxDC&, ::wxWindow*,const  ::wxAuiToolBarItem&);
    void DrawOverflowButton( ::wxDC&, ::wxWindow*,const  ::wxRect&,int);
    void DrawGripper( ::wxDC&, ::wxWindow*,const  ::wxRect&);
    void DrawSeparator( ::wxDC&, ::wxWindow*,const  ::wxRect&);
    void DrawControlLabel( ::wxDC&, ::wxWindow*,const  ::wxAuiToolBarItem&,const  ::wxRect&);
    void DrawDropDownButton( ::wxDC&, ::wxWindow*,const  ::wxAuiToolBarItem&,const  ::wxRect&);
    void DrawButton( ::wxDC&, ::wxWindow*,const  ::wxAuiToolBarItem&,const  ::wxRect&);
    void DrawLabel( ::wxDC&, ::wxWindow*,const  ::wxAuiToolBarItem&,const  ::wxRect&);
    void DrawPlainBackground( ::wxDC&, ::wxWindow*,const  ::wxRect&);
    void DrawBackground( ::wxDC&, ::wxWindow*,const  ::wxRect&);
    int GetTextOrientation();
    void SetTextOrientation(int);
     ::wxFont GetFont();
    void SetFont(const  ::wxFont&);
    uint GetFlags();
    void SetFlags(uint);
     ::wxAuiToolBarArt* Clone();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxAuiToolBarArt(const sipwxAuiToolBarArt &);
    sipwxAuiToolBarArt &operator = (const sipwxAuiToolBarArt &);

    char sipPyMethods[21];
};

sipwxAuiToolBarArt::sipwxAuiToolBarArt():  ::wxAuiToolBarArt(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxAuiToolBarArt::sipwxAuiToolBarArt(const  ::wxAuiToolBarArt& a0):  ::wxAuiToolBarArt(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxAuiToolBarArt::~sipwxAuiToolBarArt()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

int sipwxAuiToolBarArt::ShowDropDown( ::wxWindow*wnd,const  ::wxAuiToolBarItemArray& items)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,sipName_AuiToolBarArt,sipName_ShowDropDown);

    if (!sipMeth)
        return 0;

    extern int sipVH__aui_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindow*,const  ::wxAuiToolBarItemArray&);

    return sipVH__aui_27(sipGILState, 0, sipPySelf, sipMeth, wnd, items);
}

void sipwxAuiToolBarArt::SetElementSize(int element_id,int size)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,sipName_AuiToolBarArt,sipName_SetElementSize);

    if (!sipMeth)
        return;

    extern void sipVH__aui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__aui_15(sipGILState, 0, sipPySelf, sipMeth, element_id, size);
}

int sipwxAuiToolBarArt::GetElementSize(int element_id)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,sipName_AuiToolBarArt,sipName_GetElementSize);

    if (!sipMeth)
        return 0;

    extern int sipVH__aui_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__aui_12(sipGILState, 0, sipPySelf, sipMeth, element_id);
}

 ::wxSize sipwxAuiToolBarArt::GetToolSize( ::wxDC& dc, ::wxWindow*wnd,const  ::wxAuiToolBarItem& item)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,sipName_AuiToolBarArt,sipName_GetToolSize);

    if (!sipMeth)
        return  ::wxSize();

    extern  ::wxSize sipVH__aui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxWindow*,const  ::wxAuiToolBarItem&);

    return sipVH__aui_26(sipGILState, 0, sipPySelf, sipMeth, dc, wnd, item);
}

 ::wxSize sipwxAuiToolBarArt::GetLabelSize( ::wxDC& dc, ::wxWindow*wnd,const  ::wxAuiToolBarItem& item)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,sipName_AuiToolBarArt,sipName_GetLabelSize);

    if (!sipMeth)
        return  ::wxSize();

    extern  ::wxSize sipVH__aui_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxWindow*,const  ::wxAuiToolBarItem&);

    return sipVH__aui_26(sipGILState, 0, sipPySelf, sipMeth, dc, wnd, item);
}

void sipwxAuiToolBarArt::DrawOverflowButton( ::wxDC& dc, ::wxWindow*wnd,const  ::wxRect& rect,int state)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,sipName_AuiToolBarArt,sipName_DrawOverflowButton);

    if (!sipMeth)
        return;

    extern void sipVH__aui_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxWindow*,const  ::wxRect&,int);

    sipVH__aui_25(sipGILState, 0, sipPySelf, sipMeth, dc, wnd, rect, state);
}

void sipwxAuiToolBarArt::DrawGripper( ::wxDC& dc, ::wxWindow*wnd,const  ::wxRect& rect)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,sipName_AuiToolBarArt,sipName_DrawGripper);

    if (!sipMeth)
        return;

    extern void sipVH__aui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxWindow*,const  ::wxRect&);

    sipVH__aui_23(sipGILState, 0, sipPySelf, sipMeth, dc, wnd, rect);
}

void sipwxAuiToolBarArt::DrawSeparator( ::wxDC& dc, ::wxWindow*wnd,const  ::wxRect& rect)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,sipName_AuiToolBarArt,sipName_DrawSeparator);

    if (!sipMeth)
        return;

    extern void sipVH__aui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxWindow*,const  ::wxRect&);

    sipVH__aui_23(sipGILState, 0, sipPySelf, sipMeth, dc, wnd, rect);
}

void sipwxAuiToolBarArt::DrawControlLabel( ::wxDC& dc, ::wxWindow*wnd,const  ::wxAuiToolBarItem& item,const  ::wxRect& rect)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,sipName_AuiToolBarArt,sipName_DrawControlLabel);

    if (!sipMeth)
        return;

    extern void sipVH__aui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxWindow*,const  ::wxAuiToolBarItem&,const  ::wxRect&);

    sipVH__aui_24(sipGILState, 0, sipPySelf, sipMeth, dc, wnd, item, rect);
}

void sipwxAuiToolBarArt::DrawDropDownButton( ::wxDC& dc, ::wxWindow*wnd,const  ::wxAuiToolBarItem& item,const  ::wxRect& rect)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,sipName_AuiToolBarArt,sipName_DrawDropDownButton);

    if (!sipMeth)
        return;

    extern void sipVH__aui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxWindow*,const  ::wxAuiToolBarItem&,const  ::wxRect&);

    sipVH__aui_24(sipGILState, 0, sipPySelf, sipMeth, dc, wnd, item, rect);
}

void sipwxAuiToolBarArt::DrawButton( ::wxDC& dc, ::wxWindow*wnd,const  ::wxAuiToolBarItem& item,const  ::wxRect& rect)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,sipName_AuiToolBarArt,sipName_DrawButton);

    if (!sipMeth)
        return;

    extern void sipVH__aui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxWindow*,const  ::wxAuiToolBarItem&,const  ::wxRect&);

    sipVH__aui_24(sipGILState, 0, sipPySelf, sipMeth, dc, wnd, item, rect);
}

void sipwxAuiToolBarArt::DrawLabel( ::wxDC& dc, ::wxWindow*wnd,const  ::wxAuiToolBarItem& item,const  ::wxRect& rect)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,sipName_AuiToolBarArt,sipName_DrawLabel);

    if (!sipMeth)
        return;

    extern void sipVH__aui_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxWindow*,const  ::wxAuiToolBarItem&,const  ::wxRect&);

    sipVH__aui_24(sipGILState, 0, sipPySelf, sipMeth, dc, wnd, item, rect);
}

void sipwxAuiToolBarArt::DrawPlainBackground( ::wxDC& dc, ::wxWindow*wnd,const  ::wxRect& rect)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,sipName_AuiToolBarArt,sipName_DrawPlainBackground);

    if (!sipMeth)
        return;

    extern void sipVH__aui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxWindow*,const  ::wxRect&);

    sipVH__aui_23(sipGILState, 0, sipPySelf, sipMeth, dc, wnd, rect);
}

void sipwxAuiToolBarArt::DrawBackground( ::wxDC& dc, ::wxWindow*wnd,const  ::wxRect& rect)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,sipName_AuiToolBarArt,sipName_DrawBackground);

    if (!sipMeth)
        return;

    extern void sipVH__aui_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxWindow*,const  ::wxRect&);

    sipVH__aui_23(sipGILState, 0, sipPySelf, sipMeth, dc, wnd, rect);
}

int sipwxAuiToolBarArt::GetTextOrientation()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,sipName_AuiToolBarArt,sipName_GetTextOrientation);

    if (!sipMeth)
        return 0;

    extern int sipVH__aui_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_22(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiToolBarArt::SetTextOrientation(int orientation)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,sipName_AuiToolBarArt,sipName_SetTextOrientation);

    if (!sipMeth)
        return;

    extern void sipVH__aui_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__aui_21(sipGILState, 0, sipPySelf, sipMeth, orientation);
}

 ::wxFont sipwxAuiToolBarArt::GetFont()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,sipName_AuiToolBarArt,sipName_GetFont);

    if (!sipMeth)
        return  ::wxFont();

    extern  ::wxFont sipVH__aui_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_20(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiToolBarArt::SetFont(const  ::wxFont& font)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,sipName_AuiToolBarArt,sipName_SetFont);

    if (!sipMeth)
        return;

    extern void sipVH__aui_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxFont&);

    sipVH__aui_19(sipGILState, 0, sipPySelf, sipMeth, font);
}

uint sipwxAuiToolBarArt::GetFlags()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,sipName_AuiToolBarArt,sipName_GetFlags);

    if (!sipMeth)
        return 0;

    extern uint sipVH__aui_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_18(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiToolBarArt::SetFlags(uint flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,sipName_AuiToolBarArt,sipName_SetFlags);

    if (!sipMeth)
        return;

    extern void sipVH__aui_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, uint);

    sipVH__aui_17(sipGILState, 0, sipPySelf, sipMeth, flags);
}

 ::wxAuiToolBarArt* sipwxAuiToolBarArt::Clone()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,sipName_AuiToolBarArt,sipName_Clone);

    if (!sipMeth)
        return 0;

    extern  ::wxAuiToolBarArt* sipVH__aui_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_16(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxAuiToolBarArt_Clone, "Clone() -> AuiToolBarArt");

extern "C" {static PyObject *meth_wxAuiToolBarArt_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBarArt_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxAuiToolBarArt *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBarArt, &sipCpp))
        {
             ::wxAuiToolBarArt*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_AuiToolBarArt, sipName_Clone);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Clone();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiToolBarArt,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiToolBarArt, sipName_Clone, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiToolBarArt_SetFlags, "SetFlags(flags)");

extern "C" {static PyObject *meth_wxAuiToolBarArt_SetFlags(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBarArt_SetFlags(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        uint flags;
         ::wxAuiToolBarArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bu", &sipSelf, sipType_wxAuiToolBarArt, &sipCpp, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_AuiToolBarArt, sipName_SetFlags);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFlags(flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiToolBarArt, sipName_SetFlags, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiToolBarArt_GetFlags, "GetFlags() -> unsignedint");

extern "C" {static PyObject *meth_wxAuiToolBarArt_GetFlags(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBarArt_GetFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxAuiToolBarArt *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBarArt, &sipCpp))
        {
            uint sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_AuiToolBarArt, sipName_GetFlags);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetFlags();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiToolBarArt, sipName_GetFlags, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiToolBarArt_SetFont, "SetFont(font)");

extern "C" {static PyObject *meth_wxAuiToolBarArt_SetFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBarArt_SetFont(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxFont* font;
         ::wxAuiToolBarArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_font,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxAuiToolBarArt, &sipCpp, sipType_wxFont, &font))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_AuiToolBarArt, sipName_SetFont);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFont(*font);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiToolBarArt, sipName_SetFont, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiToolBarArt_GetFont, "GetFont() -> wx.Font");

extern "C" {static PyObject *meth_wxAuiToolBarArt_GetFont(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBarArt_GetFont(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxAuiToolBarArt *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBarArt, &sipCpp))
        {
             ::wxFont*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_AuiToolBarArt, sipName_GetFont);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxFont(sipCpp->GetFont());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxFont,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiToolBarArt, sipName_GetFont, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiToolBarArt_SetTextOrientation, "SetTextOrientation(orientation)");

extern "C" {static PyObject *meth_wxAuiToolBarArt_SetTextOrientation(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBarArt_SetTextOrientation(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int orientation;
         ::wxAuiToolBarArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_orientation,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxAuiToolBarArt, &sipCpp, &orientation))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_AuiToolBarArt, sipName_SetTextOrientation);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetTextOrientation(orientation);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiToolBarArt, sipName_SetTextOrientation, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiToolBarArt_GetTextOrientation, "GetTextOrientation() -> int");

extern "C" {static PyObject *meth_wxAuiToolBarArt_GetTextOrientation(PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBarArt_GetTextOrientation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxAuiToolBarArt *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiToolBarArt, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_AuiToolBarArt, sipName_GetTextOrientation);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetTextOrientation();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiToolBarArt, sipName_GetTextOrientation, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiToolBarArt_DrawBackground, "DrawBackground(dc, wnd, rect)");

extern "C" {static PyObject *meth_wxAuiToolBarArt_DrawBackground(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBarArt_DrawBackground(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxDC* dc;
         ::wxWindow* wnd;
        const  ::wxRect* rect;
        int rectState = 0;
         ::wxAuiToolBarArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_wnd,
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J8J1", &sipSelf, sipType_wxAuiToolBarArt, &sipCpp, sipType_wxDC, &dc, sipType_wxWindow, &wnd, sipType_wxRect, &rect, &rectState))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_AuiToolBarArt, sipName_DrawBackground);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawBackground(*dc,wnd,*rect);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiToolBarArt, sipName_DrawBackground, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiToolBarArt_DrawPlainBackground, "DrawPlainBackground(dc, wnd, rect)");

extern "C" {static PyObject *meth_wxAuiToolBarArt_DrawPlainBackground(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBarArt_DrawPlainBackground(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxDC* dc;
         ::wxWindow* wnd;
        const  ::wxRect* rect;
        int rectState = 0;
         ::wxAuiToolBarArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_wnd,
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J8J1", &sipSelf, sipType_wxAuiToolBarArt, &sipCpp, sipType_wxDC, &dc, sipType_wxWindow, &wnd, sipType_wxRect, &rect, &rectState))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_AuiToolBarArt, sipName_DrawPlainBackground);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawPlainBackground(*dc,wnd,*rect);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiToolBarArt, sipName_DrawPlainBackground, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiToolBarArt_DrawLabel, "DrawLabel(dc, wnd, item, rect)");

extern "C" {static PyObject *meth_wxAuiToolBarArt_DrawLabel(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBarArt_DrawLabel(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxDC* dc;
         ::wxWindow* wnd;
        const  ::wxAuiToolBarItem* item;
        const  ::wxRect* rect;
        int rectState = 0;
         ::wxAuiToolBarArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_wnd,
            sipName_item,
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J8J9J1", &sipSelf, sipType_wxAuiToolBarArt, &sipCpp, sipType_wxDC, &dc, sipType_wxWindow, &wnd, sipType_wxAuiToolBarItem, &item, sipType_wxRect, &rect, &rectState))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_AuiToolBarArt, sipName_DrawLabel);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawLabel(*dc,wnd,*item,*rect);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiToolBarArt, sipName_DrawLabel, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiToolBarArt_DrawButton, "DrawButton(dc, wnd, item, rect)");

extern "C" {static PyObject *meth_wxAuiToolBarArt_DrawButton(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBarArt_DrawButton(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxDC* dc;
         ::wxWindow* wnd;
        const  ::wxAuiToolBarItem* item;
        const  ::wxRect* rect;
        int rectState = 0;
         ::wxAuiToolBarArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_wnd,
            sipName_item,
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J8J9J1", &sipSelf, sipType_wxAuiToolBarArt, &sipCpp, sipType_wxDC, &dc, sipType_wxWindow, &wnd, sipType_wxAuiToolBarItem, &item, sipType_wxRect, &rect, &rectState))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_AuiToolBarArt, sipName_DrawButton);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawButton(*dc,wnd,*item,*rect);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiToolBarArt, sipName_DrawButton, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiToolBarArt_DrawDropDownButton, "DrawDropDownButton(dc, wnd, item, rect)");

extern "C" {static PyObject *meth_wxAuiToolBarArt_DrawDropDownButton(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBarArt_DrawDropDownButton(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxDC* dc;
         ::wxWindow* wnd;
        const  ::wxAuiToolBarItem* item;
        const  ::wxRect* rect;
        int rectState = 0;
         ::wxAuiToolBarArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_wnd,
            sipName_item,
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J8J9J1", &sipSelf, sipType_wxAuiToolBarArt, &sipCpp, sipType_wxDC, &dc, sipType_wxWindow, &wnd, sipType_wxAuiToolBarItem, &item, sipType_wxRect, &rect, &rectState))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_AuiToolBarArt, sipName_DrawDropDownButton);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawDropDownButton(*dc,wnd,*item,*rect);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiToolBarArt, sipName_DrawDropDownButton, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiToolBarArt_DrawControlLabel, "DrawControlLabel(dc, wnd, item, rect)");

extern "C" {static PyObject *meth_wxAuiToolBarArt_DrawControlLabel(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBarArt_DrawControlLabel(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxDC* dc;
         ::wxWindow* wnd;
        const  ::wxAuiToolBarItem* item;
        const  ::wxRect* rect;
        int rectState = 0;
         ::wxAuiToolBarArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_wnd,
            sipName_item,
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J8J9J1", &sipSelf, sipType_wxAuiToolBarArt, &sipCpp, sipType_wxDC, &dc, sipType_wxWindow, &wnd, sipType_wxAuiToolBarItem, &item, sipType_wxRect, &rect, &rectState))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_AuiToolBarArt, sipName_DrawControlLabel);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawControlLabel(*dc,wnd,*item,*rect);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiToolBarArt, sipName_DrawControlLabel, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiToolBarArt_DrawSeparator, "DrawSeparator(dc, wnd, rect)");

extern "C" {static PyObject *meth_wxAuiToolBarArt_DrawSeparator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBarArt_DrawSeparator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxDC* dc;
         ::wxWindow* wnd;
        const  ::wxRect* rect;
        int rectState = 0;
         ::wxAuiToolBarArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_wnd,
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J8J1", &sipSelf, sipType_wxAuiToolBarArt, &sipCpp, sipType_wxDC, &dc, sipType_wxWindow, &wnd, sipType_wxRect, &rect, &rectState))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_AuiToolBarArt, sipName_DrawSeparator);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawSeparator(*dc,wnd,*rect);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiToolBarArt, sipName_DrawSeparator, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiToolBarArt_DrawGripper, "DrawGripper(dc, wnd, rect)");

extern "C" {static PyObject *meth_wxAuiToolBarArt_DrawGripper(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBarArt_DrawGripper(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxDC* dc;
         ::wxWindow* wnd;
        const  ::wxRect* rect;
        int rectState = 0;
         ::wxAuiToolBarArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_wnd,
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J8J1", &sipSelf, sipType_wxAuiToolBarArt, &sipCpp, sipType_wxDC, &dc, sipType_wxWindow, &wnd, sipType_wxRect, &rect, &rectState))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_AuiToolBarArt, sipName_DrawGripper);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawGripper(*dc,wnd,*rect);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiToolBarArt, sipName_DrawGripper, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiToolBarArt_DrawOverflowButton, "DrawOverflowButton(dc, wnd, rect, state)");

extern "C" {static PyObject *meth_wxAuiToolBarArt_DrawOverflowButton(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBarArt_DrawOverflowButton(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxDC* dc;
         ::wxWindow* wnd;
        const  ::wxRect* rect;
        int rectState = 0;
        int state;
         ::wxAuiToolBarArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_wnd,
            sipName_rect,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J8J1i", &sipSelf, sipType_wxAuiToolBarArt, &sipCpp, sipType_wxDC, &dc, sipType_wxWindow, &wnd, sipType_wxRect, &rect, &rectState, &state))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_AuiToolBarArt, sipName_DrawOverflowButton);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawOverflowButton(*dc,wnd,*rect,state);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiToolBarArt, sipName_DrawOverflowButton, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiToolBarArt_GetLabelSize, "GetLabelSize(dc, wnd, item) -> wx.Size");

extern "C" {static PyObject *meth_wxAuiToolBarArt_GetLabelSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBarArt_GetLabelSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxDC* dc;
         ::wxWindow* wnd;
        const  ::wxAuiToolBarItem* item;
         ::wxAuiToolBarArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_wnd,
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J8J9", &sipSelf, sipType_wxAuiToolBarArt, &sipCpp, sipType_wxDC, &dc, sipType_wxWindow, &wnd, sipType_wxAuiToolBarItem, &item))
        {
             ::wxSize*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_AuiToolBarArt, sipName_GetLabelSize);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->GetLabelSize(*dc,wnd,*item));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiToolBarArt, sipName_GetLabelSize, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiToolBarArt_GetToolSize, "GetToolSize(dc, wnd, item) -> wx.Size");

extern "C" {static PyObject *meth_wxAuiToolBarArt_GetToolSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBarArt_GetToolSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxDC* dc;
         ::wxWindow* wnd;
        const  ::wxAuiToolBarItem* item;
         ::wxAuiToolBarArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_wnd,
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J8J9", &sipSelf, sipType_wxAuiToolBarArt, &sipCpp, sipType_wxDC, &dc, sipType_wxWindow, &wnd, sipType_wxAuiToolBarItem, &item))
        {
             ::wxSize*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_AuiToolBarArt, sipName_GetToolSize);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->GetToolSize(*dc,wnd,*item));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiToolBarArt, sipName_GetToolSize, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiToolBarArt_GetElementSize, "GetElementSize(element_id) -> int");

extern "C" {static PyObject *meth_wxAuiToolBarArt_GetElementSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBarArt_GetElementSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int element_id;
         ::wxAuiToolBarArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_element_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxAuiToolBarArt, &sipCpp, &element_id))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_AuiToolBarArt, sipName_GetElementSize);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetElementSize(element_id);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiToolBarArt, sipName_GetElementSize, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiToolBarArt_SetElementSize, "SetElementSize(element_id, size)");

extern "C" {static PyObject *meth_wxAuiToolBarArt_SetElementSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBarArt_SetElementSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        int element_id;
        int size;
         ::wxAuiToolBarArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_element_id,
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxAuiToolBarArt, &sipCpp, &element_id, &size))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_AuiToolBarArt, sipName_SetElementSize);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetElementSize(element_id,size);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiToolBarArt, sipName_SetElementSize, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiToolBarArt_ShowDropDown, "ShowDropDown(wnd, items) -> int");

extern "C" {static PyObject *meth_wxAuiToolBarArt_ShowDropDown(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiToolBarArt_ShowDropDown(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* wnd;
        const  ::wxAuiToolBarItemArray* items;
         ::wxAuiToolBarArt *sipCpp;

        static const char *sipKwdList[] = {
            sipName_wnd,
            sipName_items,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J9", &sipSelf, sipType_wxAuiToolBarArt, &sipCpp, sipType_wxWindow, &wnd, sipType_wxAuiToolBarItemArray, &items))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_AuiToolBarArt, sipName_ShowDropDown);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ShowDropDown(wnd,*items);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiToolBarArt, sipName_ShowDropDown, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxAuiToolBarArt(void *, int);}
static void release_wxAuiToolBarArt(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxAuiToolBarArt *>(sipCppV);
    else
        delete reinterpret_cast< ::wxAuiToolBarArt *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxAuiToolBarArt(sipSimpleWrapper *);}
static void dealloc_wxAuiToolBarArt(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxAuiToolBarArt *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxAuiToolBarArt(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxAuiToolBarArt(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxAuiToolBarArt(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxAuiToolBarArt *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxAuiToolBarArt();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxAuiToolBarArt* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxAuiToolBarArt, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxAuiToolBarArt(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_wxAuiToolBarArt[] = {
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxAuiToolBarArt_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBarArt_Clone)},
    {SIP_MLNAME_CAST(sipName_DrawBackground), (PyCFunction)meth_wxAuiToolBarArt_DrawBackground, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBarArt_DrawBackground)},
    {SIP_MLNAME_CAST(sipName_DrawButton), (PyCFunction)meth_wxAuiToolBarArt_DrawButton, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBarArt_DrawButton)},
    {SIP_MLNAME_CAST(sipName_DrawControlLabel), (PyCFunction)meth_wxAuiToolBarArt_DrawControlLabel, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBarArt_DrawControlLabel)},
    {SIP_MLNAME_CAST(sipName_DrawDropDownButton), (PyCFunction)meth_wxAuiToolBarArt_DrawDropDownButton, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBarArt_DrawDropDownButton)},
    {SIP_MLNAME_CAST(sipName_DrawGripper), (PyCFunction)meth_wxAuiToolBarArt_DrawGripper, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBarArt_DrawGripper)},
    {SIP_MLNAME_CAST(sipName_DrawLabel), (PyCFunction)meth_wxAuiToolBarArt_DrawLabel, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBarArt_DrawLabel)},
    {SIP_MLNAME_CAST(sipName_DrawOverflowButton), (PyCFunction)meth_wxAuiToolBarArt_DrawOverflowButton, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBarArt_DrawOverflowButton)},
    {SIP_MLNAME_CAST(sipName_DrawPlainBackground), (PyCFunction)meth_wxAuiToolBarArt_DrawPlainBackground, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBarArt_DrawPlainBackground)},
    {SIP_MLNAME_CAST(sipName_DrawSeparator), (PyCFunction)meth_wxAuiToolBarArt_DrawSeparator, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBarArt_DrawSeparator)},
    {SIP_MLNAME_CAST(sipName_GetElementSize), (PyCFunction)meth_wxAuiToolBarArt_GetElementSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBarArt_GetElementSize)},
    {SIP_MLNAME_CAST(sipName_GetFlags), meth_wxAuiToolBarArt_GetFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBarArt_GetFlags)},
    {SIP_MLNAME_CAST(sipName_GetFont), meth_wxAuiToolBarArt_GetFont, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBarArt_GetFont)},
    {SIP_MLNAME_CAST(sipName_GetLabelSize), (PyCFunction)meth_wxAuiToolBarArt_GetLabelSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBarArt_GetLabelSize)},
    {SIP_MLNAME_CAST(sipName_GetTextOrientation), meth_wxAuiToolBarArt_GetTextOrientation, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiToolBarArt_GetTextOrientation)},
    {SIP_MLNAME_CAST(sipName_GetToolSize), (PyCFunction)meth_wxAuiToolBarArt_GetToolSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBarArt_GetToolSize)},
    {SIP_MLNAME_CAST(sipName_SetElementSize), (PyCFunction)meth_wxAuiToolBarArt_SetElementSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBarArt_SetElementSize)},
    {SIP_MLNAME_CAST(sipName_SetFlags), (PyCFunction)meth_wxAuiToolBarArt_SetFlags, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBarArt_SetFlags)},
    {SIP_MLNAME_CAST(sipName_SetFont), (PyCFunction)meth_wxAuiToolBarArt_SetFont, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBarArt_SetFont)},
    {SIP_MLNAME_CAST(sipName_SetTextOrientation), (PyCFunction)meth_wxAuiToolBarArt_SetTextOrientation, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBarArt_SetTextOrientation)},
    {SIP_MLNAME_CAST(sipName_ShowDropDown), (PyCFunction)meth_wxAuiToolBarArt_ShowDropDown, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiToolBarArt_ShowDropDown)}
};

sipVariableDef variables_wxAuiToolBarArt[] = {
    {PropertyVariable, sipName_TextOrientation, &methods_wxAuiToolBarArt[14], &methods_wxAuiToolBarArt[19], NULL, NULL},
    {PropertyVariable, sipName_Font, &methods_wxAuiToolBarArt[12], &methods_wxAuiToolBarArt[18], NULL, NULL},
    {PropertyVariable, sipName_Flags, &methods_wxAuiToolBarArt[11], &methods_wxAuiToolBarArt[17], NULL, NULL},
};

PyDoc_STRVAR(doc_wxAuiToolBarArt, "AuiToolBarArt()\n"
"\n"
"wxAuiToolBarArt is part of the wxAUI class framework.");


sipClassTypeDef sipTypeDef__aui_wxAuiToolBarArt = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_wxAuiToolBarArt,
        {0},
        0
    },
    {
        sipNameNr_AuiToolBarArt,
        {0, 0, 1},
        21, methods_wxAuiToolBarArt,
        0, 0,
        3, variables_wxAuiToolBarArt,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxAuiToolBarArt,
    -1,
    -1,
    0,
    0,
    init_type_wxAuiToolBarArt,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxAuiToolBarArt,
    0,
    0,
    0,
    release_wxAuiToolBarArt,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
