/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/filectrl.h>

        #include <wx/object.h>
        #include <wx/event.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxFileCtrlEvent : public  ::wxFileCtrlEvent
{
public:
    sipwxFileCtrlEvent( ::wxEventType, ::wxObject*,int);
    sipwxFileCtrlEvent(const  ::wxFileCtrlEvent&);
    virtual ~sipwxFileCtrlEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxEventCategory GetEventCategory() const;
     ::wxEvent* Clone() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxFileCtrlEvent(const sipwxFileCtrlEvent &);
    sipwxFileCtrlEvent &operator = (const sipwxFileCtrlEvent &);

    char sipPyMethods[2];
};

sipwxFileCtrlEvent::sipwxFileCtrlEvent( ::wxEventType type, ::wxObject*evtObject,int id):  ::wxFileCtrlEvent(type,evtObject,id), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxFileCtrlEvent::sipwxFileCtrlEvent(const  ::wxFileCtrlEvent& a0):  ::wxFileCtrlEvent(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxFileCtrlEvent::~sipwxFileCtrlEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxEventCategory sipwxFileCtrlEvent::GetEventCategory() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_GetEventCategory);

    if (!sipMeth)
        return  ::wxFileCtrlEvent::GetEventCategory();

    extern  ::wxEventCategory sipVH__core_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_96(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxEvent* sipwxFileCtrlEvent::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_Clone);

    if (!sipMeth)
        return  ::wxFileCtrlEvent::Clone();

    extern  ::wxEvent* sipVH__core_95(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_95(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxFileCtrlEvent_GetDirectory, "GetDirectory() -> String\n"
"\n"
"Returns the current directory.");

extern "C" {static PyObject *meth_wxFileCtrlEvent_GetDirectory(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrlEvent_GetDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxFileCtrlEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrlEvent, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetDirectory());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrlEvent, sipName_GetDirectory, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrlEvent_GetFile, "GetFile() -> String\n"
"\n"
"Returns the file selected (assuming it is only one file).");

extern "C" {static PyObject *meth_wxFileCtrlEvent_GetFile(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrlEvent_GetFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxFileCtrlEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrlEvent, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetFile());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrlEvent, sipName_GetFile, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrlEvent_GetFiles, "GetFiles() -> ArrayString\n"
"\n"
"Returns the files selected.");

extern "C" {static PyObject *meth_wxFileCtrlEvent_GetFiles(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrlEvent_GetFiles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxFileCtrlEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrlEvent, &sipCpp))
        {
             ::wxArrayString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxArrayString(sipCpp->GetFiles());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxArrayString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrlEvent, sipName_GetFiles, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrlEvent_GetFilterIndex, "GetFilterIndex() -> int\n"
"\n"
"Returns the current file filter index.");

extern "C" {static PyObject *meth_wxFileCtrlEvent_GetFilterIndex(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrlEvent_GetFilterIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxFileCtrlEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrlEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetFilterIndex();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrlEvent, sipName_GetFilterIndex, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrlEvent_SetFiles, "SetFiles(files)\n"
"\n"
"Sets the files changed by this event.");

extern "C" {static PyObject *meth_wxFileCtrlEvent_SetFiles(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrlEvent_SetFiles(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxArrayString* files;
        int filesState = 0;
         ::wxFileCtrlEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_files,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxFileCtrlEvent, &sipCpp, sipType_wxArrayString,&files, &filesState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFiles(*files);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxArrayString *>(files),sipType_wxArrayString,filesState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrlEvent, sipName_SetFiles, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrlEvent_SetDirectory, "SetDirectory(directory)\n"
"\n"
"Sets the directory of this event.");

extern "C" {static PyObject *meth_wxFileCtrlEvent_SetDirectory(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrlEvent_SetDirectory(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* directory;
        int directoryState = 0;
         ::wxFileCtrlEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_directory,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxFileCtrlEvent, &sipCpp, sipType_wxString,&directory, &directoryState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetDirectory(*directory);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(directory),sipType_wxString,directoryState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrlEvent, sipName_SetDirectory, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrlEvent_SetFilterIndex, "SetFilterIndex(index)\n"
"\n"
"Sets the filter index changed by this event.");

extern "C" {static PyObject *meth_wxFileCtrlEvent_SetFilterIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrlEvent_SetFilterIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int index;
         ::wxFileCtrlEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_index,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxFileCtrlEvent, &sipCpp, &index))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFilterIndex(index);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrlEvent, sipName_SetFilterIndex, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrlEvent_Clone, "Clone(self) -> Event");

extern "C" {static PyObject *meth_wxFileCtrlEvent_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrlEvent_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxFileCtrlEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrlEvent, &sipCpp))
        {
             ::wxEvent*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxFileCtrlEvent::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxEvent,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrlEvent, sipName_Clone, doc_wxFileCtrlEvent_Clone);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxFileCtrlEvent(void *, const sipTypeDef *);}
static void *cast_wxFileCtrlEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxFileCtrlEvent *sipCpp = reinterpret_cast< ::wxFileCtrlEvent *>(sipCppV);

    if (targetType == sipType_wxCommandEvent)
        return static_cast< ::wxCommandEvent *>(sipCpp);

    if (targetType == sipType_wxEvent)
        return static_cast< ::wxEvent *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxFileCtrlEvent(void *, int);}
static void release_wxFileCtrlEvent(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxFileCtrlEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::wxFileCtrlEvent *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxFileCtrlEvent(sipSimpleWrapper *);}
static void dealloc_wxFileCtrlEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxFileCtrlEvent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxFileCtrlEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxFileCtrlEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxFileCtrlEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxFileCtrlEvent *sipCpp = 0;

    {
         ::wxEventType type;
         ::wxObject* evtObject;
        int id;

        static const char *sipKwdList[] = {
            sipName_type,
            sipName_evtObject,
            sipName_id,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "iJ8i", &type, sipType_wxObject, &evtObject, &id))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxFileCtrlEvent(type,evtObject,id);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxFileCtrlEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxFileCtrlEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxFileCtrlEvent(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxFileCtrlEvent[] = {{78, 255, 1}};


static PyMethodDef methods_wxFileCtrlEvent[] = {
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxFileCtrlEvent_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrlEvent_Clone)},
    {SIP_MLNAME_CAST(sipName_GetDirectory), meth_wxFileCtrlEvent_GetDirectory, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrlEvent_GetDirectory)},
    {SIP_MLNAME_CAST(sipName_GetFile), meth_wxFileCtrlEvent_GetFile, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrlEvent_GetFile)},
    {SIP_MLNAME_CAST(sipName_GetFiles), meth_wxFileCtrlEvent_GetFiles, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrlEvent_GetFiles)},
    {SIP_MLNAME_CAST(sipName_GetFilterIndex), meth_wxFileCtrlEvent_GetFilterIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrlEvent_GetFilterIndex)},
    {SIP_MLNAME_CAST(sipName_SetDirectory), (PyCFunction)meth_wxFileCtrlEvent_SetDirectory, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrlEvent_SetDirectory)},
    {SIP_MLNAME_CAST(sipName_SetFiles), (PyCFunction)meth_wxFileCtrlEvent_SetFiles, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrlEvent_SetFiles)},
    {SIP_MLNAME_CAST(sipName_SetFilterIndex), (PyCFunction)meth_wxFileCtrlEvent_SetFilterIndex, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrlEvent_SetFilterIndex)}
};

sipVariableDef variables_wxFileCtrlEvent[] = {
    {PropertyVariable, sipName_FilterIndex, &methods_wxFileCtrlEvent[4], &methods_wxFileCtrlEvent[7], NULL, NULL},
    {PropertyVariable, sipName_Files, &methods_wxFileCtrlEvent[3], &methods_wxFileCtrlEvent[6], NULL, NULL},
    {PropertyVariable, sipName_File, &methods_wxFileCtrlEvent[2], NULL, NULL, NULL},
    {PropertyVariable, sipName_Directory, &methods_wxFileCtrlEvent[1], &methods_wxFileCtrlEvent[5], NULL, NULL},
};

PyDoc_STRVAR(doc_wxFileCtrlEvent, "FileCtrlEvent(type, evtObject, id)\n"
"\n"
"A file control event holds information about events associated with\n"
"wxFileCtrl objects.");


sipClassTypeDef sipTypeDef__core_wxFileCtrlEvent = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxFileCtrlEvent,
        {0},
        0
    },
    {
        sipNameNr_FileCtrlEvent,
        {0, 0, 1},
        8, methods_wxFileCtrlEvent,
        0, 0,
        4, variables_wxFileCtrlEvent,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxFileCtrlEvent,
    -1,
    -1,
    supers_wxFileCtrlEvent,
    0,
    init_type_wxFileCtrlEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxFileCtrlEvent,
    0,
    0,
    0,
    release_wxFileCtrlEvent,
    cast_wxFileCtrlEvent,
    0,
    0,
    0,
    0,
    0,
    0
};
