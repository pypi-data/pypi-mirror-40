/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/validate.h>

        #include <wx/window.h>
        #include <wx/object.h>
        #include <wx/event.h>
        #include <wx/eventfilter.h>
        #include <wx/event.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxValidator : public  ::wxValidator
{
public:
    sipwxValidator();
    virtual ~sipwxValidator();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool Validate( ::wxWindow*);
    bool TransferToWindow();
    bool TransferFromWindow();
     ::wxObject* Clone() const;
    bool ProcessEvent( ::wxEvent&);
    bool TryBefore( ::wxEvent&);
    bool TryAfter( ::wxEvent&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxValidator(const sipwxValidator &);
    sipwxValidator &operator = (const sipwxValidator &);

    char sipPyMethods[7];
};

sipwxValidator::sipwxValidator():  ::wxValidator(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxValidator::~sipwxValidator()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxValidator::Validate( ::wxWindow*parent)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_Validate);

    if (!sipMeth)
        return  ::wxValidator::Validate(parent);

    extern bool sipVH__core_128(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindow*);

    return sipVH__core_128(sipGILState, 0, sipPySelf, sipMeth, parent);
}

bool sipwxValidator::TransferToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_TransferToWindow);

    if (!sipMeth)
        return  ::wxValidator::TransferToWindow();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxValidator::TransferFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_TransferFromWindow);

    if (!sipMeth)
        return  ::wxValidator::TransferFromWindow();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxObject* sipwxValidator::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_Clone);

    if (!sipMeth)
        return  ::wxValidator::Clone();

    extern  ::wxObject* sipVH__core_127(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_127(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxValidator::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxValidator::ProcessEvent(event);

    extern bool sipVH__core_94(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_94(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxValidator::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxValidator::TryBefore(event);

    extern bool sipVH__core_94(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_94(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxValidator::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxValidator::TryAfter(event);

    extern bool sipVH__core_94(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_94(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxValidator::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxEvtHandler::TryBefore(event) : TryBefore(event));
}

bool sipwxValidator::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxEvtHandler::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxValidator_TryBefore, "TryBefore(event) -> bool\n"
"\n"
"Method called by ProcessEvent() before examining this object event\n"
"tables.");

extern "C" {static PyObject *meth_wxValidator_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxValidator_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxValidator *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxValidator, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Validator, sipName_TryBefore, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxValidator_TryAfter, "TryAfter(event) -> bool\n"
"\n"
"Method called by ProcessEvent() as last resort.");

extern "C" {static PyObject *meth_wxValidator_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxValidator_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxValidator *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxValidator, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Validator, sipName_TryAfter, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxValidator_Clone, "Clone() -> Object\n"
"\n"
"All validator classes must implement the Clone() function, which\n"
"returns an identical copy of itself.");

extern "C" {static PyObject *meth_wxValidator_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxValidator_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxValidator, &sipCpp))
        {
             ::wxObject*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxValidator::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Validator, sipName_Clone, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxValidator_GetWindow, "GetWindow() -> Window\n"
"\n"
"Returns the window associated with the validator.");

extern "C" {static PyObject *meth_wxValidator_GetWindow(PyObject *, PyObject *);}
static PyObject *meth_wxValidator_GetWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxValidator, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetWindow();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Validator, sipName_GetWindow, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxValidator_SetWindow, "SetWindow(window)\n"
"\n"
"Associates a window with the validator.");

extern "C" {static PyObject *meth_wxValidator_SetWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxValidator_SetWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* window;
         ::wxValidator *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxValidator, &sipCpp, sipType_wxWindow, &window))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetWindow(window);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Validator, sipName_SetWindow, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxValidator_TransferFromWindow, "TransferFromWindow() -> bool\n"
"\n"
"This overridable function is called when the value in the window must\n"
"be transferred to the validator.");

extern "C" {static PyObject *meth_wxValidator_TransferFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxValidator_TransferFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxValidator, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxValidator::TransferFromWindow() : sipCpp->TransferFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Validator, sipName_TransferFromWindow, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxValidator_TransferToWindow, "TransferToWindow() -> bool\n"
"\n"
"This overridable function is called when the value associated with the\n"
"validator must be transferred to the window.");

extern "C" {static PyObject *meth_wxValidator_TransferToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxValidator_TransferToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxValidator *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxValidator, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxValidator::TransferToWindow() : sipCpp->TransferToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Validator, sipName_TransferToWindow, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxValidator_Validate, "Validate(parent) -> bool\n"
"\n"
"This overridable function is called when the value in the associated\n"
"window must be validated.");

extern "C" {static PyObject *meth_wxValidator_Validate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxValidator_Validate(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindow* parent;
         ::wxValidator *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxValidator, &sipCpp, sipType_wxWindow, &parent))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxValidator::Validate(parent) : sipCpp->Validate(parent));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Validator, sipName_Validate, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxValidator_SuppressBellOnError, "SuppressBellOnError(suppress=True)\n"
"\n"
"This functions switches on or turns off the error sound produced by\n"
"the validators if an invalid key is pressed.");

extern "C" {static PyObject *meth_wxValidator_SuppressBellOnError(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxValidator_SuppressBellOnError(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool suppress = 1;

        static const char *sipKwdList[] = {
            sipName_suppress,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|b", &suppress))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxValidator::SuppressBellOnError(suppress);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Validator, sipName_SuppressBellOnError, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxValidator_IsSilent, "IsSilent() -> bool\n"
"\n"
"Returns if the error sound is currently disabled.");

extern "C" {static PyObject *meth_wxValidator_IsSilent(PyObject *, PyObject *);}
static PyObject *meth_wxValidator_IsSilent(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxValidator::IsSilent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Validator, sipName_IsSilent, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxValidator(void *, const sipTypeDef *);}
static void *cast_wxValidator(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxValidator *sipCpp = reinterpret_cast< ::wxValidator *>(sipCppV);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxValidator(void *, int);}
static void release_wxValidator(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxValidator *>(sipCppV);
    else
        delete reinterpret_cast< ::wxValidator *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxValidator(sipSimpleWrapper *);}
static void dealloc_wxValidator(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxValidator *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxValidator(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxValidator(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxValidator(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxValidator *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxValidator();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxValidator[] = {{148, 255, 1}};


static PyMethodDef methods_wxValidator[] = {
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxValidator_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxValidator_Clone)},
    {SIP_MLNAME_CAST(sipName_GetWindow), meth_wxValidator_GetWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxValidator_GetWindow)},
    {SIP_MLNAME_CAST(sipName_IsSilent), meth_wxValidator_IsSilent, METH_VARARGS, SIP_MLDOC_CAST(doc_wxValidator_IsSilent)},
    {SIP_MLNAME_CAST(sipName_SetWindow), (PyCFunction)meth_wxValidator_SetWindow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxValidator_SetWindow)},
    {SIP_MLNAME_CAST(sipName_SuppressBellOnError), (PyCFunction)meth_wxValidator_SuppressBellOnError, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxValidator_SuppressBellOnError)},
    {SIP_MLNAME_CAST(sipName_TransferFromWindow), meth_wxValidator_TransferFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxValidator_TransferFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferToWindow), meth_wxValidator_TransferToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxValidator_TransferToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), (PyCFunction)meth_wxValidator_TryAfter, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_TryBefore), (PyCFunction)meth_wxValidator_TryBefore, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_Validate), (PyCFunction)meth_wxValidator_Validate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxValidator_Validate)}
};

sipVariableDef variables_wxValidator[] = {
    {PropertyVariable, sipName_Window, &methods_wxValidator[1], &methods_wxValidator[3], NULL, NULL},
};

PyDoc_STRVAR(doc_wxValidator, "Validator()\n"
"\n"
"wxValidator is the base class for a family of validator classes that\n"
"mediate between a class of control, and application data.");


sipClassTypeDef sipTypeDef__core_wxValidator = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxValidator,
        {0},
        0
    },
    {
        sipNameNr_Validator,
        {0, 0, 1},
        10, methods_wxValidator,
        0, 0,
        1, variables_wxValidator,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxValidator,
    -1,
    -1,
    supers_wxValidator,
    0,
    init_type_wxValidator,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxValidator,
    0,
    0,
    0,
    release_wxValidator,
    cast_wxValidator,
    0,
    0,
    0,
    0,
    0,
    0
};
