/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_ribbon.h"

        #include <wx/ribbon/toolbar.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/validate.h>
        #include <wx/bitmap.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/ribbon/bar.h>
        #include <wx/ribbon/art.h>
        #include <wx/dc.h>
        #include <wx/event.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/region.h>
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>
    wxPyUserData* _wxRibbonToolBar_GetToolClientData(const wxRibbonToolBar* self, int tool_id)
    {
        return dynamic_cast<wxPyUserData*>(self->GetToolClientData(tool_id));
    }


class sipwxRibbonToolBar : public  ::wxRibbonToolBar
{
public:
    sipwxRibbonToolBar();
    sipwxRibbonToolBar( ::wxWindow*, ::wxWindowID,const  ::wxPoint&,const  ::wxSize&,long);
    virtual ~sipwxRibbonToolBar();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
     ::wxSize sipProtect_DoGetNextSmallerSize( ::wxOrientation, ::wxSize) const;
     ::wxSize sipProtect_DoGetNextLargerSize( ::wxOrientation, ::wxSize) const;
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void RemoveChild( ::wxWindowBase*);
    void AddChild( ::wxWindowBase*);
    bool ProcessEvent( ::wxEvent&);
    bool TryBefore( ::wxEvent&);
    bool TryAfter( ::wxEvent&);
    bool AcceptsFocus() const;
    bool AcceptsFocusFromKeyboard() const;
    bool AcceptsFocusRecursively() const;
    void SetCanFocus(bool);
    bool InformFirstDirection(int,int,int);
     ::wxPoint GetClientAreaOrigin() const;
    bool HasTransparentBackground();
    bool ShouldInheritColours() const;
     ::wxValidator* GetValidator();
    void SetValidator(const  ::wxValidator&);
    bool TransferDataFromWindow();
    bool TransferDataToWindow();
    bool Validate();
    bool Destroy();
    void InheritAttributes();
    void InitDialog();
    void OnInternalIdle();
     ::wxWindow* GetMainWindowOfCompositeControl();
    void DoEnable(bool);
    void DoGetPosition(int*,int*) const;
    void DoGetSize(int*,int*) const;
    void DoGetClientSize(int*,int*) const;
    void DoSetSize(int,int,int,int,int);
    void DoSetClientSize(int,int);
    void DoSetSizeHints(int,int,int,int,int,int);
     ::wxSize DoGetBorderSize() const;
    void DoMoveWindow(int,int,int,int);
    void DoSetWindowVariant( ::wxWindowVariant);
     ::wxBorder GetDefaultBorder() const;
     ::wxBorder GetDefaultBorderForControl() const;
    void DoFreeze();
    void DoThaw();
     ::wxSize DoGetBestSize() const;
     ::wxSize DoGetBestClientSize() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxRibbonToolBar(const sipwxRibbonToolBar &);
    sipwxRibbonToolBar &operator = (const sipwxRibbonToolBar &);

    char sipPyMethods[39];
};

sipwxRibbonToolBar::sipwxRibbonToolBar():  ::wxRibbonToolBar(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRibbonToolBar::sipwxRibbonToolBar( ::wxWindow*parent, ::wxWindowID id,const  ::wxPoint& pos,const  ::wxSize& size,long style):  ::wxRibbonToolBar(parent,id,pos,size,style), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRibbonToolBar::~sipwxRibbonToolBar()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxRibbonToolBar::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxRibbonToolBar::RemoveChild(child);
        return;
    }

    extern void sipVH__ribbon_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__ribbon_0(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxRibbonToolBar::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxRibbonToolBar::AddChild(child);
        return;
    }

    extern void sipVH__ribbon_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__ribbon_0(sipGILState, 0, sipPySelf, sipMeth, child);
}

bool sipwxRibbonToolBar::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxRibbonToolBar::ProcessEvent(event);

    extern bool sipVH__ribbon_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__ribbon_1(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxRibbonToolBar::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxRibbonToolBar::TryBefore(event);

    extern bool sipVH__ribbon_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__ribbon_1(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxRibbonToolBar::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxRibbonToolBar::TryAfter(event);

    extern bool sipVH__ribbon_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__ribbon_1(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxRibbonToolBar::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxRibbonToolBar::AcceptsFocus();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRibbonToolBar::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxRibbonToolBar::AcceptsFocusFromKeyboard();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRibbonToolBar::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxRibbonToolBar::AcceptsFocusRecursively();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonToolBar::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxRibbonToolBar::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__ribbon_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__ribbon_3(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

bool sipwxRibbonToolBar::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxRibbonToolBar::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__ribbon_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__ribbon_4(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

 ::wxPoint sipwxRibbonToolBar::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxRibbonToolBar::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__ribbon_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_5(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRibbonToolBar::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxRibbonToolBar::HasTransparentBackground();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRibbonToolBar::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxRibbonToolBar::ShouldInheritColours();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxValidator* sipwxRibbonToolBar::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxRibbonToolBar::GetValidator();

    extern  ::wxValidator* sipVH__ribbon_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_6(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonToolBar::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxRibbonToolBar::SetValidator(validator);
        return;
    }

    extern void sipVH__ribbon_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__ribbon_7(sipGILState, 0, sipPySelf, sipMeth, validator);
}

bool sipwxRibbonToolBar::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxRibbonToolBar::TransferDataFromWindow();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRibbonToolBar::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxRibbonToolBar::TransferDataToWindow();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRibbonToolBar::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_Validate);

    if (!sipMeth)
        return  ::wxRibbonToolBar::Validate();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRibbonToolBar::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_Destroy);

    if (!sipMeth)
        return  ::wxRibbonToolBar::Destroy();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonToolBar::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxRibbonToolBar::InheritAttributes();
        return;
    }

    extern void sipVH__ribbon_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__ribbon_8(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonToolBar::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxRibbonToolBar::InitDialog();
        return;
    }

    extern void sipVH__ribbon_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__ribbon_8(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonToolBar::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxRibbonToolBar::OnInternalIdle();
        return;
    }

    extern void sipVH__ribbon_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__ribbon_8(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxWindow* sipwxRibbonToolBar::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxRibbonToolBar::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__ribbon_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_9(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonToolBar::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxRibbonToolBar::DoEnable(enable);
        return;
    }

    extern void sipVH__ribbon_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__ribbon_3(sipGILState, 0, sipPySelf, sipMeth, enable);
}

void sipwxRibbonToolBar::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxRibbonToolBar::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__ribbon_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__ribbon_10(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxRibbonToolBar::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxRibbonToolBar::DoGetSize(width,height);
        return;
    }

    extern void sipVH__ribbon_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__ribbon_10(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxRibbonToolBar::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxRibbonToolBar::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__ribbon_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__ribbon_10(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxRibbonToolBar::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxRibbonToolBar::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__ribbon_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__ribbon_11(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxRibbonToolBar::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxRibbonToolBar::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__ribbon_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__ribbon_12(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxRibbonToolBar::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxRibbonToolBar::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__ribbon_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__ribbon_13(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

 ::wxSize sipwxRibbonToolBar::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxRibbonToolBar::DoGetBorderSize();

    extern  ::wxSize sipVH__ribbon_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_14(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonToolBar::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxRibbonToolBar::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__ribbon_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__ribbon_15(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

void sipwxRibbonToolBar::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxRibbonToolBar::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__ribbon_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__ribbon_16(sipGILState, 0, sipPySelf, sipMeth, variant);
}

 ::wxBorder sipwxRibbonToolBar::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxRibbonToolBar::GetDefaultBorder();

    extern  ::wxBorder sipVH__ribbon_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_17(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxRibbonToolBar::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxRibbonToolBar::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__ribbon_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_17(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonToolBar::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxRibbonToolBar::DoFreeze();
        return;
    }

    extern void sipVH__ribbon_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__ribbon_8(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonToolBar::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxRibbonToolBar::DoThaw();
        return;
    }

    extern void sipVH__ribbon_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__ribbon_8(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxRibbonToolBar::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxRibbonToolBar::DoGetBestSize();

    extern  ::wxSize sipVH__ribbon_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_14(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxRibbonToolBar::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxRibbonToolBar::DoGetBestClientSize();

    extern  ::wxSize sipVH__ribbon_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_14(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonToolBar::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

 ::wxSize sipwxRibbonToolBar::sipProtect_DoGetNextSmallerSize( ::wxOrientation direction, ::wxSize relative_to) const
{
    return  ::wxRibbonControl::DoGetNextSmallerSize(direction,relative_to);
}

 ::wxSize sipwxRibbonToolBar::sipProtect_DoGetNextLargerSize( ::wxOrientation direction, ::wxSize relative_to) const
{
    return  ::wxRibbonControl::DoGetNextLargerSize(direction,relative_to);
}

bool sipwxRibbonToolBar::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxRibbonToolBar::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxRibbonToolBar::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxRibbonToolBar::DoEnable(enable) : DoEnable(enable));
}

void sipwxRibbonToolBar::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxRibbonToolBar::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxRibbonToolBar::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxRibbonToolBar::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxRibbonToolBar::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxRibbonToolBar::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxRibbonToolBar::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxRibbonToolBar::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxRibbonToolBar::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxRibbonToolBar::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxRibbonToolBar::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxRibbonToolBar::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxRibbonToolBar::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxRibbonToolBar::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxRibbonToolBar::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxRibbonToolBar::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxRibbonToolBar::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxRibbonToolBar::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxRibbonToolBar::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxRibbonToolBar::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxRibbonToolBar::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxRibbonToolBar::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxRibbonToolBar::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxRibbonToolBar::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxRibbonToolBar::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxRibbonToolBar::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxRibbonToolBar::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxRibbonToolBar::DoFreeze() : DoFreeze());
}

void sipwxRibbonToolBar::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxRibbonToolBar::DoThaw() : DoThaw());
}

bool sipwxRibbonToolBar::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxRibbonToolBar::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxRibbonToolBar::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxRibbonToolBar::TryBefore(event) : TryBefore(event));
}

bool sipwxRibbonToolBar::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxRibbonToolBar::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxRibbonToolBar_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxRibbonToolBar_SendDestroyEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipwxRibbonToolBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_SendDestroyEvent, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_DoGetNextSmallerSize, "DoGetNextSmallerSize(direction, relative_to) -> wx.Size\n"
"\n"
"Implementation of GetNextSmallerSize().");

extern "C" {static PyObject *meth_wxRibbonToolBar_DoGetNextSmallerSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_DoGetNextSmallerSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxOrientation direction;
         ::wxSize* relative_to;
        int relative_toState = 0;
        const sipwxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_relative_to,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ1", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, sipType_wxOrientation, &direction, sipType_wxSize, &relative_to, &relative_toState))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtect_DoGetNextSmallerSize(direction,*relative_to));
            Py_END_ALLOW_THREADS
            sipReleaseType(relative_to,sipType_wxSize,relative_toState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_DoGetNextSmallerSize, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_DoGetNextLargerSize, "DoGetNextLargerSize(direction, relative_to) -> wx.Size\n"
"\n"
"Implementation of GetNextLargerSize().");

extern "C" {static PyObject *meth_wxRibbonToolBar_DoGetNextLargerSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_DoGetNextLargerSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxOrientation direction;
         ::wxSize* relative_to;
        int relative_toState = 0;
        const sipwxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_relative_to,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ1", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, sipType_wxOrientation, &direction, sipType_wxSize, &relative_to, &relative_toState))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtect_DoGetNextLargerSize(direction,*relative_to));
            Py_END_ALLOW_THREADS
            sipReleaseType(relative_to,sipType_wxSize,relative_toState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_DoGetNextLargerSize, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_Create, "Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0) -> bool\n"
"\n"
"Create a tool bar in two-step tool bar construction.");

extern "C" {static PyObject *meth_wxRibbonToolBar_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = 0;
        sipWrapper *sipOwner = 0;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJH|iJ1J1l", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, sipType_wxWindow, &parent, &sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,id,*pos,*size,style);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_Create, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_AddTool, "AddTool(tool_id, bitmap, help_string, kind=RIBBON_BUTTON_NORMAL) -> RibbonToolBarToolBase\n"
"AddTool(tool_id, bitmap, bitmap_disabled=wx.NullBitmap, help_string=wx.EmptyString, kind=RIBBON_BUTTON_NORMAL, clientData=None) -> RibbonToolBarToolBase\n"
"\n"
"Add a tool to the tool bar (simple version).\n"
"");

extern "C" {static PyObject *meth_wxRibbonToolBar_AddTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_AddTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int tool_id;
        const  ::wxBitmap* bitmap;
        const  ::wxString* help_string;
        int help_stringState = 0;
         ::wxRibbonButtonKind kind = wxRIBBON_BUTTON_NORMAL;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tool_id,
            sipName_bitmap,
            sipName_help_string,
            sipName_kind,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiJ9J1|E", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &tool_id, sipType_wxBitmap, &bitmap, sipType_wxString,&help_string, &help_stringState, sipType_wxRibbonButtonKind, &kind))
        {
             ::wxRibbonToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddTool(tool_id,*bitmap,*help_string,kind);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(help_string),sipType_wxString,help_stringState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRibbonToolBarToolBase,NULL);
        }
    }

    {
        int tool_id;
        const  ::wxBitmap* bitmap;
        const  ::wxBitmap& bitmap_disableddef = wxNullBitmap;
        const  ::wxBitmap* bitmap_disabled = &bitmap_disableddef;
        const  ::wxString& help_stringdef = wxEmptyString;
        const  ::wxString* help_string = &help_stringdef;
        int help_stringState = 0;
         ::wxRibbonButtonKind kind = wxRIBBON_BUTTON_NORMAL;
         ::wxPyUserData* clientData = 0;
        int clientDataState = 0;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tool_id,
            sipName_bitmap,
            sipName_bitmap_disabled,
            sipName_help_string,
            sipName_kind,
            sipName_clientData,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiJ9|J9J1EJ2", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &tool_id, sipType_wxBitmap, &bitmap, sipType_wxBitmap, &bitmap_disabled, sipType_wxString,&help_string, &help_stringState, sipType_wxRibbonButtonKind, &kind, sipType_wxPyUserData,&clientData, &clientDataState))
        {
             ::wxRibbonToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddTool(tool_id,*bitmap,*bitmap_disabled,*help_string,kind,clientData);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(help_string),sipType_wxString,help_stringState);
            sipReleaseType(clientData,sipType_wxPyUserData,clientDataState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRibbonToolBarToolBase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_AddTool, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_AddDropdownTool, "AddDropdownTool(tool_id, bitmap, help_string=wx.EmptyString) -> RibbonToolBarToolBase\n"
"\n"
"Add a dropdown tool to the tool bar (simple version).");

extern "C" {static PyObject *meth_wxRibbonToolBar_AddDropdownTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_AddDropdownTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int tool_id;
        const  ::wxBitmap* bitmap;
        const  ::wxString& help_stringdef = wxEmptyString;
        const  ::wxString* help_string = &help_stringdef;
        int help_stringState = 0;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tool_id,
            sipName_bitmap,
            sipName_help_string,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiJ9|J1", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &tool_id, sipType_wxBitmap, &bitmap, sipType_wxString,&help_string, &help_stringState))
        {
             ::wxRibbonToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddDropdownTool(tool_id,*bitmap,*help_string);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(help_string),sipType_wxString,help_stringState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRibbonToolBarToolBase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_AddDropdownTool, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_AddHybridTool, "AddHybridTool(tool_id, bitmap, help_string=wx.EmptyString) -> RibbonToolBarToolBase\n"
"\n"
"Add a hybrid tool to the tool bar (simple version).");

extern "C" {static PyObject *meth_wxRibbonToolBar_AddHybridTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_AddHybridTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int tool_id;
        const  ::wxBitmap* bitmap;
        const  ::wxString& help_stringdef = wxEmptyString;
        const  ::wxString* help_string = &help_stringdef;
        int help_stringState = 0;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tool_id,
            sipName_bitmap,
            sipName_help_string,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiJ9|J1", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &tool_id, sipType_wxBitmap, &bitmap, sipType_wxString,&help_string, &help_stringState))
        {
             ::wxRibbonToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddHybridTool(tool_id,*bitmap,*help_string);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(help_string),sipType_wxString,help_stringState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRibbonToolBarToolBase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_AddHybridTool, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_AddToggleTool, "AddToggleTool(tool_id, bitmap, help_string) -> RibbonToolBarToolBase\n"
"\n"
"Add a toggle tool to the tool bar (simple version).");

extern "C" {static PyObject *meth_wxRibbonToolBar_AddToggleTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_AddToggleTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int tool_id;
        const  ::wxBitmap* bitmap;
        const  ::wxString* help_string;
        int help_stringState = 0;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tool_id,
            sipName_bitmap,
            sipName_help_string,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiJ9J1", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &tool_id, sipType_wxBitmap, &bitmap, sipType_wxString,&help_string, &help_stringState))
        {
             ::wxRibbonToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddToggleTool(tool_id,*bitmap,*help_string);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(help_string),sipType_wxString,help_stringState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRibbonToolBarToolBase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_AddToggleTool, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_AddSeparator, "AddSeparator() -> RibbonToolBarToolBase\n"
"\n"
"Add a separator to the tool bar.");

extern "C" {static PyObject *meth_wxRibbonToolBar_AddSeparator(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_AddSeparator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxRibbonToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
             ::wxRibbonToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddSeparator();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRibbonToolBarToolBase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_AddSeparator, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_InsertTool, "InsertTool(pos, tool_id, bitmap, help_string, kind=RIBBON_BUTTON_NORMAL) -> RibbonToolBarToolBase\n"
"InsertTool(pos, tool_id, bitmap, bitmap_disabled=wx.NullBitmap, help_string=wx.EmptyString, kind=RIBBON_BUTTON_NORMAL, clientData=None) -> RibbonToolBarToolBase\n"
"\n"
"Insert a tool to the tool bar (simple version) as the specified\n"
"position.\n"
"");

extern "C" {static PyObject *meth_wxRibbonToolBar_InsertTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_InsertTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::size_t* pos;
        int posState = 0;
        int tool_id;
        const  ::wxBitmap* bitmap;
        const  ::wxString* help_string;
        int help_stringState = 0;
         ::wxRibbonButtonKind kind = wxRIBBON_BUTTON_NORMAL;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_tool_id,
            sipName_bitmap,
            sipName_help_string,
            sipName_kind,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1iJ9J1|E", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, sipType_size_t,&pos, &posState, &tool_id, sipType_wxBitmap, &bitmap, sipType_wxString,&help_string, &help_stringState, sipType_wxRibbonButtonKind, &kind))
        {
             ::wxRibbonToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertTool(*pos,tool_id,*bitmap,*help_string,kind);
            Py_END_ALLOW_THREADS
            sipReleaseType(pos,sipType_size_t,posState);
            sipReleaseType(const_cast< ::wxString *>(help_string),sipType_wxString,help_stringState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRibbonToolBarToolBase,NULL);
        }
    }

    {
         ::size_t* pos;
        int posState = 0;
        int tool_id;
        const  ::wxBitmap* bitmap;
        const  ::wxBitmap& bitmap_disableddef = wxNullBitmap;
        const  ::wxBitmap* bitmap_disabled = &bitmap_disableddef;
        const  ::wxString& help_stringdef = wxEmptyString;
        const  ::wxString* help_string = &help_stringdef;
        int help_stringState = 0;
         ::wxRibbonButtonKind kind = wxRIBBON_BUTTON_NORMAL;
         ::wxPyUserData* clientData = 0;
        int clientDataState = 0;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_tool_id,
            sipName_bitmap,
            sipName_bitmap_disabled,
            sipName_help_string,
            sipName_kind,
            sipName_clientData,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1iJ9|J9J1EJ2", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, sipType_size_t,&pos, &posState, &tool_id, sipType_wxBitmap, &bitmap, sipType_wxBitmap, &bitmap_disabled, sipType_wxString,&help_string, &help_stringState, sipType_wxRibbonButtonKind, &kind, sipType_wxPyUserData,&clientData, &clientDataState))
        {
             ::wxRibbonToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertTool(*pos,tool_id,*bitmap,*bitmap_disabled,*help_string,kind,clientData);
            Py_END_ALLOW_THREADS
            sipReleaseType(pos,sipType_size_t,posState);
            sipReleaseType(const_cast< ::wxString *>(help_string),sipType_wxString,help_stringState);
            sipReleaseType(clientData,sipType_wxPyUserData,clientDataState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRibbonToolBarToolBase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_InsertTool, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_InsertDropdownTool, "InsertDropdownTool(pos, tool_id, bitmap, help_string=wx.EmptyString) -> RibbonToolBarToolBase\n"
"\n"
"Insert a dropdown tool to the tool bar (simple version) as the\n"
"specified position.");

extern "C" {static PyObject *meth_wxRibbonToolBar_InsertDropdownTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_InsertDropdownTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::size_t* pos;
        int posState = 0;
        int tool_id;
        const  ::wxBitmap* bitmap;
        const  ::wxString& help_stringdef = wxEmptyString;
        const  ::wxString* help_string = &help_stringdef;
        int help_stringState = 0;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_tool_id,
            sipName_bitmap,
            sipName_help_string,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1iJ9|J1", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, sipType_size_t,&pos, &posState, &tool_id, sipType_wxBitmap, &bitmap, sipType_wxString,&help_string, &help_stringState))
        {
             ::wxRibbonToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertDropdownTool(*pos,tool_id,*bitmap,*help_string);
            Py_END_ALLOW_THREADS
            sipReleaseType(pos,sipType_size_t,posState);
            sipReleaseType(const_cast< ::wxString *>(help_string),sipType_wxString,help_stringState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRibbonToolBarToolBase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_InsertDropdownTool, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_InsertHybridTool, "InsertHybridTool(pos, tool_id, bitmap, help_string=wx.EmptyString) -> RibbonToolBarToolBase\n"
"\n"
"Insert a hybrid tool to the tool bar (simple version) as the specified\n"
"position.");

extern "C" {static PyObject *meth_wxRibbonToolBar_InsertHybridTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_InsertHybridTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::size_t* pos;
        int posState = 0;
        int tool_id;
        const  ::wxBitmap* bitmap;
        const  ::wxString& help_stringdef = wxEmptyString;
        const  ::wxString* help_string = &help_stringdef;
        int help_stringState = 0;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_tool_id,
            sipName_bitmap,
            sipName_help_string,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1iJ9|J1", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, sipType_size_t,&pos, &posState, &tool_id, sipType_wxBitmap, &bitmap, sipType_wxString,&help_string, &help_stringState))
        {
             ::wxRibbonToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertHybridTool(*pos,tool_id,*bitmap,*help_string);
            Py_END_ALLOW_THREADS
            sipReleaseType(pos,sipType_size_t,posState);
            sipReleaseType(const_cast< ::wxString *>(help_string),sipType_wxString,help_stringState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRibbonToolBarToolBase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_InsertHybridTool, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_InsertToggleTool, "InsertToggleTool(pos, tool_id, bitmap, help_string=wx.EmptyString) -> RibbonToolBarToolBase\n"
"\n"
"Insert a toggle tool to the tool bar (simple version) as the specified\n"
"position.");

extern "C" {static PyObject *meth_wxRibbonToolBar_InsertToggleTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_InsertToggleTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::size_t* pos;
        int posState = 0;
        int tool_id;
        const  ::wxBitmap* bitmap;
        const  ::wxString& help_stringdef = wxEmptyString;
        const  ::wxString* help_string = &help_stringdef;
        int help_stringState = 0;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_tool_id,
            sipName_bitmap,
            sipName_help_string,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1iJ9|J1", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, sipType_size_t,&pos, &posState, &tool_id, sipType_wxBitmap, &bitmap, sipType_wxString,&help_string, &help_stringState))
        {
             ::wxRibbonToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertToggleTool(*pos,tool_id,*bitmap,*help_string);
            Py_END_ALLOW_THREADS
            sipReleaseType(pos,sipType_size_t,posState);
            sipReleaseType(const_cast< ::wxString *>(help_string),sipType_wxString,help_stringState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRibbonToolBarToolBase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_InsertToggleTool, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_InsertSeparator, "InsertSeparator(pos) -> RibbonToolBarToolBase\n"
"\n"
"Insert a separator to the tool bar at the specified position.");

extern "C" {static PyObject *meth_wxRibbonToolBar_InsertSeparator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_InsertSeparator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::size_t* pos;
        int posState = 0;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, sipType_size_t,&pos, &posState))
        {
             ::wxRibbonToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertSeparator(*pos);
            Py_END_ALLOW_THREADS
            sipReleaseType(pos,sipType_size_t,posState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRibbonToolBarToolBase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_InsertSeparator, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_ClearTools, "ClearTools()\n"
"\n"
"Deletes all the tools in the toolbar.");

extern "C" {static PyObject *meth_wxRibbonToolBar_ClearTools(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_ClearTools(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxRibbonToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ClearTools();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_ClearTools, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_DeleteTool, "DeleteTool(tool_id) -> bool\n"
"\n"
"Removes the specified tool from the toolbar and deletes it.");

extern "C" {static PyObject *meth_wxRibbonToolBar_DeleteTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_DeleteTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int tool_id;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tool_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &tool_id))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DeleteTool(tool_id);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_DeleteTool, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_DeleteToolByPos, "DeleteToolByPos(pos) -> bool\n"
"\n"
"This function behaves like DeleteTool() but it deletes the tool at the\n"
"specified position and not the one with the given id.");

extern "C" {static PyObject *meth_wxRibbonToolBar_DeleteToolByPos(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_DeleteToolByPos(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::size_t* pos;
        int posState = 0;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, sipType_size_t,&pos, &posState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DeleteToolByPos(*pos);
            Py_END_ALLOW_THREADS
            sipReleaseType(pos,sipType_size_t,posState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_DeleteToolByPos, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_FindById, "FindById(tool_id) -> RibbonToolBarToolBase\n"
"\n"
"Returns a pointer to the tool opaque structure by id or NULL if no\n"
"corresponding tool is found.");

extern "C" {static PyObject *meth_wxRibbonToolBar_FindById(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_FindById(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int tool_id;
        const  ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tool_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &tool_id))
        {
             ::wxRibbonToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->FindById(tool_id);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRibbonToolBarToolBase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_FindById, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_GetToolByPos, "GetToolByPos(pos) -> RibbonToolBarToolBase\n"
"\n"
"Return the opaque pointer corresponding to the given tool.");

extern "C" {static PyObject *meth_wxRibbonToolBar_GetToolByPos(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_GetToolByPos(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::size_t* pos;
        int posState = 0;
        const  ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, sipType_size_t,&pos, &posState))
        {
             ::wxRibbonToolBarToolBase*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolByPos(*pos);
            Py_END_ALLOW_THREADS
            sipReleaseType(pos,sipType_size_t,posState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRibbonToolBarToolBase,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_GetToolByPos, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_GetToolId, "GetToolId(tool) -> int\n"
"\n"
"Return the id assciated to the tool opaque structure.");

extern "C" {static PyObject *meth_wxRibbonToolBar_GetToolId(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_GetToolId(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxRibbonToolBarToolBase* tool;
        const  ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tool,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, sipType_wxRibbonToolBarToolBase, &tool))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolId(tool);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_GetToolId, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_GetToolClientData, "GetToolClientData(tool_id) -> PyUserData\n"
"\n"
"Get any client data associated with the tool.");

extern "C" {static PyObject *meth_wxRibbonToolBar_GetToolClientData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_GetToolClientData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int tool_id;
        const  ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tool_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &tool_id))
        {
             ::wxPyUserData*sipRes = 0;
            int sipIsErr = 0;

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxRibbonToolBar_GetToolClientData(sipCpp, tool_id);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPyUserData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_GetToolClientData, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_GetToolEnabled, "GetToolEnabled(tool_id) -> bool\n"
"\n"
"Called to determine whether a tool is enabled (responds to user\n"
"input).");

extern "C" {static PyObject *meth_wxRibbonToolBar_GetToolEnabled(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_GetToolEnabled(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int tool_id;
        const  ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tool_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &tool_id))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolEnabled(tool_id);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_GetToolEnabled, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_GetToolHelpString, "GetToolHelpString(tool_id) -> String\n"
"\n"
"Returns the help string for the given tool.");

extern "C" {static PyObject *meth_wxRibbonToolBar_GetToolHelpString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_GetToolHelpString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int tool_id;
        const  ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tool_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &tool_id))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetToolHelpString(tool_id));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_GetToolHelpString, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_GetToolKind, "GetToolKind(tool_id) -> RibbonButtonKind\n"
"\n"
"Return the kind of the given tool.");

extern "C" {static PyObject *meth_wxRibbonToolBar_GetToolKind(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_GetToolKind(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int tool_id;
        const  ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tool_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &tool_id))
        {
             ::wxRibbonButtonKind sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolKind(tool_id);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxRibbonButtonKind);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_GetToolKind, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_GetToolPos, "GetToolPos(tool_id) -> int\n"
"\n"
"Returns the tool position in the toolbar, or wxNOT_FOUND if the tool\n"
"is not found.");

extern "C" {static PyObject *meth_wxRibbonToolBar_GetToolPos(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_GetToolPos(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int tool_id;
        const  ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tool_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &tool_id))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolPos(tool_id);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_GetToolPos, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_GetToolState, "GetToolState(tool_id) -> bool\n"
"\n"
"Gets the on/off state of a toggle tool.");

extern "C" {static PyObject *meth_wxRibbonToolBar_GetToolState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_GetToolState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int tool_id;
        const  ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tool_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &tool_id))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetToolState(tool_id);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_GetToolState, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_Realize, "Realize() -> bool\n"
"\n"
"Calculate tool layouts and positions.");

extern "C" {static PyObject *meth_wxRibbonToolBar_Realize(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_Realize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxRibbonToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Realize();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_Realize, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_SetRows, "SetRows(nMin, nMax=-1)\n"
"\n"
"Set the number of rows to distribute tool groups over.");

extern "C" {static PyObject *meth_wxRibbonToolBar_SetRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_SetRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int nMin;
        int nMax = -1;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_nMin,
            sipName_nMax,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|i", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &nMin, &nMax))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetRows(nMin,nMax);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_SetRows, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_SetToolClientData, "SetToolClientData(tool_id, clientData)\n"
"\n"
"Sets the client data associated with the tool.");

extern "C" {static PyObject *meth_wxRibbonToolBar_SetToolClientData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_SetToolClientData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int tool_id;
         ::wxPyUserData* clientData;
        int clientDataState = 0;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tool_id,
            sipName_clientData,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiJ2", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &tool_id, sipType_wxPyUserData,&clientData, &clientDataState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolClientData(tool_id,clientData);
            Py_END_ALLOW_THREADS
            sipReleaseType(clientData,sipType_wxPyUserData,clientDataState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_SetToolClientData, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_SetToolDisabledBitmap, "SetToolDisabledBitmap(tool_id, bitmap)\n"
"\n"
"Sets the bitmap to be used by the tool with the given ID when the tool\n"
"is in a disabled state.");

extern "C" {static PyObject *meth_wxRibbonToolBar_SetToolDisabledBitmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_SetToolDisabledBitmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int tool_id;
        const  ::wxBitmap* bitmap;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tool_id,
            sipName_bitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiJ9", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &tool_id, sipType_wxBitmap, &bitmap))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolDisabledBitmap(tool_id,*bitmap);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_SetToolDisabledBitmap, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_SetToolHelpString, "SetToolHelpString(tool_id, helpString)\n"
"\n"
"Sets the help string shown in tooltip for the given tool.");

extern "C" {static PyObject *meth_wxRibbonToolBar_SetToolHelpString(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_SetToolHelpString(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int tool_id;
        const  ::wxString* helpString;
        int helpStringState = 0;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tool_id,
            sipName_helpString,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiJ1", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &tool_id, sipType_wxString,&helpString, &helpStringState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolHelpString(tool_id,*helpString);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(helpString),sipType_wxString,helpStringState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_SetToolHelpString, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_SetToolNormalBitmap, "SetToolNormalBitmap(tool_id, bitmap)\n"
"\n"
"Sets the bitmap to be used by the tool with the given ID.");

extern "C" {static PyObject *meth_wxRibbonToolBar_SetToolNormalBitmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_SetToolNormalBitmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int tool_id;
        const  ::wxBitmap* bitmap;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tool_id,
            sipName_bitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiJ9", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &tool_id, sipType_wxBitmap, &bitmap))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetToolNormalBitmap(tool_id,*bitmap);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_SetToolNormalBitmap, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_EnableTool, "EnableTool(tool_id, enable=True)\n"
"\n"
"Enable or disable a single tool on the bar.");

extern "C" {static PyObject *meth_wxRibbonToolBar_EnableTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_EnableTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int tool_id;
        bool enable = 1;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tool_id,
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|b", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &tool_id, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EnableTool(tool_id,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_EnableTool, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_ToggleTool, "ToggleTool(tool_id, checked)\n"
"\n"
"Set a toggle tool to the checked or unchecked state.");

extern "C" {static PyObject *meth_wxRibbonToolBar_ToggleTool(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_ToggleTool(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int tool_id;
        bool checked;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tool_id,
            sipName_checked,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bib", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &tool_id, &checked))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ToggleTool(tool_id,checked);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_ToggleTool, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxRibbonToolBar_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRibbonToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxRibbonToolBar::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_GetClientAreaOrigin, doc_wxRibbonToolBar_GetClientAreaOrigin);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonToolBar_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonToolBar::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_Validate, doc_wxRibbonToolBar_Validate);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonToolBar_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonToolBar::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_TransferDataToWindow, doc_wxRibbonToolBar_TransferDataToWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonToolBar_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonToolBar::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_TransferDataFromWindow, doc_wxRibbonToolBar_TransferDataFromWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxRibbonToolBar_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonToolBar::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_InitDialog, doc_wxRibbonToolBar_InitDialog);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonToolBar_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRibbonToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonToolBar::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_AcceptsFocus, doc_wxRibbonToolBar_AcceptsFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonToolBar_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRibbonToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonToolBar::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_AcceptsFocusRecursively, doc_wxRibbonToolBar_AcceptsFocusRecursively);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonToolBar_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRibbonToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonToolBar::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_AcceptsFocusFromKeyboard, doc_wxRibbonToolBar_AcceptsFocusFromKeyboard);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxRibbonToolBar_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonToolBar::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_AddChild, doc_wxRibbonToolBar_AddChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxRibbonToolBar_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonToolBar::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_RemoveChild, doc_wxRibbonToolBar_RemoveChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxRibbonToolBar_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonToolBar::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_InheritAttributes, doc_wxRibbonToolBar_InheritAttributes);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonToolBar_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRibbonToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonToolBar::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_ShouldInheritColours, doc_wxRibbonToolBar_ShouldInheritColours);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxRibbonToolBar_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonToolBar::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_OnInternalIdle, doc_wxRibbonToolBar_OnInternalIdle);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxRibbonToolBar_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonToolBar::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_GetMainWindowOfCompositeControl, doc_wxRibbonToolBar_GetMainWindowOfCompositeControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxRibbonToolBar_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biii", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonToolBar::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_InformFirstDirection, doc_wxRibbonToolBar_InformFirstDirection);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxRibbonToolBar_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonToolBar::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_SetCanFocus, doc_wxRibbonToolBar_SetCanFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonToolBar_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonToolBar::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_Destroy, doc_wxRibbonToolBar_Destroy);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxRibbonToolBar_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonToolBar::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_SetValidator, doc_wxRibbonToolBar_SetValidator);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxRibbonToolBar_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonToolBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonToolBar::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_GetValidator, doc_wxRibbonToolBar_GetValidator);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxRibbonToolBar_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_ProcessEvent, doc_wxRibbonToolBar_ProcessEvent);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxRibbonToolBar_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_DoEnable, doc_wxRibbonToolBar_DoEnable);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxRibbonToolBar_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxRibbonToolBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_DoGetPosition, doc_wxRibbonToolBar_DoGetPosition);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxRibbonToolBar_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxRibbonToolBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_DoGetSize, doc_wxRibbonToolBar_DoGetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxRibbonToolBar_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxRibbonToolBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_DoGetClientSize, doc_wxRibbonToolBar_DoGetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxRibbonToolBar_DoGetBestSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxRibbonToolBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_DoGetBestSize, doc_wxRibbonToolBar_DoGetBestSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxRibbonToolBar_DoGetBestClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxRibbonToolBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_DoGetBestClientSize, doc_wxRibbonToolBar_DoGetBestClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxRibbonToolBar_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiii", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_DoSetSize, doc_wxRibbonToolBar_DoSetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxRibbonToolBar_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_DoSetClientSize, doc_wxRibbonToolBar_DoSetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxRibbonToolBar_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiiii", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_DoSetSizeHints, doc_wxRibbonToolBar_DoSetSizeHints);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxRibbonToolBar_DoGetBorderSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxRibbonToolBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_DoGetBorderSize, doc_wxRibbonToolBar_DoGetBorderSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxRibbonToolBar_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiii", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_DoMoveWindow, doc_wxRibbonToolBar_DoMoveWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxRibbonToolBar_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_DoSetWindowVariant, doc_wxRibbonToolBar_DoSetWindowVariant);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxRibbonToolBar_GetDefaultBorder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxRibbonToolBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_GetDefaultBorder, doc_wxRibbonToolBar_GetDefaultBorder);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxRibbonToolBar_GetDefaultBorderForControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxRibbonToolBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_GetDefaultBorderForControl, doc_wxRibbonToolBar_GetDefaultBorderForControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxRibbonToolBar_DoFreeze(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_DoFreeze(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxRibbonToolBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_DoFreeze, doc_wxRibbonToolBar_DoFreeze);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxRibbonToolBar_DoThaw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_DoThaw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxRibbonToolBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_DoThaw, doc_wxRibbonToolBar_DoThaw);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonToolBar_HasTransparentBackground(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxRibbonToolBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonToolBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_HasTransparentBackground, doc_wxRibbonToolBar_HasTransparentBackground);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxRibbonToolBar_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_TryBefore, doc_wxRibbonToolBar_TryBefore);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxRibbonToolBar_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxRibbonToolBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxRibbonToolBar, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_TryAfter, doc_wxRibbonToolBar_TryAfter);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonToolBar_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant: WindowVariant = wxWINDOW_VARIANT_NORMAL) -> VisualAttributes");

extern "C" {static PyObject *meth_wxRibbonToolBar_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonToolBar_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxRibbonToolBar::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonToolBar, sipName_GetClassDefaultAttributes, doc_wxRibbonToolBar_GetClassDefaultAttributes);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxRibbonToolBar(void *, const sipTypeDef *);}
static void *cast_wxRibbonToolBar(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxRibbonToolBar *sipCpp = reinterpret_cast< ::wxRibbonToolBar *>(sipCppV);

    if (targetType == sipType_wxRibbonControl)
        return static_cast< ::wxRibbonControl *>(sipCpp);

    if (targetType == sipType_wxControl)
        return static_cast< ::wxControl *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxRibbonToolBar(void *, int);}
static void release_wxRibbonToolBar(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxRibbonToolBar *>(sipCppV);
    else
        delete reinterpret_cast< ::wxRibbonToolBar *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxRibbonToolBar(sipSimpleWrapper *);}
static void dealloc_wxRibbonToolBar(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxRibbonToolBar *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxRibbonToolBar(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxRibbonToolBar(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxRibbonToolBar(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxRibbonToolBar *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRibbonToolBar();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J1l", sipType_wxWindow, &parent, sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRibbonToolBar(parent,id,*pos,*size,style);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxRibbonToolBar[] = {{11, 255, 1}};


static PyMethodDef methods_wxRibbonToolBar[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxRibbonToolBar_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxRibbonToolBar_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxRibbonToolBar_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_AddChild), (PyCFunction)meth_wxRibbonToolBar_AddChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_AddChild)},
    {SIP_MLNAME_CAST(sipName_AddDropdownTool), (PyCFunction)meth_wxRibbonToolBar_AddDropdownTool, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_AddDropdownTool)},
    {SIP_MLNAME_CAST(sipName_AddHybridTool), (PyCFunction)meth_wxRibbonToolBar_AddHybridTool, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_AddHybridTool)},
    {SIP_MLNAME_CAST(sipName_AddSeparator), meth_wxRibbonToolBar_AddSeparator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_AddSeparator)},
    {SIP_MLNAME_CAST(sipName_AddToggleTool), (PyCFunction)meth_wxRibbonToolBar_AddToggleTool, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_AddToggleTool)},
    {SIP_MLNAME_CAST(sipName_AddTool), (PyCFunction)meth_wxRibbonToolBar_AddTool, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_AddTool)},
    {SIP_MLNAME_CAST(sipName_ClearTools), meth_wxRibbonToolBar_ClearTools, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_ClearTools)},
    {SIP_MLNAME_CAST(sipName_Create), (PyCFunction)meth_wxRibbonToolBar_Create, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_Create)},
    {SIP_MLNAME_CAST(sipName_DeleteTool), (PyCFunction)meth_wxRibbonToolBar_DeleteTool, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_DeleteTool)},
    {SIP_MLNAME_CAST(sipName_DeleteToolByPos), (PyCFunction)meth_wxRibbonToolBar_DeleteToolByPos, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_DeleteToolByPos)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxRibbonToolBar_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_Destroy)},
    {SIP_MLNAME_CAST(sipName_DoEnable), (PyCFunction)meth_wxRibbonToolBar_DoEnable, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), (PyCFunction)meth_wxRibbonToolBar_DoFreeze, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), (PyCFunction)meth_wxRibbonToolBar_DoGetBestClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), (PyCFunction)meth_wxRibbonToolBar_DoGetBestSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), (PyCFunction)meth_wxRibbonToolBar_DoGetBorderSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), (PyCFunction)meth_wxRibbonToolBar_DoGetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetNextLargerSize), (PyCFunction)meth_wxRibbonToolBar_DoGetNextLargerSize, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_DoGetNextSmallerSize), (PyCFunction)meth_wxRibbonToolBar_DoGetNextSmallerSize, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), (PyCFunction)meth_wxRibbonToolBar_DoGetPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), (PyCFunction)meth_wxRibbonToolBar_DoGetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), (PyCFunction)meth_wxRibbonToolBar_DoMoveWindow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), (PyCFunction)meth_wxRibbonToolBar_DoSetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), (PyCFunction)meth_wxRibbonToolBar_DoSetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), (PyCFunction)meth_wxRibbonToolBar_DoSetSizeHints, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), (PyCFunction)meth_wxRibbonToolBar_DoSetWindowVariant, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoThaw), (PyCFunction)meth_wxRibbonToolBar_DoThaw, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_DoThaw)},
    {SIP_MLNAME_CAST(sipName_EnableTool), (PyCFunction)meth_wxRibbonToolBar_EnableTool, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_EnableTool)},
    {SIP_MLNAME_CAST(sipName_FindById), (PyCFunction)meth_wxRibbonToolBar_FindById, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_FindById)},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), (PyCFunction)meth_wxRibbonToolBar_GetClassDefaultAttributes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxRibbonToolBar_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), (PyCFunction)meth_wxRibbonToolBar_GetDefaultBorder, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), (PyCFunction)meth_wxRibbonToolBar_GetDefaultBorderForControl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxRibbonToolBar_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetToolByPos), (PyCFunction)meth_wxRibbonToolBar_GetToolByPos, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_GetToolByPos)},
    {SIP_MLNAME_CAST(sipName_GetToolClientData), (PyCFunction)meth_wxRibbonToolBar_GetToolClientData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_GetToolClientData)},
    {SIP_MLNAME_CAST(sipName_GetToolEnabled), (PyCFunction)meth_wxRibbonToolBar_GetToolEnabled, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_GetToolEnabled)},
    {SIP_MLNAME_CAST(sipName_GetToolHelpString), (PyCFunction)meth_wxRibbonToolBar_GetToolHelpString, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_GetToolHelpString)},
    {SIP_MLNAME_CAST(sipName_GetToolId), (PyCFunction)meth_wxRibbonToolBar_GetToolId, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_GetToolId)},
    {SIP_MLNAME_CAST(sipName_GetToolKind), (PyCFunction)meth_wxRibbonToolBar_GetToolKind, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_GetToolKind)},
    {SIP_MLNAME_CAST(sipName_GetToolPos), (PyCFunction)meth_wxRibbonToolBar_GetToolPos, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_GetToolPos)},
    {SIP_MLNAME_CAST(sipName_GetToolState), (PyCFunction)meth_wxRibbonToolBar_GetToolState, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_GetToolState)},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxRibbonToolBar_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_GetValidator)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), (PyCFunction)meth_wxRibbonToolBar_HasTransparentBackground, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), (PyCFunction)meth_wxRibbonToolBar_InformFirstDirection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxRibbonToolBar_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxRibbonToolBar_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_InitDialog)},
    {SIP_MLNAME_CAST(sipName_InsertDropdownTool), (PyCFunction)meth_wxRibbonToolBar_InsertDropdownTool, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_InsertDropdownTool)},
    {SIP_MLNAME_CAST(sipName_InsertHybridTool), (PyCFunction)meth_wxRibbonToolBar_InsertHybridTool, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_InsertHybridTool)},
    {SIP_MLNAME_CAST(sipName_InsertSeparator), (PyCFunction)meth_wxRibbonToolBar_InsertSeparator, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_InsertSeparator)},
    {SIP_MLNAME_CAST(sipName_InsertToggleTool), (PyCFunction)meth_wxRibbonToolBar_InsertToggleTool, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_InsertToggleTool)},
    {SIP_MLNAME_CAST(sipName_InsertTool), (PyCFunction)meth_wxRibbonToolBar_InsertTool, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_InsertTool)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxRibbonToolBar_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), (PyCFunction)meth_wxRibbonToolBar_ProcessEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_Realize), meth_wxRibbonToolBar_Realize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_Realize)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), (PyCFunction)meth_wxRibbonToolBar_RemoveChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), (PyCFunction)meth_wxRibbonToolBar_SendDestroyEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), (PyCFunction)meth_wxRibbonToolBar_SetCanFocus, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetRows), (PyCFunction)meth_wxRibbonToolBar_SetRows, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_SetRows)},
    {SIP_MLNAME_CAST(sipName_SetToolClientData), (PyCFunction)meth_wxRibbonToolBar_SetToolClientData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_SetToolClientData)},
    {SIP_MLNAME_CAST(sipName_SetToolDisabledBitmap), (PyCFunction)meth_wxRibbonToolBar_SetToolDisabledBitmap, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_SetToolDisabledBitmap)},
    {SIP_MLNAME_CAST(sipName_SetToolHelpString), (PyCFunction)meth_wxRibbonToolBar_SetToolHelpString, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_SetToolHelpString)},
    {SIP_MLNAME_CAST(sipName_SetToolNormalBitmap), (PyCFunction)meth_wxRibbonToolBar_SetToolNormalBitmap, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_SetToolNormalBitmap)},
    {SIP_MLNAME_CAST(sipName_SetValidator), (PyCFunction)meth_wxRibbonToolBar_SetValidator, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_SetValidator)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxRibbonToolBar_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_ToggleTool), (PyCFunction)meth_wxRibbonToolBar_ToggleTool, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_ToggleTool)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxRibbonToolBar_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxRibbonToolBar_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), (PyCFunction)meth_wxRibbonToolBar_TryAfter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), (PyCFunction)meth_wxRibbonToolBar_TryBefore, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_TryBefore)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxRibbonToolBar_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonToolBar_Validate)}
};

PyDoc_STRVAR(doc_wxRibbonToolBar, "RibbonToolBar()\n"
"RibbonToolBar(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0)\n"
"\n"
"A ribbon tool bar is similar to a traditional toolbar which has no\n"
"labels.");


sipClassTypeDef sipTypeDef__ribbon_wxRibbonToolBar = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxRibbonToolBar,
        {0},
        0
    },
    {
        sipNameNr_RibbonToolBar,
        {0, 0, 1},
        74, methods_wxRibbonToolBar,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxRibbonToolBar,
    -1,
    -1,
    supers_wxRibbonToolBar,
    0,
    init_type_wxRibbonToolBar,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxRibbonToolBar,
    0,
    0,
    0,
    release_wxRibbonToolBar,
    cast_wxRibbonToolBar,
    0,
    0,
    0,
    0,
    0,
    0
};
