/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/print.h>

        #include <wx/print.h>
        #include <wx/cmndata.h>
        #include <wx/cmndata.h>
        #include <wx/frame.h>
        #include <wx/print.h>
        #include <wx/dc.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>
    int _wxPrintPreview___nonzero__(wxPrintPreview* self)
    {
        return self->IsOk();
    }
    int _wxPrintPreview___bool__(wxPrintPreview* self)
    {
        return self->IsOk();
    }


class sipwxPrintPreview : public  ::wxPrintPreview
{
public:
    sipwxPrintPreview( ::wxPrintout*, ::wxPrintout*, ::wxPrintDialogData*);
    sipwxPrintPreview( ::wxPrintout*, ::wxPrintout*, ::wxPrintData*);
    virtual ~sipwxPrintPreview();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void SetZoom(int);
    void SetPrintout( ::wxPrintout*);
    void SetFrame( ::wxFrame*);
    bool SetCurrentPage(int);
    void SetCanvas( ::wxPreviewCanvas*);
    bool RenderPage(int);
    bool Print(bool);
    bool PaintPage( ::wxPreviewCanvas*, ::wxDC&);
    bool IsOk() const;
     ::wxPrintout* GetPrintoutForPrinting() const;
     ::wxPrintout* GetPrintout() const;
    int GetMinPage() const;
    int GetMaxPage() const;
     ::wxFrame* GetFrame() const;
    int GetCurrentPage() const;
     ::wxPreviewCanvas* GetCanvas() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxPrintPreview(const sipwxPrintPreview &);
    sipwxPrintPreview &operator = (const sipwxPrintPreview &);

    char sipPyMethods[16];
};

sipwxPrintPreview::sipwxPrintPreview( ::wxPrintout*printout, ::wxPrintout*printoutForPrinting, ::wxPrintDialogData*data):  ::wxPrintPreview(printout,printoutForPrinting,data), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxPrintPreview::sipwxPrintPreview( ::wxPrintout*printout, ::wxPrintout*printoutForPrinting, ::wxPrintData*data):  ::wxPrintPreview(printout,printoutForPrinting,data), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxPrintPreview::~sipwxPrintPreview()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxPrintPreview::SetZoom(int percent)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_SetZoom);

    if (!sipMeth)
    {
         ::wxPrintPreview::SetZoom(percent);
        return;
    }

    extern void sipVH__core_102(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__core_102(sipGILState, 0, sipPySelf, sipMeth, percent);
}

void sipwxPrintPreview::SetPrintout( ::wxPrintout*printout)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_SetPrintout);

    if (!sipMeth)
    {
         ::wxPrintPreview::SetPrintout(printout);
        return;
    }

    extern void sipVH__core_208(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPrintout*);

    sipVH__core_208(sipGILState, 0, sipPySelf, sipMeth, printout);
}

void sipwxPrintPreview::SetFrame( ::wxFrame*frame)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_SetFrame);

    if (!sipMeth)
    {
         ::wxPrintPreview::SetFrame(frame);
        return;
    }

    extern void sipVH__core_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxFrame*);

    sipVH__core_53(sipGILState, 0, sipPySelf, sipMeth, frame);
}

bool sipwxPrintPreview::SetCurrentPage(int pageNum)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_SetCurrentPage);

    if (!sipMeth)
        return  ::wxPrintPreview::SetCurrentPage(pageNum);

    extern bool sipVH__core_136(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__core_136(sipGILState, 0, sipPySelf, sipMeth, pageNum);
}

void sipwxPrintPreview::SetCanvas( ::wxPreviewCanvas*window)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_SetCanvas);

    if (!sipMeth)
    {
         ::wxPrintPreview::SetCanvas(window);
        return;
    }

    extern void sipVH__core_207(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPreviewCanvas*);

    sipVH__core_207(sipGILState, 0, sipPySelf, sipMeth, window);
}

bool sipwxPrintPreview::RenderPage(int pageNum)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_RenderPage);

    if (!sipMeth)
        return  ::wxPrintPreview::RenderPage(pageNum);

    extern bool sipVH__core_136(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__core_136(sipGILState, 0, sipPySelf, sipMeth, pageNum);
}

bool sipwxPrintPreview::Print(bool prompt)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_Print);

    if (!sipMeth)
        return  ::wxPrintPreview::Print(prompt);

    extern bool sipVH__core_91(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    return sipVH__core_91(sipGILState, 0, sipPySelf, sipMeth, prompt);
}

bool sipwxPrintPreview::PaintPage( ::wxPreviewCanvas*canvas, ::wxDC& dc)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_PaintPage);

    if (!sipMeth)
        return  ::wxPrintPreview::PaintPage(canvas,dc);

    extern bool sipVH__core_206(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPreviewCanvas*, ::wxDC&);

    return sipVH__core_206(sipGILState, 0, sipPySelf, sipMeth, canvas, dc);
}

bool sipwxPrintPreview::IsOk() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_IsOk);

    if (!sipMeth)
        return  ::wxPrintPreview::IsOk();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPrintout* sipwxPrintPreview::GetPrintoutForPrinting() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_GetPrintoutForPrinting);

    if (!sipMeth)
        return  ::wxPrintPreview::GetPrintoutForPrinting();

    extern  ::wxPrintout* sipVH__core_205(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_205(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPrintout* sipwxPrintPreview::GetPrintout() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_GetPrintout);

    if (!sipMeth)
        return  ::wxPrintPreview::GetPrintout();

    extern  ::wxPrintout* sipVH__core_205(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_205(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxPrintPreview::GetMinPage() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_GetMinPage);

    if (!sipMeth)
        return  ::wxPrintPreview::GetMinPage();

    extern int sipVH__core_101(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_101(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxPrintPreview::GetMaxPage() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_GetMaxPage);

    if (!sipMeth)
        return  ::wxPrintPreview::GetMaxPage();

    extern int sipVH__core_101(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_101(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxFrame* sipwxPrintPreview::GetFrame() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_GetFrame);

    if (!sipMeth)
        return  ::wxPrintPreview::GetFrame();

    extern  ::wxFrame* sipVH__core_204(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_204(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxPrintPreview::GetCurrentPage() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_GetCurrentPage);

    if (!sipMeth)
        return  ::wxPrintPreview::GetCurrentPage();

    extern int sipVH__core_101(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_101(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPreviewCanvas* sipwxPrintPreview::GetCanvas() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_GetCanvas);

    if (!sipMeth)
        return  ::wxPrintPreview::GetCanvas();

    extern  ::wxPreviewCanvas* sipVH__core_203(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_203(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxPrintPreview_GetCanvas, "GetCanvas() -> PreviewCanvas\n"
"\n"
"Gets the preview window used for displaying the print preview image.");

extern "C" {static PyObject *meth_wxPrintPreview_GetCanvas(PyObject *, PyObject *);}
static PyObject *meth_wxPrintPreview_GetCanvas(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPrintPreview *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPrintPreview, &sipCpp))
        {
             ::wxPreviewCanvas*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPrintPreview::GetCanvas() : sipCpp->GetCanvas());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPreviewCanvas,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PrintPreview, sipName_GetCanvas, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPrintPreview_GetCurrentPage, "GetCurrentPage() -> int\n"
"\n"
"Gets the page currently being previewed.");

extern "C" {static PyObject *meth_wxPrintPreview_GetCurrentPage(PyObject *, PyObject *);}
static PyObject *meth_wxPrintPreview_GetCurrentPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPrintPreview *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPrintPreview, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPrintPreview::GetCurrentPage() : sipCpp->GetCurrentPage());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PrintPreview, sipName_GetCurrentPage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPrintPreview_GetFrame, "GetFrame() -> Frame\n"
"\n"
"Gets the frame used for displaying the print preview canvas and\n"
"control bar.");

extern "C" {static PyObject *meth_wxPrintPreview_GetFrame(PyObject *, PyObject *);}
static PyObject *meth_wxPrintPreview_GetFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPrintPreview *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPrintPreview, &sipCpp))
        {
             ::wxFrame*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPrintPreview::GetFrame() : sipCpp->GetFrame());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PrintPreview, sipName_GetFrame, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPrintPreview_GetMaxPage, "GetMaxPage() -> int\n"
"\n"
"Returns the maximum page number.");

extern "C" {static PyObject *meth_wxPrintPreview_GetMaxPage(PyObject *, PyObject *);}
static PyObject *meth_wxPrintPreview_GetMaxPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPrintPreview *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPrintPreview, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPrintPreview::GetMaxPage() : sipCpp->GetMaxPage());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PrintPreview, sipName_GetMaxPage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPrintPreview_GetMinPage, "GetMinPage() -> int\n"
"\n"
"Returns the minimum page number.");

extern "C" {static PyObject *meth_wxPrintPreview_GetMinPage(PyObject *, PyObject *);}
static PyObject *meth_wxPrintPreview_GetMinPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPrintPreview *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPrintPreview, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPrintPreview::GetMinPage() : sipCpp->GetMinPage());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PrintPreview, sipName_GetMinPage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPrintPreview_GetPrintout, "GetPrintout() -> Printout\n"
"\n"
"Gets the preview printout object associated with the wxPrintPreview\n"
"object.");

extern "C" {static PyObject *meth_wxPrintPreview_GetPrintout(PyObject *, PyObject *);}
static PyObject *meth_wxPrintPreview_GetPrintout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPrintPreview *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPrintPreview, &sipCpp))
        {
             ::wxPrintout*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPrintPreview::GetPrintout() : sipCpp->GetPrintout());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPrintout,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PrintPreview, sipName_GetPrintout, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPrintPreview_GetPrintoutForPrinting, "GetPrintoutForPrinting() -> Printout\n"
"\n"
"Gets the printout object to be used for printing from within the\n"
"preview interface, or NULL if none exists.");

extern "C" {static PyObject *meth_wxPrintPreview_GetPrintoutForPrinting(PyObject *, PyObject *);}
static PyObject *meth_wxPrintPreview_GetPrintoutForPrinting(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPrintPreview *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPrintPreview, &sipCpp))
        {
             ::wxPrintout*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPrintPreview::GetPrintoutForPrinting() : sipCpp->GetPrintoutForPrinting());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxPrintout,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PrintPreview, sipName_GetPrintoutForPrinting, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPrintPreview_IsOk, "IsOk() -> bool\n"
"\n"
"Returns true if the wxPrintPreview is valid, false otherwise.");

extern "C" {static PyObject *meth_wxPrintPreview_IsOk(PyObject *, PyObject *);}
static PyObject *meth_wxPrintPreview_IsOk(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxPrintPreview *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPrintPreview, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPrintPreview::IsOk() : sipCpp->IsOk());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PrintPreview, sipName_IsOk, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPrintPreview_PaintPage, "PaintPage(canvas, dc) -> bool\n"
"\n"
"This refreshes the preview window with the preview image.");

extern "C" {static PyObject *meth_wxPrintPreview_PaintPage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPrintPreview_PaintPage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPreviewCanvas* canvas;
         ::wxDC* dc;
         ::wxPrintPreview *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canvas,
            sipName_dc,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J9", &sipSelf, sipType_wxPrintPreview, &sipCpp, sipType_wxPreviewCanvas, &canvas, sipType_wxDC, &dc))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPrintPreview::PaintPage(canvas,*dc) : sipCpp->PaintPage(canvas,*dc));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PrintPreview, sipName_PaintPage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPrintPreview_Print, "Print(prompt) -> bool\n"
"\n"
"Invokes the print process using the second wxPrintout object supplied\n"
"in the wxPrintPreview constructor.");

extern "C" {static PyObject *meth_wxPrintPreview_Print(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPrintPreview_Print(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool prompt;
         ::wxPrintPreview *sipCpp;

        static const char *sipKwdList[] = {
            sipName_prompt,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxPrintPreview, &sipCpp, &prompt))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPrintPreview::Print(prompt) : sipCpp->Print(prompt));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PrintPreview, sipName_Print, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPrintPreview_RenderPage, "RenderPage(pageNum) -> bool\n"
"\n"
"Renders a page into a wxMemoryDC.");

extern "C" {static PyObject *meth_wxPrintPreview_RenderPage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPrintPreview_RenderPage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int pageNum;
         ::wxPrintPreview *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pageNum,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxPrintPreview, &sipCpp, &pageNum))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPrintPreview::RenderPage(pageNum) : sipCpp->RenderPage(pageNum));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PrintPreview, sipName_RenderPage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPrintPreview_SetCanvas, "SetCanvas(window)\n"
"\n"
"Sets the window to be used for displaying the print preview image.");

extern "C" {static PyObject *meth_wxPrintPreview_SetCanvas(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPrintPreview_SetCanvas(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPreviewCanvas* window;
         ::wxPrintPreview *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxPrintPreview, &sipCpp, sipType_wxPreviewCanvas, &window))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPrintPreview::SetCanvas(window) : sipCpp->SetCanvas(window));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PrintPreview, sipName_SetCanvas, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPrintPreview_SetCurrentPage, "SetCurrentPage(pageNum) -> bool\n"
"\n"
"Sets the current page to be previewed.");

extern "C" {static PyObject *meth_wxPrintPreview_SetCurrentPage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPrintPreview_SetCurrentPage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int pageNum;
         ::wxPrintPreview *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pageNum,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxPrintPreview, &sipCpp, &pageNum))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPrintPreview::SetCurrentPage(pageNum) : sipCpp->SetCurrentPage(pageNum));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PrintPreview, sipName_SetCurrentPage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPrintPreview_SetFrame, "SetFrame(frame)\n"
"\n"
"Sets the frame to be used for displaying the print preview canvas and\n"
"control bar.");

extern "C" {static PyObject *meth_wxPrintPreview_SetFrame(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPrintPreview_SetFrame(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxFrame* frame;
         ::wxPrintPreview *sipCpp;

        static const char *sipKwdList[] = {
            sipName_frame,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxPrintPreview, &sipCpp, sipType_wxFrame, &frame))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPrintPreview::SetFrame(frame) : sipCpp->SetFrame(frame));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PrintPreview, sipName_SetFrame, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPrintPreview_SetPrintout, "SetPrintout(printout)\n"
"\n"
"Associates a printout object with the wxPrintPreview object.");

extern "C" {static PyObject *meth_wxPrintPreview_SetPrintout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPrintPreview_SetPrintout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPrintout* printout;
         ::wxPrintPreview *sipCpp;

        static const char *sipKwdList[] = {
            sipName_printout,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxPrintPreview, &sipCpp, sipType_wxPrintout, &printout))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPrintPreview::SetPrintout(printout) : sipCpp->SetPrintout(printout));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PrintPreview, sipName_SetPrintout, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPrintPreview_SetZoom, "SetZoom(percent)\n"
"\n"
"Sets the percentage preview zoom, and refreshes the preview canvas\n"
"accordingly.");

extern "C" {static PyObject *meth_wxPrintPreview_SetZoom(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPrintPreview_SetZoom(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int percent;
         ::wxPrintPreview *sipCpp;

        static const char *sipKwdList[] = {
            sipName_percent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxPrintPreview, &sipCpp, &percent))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxPrintPreview::SetZoom(percent) : sipCpp->SetZoom(percent));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PrintPreview, sipName_SetZoom, NULL);

    return NULL;
}


extern "C" {static int slot_wxPrintPreview___bool__(PyObject *);}
static int slot_wxPrintPreview___bool__(PyObject *sipSelf)
{
     ::wxPrintPreview *sipCpp = reinterpret_cast< ::wxPrintPreview *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxPrintPreview));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;
            int sipIsErr = 0;

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxPrintPreview___bool__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return -1;

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_wxPrintPreview___nonzero__(PyObject *);}
static int slot_wxPrintPreview___nonzero__(PyObject *sipSelf)
{
     ::wxPrintPreview *sipCpp = reinterpret_cast< ::wxPrintPreview *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxPrintPreview));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;
            int sipIsErr = 0;

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxPrintPreview___nonzero__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return -1;

            return sipRes;
        }
    }

    return 0;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxPrintPreview(void *, const sipTypeDef *);}
static void *cast_wxPrintPreview(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxPrintPreview *sipCpp = reinterpret_cast< ::wxPrintPreview *>(sipCppV);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxPrintPreview(void *, int);}
static void release_wxPrintPreview(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxPrintPreview *>(sipCppV);
    else
        delete reinterpret_cast< ::wxPrintPreview *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxPrintPreview(sipSimpleWrapper *);}
static void dealloc_wxPrintPreview(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxPrintPreview *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxPrintPreview(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxPrintPreview(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxPrintPreview(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxPrintPreview *sipCpp = 0;

    {
         ::wxPrintout* printout;
         ::wxPrintout* printoutForPrinting = 0;
         ::wxPrintDialogData* data = 0;

        static const char *sipKwdList[] = {
            sipName_printout,
            sipName_printoutForPrinting,
            sipName_data,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J:|J:J8", sipType_wxPrintout, &printout, sipType_wxPrintout, &printoutForPrinting, sipType_wxPrintDialogData, &data))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxPrintPreview(printout,printoutForPrinting,data);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxPrintout* printout;
         ::wxPrintout* printoutForPrinting;
         ::wxPrintData* data;

        static const char *sipKwdList[] = {
            sipName_printout,
            sipName_printoutForPrinting,
            sipName_data,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J:J:J8", sipType_wxPrintout, &printout, sipType_wxPrintout, &printoutForPrinting, sipType_wxPrintData, &data))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxPrintPreview(printout,printoutForPrinting,data);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxPrintPreview[] = {{358, 255, 1}};


/* Define this type's Python slots. */
static sipPySlotDef slots_wxPrintPreview[] = {
    {(void *)slot_wxPrintPreview___bool__, bool_slot},
    {(void *)slot_wxPrintPreview___nonzero__, bool_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_wxPrintPreview[] = {
    {SIP_MLNAME_CAST(sipName_GetCanvas), meth_wxPrintPreview_GetCanvas, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPrintPreview_GetCanvas)},
    {SIP_MLNAME_CAST(sipName_GetCurrentPage), meth_wxPrintPreview_GetCurrentPage, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPrintPreview_GetCurrentPage)},
    {SIP_MLNAME_CAST(sipName_GetFrame), meth_wxPrintPreview_GetFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPrintPreview_GetFrame)},
    {SIP_MLNAME_CAST(sipName_GetMaxPage), meth_wxPrintPreview_GetMaxPage, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPrintPreview_GetMaxPage)},
    {SIP_MLNAME_CAST(sipName_GetMinPage), meth_wxPrintPreview_GetMinPage, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPrintPreview_GetMinPage)},
    {SIP_MLNAME_CAST(sipName_GetPrintout), meth_wxPrintPreview_GetPrintout, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPrintPreview_GetPrintout)},
    {SIP_MLNAME_CAST(sipName_GetPrintoutForPrinting), meth_wxPrintPreview_GetPrintoutForPrinting, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPrintPreview_GetPrintoutForPrinting)},
    {SIP_MLNAME_CAST(sipName_IsOk), meth_wxPrintPreview_IsOk, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPrintPreview_IsOk)},
    {SIP_MLNAME_CAST(sipName_PaintPage), (PyCFunction)meth_wxPrintPreview_PaintPage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPrintPreview_PaintPage)},
    {SIP_MLNAME_CAST(sipName_Print), (PyCFunction)meth_wxPrintPreview_Print, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPrintPreview_Print)},
    {SIP_MLNAME_CAST(sipName_RenderPage), (PyCFunction)meth_wxPrintPreview_RenderPage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPrintPreview_RenderPage)},
    {SIP_MLNAME_CAST(sipName_SetCanvas), (PyCFunction)meth_wxPrintPreview_SetCanvas, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPrintPreview_SetCanvas)},
    {SIP_MLNAME_CAST(sipName_SetCurrentPage), (PyCFunction)meth_wxPrintPreview_SetCurrentPage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPrintPreview_SetCurrentPage)},
    {SIP_MLNAME_CAST(sipName_SetFrame), (PyCFunction)meth_wxPrintPreview_SetFrame, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPrintPreview_SetFrame)},
    {SIP_MLNAME_CAST(sipName_SetPrintout), (PyCFunction)meth_wxPrintPreview_SetPrintout, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPrintPreview_SetPrintout)},
    {SIP_MLNAME_CAST(sipName_SetZoom), (PyCFunction)meth_wxPrintPreview_SetZoom, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPrintPreview_SetZoom)}
};

sipVariableDef variables_wxPrintPreview[] = {
    {PropertyVariable, sipName_PrintoutForPrinting, &methods_wxPrintPreview[6], NULL, NULL, NULL},
    {PropertyVariable, sipName_Printout, &methods_wxPrintPreview[5], &methods_wxPrintPreview[14], NULL, NULL},
    {PropertyVariable, sipName_MinPage, &methods_wxPrintPreview[4], NULL, NULL, NULL},
    {PropertyVariable, sipName_MaxPage, &methods_wxPrintPreview[3], NULL, NULL, NULL},
    {PropertyVariable, sipName_Frame, &methods_wxPrintPreview[2], &methods_wxPrintPreview[13], NULL, NULL},
    {PropertyVariable, sipName_CurrentPage, &methods_wxPrintPreview[1], &methods_wxPrintPreview[12], NULL, NULL},
    {PropertyVariable, sipName_Canvas, &methods_wxPrintPreview[0], &methods_wxPrintPreview[11], NULL, NULL},
};

PyDoc_STRVAR(doc_wxPrintPreview, "PrintPreview(printout, printoutForPrinting=None, data=None)\n"
"PrintPreview(printout, printoutForPrinting, data)\n"
"\n"
"Objects of this class manage the print preview process.");


sipClassTypeDef sipTypeDef__core_wxPrintPreview = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxPrintPreview,
        {0},
        0
    },
    {
        sipNameNr_PrintPreview,
        {0, 0, 1},
        16, methods_wxPrintPreview,
        0, 0,
        7, variables_wxPrintPreview,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxPrintPreview,
    -1,
    -1,
    supers_wxPrintPreview,
    slots_wxPrintPreview,
    init_type_wxPrintPreview,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxPrintPreview,
    0,
    0,
    0,
    release_wxPrintPreview,
    cast_wxPrintPreview,
    0,
    0,
    0,
    0,
    0,
    0
};
