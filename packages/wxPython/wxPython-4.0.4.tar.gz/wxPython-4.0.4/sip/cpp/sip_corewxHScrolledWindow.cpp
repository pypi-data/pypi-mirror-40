/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/vscroll.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/validate.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/region.h>
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>
    #include <wxPython/wxpy_api.h>


class sipwxHScrolledWindow : public  ::wxHScrolledWindow
{
public:
    sipwxHScrolledWindow();
    sipwxHScrolledWindow( ::wxWindow*, ::wxWindowID,const  ::wxPoint&,const  ::wxSize&,long,const  ::wxString&);
    virtual ~sipwxHScrolledWindow();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::wxCoord sipProtectVirt_EstimateTotalWidth(bool) const;
    void sipProtectVirt_OnGetColumnsWidthHint(bool, ::size_t, ::size_t) const;
     ::wxCoord sipProtect_OnGetColumnWidth( ::size_t) const;
    void sipProtectVirt_OnGetUnitsSizeHint(bool, ::size_t, ::size_t) const;
     ::wxCoord sipProtectVirt_EstimateTotalSize(bool) const;
    int sipProtectVirt_GetNonOrientationTargetSize(bool) const;
     ::wxOrientation sipProtectVirt_GetOrientation(bool) const;
    int sipProtectVirt_GetOrientationTargetSize(bool) const;
     ::wxCoord sipProtectVirt_OnGetUnitSize(bool, ::size_t) const;
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxCoord OnGetUnitSize( ::size_t) const;
     ::wxCoord EstimateTotalSize() const;
    void OnGetUnitsSizeHint( ::size_t, ::size_t) const;
    int GetOrientationTargetSize() const;
     ::wxOrientation GetOrientation() const;
    int GetNonOrientationTargetSize() const;
    void RefreshColumn( ::size_t);
    void RefreshColumns( ::size_t, ::size_t);
    bool ScrollColumnPages(int);
    bool ScrollColumns(int);
     ::wxCoord EstimateTotalWidth() const;
    void OnGetColumnsWidthHint( ::size_t, ::size_t) const;
     ::wxCoord OnGetColumnWidth( ::size_t) const;
     ::wxSize DoGetBestClientSize() const;
     ::wxSize DoGetBestSize() const;
    void DoThaw();
    void DoFreeze();
     ::wxBorder GetDefaultBorderForControl() const;
     ::wxBorder GetDefaultBorder() const;
    void DoSetWindowVariant( ::wxWindowVariant);
    void DoMoveWindow(int,int,int,int);
     ::wxSize DoGetBorderSize() const;
    void DoSetSizeHints(int,int,int,int,int,int);
    void DoSetClientSize(int,int);
    void DoSetSize(int,int,int,int,int);
    void DoGetClientSize(int*,int*) const;
    void DoGetSize(int*,int*) const;
    void DoGetPosition(int*,int*) const;
    void DoEnable(bool);
     ::wxWindow* GetMainWindowOfCompositeControl();
    void OnInternalIdle();
    void InitDialog();
    void InheritAttributes();
    bool Destroy();
    bool Validate();
    bool TransferDataToWindow();
    bool TransferDataFromWindow();
    void SetValidator(const  ::wxValidator&);
     ::wxValidator* GetValidator();
    bool ShouldInheritColours() const;
    bool HasTransparentBackground();
     ::wxPoint GetClientAreaOrigin() const;
    bool InformFirstDirection(int,int,int);
    void SetCanFocus(bool);
    bool AcceptsFocusRecursively() const;
    bool AcceptsFocusFromKeyboard() const;
    bool AcceptsFocus() const;
    bool TryAfter( ::wxEvent&);
    bool TryBefore( ::wxEvent&);
    bool ProcessEvent( ::wxEvent&);
    void AddChild( ::wxWindowBase*);
    void RemoveChild( ::wxWindowBase*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxHScrolledWindow(const sipwxHScrolledWindow &);
    sipwxHScrolledWindow &operator = (const sipwxHScrolledWindow &);

    char sipPyMethods[52];
};

sipwxHScrolledWindow::sipwxHScrolledWindow():  ::wxHScrolledWindow(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxHScrolledWindow::sipwxHScrolledWindow( ::wxWindow*parent, ::wxWindowID id,const  ::wxPoint& pos,const  ::wxSize& size,long style,const  ::wxString& name):  ::wxHScrolledWindow(parent,id,pos,size,style,name), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxHScrolledWindow::~sipwxHScrolledWindow()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxCoord sipwxHScrolledWindow::OnGetUnitSize( ::size_t unit) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_OnGetUnitSize);

    if (!sipMeth)
        return  ::wxHScrolledWindow::OnGetUnitSize(unit);

    extern  ::wxCoord sipVH__core_134(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::size_t);

    return sipVH__core_134(sipGILState, 0, sipPySelf, sipMeth, unit);
}

 ::wxCoord sipwxHScrolledWindow::EstimateTotalSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_EstimateTotalSize);

    if (!sipMeth)
        return  ::wxHScrolledWindow::EstimateTotalSize();

    extern  ::wxCoord sipVH__core_101(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_101(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHScrolledWindow::OnGetUnitsSizeHint( ::size_t unitMin, ::size_t unitMax) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_OnGetUnitsSizeHint);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::OnGetUnitsSizeHint(unitMin,unitMax);
        return;
    }

    extern void sipVH__core_133(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::size_t, ::size_t);

    sipVH__core_133(sipGILState, 0, sipPySelf, sipMeth, unitMin, unitMax);
}

int sipwxHScrolledWindow::GetOrientationTargetSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_GetOrientationTargetSize);

    if (!sipMeth)
        return  ::wxHScrolledWindow::GetOrientationTargetSize();

    extern int sipVH__core_101(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_101(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxOrientation sipwxHScrolledWindow::GetOrientation() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_GetOrientation);

    if (!sipMeth)
        return  ::wxHScrolledWindow::GetOrientation();

    extern  ::wxOrientation sipVH__core_132(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_132(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxHScrolledWindow::GetNonOrientationTargetSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_GetNonOrientationTargetSize);

    if (!sipMeth)
        return  ::wxHScrolledWindow::GetNonOrientationTargetSize();

    extern int sipVH__core_101(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_101(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHScrolledWindow::RefreshColumn( ::size_t column)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_RefreshColumn);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::RefreshColumn(column);
        return;
    }

    extern void sipVH__core_135(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::size_t);

    sipVH__core_135(sipGILState, 0, sipPySelf, sipMeth, column);
}

void sipwxHScrolledWindow::RefreshColumns( ::size_t from_, ::size_t to_)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_RefreshColumns);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::RefreshColumns(from_,to_);
        return;
    }

    extern void sipVH__core_133(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::size_t, ::size_t);

    sipVH__core_133(sipGILState, 0, sipPySelf, sipMeth, from_, to_);
}

bool sipwxHScrolledWindow::ScrollColumnPages(int pages)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_ScrollColumnPages);

    if (!sipMeth)
        return  ::wxHScrolledWindow::ScrollColumnPages(pages);

    extern bool sipVH__core_136(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__core_136(sipGILState, 0, sipPySelf, sipMeth, pages);
}

bool sipwxHScrolledWindow::ScrollColumns(int columns)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_ScrollColumns);

    if (!sipMeth)
        return  ::wxHScrolledWindow::ScrollColumns(columns);

    extern bool sipVH__core_136(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__core_136(sipGILState, 0, sipPySelf, sipMeth, columns);
}

 ::wxCoord sipwxHScrolledWindow::EstimateTotalWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_EstimateTotalWidth);

    if (!sipMeth)
        return  ::wxHScrolledWindow::EstimateTotalWidth();

    extern  ::wxCoord sipVH__core_101(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_101(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHScrolledWindow::OnGetColumnsWidthHint( ::size_t columnMin, ::size_t columnMax) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_OnGetColumnsWidthHint);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::OnGetColumnsWidthHint(columnMin,columnMax);
        return;
    }

    extern void sipVH__core_133(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::size_t, ::size_t);

    sipVH__core_133(sipGILState, 0, sipPySelf, sipMeth, columnMin, columnMax);
}

 ::wxCoord sipwxHScrolledWindow::OnGetColumnWidth( ::size_t column) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,sipName_HScrolledWindow,sipName_OnGetColumnWidth);

    if (!sipMeth)
        return 0;

    extern  ::wxCoord sipVH__core_134(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::size_t);

    return sipVH__core_134(sipGILState, 0, sipPySelf, sipMeth, column);
}

 ::wxSize sipwxHScrolledWindow::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxHScrolledWindow::DoGetBestClientSize();

    extern  ::wxSize sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxHScrolledWindow::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxHScrolledWindow::DoGetBestSize();

    extern  ::wxSize sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHScrolledWindow::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::DoThaw();
        return;
    }

    extern void sipVH__core_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_48(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHScrolledWindow::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::DoFreeze();
        return;
    }

    extern void sipVH__core_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_48(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxHScrolledWindow::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[17]),sipPySelf,NULL,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxHScrolledWindow::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxHScrolledWindow::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxHScrolledWindow::GetDefaultBorder();

    extern  ::wxBorder sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHScrolledWindow::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__core_125(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__core_125(sipGILState, 0, sipPySelf, sipMeth, variant);
}

void sipwxHScrolledWindow::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__core_124(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__core_124(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

 ::wxSize sipwxHScrolledWindow::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[21]),sipPySelf,NULL,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxHScrolledWindow::DoGetBorderSize();

    extern  ::wxSize sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHScrolledWindow::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__core_123(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__core_123(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

void sipwxHScrolledWindow::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__core_122(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__core_122(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxHScrolledWindow::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__core_121(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__core_121(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxHScrolledWindow::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__core_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_120(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxHScrolledWindow::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::DoGetSize(width,height);
        return;
    }

    extern void sipVH__core_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_120(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxHScrolledWindow::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__core_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_120(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxHScrolledWindow::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::DoEnable(enable);
        return;
    }

    extern void sipVH__core_87(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_87(sipGILState, 0, sipPySelf, sipMeth, enable);
}

 ::wxWindow* sipwxHScrolledWindow::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxHScrolledWindow::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__core_119(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_119(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHScrolledWindow::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::OnInternalIdle();
        return;
    }

    extern void sipVH__core_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_48(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHScrolledWindow::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::InitDialog();
        return;
    }

    extern void sipVH__core_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_48(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHScrolledWindow::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::InheritAttributes();
        return;
    }

    extern void sipVH__core_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_48(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHScrolledWindow::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_Destroy);

    if (!sipMeth)
        return  ::wxHScrolledWindow::Destroy();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHScrolledWindow::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_Validate);

    if (!sipMeth)
        return  ::wxHScrolledWindow::Validate();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHScrolledWindow::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxHScrolledWindow::TransferDataToWindow();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHScrolledWindow::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxHScrolledWindow::TransferDataFromWindow();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHScrolledWindow::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::SetValidator(validator);
        return;
    }

    extern void sipVH__core_118(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__core_118(sipGILState, 0, sipPySelf, sipMeth, validator);
}

 ::wxValidator* sipwxHScrolledWindow::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxHScrolledWindow::GetValidator();

    extern  ::wxValidator* sipVH__core_117(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_117(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHScrolledWindow::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxHScrolledWindow::ShouldInheritColours();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHScrolledWindow::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxHScrolledWindow::HasTransparentBackground();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPoint sipwxHScrolledWindow::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxHScrolledWindow::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__core_116(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_116(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHScrolledWindow::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[42],sipPySelf,NULL,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxHScrolledWindow::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__core_115(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__core_115(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

void sipwxHScrolledWindow::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[43],sipPySelf,NULL,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__core_87(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_87(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

bool sipwxHScrolledWindow::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,NULL,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxHScrolledWindow::AcceptsFocusRecursively();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHScrolledWindow::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,NULL,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxHScrolledWindow::AcceptsFocusFromKeyboard();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHScrolledWindow::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,NULL,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxHScrolledWindow::AcceptsFocus();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHScrolledWindow::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxHScrolledWindow::TryAfter(event);

    extern bool sipVH__core_94(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_94(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxHScrolledWindow::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxHScrolledWindow::TryBefore(event);

    extern bool sipVH__core_94(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_94(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxHScrolledWindow::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxHScrolledWindow::ProcessEvent(event);

    extern bool sipVH__core_94(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_94(sipGILState, 0, sipPySelf, sipMeth, event);
}

void sipwxHScrolledWindow::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::AddChild(child);
        return;
    }

    extern void sipVH__core_114(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__core_114(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxHScrolledWindow::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[51],sipPySelf,NULL,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxHScrolledWindow::RemoveChild(child);
        return;
    }

    extern void sipVH__core_114(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__core_114(sipGILState, 0, sipPySelf, sipMeth, child);
}

 ::wxCoord sipwxHScrolledWindow::sipProtectVirt_EstimateTotalWidth(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxVarHScrollHelper::EstimateTotalWidth() : EstimateTotalWidth());
}

void sipwxHScrolledWindow::sipProtectVirt_OnGetColumnsWidthHint(bool sipSelfWasArg, ::size_t columnMin, ::size_t columnMax) const
{
    (sipSelfWasArg ?  ::wxVarHScrollHelper::OnGetColumnsWidthHint(columnMin,columnMax) : OnGetColumnsWidthHint(columnMin,columnMax));
}

 ::wxCoord sipwxHScrolledWindow::sipProtect_OnGetColumnWidth( ::size_t column) const
{
    return OnGetColumnWidth(column);
}

void sipwxHScrolledWindow::sipProtectVirt_OnGetUnitsSizeHint(bool sipSelfWasArg, ::size_t unitMin, ::size_t unitMax) const
{
    (sipSelfWasArg ?  ::wxVarHScrollHelper::OnGetUnitsSizeHint(unitMin,unitMax) : OnGetUnitsSizeHint(unitMin,unitMax));
}

 ::wxCoord sipwxHScrolledWindow::sipProtectVirt_EstimateTotalSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxVarHScrollHelper::EstimateTotalSize() : EstimateTotalSize());
}

int sipwxHScrolledWindow::sipProtectVirt_GetNonOrientationTargetSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxVarHScrollHelper::GetNonOrientationTargetSize() : GetNonOrientationTargetSize());
}

 ::wxOrientation sipwxHScrolledWindow::sipProtectVirt_GetOrientation(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxVarHScrollHelper::GetOrientation() : GetOrientation());
}

int sipwxHScrolledWindow::sipProtectVirt_GetOrientationTargetSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxVarHScrollHelper::GetOrientationTargetSize() : GetOrientationTargetSize());
}

 ::wxCoord sipwxHScrolledWindow::sipProtectVirt_OnGetUnitSize(bool sipSelfWasArg, ::size_t unit) const
{
    return (sipSelfWasArg ?  ::wxVarHScrollHelper::OnGetUnitSize(unit) : OnGetUnitSize(unit));
}

void sipwxHScrolledWindow::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sipwxHScrolledWindow::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxHScrolledWindow::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxHScrolledWindow::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxHScrolledWindow::DoEnable(enable) : DoEnable(enable));
}

void sipwxHScrolledWindow::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxHScrolledWindow::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxHScrolledWindow::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxHScrolledWindow::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxHScrolledWindow::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxHScrolledWindow::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxHScrolledWindow::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxHScrolledWindow::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxHScrolledWindow::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxHScrolledWindow::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxHScrolledWindow::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxHScrolledWindow::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxHScrolledWindow::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxHScrolledWindow::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxHScrolledWindow::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxHScrolledWindow::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxHScrolledWindow::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxHScrolledWindow::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxHScrolledWindow::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxHScrolledWindow::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxHScrolledWindow::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxHScrolledWindow::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxHScrolledWindow::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxHScrolledWindow::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxHScrolledWindow::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxHScrolledWindow::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxHScrolledWindow::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxHScrolledWindow::DoFreeze() : DoFreeze());
}

void sipwxHScrolledWindow::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxHScrolledWindow::DoThaw() : DoThaw());
}

bool sipwxHScrolledWindow::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxHScrolledWindow::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxHScrolledWindow::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxHScrolledWindow::TryBefore(event) : TryBefore(event));
}

bool sipwxHScrolledWindow::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxHScrolledWindow::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxHScrolledWindow_EstimateTotalWidth, "EstimateTotalWidth() -> Coord\n"
"\n"
"This class forwards calls from EstimateTotalSize() to this function so\n"
"derived classes can override either just the height or the width\n"
"estimation, or just estimate both differently if desired in any\n"
"wxHVScrolledWindow derived class.");

extern "C" {static PyObject *meth_wxHScrolledWindow_EstimateTotalWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_EstimateTotalWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxHScrolledWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
             ::wxCoord sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_EstimateTotalWidth(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_EstimateTotalWidth, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_OnGetColumnsWidthHint, "OnGetColumnsWidthHint(columnMin, columnMax)\n"
"\n"
"This function doesn't have to be overridden but it may be useful to do\n"
"so if calculating the columns' sizes is a relatively expensive\n"
"operation as it gives your code a chance to calculate several of them\n"
"at once and cache the result if necessary.");

extern "C" {static PyObject *meth_wxHScrolledWindow_OnGetColumnsWidthHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_OnGetColumnsWidthHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::size_t* columnMin;
        int columnMinState = 0;
         ::size_t* columnMax;
        int columnMaxState = 0;
        const sipwxHScrolledWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_columnMin,
            sipName_columnMax,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1", &sipSelf, sipType_wxHScrolledWindow, &sipCpp, sipType_size_t,&columnMin, &columnMinState, sipType_size_t,&columnMax, &columnMaxState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_OnGetColumnsWidthHint(sipSelfWasArg,*columnMin,*columnMax);
            Py_END_ALLOW_THREADS
            sipReleaseType(columnMin,sipType_size_t,columnMinState);
            sipReleaseType(columnMax,sipType_size_t,columnMaxState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_OnGetColumnsWidthHint, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_OnGetColumnWidth, "OnGetColumnWidth(column) -> Coord\n"
"\n"
"This function must be overridden in the derived class, and should\n"
"return the width of the given column in pixels.");

extern "C" {static PyObject *meth_wxHScrolledWindow_OnGetColumnWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_OnGetColumnWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::size_t* column;
        int columnState = 0;
        const sipwxHScrolledWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxHScrolledWindow, &sipCpp, sipType_size_t,&column, &columnState))
        {
             ::wxCoord sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_HScrolledWindow, sipName_OnGetColumnWidth);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_OnGetColumnWidth(*column);
            Py_END_ALLOW_THREADS
            sipReleaseType(column,sipType_size_t,columnState);

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_OnGetColumnWidth, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_OnGetUnitsSizeHint, "OnGetUnitsSizeHint(self, unitMin: object, unitMax: object)");

extern "C" {static PyObject *meth_wxHScrolledWindow_OnGetUnitsSizeHint(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_OnGetUnitsSizeHint(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::size_t* unitMin;
        int unitMinState = 0;
         ::size_t* unitMax;
        int unitMaxState = 0;
        const sipwxHScrolledWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_unitMin,
            sipName_unitMax,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1", &sipSelf, sipType_wxHScrolledWindow, &sipCpp, sipType_size_t,&unitMin, &unitMinState, sipType_size_t,&unitMax, &unitMaxState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_OnGetUnitsSizeHint(sipSelfWasArg,*unitMin,*unitMax);
            Py_END_ALLOW_THREADS
            sipReleaseType(unitMin,sipType_size_t,unitMinState);
            sipReleaseType(unitMax,sipType_size_t,unitMaxState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_OnGetUnitsSizeHint, doc_wxHScrolledWindow_OnGetUnitsSizeHint);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_EstimateTotalSize, "EstimateTotalSize(self) -> int");

extern "C" {static PyObject *meth_wxHScrolledWindow_EstimateTotalSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_EstimateTotalSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxHScrolledWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
             ::wxCoord sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_EstimateTotalSize(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_EstimateTotalSize, doc_wxHScrolledWindow_EstimateTotalSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_GetNonOrientationTargetSize, "GetNonOrientationTargetSize(self) -> int");

extern "C" {static PyObject *meth_wxHScrolledWindow_GetNonOrientationTargetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_GetNonOrientationTargetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxHScrolledWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetNonOrientationTargetSize(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_GetNonOrientationTargetSize, doc_wxHScrolledWindow_GetNonOrientationTargetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_GetOrientation, "GetOrientation(self) -> Orientation");

extern "C" {static PyObject *meth_wxHScrolledWindow_GetOrientation(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_GetOrientation(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxHScrolledWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
             ::wxOrientation sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetOrientation(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxOrientation);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_GetOrientation, doc_wxHScrolledWindow_GetOrientation);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_GetOrientationTargetSize, "GetOrientationTargetSize(self) -> int");

extern "C" {static PyObject *meth_wxHScrolledWindow_GetOrientationTargetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_GetOrientationTargetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxHScrolledWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetOrientationTargetSize(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_GetOrientationTargetSize, doc_wxHScrolledWindow_GetOrientationTargetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_OnGetUnitSize, "OnGetUnitSize(self, unit: object) -> int");

extern "C" {static PyObject *meth_wxHScrolledWindow_OnGetUnitSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_OnGetUnitSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::size_t* unit;
        int unitState = 0;
        const sipwxHScrolledWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_unit,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxHScrolledWindow, &sipCpp, sipType_size_t,&unit, &unitState))
        {
             ::wxCoord sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_OnGetUnitSize(sipSelfWasArg,*unit);
            Py_END_ALLOW_THREADS
            sipReleaseType(unit,sipType_size_t,unitState);

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_OnGetUnitSize, doc_wxHScrolledWindow_OnGetUnitSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxHScrolledWindow_SendDestroyEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipwxHScrolledWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_SendDestroyEvent, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_Create, "Create(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr) -> bool\n"
"\n"
"Same as the non-default constructor, but returns a status code: true\n"
"if ok, false if the window couldn't be created.");

extern "C" {static PyObject *meth_wxHScrolledWindow_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = 0;
        const  ::wxString& namedef = wxPanelNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;
        sipWrapper *sipOwner = 0;
         ::wxHScrolledWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJH|iJ1J1lJ1", &sipSelf, sipType_wxHScrolledWindow, &sipCpp, sipType_wxWindow, &parent, &sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxString,&name, &nameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,id,*pos,*size,style,*name);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_Create, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxHScrolledWindow_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHScrolledWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxHScrolledWindow::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_GetClientAreaOrigin, doc_wxHScrolledWindow_GetClientAreaOrigin);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxHScrolledWindow_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHScrolledWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHScrolledWindow::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_Validate, doc_wxHScrolledWindow_Validate);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxHScrolledWindow_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHScrolledWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHScrolledWindow::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_TransferDataToWindow, doc_wxHScrolledWindow_TransferDataToWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxHScrolledWindow_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHScrolledWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHScrolledWindow::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_TransferDataFromWindow, doc_wxHScrolledWindow_TransferDataFromWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxHScrolledWindow_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHScrolledWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHScrolledWindow::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_InitDialog, doc_wxHScrolledWindow_InitDialog);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxHScrolledWindow_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHScrolledWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHScrolledWindow::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_AcceptsFocus, doc_wxHScrolledWindow_AcceptsFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxHScrolledWindow_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHScrolledWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHScrolledWindow::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_AcceptsFocusRecursively, doc_wxHScrolledWindow_AcceptsFocusRecursively);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxHScrolledWindow_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHScrolledWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHScrolledWindow::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_AcceptsFocusFromKeyboard, doc_wxHScrolledWindow_AcceptsFocusFromKeyboard);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxHScrolledWindow_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxHScrolledWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxHScrolledWindow, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHScrolledWindow::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_AddChild, doc_wxHScrolledWindow_AddChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxHScrolledWindow_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxHScrolledWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxHScrolledWindow, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHScrolledWindow::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_RemoveChild, doc_wxHScrolledWindow_RemoveChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxHScrolledWindow_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHScrolledWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHScrolledWindow::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_InheritAttributes, doc_wxHScrolledWindow_InheritAttributes);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxHScrolledWindow_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHScrolledWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHScrolledWindow::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_ShouldInheritColours, doc_wxHScrolledWindow_ShouldInheritColours);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxHScrolledWindow_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHScrolledWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHScrolledWindow::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_OnInternalIdle, doc_wxHScrolledWindow_OnInternalIdle);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxHScrolledWindow_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHScrolledWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHScrolledWindow::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_GetMainWindowOfCompositeControl, doc_wxHScrolledWindow_GetMainWindowOfCompositeControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxHScrolledWindow_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxHScrolledWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biii", &sipSelf, sipType_wxHScrolledWindow, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHScrolledWindow::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_InformFirstDirection, doc_wxHScrolledWindow_InformFirstDirection);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxHScrolledWindow_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxHScrolledWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxHScrolledWindow, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHScrolledWindow::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_SetCanFocus, doc_wxHScrolledWindow_SetCanFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxHScrolledWindow_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHScrolledWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHScrolledWindow::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_Destroy, doc_wxHScrolledWindow_Destroy);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxHScrolledWindow_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxHScrolledWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxHScrolledWindow, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHScrolledWindow::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_SetValidator, doc_wxHScrolledWindow_SetValidator);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxHScrolledWindow_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHScrolledWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHScrolledWindow::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_GetValidator, doc_wxHScrolledWindow_GetValidator);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxHScrolledWindow_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxHScrolledWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxHScrolledWindow, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_ProcessEvent, doc_wxHScrolledWindow_ProcessEvent);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxHScrolledWindow_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxHScrolledWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxHScrolledWindow, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_DoEnable, doc_wxHScrolledWindow_DoEnable);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxHScrolledWindow_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxHScrolledWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_DoGetPosition, doc_wxHScrolledWindow_DoGetPosition);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxHScrolledWindow_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxHScrolledWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_DoGetSize, doc_wxHScrolledWindow_DoGetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxHScrolledWindow_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxHScrolledWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_DoGetClientSize, doc_wxHScrolledWindow_DoGetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxHScrolledWindow_DoGetBestSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxHScrolledWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_DoGetBestSize, doc_wxHScrolledWindow_DoGetBestSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxHScrolledWindow_DoGetBestClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxHScrolledWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_DoGetBestClientSize, doc_wxHScrolledWindow_DoGetBestClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxHScrolledWindow_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxHScrolledWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiii", &sipSelf, sipType_wxHScrolledWindow, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_DoSetSize, doc_wxHScrolledWindow_DoSetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxHScrolledWindow_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxHScrolledWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxHScrolledWindow, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_DoSetClientSize, doc_wxHScrolledWindow_DoSetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxHScrolledWindow_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxHScrolledWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiiii", &sipSelf, sipType_wxHScrolledWindow, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_DoSetSizeHints, doc_wxHScrolledWindow_DoSetSizeHints);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxHScrolledWindow_DoGetBorderSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxHScrolledWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_DoGetBorderSize, doc_wxHScrolledWindow_DoGetBorderSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxHScrolledWindow_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxHScrolledWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiii", &sipSelf, sipType_wxHScrolledWindow, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_DoMoveWindow, doc_wxHScrolledWindow_DoMoveWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxHScrolledWindow_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxHScrolledWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE", &sipSelf, sipType_wxHScrolledWindow, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_DoSetWindowVariant, doc_wxHScrolledWindow_DoSetWindowVariant);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxHScrolledWindow_GetDefaultBorder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxHScrolledWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_GetDefaultBorder, doc_wxHScrolledWindow_GetDefaultBorder);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxHScrolledWindow_GetDefaultBorderForControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxHScrolledWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_GetDefaultBorderForControl, doc_wxHScrolledWindow_GetDefaultBorderForControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxHScrolledWindow_DoFreeze(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_DoFreeze(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxHScrolledWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_DoFreeze, doc_wxHScrolledWindow_DoFreeze);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxHScrolledWindow_DoThaw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_DoThaw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxHScrolledWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_DoThaw, doc_wxHScrolledWindow_DoThaw);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxHScrolledWindow_HasTransparentBackground(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxHScrolledWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHScrolledWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_HasTransparentBackground, doc_wxHScrolledWindow_HasTransparentBackground);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxHScrolledWindow_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxHScrolledWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxHScrolledWindow, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_TryBefore, doc_wxHScrolledWindow_TryBefore);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxHScrolledWindow_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxHScrolledWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxHScrolledWindow, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_TryAfter, doc_wxHScrolledWindow_TryAfter);

    return NULL;
}


PyDoc_STRVAR(doc_wxHScrolledWindow_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant: WindowVariant = wxWINDOW_VARIANT_NORMAL) -> VisualAttributes");

extern "C" {static PyObject *meth_wxHScrolledWindow_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHScrolledWindow_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxHScrolledWindow::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HScrolledWindow, sipName_GetClassDefaultAttributes, doc_wxHScrolledWindow_GetClassDefaultAttributes);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxHScrolledWindow(void *, const sipTypeDef *);}
static void *cast_wxHScrolledWindow(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxHScrolledWindow *sipCpp = reinterpret_cast< ::wxHScrolledWindow *>(sipCppV);

    if (targetType == sipType_wxPanel)
        return static_cast< ::wxPanel *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    if (targetType == sipType_wxVarHScrollHelper)
        return static_cast< ::wxVarHScrollHelper *>(sipCpp);

    if (targetType == sipType_wxVarScrollHelperBase)
        return static_cast< ::wxVarScrollHelperBase *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxHScrolledWindow(void *, int);}
static void release_wxHScrolledWindow(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxHScrolledWindow *>(sipCppV);
    else
        delete reinterpret_cast< ::wxHScrolledWindow *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxHScrolledWindow(sipSimpleWrapper *);}
static void dealloc_wxHScrolledWindow(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxHScrolledWindow *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxHScrolledWindow(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxHScrolledWindow(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxHScrolledWindow(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxHScrolledWindow *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxHScrolledWindow();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = 0;
        const  ::wxString& namedef = wxPanelNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J1lJ1", sipType_wxWindow, &parent, sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxString,&name, &nameState))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxHScrolledWindow(parent,id,*pos,*size,style,*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxHScrolledWindow[] = {{373, 255, 0}, {561, 255, 1}};


static PyMethodDef methods_wxHScrolledWindow[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxHScrolledWindow_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxHScrolledWindow_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxHScrolledWindow_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_AddChild), (PyCFunction)meth_wxHScrolledWindow_AddChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_AddChild)},
    {SIP_MLNAME_CAST(sipName_Create), (PyCFunction)meth_wxHScrolledWindow_Create, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_Create)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxHScrolledWindow_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_Destroy)},
    {SIP_MLNAME_CAST(sipName_DoEnable), (PyCFunction)meth_wxHScrolledWindow_DoEnable, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), (PyCFunction)meth_wxHScrolledWindow_DoFreeze, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), (PyCFunction)meth_wxHScrolledWindow_DoGetBestClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), (PyCFunction)meth_wxHScrolledWindow_DoGetBestSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), (PyCFunction)meth_wxHScrolledWindow_DoGetBorderSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), (PyCFunction)meth_wxHScrolledWindow_DoGetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), (PyCFunction)meth_wxHScrolledWindow_DoGetPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), (PyCFunction)meth_wxHScrolledWindow_DoGetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), (PyCFunction)meth_wxHScrolledWindow_DoMoveWindow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), (PyCFunction)meth_wxHScrolledWindow_DoSetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), (PyCFunction)meth_wxHScrolledWindow_DoSetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), (PyCFunction)meth_wxHScrolledWindow_DoSetSizeHints, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), (PyCFunction)meth_wxHScrolledWindow_DoSetWindowVariant, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoThaw), (PyCFunction)meth_wxHScrolledWindow_DoThaw, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_DoThaw)},
    {SIP_MLNAME_CAST(sipName_EstimateTotalSize), (PyCFunction)meth_wxHScrolledWindow_EstimateTotalSize, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_EstimateTotalWidth), (PyCFunction)meth_wxHScrolledWindow_EstimateTotalWidth, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), (PyCFunction)meth_wxHScrolledWindow_GetClassDefaultAttributes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxHScrolledWindow_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), (PyCFunction)meth_wxHScrolledWindow_GetDefaultBorder, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), (PyCFunction)meth_wxHScrolledWindow_GetDefaultBorderForControl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxHScrolledWindow_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetNonOrientationTargetSize), (PyCFunction)meth_wxHScrolledWindow_GetNonOrientationTargetSize, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_GetOrientation), (PyCFunction)meth_wxHScrolledWindow_GetOrientation, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_GetOrientationTargetSize), (PyCFunction)meth_wxHScrolledWindow_GetOrientationTargetSize, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxHScrolledWindow_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_GetValidator)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), (PyCFunction)meth_wxHScrolledWindow_HasTransparentBackground, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), (PyCFunction)meth_wxHScrolledWindow_InformFirstDirection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxHScrolledWindow_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxHScrolledWindow_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_InitDialog)},
    {SIP_MLNAME_CAST(sipName_OnGetColumnWidth), (PyCFunction)meth_wxHScrolledWindow_OnGetColumnWidth, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_OnGetColumnsWidthHint), (PyCFunction)meth_wxHScrolledWindow_OnGetColumnsWidthHint, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_OnGetUnitSize), (PyCFunction)meth_wxHScrolledWindow_OnGetUnitSize, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_OnGetUnitsSizeHint), (PyCFunction)meth_wxHScrolledWindow_OnGetUnitsSizeHint, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxHScrolledWindow_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), (PyCFunction)meth_wxHScrolledWindow_ProcessEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), (PyCFunction)meth_wxHScrolledWindow_RemoveChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), (PyCFunction)meth_wxHScrolledWindow_SendDestroyEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), (PyCFunction)meth_wxHScrolledWindow_SetCanFocus, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetValidator), (PyCFunction)meth_wxHScrolledWindow_SetValidator, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_SetValidator)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxHScrolledWindow_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxHScrolledWindow_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxHScrolledWindow_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), (PyCFunction)meth_wxHScrolledWindow_TryAfter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), (PyCFunction)meth_wxHScrolledWindow_TryBefore, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_TryBefore)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxHScrolledWindow_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHScrolledWindow_Validate)}
};

PyDoc_STRVAR(doc_wxHScrolledWindow, "HScrolledWindow()\n"
"HScrolledWindow(parent, id=ID_ANY, pos=DefaultPosition, size=DefaultSize, style=0, name=PanelNameStr)\n"
"\n"
"In the name of this class, \"H\" stands for \"horizontal\" because it can\n"
"be used for scrolling columns of variable widths.");


sipClassTypeDef sipTypeDef__core_wxHScrolledWindow = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxHScrolledWindow,
        {0},
        0
    },
    {
        sipNameNr_HScrolledWindow,
        {0, 0, 1},
        51, methods_wxHScrolledWindow,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxHScrolledWindow,
    -1,
    -1,
    supers_wxHScrolledWindow,
    0,
    init_type_wxHScrolledWindow,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxHScrolledWindow,
    0,
    0,
    0,
    release_wxHScrolledWindow,
    cast_wxHScrolledWindow,
    0,
    0,
    0,
    0,
    0,
    0
};
