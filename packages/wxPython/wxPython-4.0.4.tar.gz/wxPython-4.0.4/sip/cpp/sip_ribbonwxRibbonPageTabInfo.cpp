/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_ribbon.h"

        #include <wx/ribbon/bar.h>

        #include <wx/ribbon/page.h>
        #include <wx/gdicmn.h>


/* Call the instance's destructor. */
extern "C" {static void release_wxRibbonPageTabInfo(void *, int);}
static void release_wxRibbonPageTabInfo(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::wxRibbonPageTabInfo *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_wxRibbonPageTabInfo(void *, SIP_SSIZE_T, void *);}
static void assign_wxRibbonPageTabInfo(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxRibbonPageTabInfo *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxRibbonPageTabInfo *>(sipSrc);
}


extern "C" {static void *array_wxRibbonPageTabInfo(SIP_SSIZE_T);}
static void *array_wxRibbonPageTabInfo(SIP_SSIZE_T sipNrElem)
{
    return new  ::wxRibbonPageTabInfo[sipNrElem];
}


extern "C" {static void *copy_wxRibbonPageTabInfo(const void *, SIP_SSIZE_T);}
static void *copy_wxRibbonPageTabInfo(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxRibbonPageTabInfo(reinterpret_cast<const  ::wxRibbonPageTabInfo *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxRibbonPageTabInfo(sipSimpleWrapper *);}
static void dealloc_wxRibbonPageTabInfo(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxRibbonPageTabInfo(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_wxRibbonPageTabInfo(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxRibbonPageTabInfo(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::wxRibbonPageTabInfo *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxRibbonPageTabInfo();
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    {
        const  ::wxRibbonPageTabInfo* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxRibbonPageTabInfo, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxRibbonPageTabInfo(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


extern "C" {static PyObject *varget_wxRibbonPageTabInfo_active(void *, PyObject *, PyObject *);}
static PyObject *varget_wxRibbonPageTabInfo_active(void *sipSelf, PyObject *, PyObject *)
{
    bool sipVal;
     ::wxRibbonPageTabInfo *sipCpp = reinterpret_cast< ::wxRibbonPageTabInfo *>(sipSelf);

    sipVal = sipCpp->active;

    return PyBool_FromLong(sipVal);
}


extern "C" {static int varset_wxRibbonPageTabInfo_active(void *, PyObject *, PyObject *);}
static int varset_wxRibbonPageTabInfo_active(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::wxRibbonPageTabInfo *sipCpp = reinterpret_cast< ::wxRibbonPageTabInfo *>(sipSelf);

    sipVal = sipConvertToBool(sipPy);

    if (sipVal < 0)
        return -1;

    sipCpp->active = static_cast<bool>(sipVal);

    return 0;
}


extern "C" {static PyObject *varget_wxRibbonPageTabInfo_highlight(void *, PyObject *, PyObject *);}
static PyObject *varget_wxRibbonPageTabInfo_highlight(void *sipSelf, PyObject *, PyObject *)
{
    bool sipVal;
     ::wxRibbonPageTabInfo *sipCpp = reinterpret_cast< ::wxRibbonPageTabInfo *>(sipSelf);

    sipVal = sipCpp->highlight;

    return PyBool_FromLong(sipVal);
}


extern "C" {static int varset_wxRibbonPageTabInfo_highlight(void *, PyObject *, PyObject *);}
static int varset_wxRibbonPageTabInfo_highlight(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::wxRibbonPageTabInfo *sipCpp = reinterpret_cast< ::wxRibbonPageTabInfo *>(sipSelf);

    sipVal = sipConvertToBool(sipPy);

    if (sipVal < 0)
        return -1;

    sipCpp->highlight = static_cast<bool>(sipVal);

    return 0;
}


extern "C" {static PyObject *varget_wxRibbonPageTabInfo_hovered(void *, PyObject *, PyObject *);}
static PyObject *varget_wxRibbonPageTabInfo_hovered(void *sipSelf, PyObject *, PyObject *)
{
    bool sipVal;
     ::wxRibbonPageTabInfo *sipCpp = reinterpret_cast< ::wxRibbonPageTabInfo *>(sipSelf);

    sipVal = sipCpp->hovered;

    return PyBool_FromLong(sipVal);
}


extern "C" {static int varset_wxRibbonPageTabInfo_hovered(void *, PyObject *, PyObject *);}
static int varset_wxRibbonPageTabInfo_hovered(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::wxRibbonPageTabInfo *sipCpp = reinterpret_cast< ::wxRibbonPageTabInfo *>(sipSelf);

    sipVal = sipConvertToBool(sipPy);

    if (sipVal < 0)
        return -1;

    sipCpp->hovered = static_cast<bool>(sipVal);

    return 0;
}


extern "C" {static PyObject *varget_wxRibbonPageTabInfo_ideal_width(void *, PyObject *, PyObject *);}
static PyObject *varget_wxRibbonPageTabInfo_ideal_width(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::wxRibbonPageTabInfo *sipCpp = reinterpret_cast< ::wxRibbonPageTabInfo *>(sipSelf);

    sipVal = sipCpp->ideal_width;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_wxRibbonPageTabInfo_ideal_width(void *, PyObject *, PyObject *);}
static int varset_wxRibbonPageTabInfo_ideal_width(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::wxRibbonPageTabInfo *sipCpp = reinterpret_cast< ::wxRibbonPageTabInfo *>(sipSelf);

    sipVal = sipLong_AsInt(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->ideal_width = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_wxRibbonPageTabInfo_minimum_width(void *, PyObject *, PyObject *);}
static PyObject *varget_wxRibbonPageTabInfo_minimum_width(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::wxRibbonPageTabInfo *sipCpp = reinterpret_cast< ::wxRibbonPageTabInfo *>(sipSelf);

    sipVal = sipCpp->minimum_width;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_wxRibbonPageTabInfo_minimum_width(void *, PyObject *, PyObject *);}
static int varset_wxRibbonPageTabInfo_minimum_width(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::wxRibbonPageTabInfo *sipCpp = reinterpret_cast< ::wxRibbonPageTabInfo *>(sipSelf);

    sipVal = sipLong_AsInt(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->minimum_width = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_wxRibbonPageTabInfo_page(void *, PyObject *, PyObject *);}
static PyObject *varget_wxRibbonPageTabInfo_page(void *sipSelf, PyObject *, PyObject *)
{
     ::wxRibbonPage*sipVal;
     ::wxRibbonPageTabInfo *sipCpp = reinterpret_cast< ::wxRibbonPageTabInfo *>(sipSelf);

    sipVal = sipCpp->page;

    return sipConvertFromType(sipVal, sipType_wxRibbonPage, NULL);
}


extern "C" {static int varset_wxRibbonPageTabInfo_page(void *, PyObject *, PyObject *);}
static int varset_wxRibbonPageTabInfo_page(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::wxRibbonPage*sipVal;
     ::wxRibbonPageTabInfo *sipCpp = reinterpret_cast< ::wxRibbonPageTabInfo *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::wxRibbonPage *>(sipForceConvertToType(sipPy,sipType_wxRibbonPage,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->page = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_wxRibbonPageTabInfo_rect(void *, PyObject *, PyObject *);}
static PyObject *varget_wxRibbonPageTabInfo_rect(void *sipSelf, PyObject *, PyObject *)
{
     ::wxRect*sipVal;
     ::wxRibbonPageTabInfo *sipCpp = reinterpret_cast< ::wxRibbonPageTabInfo *>(sipSelf);

    sipVal = &sipCpp->rect;

    return sipConvertFromType(sipVal, sipType_wxRect, NULL);
}


extern "C" {static int varset_wxRibbonPageTabInfo_rect(void *, PyObject *, PyObject *);}
static int varset_wxRibbonPageTabInfo_rect(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::wxRect*sipVal;
     ::wxRibbonPageTabInfo *sipCpp = reinterpret_cast< ::wxRibbonPageTabInfo *>(sipSelf);

    int sipValState;
    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::wxRect *>(sipForceConvertToType(sipPy,sipType_wxRect,NULL,SIP_NOT_NONE,&sipValState,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->rect = *sipVal;

    sipReleaseType(sipVal, sipType_wxRect, sipValState);

    return 0;
}


extern "C" {static PyObject *varget_wxRibbonPageTabInfo_shown(void *, PyObject *, PyObject *);}
static PyObject *varget_wxRibbonPageTabInfo_shown(void *sipSelf, PyObject *, PyObject *)
{
    bool sipVal;
     ::wxRibbonPageTabInfo *sipCpp = reinterpret_cast< ::wxRibbonPageTabInfo *>(sipSelf);

    sipVal = sipCpp->shown;

    return PyBool_FromLong(sipVal);
}


extern "C" {static int varset_wxRibbonPageTabInfo_shown(void *, PyObject *, PyObject *);}
static int varset_wxRibbonPageTabInfo_shown(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::wxRibbonPageTabInfo *sipCpp = reinterpret_cast< ::wxRibbonPageTabInfo *>(sipSelf);

    sipVal = sipConvertToBool(sipPy);

    if (sipVal < 0)
        return -1;

    sipCpp->shown = static_cast<bool>(sipVal);

    return 0;
}


extern "C" {static PyObject *varget_wxRibbonPageTabInfo_small_begin_need_separator_width(void *, PyObject *, PyObject *);}
static PyObject *varget_wxRibbonPageTabInfo_small_begin_need_separator_width(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::wxRibbonPageTabInfo *sipCpp = reinterpret_cast< ::wxRibbonPageTabInfo *>(sipSelf);

    sipVal = sipCpp->small_begin_need_separator_width;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_wxRibbonPageTabInfo_small_begin_need_separator_width(void *, PyObject *, PyObject *);}
static int varset_wxRibbonPageTabInfo_small_begin_need_separator_width(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::wxRibbonPageTabInfo *sipCpp = reinterpret_cast< ::wxRibbonPageTabInfo *>(sipSelf);

    sipVal = sipLong_AsInt(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->small_begin_need_separator_width = sipVal;

    return 0;
}


extern "C" {static PyObject *varget_wxRibbonPageTabInfo_small_must_have_separator_width(void *, PyObject *, PyObject *);}
static PyObject *varget_wxRibbonPageTabInfo_small_must_have_separator_width(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::wxRibbonPageTabInfo *sipCpp = reinterpret_cast< ::wxRibbonPageTabInfo *>(sipSelf);

    sipVal = sipCpp->small_must_have_separator_width;

    return SIPLong_FromLong(sipVal);
}


extern "C" {static int varset_wxRibbonPageTabInfo_small_must_have_separator_width(void *, PyObject *, PyObject *);}
static int varset_wxRibbonPageTabInfo_small_must_have_separator_width(void *sipSelf, PyObject *sipPy, PyObject *)
{
    int sipVal;
     ::wxRibbonPageTabInfo *sipCpp = reinterpret_cast< ::wxRibbonPageTabInfo *>(sipSelf);

    sipVal = sipLong_AsInt(sipPy);

    if (PyErr_Occurred() != NULL)
        return -1;

    sipCpp->small_must_have_separator_width = sipVal;

    return 0;
}

sipVariableDef variables_wxRibbonPageTabInfo[] = {
    {InstanceVariable, sipName_active, (PyMethodDef *)varget_wxRibbonPageTabInfo_active, (PyMethodDef *)varset_wxRibbonPageTabInfo_active, NULL, NULL},
    {InstanceVariable, sipName_highlight, (PyMethodDef *)varget_wxRibbonPageTabInfo_highlight, (PyMethodDef *)varset_wxRibbonPageTabInfo_highlight, NULL, NULL},
    {InstanceVariable, sipName_hovered, (PyMethodDef *)varget_wxRibbonPageTabInfo_hovered, (PyMethodDef *)varset_wxRibbonPageTabInfo_hovered, NULL, NULL},
    {InstanceVariable, sipName_ideal_width, (PyMethodDef *)varget_wxRibbonPageTabInfo_ideal_width, (PyMethodDef *)varset_wxRibbonPageTabInfo_ideal_width, NULL, NULL},
    {InstanceVariable, sipName_minimum_width, (PyMethodDef *)varget_wxRibbonPageTabInfo_minimum_width, (PyMethodDef *)varset_wxRibbonPageTabInfo_minimum_width, NULL, NULL},
    {InstanceVariable, sipName_page, (PyMethodDef *)varget_wxRibbonPageTabInfo_page, (PyMethodDef *)varset_wxRibbonPageTabInfo_page, NULL, NULL},
    {InstanceVariable, sipName_rect, (PyMethodDef *)varget_wxRibbonPageTabInfo_rect, (PyMethodDef *)varset_wxRibbonPageTabInfo_rect, NULL, NULL},
    {InstanceVariable, sipName_shown, (PyMethodDef *)varget_wxRibbonPageTabInfo_shown, (PyMethodDef *)varset_wxRibbonPageTabInfo_shown, NULL, NULL},
    {InstanceVariable, sipName_small_begin_need_separator_width, (PyMethodDef *)varget_wxRibbonPageTabInfo_small_begin_need_separator_width, (PyMethodDef *)varset_wxRibbonPageTabInfo_small_begin_need_separator_width, NULL, NULL},
    {InstanceVariable, sipName_small_must_have_separator_width, (PyMethodDef *)varget_wxRibbonPageTabInfo_small_must_have_separator_width, (PyMethodDef *)varset_wxRibbonPageTabInfo_small_must_have_separator_width, NULL, NULL},
};

PyDoc_STRVAR(doc_wxRibbonPageTabInfo, "");


sipClassTypeDef sipTypeDef__ribbon_wxRibbonPageTabInfo = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxRibbonPageTabInfo,
        {0},
        0
    },
    {
        sipNameNr_RibbonPageTabInfo,
        {0, 0, 1},
        0, 0,
        0, 0,
        10, variables_wxRibbonPageTabInfo,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxRibbonPageTabInfo,
    -1,
    -1,
    0,
    0,
    init_type_wxRibbonPageTabInfo,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxRibbonPageTabInfo,
    assign_wxRibbonPageTabInfo,
    array_wxRibbonPageTabInfo,
    copy_wxRibbonPageTabInfo,
    release_wxRibbonPageTabInfo,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
