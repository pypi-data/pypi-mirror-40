/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_propgrid.h"

        #include <wx/propgrid/property.h>

        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/bitmap.h>
        #include <wx/propgrid/property.h>
        #include <wx/propgrid/property.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxPGChoiceEntry : public  ::wxPGChoiceEntry
{
public:
    sipwxPGChoiceEntry();
    sipwxPGChoiceEntry(const  ::wxPGChoiceEntry&);
    sipwxPGChoiceEntry(const  ::wxString&,int);
    ~sipwxPGChoiceEntry();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxPGChoiceEntry(const sipwxPGChoiceEntry &);
    sipwxPGChoiceEntry &operator = (const sipwxPGChoiceEntry &);
};

sipwxPGChoiceEntry::sipwxPGChoiceEntry():  ::wxPGChoiceEntry(), sipPySelf(0)
{
}

sipwxPGChoiceEntry::sipwxPGChoiceEntry(const  ::wxPGChoiceEntry& other):  ::wxPGChoiceEntry(other), sipPySelf(0)
{
}

sipwxPGChoiceEntry::sipwxPGChoiceEntry(const  ::wxString& label,int value):  ::wxPGChoiceEntry(label,value), sipPySelf(0)
{
}

sipwxPGChoiceEntry::~sipwxPGChoiceEntry()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_wxPGChoiceEntry_SetValue, "SetValue(value)");

extern "C" {static PyObject *meth_wxPGChoiceEntry_SetValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGChoiceEntry_SetValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int value;
         ::wxPGChoiceEntry *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxPGChoiceEntry, &sipCpp, &value))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetValue(value);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PGChoiceEntry, sipName_SetValue, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPGChoiceEntry_GetValue, "GetValue() -> int");

extern "C" {static PyObject *meth_wxPGChoiceEntry_GetValue(PyObject *, PyObject *);}
static PyObject *meth_wxPGChoiceEntry_GetValue(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPGChoiceEntry *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxPGChoiceEntry, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetValue();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PGChoiceEntry, sipName_GetValue, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxPGChoiceEntry(void *, const sipTypeDef *);}
static void *cast_wxPGChoiceEntry(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxPGChoiceEntry *sipCpp = reinterpret_cast< ::wxPGChoiceEntry *>(sipCppV);

    if (targetType == sipType_wxPGCell)
        return static_cast< ::wxPGCell *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxPGChoiceEntry(void *, int);}
static void release_wxPGChoiceEntry(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxPGChoiceEntry *>(sipCppV);
    else
        delete reinterpret_cast< ::wxPGChoiceEntry *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_wxPGChoiceEntry(void *, SIP_SSIZE_T, void *);}
static void assign_wxPGChoiceEntry(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxPGChoiceEntry *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxPGChoiceEntry *>(sipSrc);
}


extern "C" {static void *array_wxPGChoiceEntry(SIP_SSIZE_T);}
static void *array_wxPGChoiceEntry(SIP_SSIZE_T sipNrElem)
{
    return new  ::wxPGChoiceEntry[sipNrElem];
}


extern "C" {static void *copy_wxPGChoiceEntry(const void *, SIP_SSIZE_T);}
static void *copy_wxPGChoiceEntry(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxPGChoiceEntry(reinterpret_cast<const  ::wxPGChoiceEntry *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxPGChoiceEntry(sipSimpleWrapper *);}
static void dealloc_wxPGChoiceEntry(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxPGChoiceEntry *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxPGChoiceEntry(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxPGChoiceEntry(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxPGChoiceEntry(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxPGChoiceEntry *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxPGChoiceEntry();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxPGChoiceEntry* other;

        static const char *sipKwdList[] = {
            sipName_other,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9", sipType_wxPGChoiceEntry, &other))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxPGChoiceEntry(*other);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxString* label;
        int labelState = 0;
        int value = wxPG_INVALID_VALUE;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_value,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|i", sipType_wxString,&label, &labelState, &value))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxPGChoiceEntry(*label,value);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxPGChoiceEntry[] = {{23, 255, 1}};


static PyMethodDef methods_wxPGChoiceEntry[] = {
    {SIP_MLNAME_CAST(sipName_GetValue), meth_wxPGChoiceEntry_GetValue, METH_VARARGS, SIP_MLDOC_CAST(doc_wxPGChoiceEntry_GetValue)},
    {SIP_MLNAME_CAST(sipName_SetValue), (PyCFunction)meth_wxPGChoiceEntry_SetValue, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGChoiceEntry_SetValue)}
};

sipVariableDef variables_wxPGChoiceEntry[] = {
    {PropertyVariable, sipName_Value, &methods_wxPGChoiceEntry[0], &methods_wxPGChoiceEntry[1], NULL, NULL},
};

PyDoc_STRVAR(doc_wxPGChoiceEntry, "PGChoiceEntry()\n"
"PGChoiceEntry(other)\n"
"PGChoiceEntry(label, value=PG_INVALID_VALUE)\n"
"\n"
"Data of a single wxPGChoices choice.");


sipClassTypeDef sipTypeDef__propgrid_wxPGChoiceEntry = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxPGChoiceEntry,
        {0},
        0
    },
    {
        sipNameNr_PGChoiceEntry,
        {0, 0, 1},
        2, methods_wxPGChoiceEntry,
        0, 0,
        1, variables_wxPGChoiceEntry,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxPGChoiceEntry,
    -1,
    -1,
    supers_wxPGChoiceEntry,
    0,
    init_type_wxPGChoiceEntry,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxPGChoiceEntry,
    assign_wxPGChoiceEntry,
    array_wxPGChoiceEntry,
    copy_wxPGChoiceEntry,
    release_wxPGChoiceEntry,
    cast_wxPGChoiceEntry,
    0,
    0,
    0,
    0,
    0,
    0
};
