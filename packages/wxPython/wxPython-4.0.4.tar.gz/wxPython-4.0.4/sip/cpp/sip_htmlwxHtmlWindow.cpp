/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_html.h"

        #include <wx/html/htmlwin.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/html/htmlcell.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/html/htmlwin.h>
        #include <wx/bitmap.h>
        #include <wx/colour.h>
        #include <wx/html/htmlcell.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/validate.h>
        #include <wx/html/htmlfilt.h>
        #include <wx/config.h>
        #include <wx/statusbr.h>
        #include <wx/frame.h>
        #include <wx/html/winpars.h>
        #include <wx/html/htmlcell.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/dc.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/font.h>
        #include <wx/region.h>
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>
    void _wxHtmlWindow_SetFonts(wxHtmlWindow* self, const wxString * normal_face, const wxString * fixed_face, const wxArrayInt* sizes)
    {
        if (sizes->GetCount() != 7) {
            wxPyErr_SetString(PyExc_ValueError, "Sequence of 7 integers expected.");
            return;
        }
        self->SetFonts(*normal_face, *fixed_face, &sizes->Item(0));
    }


class sipwxHtmlWindow : public  ::wxHtmlWindow
{
public:
    sipwxHtmlWindow();
    sipwxHtmlWindow( ::wxWindow*, ::wxWindowID,const  ::wxPoint&,const  ::wxSize&,long,const  ::wxString&);
    virtual ~sipwxHtmlWindow();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
     ::wxSize sipProtectVirt_GetSizeAvailableForScrollTarget(bool,const  ::wxSize&);
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);
    bool sipProtectVirt_OnCellClicked(bool, ::wxHtmlCell*, ::wxCoord, ::wxCoord,const  ::wxMouseEvent&);
    void sipProtectVirt_OnCellMouseHover(bool, ::wxHtmlCell*, ::wxCoord, ::wxCoord);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void OnCellMouseHover( ::wxHtmlCell*, ::wxCoord, ::wxCoord);
    bool OnCellClicked( ::wxHtmlCell*, ::wxCoord, ::wxCoord,const  ::wxMouseEvent&);
    void OnSetTitle(const  ::wxString&);
     ::wxHtmlOpeningStatus OnOpeningURL( ::wxHtmlURLType,const  ::wxString&, ::wxString*) const;
    void OnLinkClicked(const  ::wxHtmlLinkInfo&);
    void SetHTMLWindowTitle(const  ::wxString&);
    void OnHTMLLinkClicked(const  ::wxHtmlLinkInfo&);
     ::wxHtmlOpeningStatus OnHTMLOpeningURL( ::wxHtmlURLType,const  ::wxString&, ::wxString*) const;
     ::wxPoint HTMLCoordsToWindow( ::wxHtmlCell*,const  ::wxPoint&) const;
     ::wxWindow* GetHTMLWindow();
     ::wxColour GetHTMLBackgroundColour() const;
    void SetHTMLBackgroundColour(const  ::wxColour&);
    void SetHTMLBackgroundImage(const  ::wxBitmap&);
    void SetHTMLStatusText(const  ::wxString&);
     ::wxCursor GetHTMLCursor( ::wxHtmlWindowInterface::HTMLCursor) const;
     ::wxSize GetSizeAvailableForScrollTarget(const  ::wxSize&);
    bool SendAutoScrollEvents( ::wxScrollWinEvent&) const;
    void OnDraw( ::wxDC&);
    void RemoveChild( ::wxWindowBase*);
    void AddChild( ::wxWindowBase*);
    bool ProcessEvent( ::wxEvent&);
    bool TryBefore( ::wxEvent&);
    bool TryAfter( ::wxEvent&);
    bool AcceptsFocus() const;
    bool AcceptsFocusFromKeyboard() const;
    bool AcceptsFocusRecursively() const;
    void SetCanFocus(bool);
    bool InformFirstDirection(int,int,int);
     ::wxPoint GetClientAreaOrigin() const;
    bool HasTransparentBackground();
    bool ShouldInheritColours() const;
     ::wxValidator* GetValidator();
    void SetValidator(const  ::wxValidator&);
    bool TransferDataFromWindow();
    bool TransferDataToWindow();
    bool Validate();
    bool Destroy();
    void InheritAttributes();
    void InitDialog();
    void OnInternalIdle();
     ::wxWindow* GetMainWindowOfCompositeControl();
    void DoEnable(bool);
    void DoGetPosition(int*,int*) const;
    void DoGetSize(int*,int*) const;
    void DoGetClientSize(int*,int*) const;
    void DoSetSize(int,int,int,int,int);
    void DoSetClientSize(int,int);
    void DoSetSizeHints(int,int,int,int,int,int);
     ::wxSize DoGetBorderSize() const;
    void DoMoveWindow(int,int,int,int);
    void DoSetWindowVariant( ::wxWindowVariant);
     ::wxBorder GetDefaultBorder() const;
     ::wxBorder GetDefaultBorderForControl() const;
    void DoFreeze();
    void DoThaw();
     ::wxSize DoGetBestSize() const;
     ::wxSize DoGetBestClientSize() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxHtmlWindow(const sipwxHtmlWindow &);
    sipwxHtmlWindow &operator = (const sipwxHtmlWindow &);

    char sipPyMethods[57];
};

sipwxHtmlWindow::sipwxHtmlWindow():  ::wxHtmlWindow(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxHtmlWindow::sipwxHtmlWindow( ::wxWindow*parent, ::wxWindowID id,const  ::wxPoint& pos,const  ::wxSize& size,long style,const  ::wxString& name):  ::wxHtmlWindow(parent,id,pos,size,style,name), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxHtmlWindow::~sipwxHtmlWindow()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxHtmlWindow::OnCellMouseHover( ::wxHtmlCell*cell, ::wxCoord x, ::wxCoord y)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_OnCellMouseHover);

    if (!sipMeth)
    {
         ::wxHtmlWindow::OnCellMouseHover(cell,x,y);
        return;
    }

    extern void sipVH__html_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxHtmlCell*, ::wxCoord, ::wxCoord);

    sipVH__html_53(sipGILState, 0, sipPySelf, sipMeth, cell, x, y);
}

bool sipwxHtmlWindow::OnCellClicked( ::wxHtmlCell*cell, ::wxCoord x, ::wxCoord y,const  ::wxMouseEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_OnCellClicked);

    if (!sipMeth)
        return  ::wxHtmlWindow::OnCellClicked(cell,x,y,event);

    extern bool sipVH__html_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxHtmlCell*, ::wxCoord, ::wxCoord,const  ::wxMouseEvent&);

    return sipVH__html_52(sipGILState, 0, sipPySelf, sipMeth, cell, x, y, event);
}

void sipwxHtmlWindow::OnSetTitle(const  ::wxString& title)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_OnSetTitle);

    if (!sipMeth)
    {
         ::wxHtmlWindow::OnSetTitle(title);
        return;
    }

    extern void sipVH__html_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&);

    sipVH__html_22(sipGILState, 0, sipPySelf, sipMeth, title);
}

 ::wxHtmlOpeningStatus sipwxHtmlWindow::OnOpeningURL( ::wxHtmlURLType type,const  ::wxString& url, ::wxString*redirect) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_OnOpeningURL);

    if (!sipMeth)
        return  ::wxHtmlWindow::OnOpeningURL(type,url,redirect);

    extern  ::wxHtmlOpeningStatus sipVH__html_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxHtmlURLType,const  ::wxString&, ::wxString*);

    return sipVH__html_51(sipGILState, 0, sipPySelf, sipMeth, type, url, redirect);
}

void sipwxHtmlWindow::OnLinkClicked(const  ::wxHtmlLinkInfo& link)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_OnLinkClicked);

    if (!sipMeth)
    {
         ::wxHtmlWindow::OnLinkClicked(link);
        return;
    }

    extern void sipVH__html_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxHtmlLinkInfo&);

    sipVH__html_25(sipGILState, 0, sipPySelf, sipMeth, link);
}

void sipwxHtmlWindow::SetHTMLWindowTitle(const  ::wxString& title)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_SetHTMLWindowTitle);

    if (!sipMeth)
    {
         ::wxHtmlWindow::SetHTMLWindowTitle(title);
        return;
    }

    extern void sipVH__html_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&);

    sipVH__html_22(sipGILState, 0, sipPySelf, sipMeth, title);
}

void sipwxHtmlWindow::OnHTMLLinkClicked(const  ::wxHtmlLinkInfo& link)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_OnHTMLLinkClicked);

    if (!sipMeth)
    {
         ::wxHtmlWindow::OnHTMLLinkClicked(link);
        return;
    }

    extern void sipVH__html_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxHtmlLinkInfo&);

    sipVH__html_25(sipGILState, 0, sipPySelf, sipMeth, link);
}

 ::wxHtmlOpeningStatus sipwxHtmlWindow::OnHTMLOpeningURL( ::wxHtmlURLType type,const  ::wxString& url, ::wxString*redirectTo) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_OnHTMLOpeningURL);

    if (!sipMeth)
        return  ::wxHtmlWindow::OnHTMLOpeningURL(type,url,redirectTo);

    extern  ::wxHtmlOpeningStatus sipVH__html_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxHtmlURLType,const  ::wxString&, ::wxString*);

    return sipVH__html_26(sipGILState, 0, sipPySelf, sipMeth, type, url, redirectTo);
}

 ::wxPoint sipwxHtmlWindow::HTMLCoordsToWindow( ::wxHtmlCell*cell,const  ::wxPoint& pos) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_HTMLCoordsToWindow);

    if (!sipMeth)
        return  ::wxHtmlWindow::HTMLCoordsToWindow(cell,pos);

    extern  ::wxPoint sipVH__html_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxHtmlCell*,const  ::wxPoint&);

    return sipVH__html_27(sipGILState, 0, sipPySelf, sipMeth, cell, pos);
}

 ::wxWindow* sipwxHtmlWindow::GetHTMLWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_GetHTMLWindow);

    if (!sipMeth)
        return  ::wxHtmlWindow::GetHTMLWindow();

    extern  ::wxWindow* sipVH__html_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_28(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxColour sipwxHtmlWindow::GetHTMLBackgroundColour() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_GetHTMLBackgroundColour);

    if (!sipMeth)
        return  ::wxHtmlWindow::GetHTMLBackgroundColour();

    extern  ::wxColour sipVH__html_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_29(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHtmlWindow::SetHTMLBackgroundColour(const  ::wxColour& clr)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_SetHTMLBackgroundColour);

    if (!sipMeth)
    {
         ::wxHtmlWindow::SetHTMLBackgroundColour(clr);
        return;
    }

    extern void sipVH__html_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxColour&);

    sipVH__html_30(sipGILState, 0, sipPySelf, sipMeth, clr);
}

void sipwxHtmlWindow::SetHTMLBackgroundImage(const  ::wxBitmap& bmpBg)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_SetHTMLBackgroundImage);

    if (!sipMeth)
    {
         ::wxHtmlWindow::SetHTMLBackgroundImage(bmpBg);
        return;
    }

    extern void sipVH__html_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxBitmap&);

    sipVH__html_31(sipGILState, 0, sipPySelf, sipMeth, bmpBg);
}

void sipwxHtmlWindow::SetHTMLStatusText(const  ::wxString& text)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_SetHTMLStatusText);

    if (!sipMeth)
    {
         ::wxHtmlWindow::SetHTMLStatusText(text);
        return;
    }

    extern void sipVH__html_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&);

    sipVH__html_22(sipGILState, 0, sipPySelf, sipMeth, text);
}

 ::wxCursor sipwxHtmlWindow::GetHTMLCursor( ::wxHtmlWindowInterface::HTMLCursor type) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_GetHTMLCursor);

    if (!sipMeth)
        return  ::wxHtmlWindow::GetHTMLCursor(type);

    extern  ::wxCursor sipVH__html_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxHtmlWindowInterface::HTMLCursor);

    return sipVH__html_32(sipGILState, 0, sipPySelf, sipMeth, type);
}

 ::wxSize sipwxHtmlWindow::GetSizeAvailableForScrollTarget(const  ::wxSize& size)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_GetSizeAvailableForScrollTarget);

    if (!sipMeth)
        return  ::wxHtmlWindow::GetSizeAvailableForScrollTarget(size);

    extern  ::wxSize sipVH__html_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&);

    return sipVH__html_50(sipGILState, 0, sipPySelf, sipMeth, size);
}

bool sipwxHtmlWindow::SendAutoScrollEvents( ::wxScrollWinEvent& event) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_SendAutoScrollEvents);

    if (!sipMeth)
        return  ::wxHtmlWindow::SendAutoScrollEvents(event);

    extern bool sipVH__html_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxScrollWinEvent&);

    return sipVH__html_49(sipGILState, 0, sipPySelf, sipMeth, event);
}

void sipwxHtmlWindow::OnDraw( ::wxDC& dc)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_OnDraw);

    if (!sipMeth)
    {
         ::wxHtmlWindow::OnDraw(dc);
        return;
    }

    extern void sipVH__html_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&);

    sipVH__html_48(sipGILState, 0, sipPySelf, sipMeth, dc);
}

void sipwxHtmlWindow::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxHtmlWindow::RemoveChild(child);
        return;
    }

    extern void sipVH__html_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__html_47(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxHtmlWindow::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxHtmlWindow::AddChild(child);
        return;
    }

    extern void sipVH__html_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__html_47(sipGILState, 0, sipPySelf, sipMeth, child);
}

bool sipwxHtmlWindow::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxHtmlWindow::ProcessEvent(event);

    extern bool sipVH__html_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__html_46(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxHtmlWindow::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxHtmlWindow::TryBefore(event);

    extern bool sipVH__html_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__html_46(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxHtmlWindow::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxHtmlWindow::TryAfter(event);

    extern bool sipVH__html_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__html_46(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxHtmlWindow::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxHtmlWindow::AcceptsFocus();

    extern bool sipVH__html_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_41(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHtmlWindow::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxHtmlWindow::AcceptsFocusFromKeyboard();

    extern bool sipVH__html_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_41(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHtmlWindow::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxHtmlWindow::AcceptsFocusRecursively();

    extern bool sipVH__html_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_41(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHtmlWindow::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxHtmlWindow::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__html_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__html_40(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

bool sipwxHtmlWindow::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxHtmlWindow::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__html_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__html_45(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

 ::wxPoint sipwxHtmlWindow::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxHtmlWindow::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__html_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_44(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHtmlWindow::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxHtmlWindow::HasTransparentBackground();

    extern bool sipVH__html_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_41(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHtmlWindow::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxHtmlWindow::ShouldInheritColours();

    extern bool sipVH__html_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_41(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxValidator* sipwxHtmlWindow::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxHtmlWindow::GetValidator();

    extern  ::wxValidator* sipVH__html_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_43(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHtmlWindow::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxHtmlWindow::SetValidator(validator);
        return;
    }

    extern void sipVH__html_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__html_42(sipGILState, 0, sipPySelf, sipMeth, validator);
}

bool sipwxHtmlWindow::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxHtmlWindow::TransferDataFromWindow();

    extern bool sipVH__html_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_41(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHtmlWindow::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxHtmlWindow::TransferDataToWindow();

    extern bool sipVH__html_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_41(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHtmlWindow::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_Validate);

    if (!sipMeth)
        return  ::wxHtmlWindow::Validate();

    extern bool sipVH__html_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_41(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHtmlWindow::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_Destroy);

    if (!sipMeth)
        return  ::wxHtmlWindow::Destroy();

    extern bool sipVH__html_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_41(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHtmlWindow::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxHtmlWindow::InheritAttributes();
        return;
    }

    extern void sipVH__html_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__html_20(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHtmlWindow::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxHtmlWindow::InitDialog();
        return;
    }

    extern void sipVH__html_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__html_20(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHtmlWindow::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxHtmlWindow::OnInternalIdle();
        return;
    }

    extern void sipVH__html_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__html_20(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxWindow* sipwxHtmlWindow::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxHtmlWindow::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__html_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_28(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHtmlWindow::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxHtmlWindow::DoEnable(enable);
        return;
    }

    extern void sipVH__html_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__html_40(sipGILState, 0, sipPySelf, sipMeth, enable);
}

void sipwxHtmlWindow::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,NULL,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxHtmlWindow::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__html_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__html_39(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxHtmlWindow::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[43]),sipPySelf,NULL,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxHtmlWindow::DoGetSize(width,height);
        return;
    }

    extern void sipVH__html_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__html_39(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxHtmlWindow::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,NULL,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxHtmlWindow::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__html_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__html_39(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxHtmlWindow::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[45],sipPySelf,NULL,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxHtmlWindow::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__html_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__html_38(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxHtmlWindow::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[46],sipPySelf,NULL,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxHtmlWindow::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__html_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__html_12(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxHtmlWindow::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxHtmlWindow::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__html_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__html_37(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

 ::wxSize sipwxHtmlWindow::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[48]),sipPySelf,NULL,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxHtmlWindow::DoGetBorderSize();

    extern  ::wxSize sipVH__html_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_33(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHtmlWindow::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[49],sipPySelf,NULL,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxHtmlWindow::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__html_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__html_36(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

void sipwxHtmlWindow::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[50],sipPySelf,NULL,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxHtmlWindow::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__html_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__html_35(sipGILState, 0, sipPySelf, sipMeth, variant);
}

 ::wxBorder sipwxHtmlWindow::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[51]),sipPySelf,NULL,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxHtmlWindow::GetDefaultBorder();

    extern  ::wxBorder sipVH__html_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_34(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxHtmlWindow::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[52]),sipPySelf,NULL,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxHtmlWindow::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__html_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHtmlWindow::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxHtmlWindow::DoFreeze();
        return;
    }

    extern void sipVH__html_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__html_20(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHtmlWindow::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxHtmlWindow::DoThaw();
        return;
    }

    extern void sipVH__html_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__html_20(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxHtmlWindow::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[55]),sipPySelf,NULL,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxHtmlWindow::DoGetBestSize();

    extern  ::wxSize sipVH__html_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_33(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxHtmlWindow::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[56]),sipPySelf,NULL,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxHtmlWindow::DoGetBestClientSize();

    extern  ::wxSize sipVH__html_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__html_33(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHtmlWindow::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

 ::wxSize sipwxHtmlWindow::sipProtectVirt_GetSizeAvailableForScrollTarget(bool sipSelfWasArg,const  ::wxSize& size)
{
    return (sipSelfWasArg ? wxScrolled<wxPanel>::GetSizeAvailableForScrollTarget(size) : GetSizeAvailableForScrollTarget(size));
}

bool sipwxHtmlWindow::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxHtmlWindow::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxHtmlWindow::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxHtmlWindow::DoEnable(enable) : DoEnable(enable));
}

void sipwxHtmlWindow::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxHtmlWindow::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxHtmlWindow::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxHtmlWindow::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxHtmlWindow::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxHtmlWindow::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxHtmlWindow::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxHtmlWindow::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxHtmlWindow::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxHtmlWindow::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxHtmlWindow::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxHtmlWindow::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxHtmlWindow::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxHtmlWindow::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxHtmlWindow::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxHtmlWindow::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxHtmlWindow::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxHtmlWindow::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxHtmlWindow::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxHtmlWindow::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxHtmlWindow::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxHtmlWindow::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxHtmlWindow::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxHtmlWindow::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxHtmlWindow::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxHtmlWindow::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxHtmlWindow::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxHtmlWindow::DoFreeze() : DoFreeze());
}

void sipwxHtmlWindow::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxHtmlWindow::DoThaw() : DoThaw());
}

bool sipwxHtmlWindow::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxHtmlWindow::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxHtmlWindow::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxHtmlWindow::TryBefore(event) : TryBefore(event));
}

bool sipwxHtmlWindow::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxHtmlWindow::TryAfter(event) : TryAfter(event));
}

bool sipwxHtmlWindow::sipProtectVirt_OnCellClicked(bool sipSelfWasArg, ::wxHtmlCell*cell, ::wxCoord x, ::wxCoord y,const  ::wxMouseEvent& event)
{
    return (sipSelfWasArg ?  ::wxHtmlWindow::OnCellClicked(cell,x,y,event) : OnCellClicked(cell,x,y,event));
}

void sipwxHtmlWindow::sipProtectVirt_OnCellMouseHover(bool sipSelfWasArg, ::wxHtmlCell*cell, ::wxCoord x, ::wxCoord y)
{
    (sipSelfWasArg ?  ::wxHtmlWindow::OnCellMouseHover(cell,x,y) : OnCellMouseHover(cell,x,y));
}


PyDoc_STRVAR(doc_wxHtmlWindow_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxHtmlWindow_SendDestroyEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipwxHtmlWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_SendDestroyEvent, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_GetSizeAvailableForScrollTarget, "GetSizeAvailableForScrollTarget(size) -> Size\n"
"\n"
"Function which must be overridden to implement the size available for\n"
"the scroll target for the given size of the main window.");

extern "C" {static PyObject *meth_wxHtmlWindow_GetSizeAvailableForScrollTarget(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_GetSizeAvailableForScrollTarget(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxSize* size;
        int sizeState = 0;
        sipwxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_size,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxSize, &size, &sizeState))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_GetSizeAvailableForScrollTarget(sipSelfWasArg,*size));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_GetSizeAvailableForScrollTarget, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_AppendToPage, "AppendToPage(source) -> bool\n"
"\n"
"Appends HTML fragment to currently displayed text and refreshes the\n"
"window.");

extern "C" {static PyObject *meth_wxHtmlWindow_AppendToPage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_AppendToPage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* source;
        int sourceState = 0;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_source,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxString,&source, &sourceState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendToPage(*source);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(source),sipType_wxString,sourceState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_AppendToPage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_GetInternalRepresentation, "GetInternalRepresentation() -> HtmlContainerCell\n"
"\n"
"Returns pointer to the top-level container.");

extern "C" {static PyObject *meth_wxHtmlWindow_GetInternalRepresentation(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_GetInternalRepresentation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
             ::wxHtmlContainerCell*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetInternalRepresentation();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxHtmlContainerCell,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_GetInternalRepresentation, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_GetOpenedAnchor, "GetOpenedAnchor() -> String\n"
"\n"
"Returns anchor within currently opened page (see\n"
"wxHtmlWindow::GetOpenedPage).");

extern "C" {static PyObject *meth_wxHtmlWindow_GetOpenedAnchor(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_GetOpenedAnchor(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetOpenedAnchor());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_GetOpenedAnchor, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_GetOpenedPage, "GetOpenedPage() -> String\n"
"\n"
"Returns full location of the opened page.");

extern "C" {static PyObject *meth_wxHtmlWindow_GetOpenedPage(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_GetOpenedPage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetOpenedPage());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_GetOpenedPage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_GetOpenedPageTitle, "GetOpenedPageTitle() -> String\n"
"\n"
"Returns title of the opened page or wxEmptyString if the current page\n"
"does not contain <TITLE> tag.");

extern "C" {static PyObject *meth_wxHtmlWindow_GetOpenedPageTitle(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_GetOpenedPageTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetOpenedPageTitle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_GetOpenedPageTitle, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_GetParser, "GetParser() -> HtmlWinParser\n"
"\n"
"Returns a pointer to the current parser.");

extern "C" {static PyObject *meth_wxHtmlWindow_GetParser(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_GetParser(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
             ::wxHtmlWinParser*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetParser();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxHtmlWinParser,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_GetParser, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_GetRelatedFrame, "GetRelatedFrame() -> wx.Frame\n"
"\n"
"Returns the related frame.");

extern "C" {static PyObject *meth_wxHtmlWindow_GetRelatedFrame(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_GetRelatedFrame(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
             ::wxFrame*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetRelatedFrame();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_GetRelatedFrame, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_HistoryBack, "HistoryBack() -> bool\n"
"\n"
"Moves back to the previous page.");

extern "C" {static PyObject *meth_wxHtmlWindow_HistoryBack(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_HistoryBack(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->HistoryBack();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_HistoryBack, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_HistoryCanBack, "HistoryCanBack() -> bool\n"
"\n"
"Returns true if it is possible to go back in the history i.e.");

extern "C" {static PyObject *meth_wxHtmlWindow_HistoryCanBack(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_HistoryCanBack(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->HistoryCanBack();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_HistoryCanBack, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_HistoryCanForward, "HistoryCanForward() -> bool\n"
"\n"
"Returns true if it is possible to go forward in the history i.e.");

extern "C" {static PyObject *meth_wxHtmlWindow_HistoryCanForward(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_HistoryCanForward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->HistoryCanForward();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_HistoryCanForward, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_HistoryClear, "HistoryClear()\n"
"\n"
"Clears history.");

extern "C" {static PyObject *meth_wxHtmlWindow_HistoryClear(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_HistoryClear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->HistoryClear();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_HistoryClear, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_HistoryForward, "HistoryForward() -> bool\n"
"\n"
"Moves to next page in history.");

extern "C" {static PyObject *meth_wxHtmlWindow_HistoryForward(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_HistoryForward(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->HistoryForward();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_HistoryForward, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_LoadFile, "LoadFile(filename) -> bool\n"
"\n"
"Loads an HTML page from a file and displays it.");

extern "C" {static PyObject *meth_wxHtmlWindow_LoadFile(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_LoadFile(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxFileName* filename;
        int filenameState = 0;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_filename,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxFileName,&filename, &filenameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->LoadFile(*filename);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxFileName *>(filename),sipType_wxFileName,filenameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_LoadFile, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_LoadPage, "LoadPage(location) -> bool\n"
"\n"
"Unlike SetPage() this function first loads the HTML page from location\n"
"and then displays it.");

extern "C" {static PyObject *meth_wxHtmlWindow_LoadPage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_LoadPage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* location;
        int locationState = 0;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_location,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxString,&location, &locationState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->LoadPage(*location);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(location),sipType_wxString,locationState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_LoadPage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_OnLinkClicked, "OnLinkClicked(link)\n"
"\n"
"Called when user clicks on hypertext link.");

extern "C" {static PyObject *meth_wxHtmlWindow_OnLinkClicked(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_OnLinkClicked(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHtmlLinkInfo* link;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_link,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxHtmlLinkInfo, &link))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::OnLinkClicked(*link) : sipCpp->OnLinkClicked(*link));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_OnLinkClicked, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_OnOpeningURL, "OnOpeningURL(type, url, redirect) -> HtmlOpeningStatus\n"
"\n"
"Called when an URL is being opened (either when the user clicks on a\n"
"link or an image is loaded).");

extern "C" {static PyObject *meth_wxHtmlWindow_OnOpeningURL(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_OnOpeningURL(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHtmlURLType type;
        const  ::wxString* url;
        int urlState = 0;
         ::wxString* redirect;
        int redirectState = 0;
        const  ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_type,
            sipName_url,
            sipName_redirect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ1J0", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxHtmlURLType, &type, sipType_wxString,&url, &urlState, sipType_wxString,&redirect, &redirectState))
        {
             ::wxHtmlOpeningStatus sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::OnOpeningURL(type,*url,redirect) : sipCpp->OnOpeningURL(type,*url,redirect));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(url),sipType_wxString,urlState);
            sipReleaseType(redirect,sipType_wxString,redirectState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxHtmlOpeningStatus);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_OnOpeningURL, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_OnSetTitle, "OnSetTitle(title)\n"
"\n"
"Called on parsing <TITLE> tag.");

extern "C" {static PyObject *meth_wxHtmlWindow_OnSetTitle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_OnSetTitle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* title;
        int titleState = 0;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_title,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxString,&title, &titleState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::OnSetTitle(*title) : sipCpp->OnSetTitle(*title));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(title),sipType_wxString,titleState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_OnSetTitle, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_ReadCustomization, "ReadCustomization(cfg, path=wx.EmptyString)\n"
"\n"
"This reads custom settings from wxConfig.");

extern "C" {static PyObject *meth_wxHtmlWindow_ReadCustomization(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_ReadCustomization(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxConfigBase* cfg;
         ::wxString pathdef = wxEmptyString;
         ::wxString* path = &pathdef;
        int pathState = 0;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_cfg,
            sipName_path,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|J1", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxConfigBase, &cfg, sipType_wxString,&path, &pathState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ReadCustomization(cfg,*path);
            Py_END_ALLOW_THREADS
            sipReleaseType(path,sipType_wxString,pathState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_ReadCustomization, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_SelectAll, "SelectAll()\n"
"\n"
"Selects all text in the window.");

extern "C" {static PyObject *meth_wxHtmlWindow_SelectAll(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_SelectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SelectAll();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_SelectAll, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_SelectLine, "SelectLine(pos)\n"
"\n"
"Selects the line of text that pos points at.");

extern "C" {static PyObject *meth_wxHtmlWindow_SelectLine(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_SelectLine(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPoint* pos;
        int posState = 0;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxPoint, &pos, &posState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SelectLine(*pos);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_SelectLine, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_SelectWord, "SelectWord(pos)\n"
"\n"
"Selects the word at position pos.");

extern "C" {static PyObject *meth_wxHtmlWindow_SelectWord(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_SelectWord(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPoint* pos;
        int posState = 0;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxPoint, &pos, &posState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SelectWord(*pos);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_SelectWord, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_SelectionToText, "SelectionToText() -> String\n"
"\n"
"Returns the current selection as plain text.");

extern "C" {static PyObject *meth_wxHtmlWindow_SelectionToText(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_SelectionToText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->SelectionToText());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_SelectionToText, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_SetBorders, "SetBorders(b)\n"
"\n"
"This function sets the space between border of window and HTML\n"
"contents.");

extern "C" {static PyObject *meth_wxHtmlWindow_SetBorders(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_SetBorders(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int b;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_b,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxHtmlWindow, &sipCpp, &b))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBorders(b);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_SetBorders, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_SetFonts, "SetFonts(normal_face, fixed_face, sizes)\n"
"\n"
"This function sets font sizes and faces.");

extern "C" {static PyObject *meth_wxHtmlWindow_SetFonts(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_SetFonts(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* normal_face;
        int normal_faceState = 0;
        const  ::wxString* fixed_face;
        int fixed_faceState = 0;
        const  ::wxArrayInt* sizes;
        int sizesState = 0;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_normal_face,
            sipName_fixed_face,
            sipName_sizes,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1J1", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxString,&normal_face, &normal_faceState, sipType_wxString,&fixed_face, &fixed_faceState, sipType_wxArrayInt,&sizes, &sizesState))
        {
            int sipIsErr = 0;

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxHtmlWindow_SetFonts(sipCpp, normal_face, fixed_face, sizes);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
            sipReleaseType(const_cast< ::wxString *>(normal_face),sipType_wxString,normal_faceState);
            sipReleaseType(const_cast< ::wxString *>(fixed_face),sipType_wxString,fixed_faceState);
            sipReleaseType(const_cast< ::wxArrayInt *>(sizes),sipType_wxArrayInt,sizesState);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_SetFonts, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_SetStandardFonts, "SetStandardFonts(size=-1, normal_face=wx.EmptyString, fixed_face=wx.EmptyString)\n"
"\n"
"Sets default font sizes and/or default font size.");

extern "C" {static PyObject *meth_wxHtmlWindow_SetStandardFonts(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_SetStandardFonts(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int size = -1;
        const  ::wxString& normal_facedef = wxEmptyString;
        const  ::wxString* normal_face = &normal_facedef;
        int normal_faceState = 0;
        const  ::wxString& fixed_facedef = wxEmptyString;
        const  ::wxString* fixed_face = &fixed_facedef;
        int fixed_faceState = 0;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_size,
            sipName_normal_face,
            sipName_fixed_face,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|iJ1J1", &sipSelf, sipType_wxHtmlWindow, &sipCpp, &size, sipType_wxString,&normal_face, &normal_faceState, sipType_wxString,&fixed_face, &fixed_faceState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetStandardFonts(size,*normal_face,*fixed_face);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(normal_face),sipType_wxString,normal_faceState);
            sipReleaseType(const_cast< ::wxString *>(fixed_face),sipType_wxString,fixed_faceState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_SetStandardFonts, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_SetPage, "SetPage(source) -> bool\n"
"\n"
"Sets the source of a page and displays it, for example:");

extern "C" {static PyObject *meth_wxHtmlWindow_SetPage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_SetPage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* source;
        int sourceState = 0;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_source,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxString,&source, &sourceState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetPage(*source);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(source),sipType_wxString,sourceState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_SetPage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_SetRelatedFrame, "SetRelatedFrame(frame, format)\n"
"\n"
"Sets the frame in which page title will be displayed.");

extern "C" {static PyObject *meth_wxHtmlWindow_SetRelatedFrame(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_SetRelatedFrame(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxFrame* frame;
        const  ::wxString* format;
        int formatState = 0;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_frame,
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J1", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxFrame, &frame, sipType_wxString,&format, &formatState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetRelatedFrame(frame,*format);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(format),sipType_wxString,formatState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_SetRelatedFrame, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_SetRelatedStatusBar, "SetRelatedStatusBar(index)\n"
"SetRelatedStatusBar(statusbar, index=0)\n"
"\n"
"After calling SetRelatedFrame(), this sets statusbar slot where\n"
"messages will be displayed.\n"
"");

extern "C" {static PyObject *meth_wxHtmlWindow_SetRelatedStatusBar(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_SetRelatedStatusBar(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int index;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_index,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxHtmlWindow, &sipCpp, &index))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetRelatedStatusBar(index);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::wxStatusBar* statusbar;
        int index = 0;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_statusbar,
            sipName_index,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|i", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxStatusBar, &statusbar, &index))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetRelatedStatusBar(statusbar,index);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_SetRelatedStatusBar, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_ToText, "ToText() -> String\n"
"\n"
"Returns content of currently displayed page as plain text.");

extern "C" {static PyObject *meth_wxHtmlWindow_ToText(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_ToText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->ToText());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_ToText, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_WriteCustomization, "WriteCustomization(cfg, path=wx.EmptyString)\n"
"\n"
"Saves custom settings into wxConfig.");

extern "C" {static PyObject *meth_wxHtmlWindow_WriteCustomization(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_WriteCustomization(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxConfigBase* cfg;
         ::wxString pathdef = wxEmptyString;
         ::wxString* path = &pathdef;
        int pathState = 0;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_cfg,
            sipName_path,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|J1", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxConfigBase, &cfg, sipType_wxString,&path, &pathState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->WriteCustomization(cfg,*path);
            Py_END_ALLOW_THREADS
            sipReleaseType(path,sipType_wxString,pathState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_WriteCustomization, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_AddFilter, "AddFilter(filter)\n"
"\n"
"Adds input filter to the static list of available filters.");

extern "C" {static PyObject *meth_wxHtmlWindow_AddFilter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_AddFilter(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxHtmlFilter* filter;

        static const char *sipKwdList[] = {
            sipName_filter,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J:", sipType_wxHtmlFilter, &filter))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxHtmlWindow::AddFilter(filter);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_AddFilter, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxHtmlWindow_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_GetClientAreaOrigin, doc_wxHtmlWindow_GetClientAreaOrigin);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxHtmlWindow_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_Validate, doc_wxHtmlWindow_Validate);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxHtmlWindow_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_TransferDataToWindow, doc_wxHtmlWindow_TransferDataToWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxHtmlWindow_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_TransferDataFromWindow, doc_wxHtmlWindow_TransferDataFromWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxHtmlWindow_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_InitDialog, doc_wxHtmlWindow_InitDialog);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxHtmlWindow_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_AcceptsFocus, doc_wxHtmlWindow_AcceptsFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxHtmlWindow_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_AcceptsFocusRecursively, doc_wxHtmlWindow_AcceptsFocusRecursively);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxHtmlWindow_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_AcceptsFocusFromKeyboard, doc_wxHtmlWindow_AcceptsFocusFromKeyboard);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxHtmlWindow_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_AddChild, doc_wxHtmlWindow_AddChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxHtmlWindow_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_RemoveChild, doc_wxHtmlWindow_RemoveChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxHtmlWindow_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_InheritAttributes, doc_wxHtmlWindow_InheritAttributes);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxHtmlWindow_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_ShouldInheritColours, doc_wxHtmlWindow_ShouldInheritColours);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxHtmlWindow_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_OnInternalIdle, doc_wxHtmlWindow_OnInternalIdle);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxHtmlWindow_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_GetMainWindowOfCompositeControl, doc_wxHtmlWindow_GetMainWindowOfCompositeControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxHtmlWindow_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biii", &sipSelf, sipType_wxHtmlWindow, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_InformFirstDirection, doc_wxHtmlWindow_InformFirstDirection);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxHtmlWindow_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxHtmlWindow, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_SetCanFocus, doc_wxHtmlWindow_SetCanFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxHtmlWindow_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_Destroy, doc_wxHtmlWindow_Destroy);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxHtmlWindow_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_SetValidator, doc_wxHtmlWindow_SetValidator);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxHtmlWindow_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_GetValidator, doc_wxHtmlWindow_GetValidator);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxHtmlWindow_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_ProcessEvent, doc_wxHtmlWindow_ProcessEvent);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxHtmlWindow_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxHtmlWindow, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_DoEnable, doc_wxHtmlWindow_DoEnable);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxHtmlWindow_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxHtmlWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_DoGetPosition, doc_wxHtmlWindow_DoGetPosition);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxHtmlWindow_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxHtmlWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_DoGetSize, doc_wxHtmlWindow_DoGetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxHtmlWindow_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxHtmlWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_DoGetClientSize, doc_wxHtmlWindow_DoGetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxHtmlWindow_DoGetBestSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxHtmlWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_DoGetBestSize, doc_wxHtmlWindow_DoGetBestSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxHtmlWindow_DoGetBestClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxHtmlWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_DoGetBestClientSize, doc_wxHtmlWindow_DoGetBestClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxHtmlWindow_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiii", &sipSelf, sipType_wxHtmlWindow, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_DoSetSize, doc_wxHtmlWindow_DoSetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxHtmlWindow_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxHtmlWindow, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_DoSetClientSize, doc_wxHtmlWindow_DoSetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxHtmlWindow_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiiii", &sipSelf, sipType_wxHtmlWindow, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_DoSetSizeHints, doc_wxHtmlWindow_DoSetSizeHints);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxHtmlWindow_DoGetBorderSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxHtmlWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_DoGetBorderSize, doc_wxHtmlWindow_DoGetBorderSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxHtmlWindow_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiii", &sipSelf, sipType_wxHtmlWindow, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_DoMoveWindow, doc_wxHtmlWindow_DoMoveWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxHtmlWindow_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_DoSetWindowVariant, doc_wxHtmlWindow_DoSetWindowVariant);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxHtmlWindow_GetDefaultBorder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxHtmlWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_GetDefaultBorder, doc_wxHtmlWindow_GetDefaultBorder);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxHtmlWindow_GetDefaultBorderForControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxHtmlWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_GetDefaultBorderForControl, doc_wxHtmlWindow_GetDefaultBorderForControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxHtmlWindow_DoFreeze(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_DoFreeze(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxHtmlWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_DoFreeze, doc_wxHtmlWindow_DoFreeze);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxHtmlWindow_DoThaw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_DoThaw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxHtmlWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_DoThaw, doc_wxHtmlWindow_DoThaw);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxHtmlWindow_HasTransparentBackground(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxHtmlWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_HasTransparentBackground, doc_wxHtmlWindow_HasTransparentBackground);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxHtmlWindow_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_TryBefore, doc_wxHtmlWindow_TryBefore);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxHtmlWindow_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_TryAfter, doc_wxHtmlWindow_TryAfter);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant: WindowVariant = wxWINDOW_VARIANT_NORMAL) -> VisualAttributes");

extern "C" {static PyObject *meth_wxHtmlWindow_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxHtmlWindow::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_GetClassDefaultAttributes, doc_wxHtmlWindow_GetClassDefaultAttributes);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_SetHTMLWindowTitle, "SetHTMLWindowTitle(self, title: object)");

extern "C" {static PyObject *meth_wxHtmlWindow_SetHTMLWindowTitle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_SetHTMLWindowTitle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* title;
        int titleState = 0;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_title,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxString,&title, &titleState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::SetHTMLWindowTitle(*title) : sipCpp->SetHTMLWindowTitle(*title));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(title),sipType_wxString,titleState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_SetHTMLWindowTitle, doc_wxHtmlWindow_SetHTMLWindowTitle);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_OnHTMLLinkClicked, "OnHTMLLinkClicked(self, link: HtmlLinkInfo)");

extern "C" {static PyObject *meth_wxHtmlWindow_OnHTMLLinkClicked(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_OnHTMLLinkClicked(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHtmlLinkInfo* link;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_link,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxHtmlLinkInfo, &link))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::OnHTMLLinkClicked(*link) : sipCpp->OnHTMLLinkClicked(*link));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_OnHTMLLinkClicked, doc_wxHtmlWindow_OnHTMLLinkClicked);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_OnHTMLOpeningURL, "OnHTMLOpeningURL(self, type: HtmlURLType, url: object) -> Tuple[HtmlOpeningStatus, object]");

extern "C" {static PyObject *meth_wxHtmlWindow_OnHTMLOpeningURL(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_OnHTMLOpeningURL(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHtmlURLType type;
        const  ::wxString* url;
        int urlState = 0;
         ::wxString* redirectTo;
        const  ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_type,
            sipName_url,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ1", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxHtmlURLType, &type, sipType_wxString,&url, &urlState))
        {
             ::wxHtmlOpeningStatus sipRes;
            redirectTo = new  ::wxString();

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::OnHTMLOpeningURL(type,*url,redirectTo) : sipCpp->OnHTMLOpeningURL(type,*url,redirectTo));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(url),sipType_wxString,urlState);

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(FN)",sipRes,sipType_wxHtmlOpeningStatus,redirectTo,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_OnHTMLOpeningURL, doc_wxHtmlWindow_OnHTMLOpeningURL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_HTMLCoordsToWindow, "HTMLCoordsToWindow(self, cell: HtmlCell, pos: Point) -> Point");

extern "C" {static PyObject *meth_wxHtmlWindow_HTMLCoordsToWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_HTMLCoordsToWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHtmlCell* cell;
        const  ::wxPoint* pos;
        int posState = 0;
        const  ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_cell,
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J1", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxHtmlCell, &cell, sipType_wxPoint, &pos, &posState))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::HTMLCoordsToWindow(cell,*pos) : sipCpp->HTMLCoordsToWindow(cell,*pos)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_HTMLCoordsToWindow, doc_wxHtmlWindow_HTMLCoordsToWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_GetHTMLWindow, "GetHTMLWindow(self) -> Window");

extern "C" {static PyObject *meth_wxHtmlWindow_GetHTMLWindow(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_GetHTMLWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::GetHTMLWindow() : sipCpp->GetHTMLWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_GetHTMLWindow, doc_wxHtmlWindow_GetHTMLWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_GetHTMLBackgroundColour, "GetHTMLBackgroundColour(self) -> Colour");

extern "C" {static PyObject *meth_wxHtmlWindow_GetHTMLBackgroundColour(PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_GetHTMLBackgroundColour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHtmlWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHtmlWindow, &sipCpp))
        {
             ::wxColour*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxColour((sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::GetHTMLBackgroundColour() : sipCpp->GetHTMLBackgroundColour()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxColour,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_GetHTMLBackgroundColour, doc_wxHtmlWindow_GetHTMLBackgroundColour);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_SetHTMLBackgroundColour, "SetHTMLBackgroundColour(self, clr: Colour)");

extern "C" {static PyObject *meth_wxHtmlWindow_SetHTMLBackgroundColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_SetHTMLBackgroundColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxColour* clr;
        int clrState = 0;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_clr,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxColour, &clr, &clrState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::SetHTMLBackgroundColour(*clr) : sipCpp->SetHTMLBackgroundColour(*clr));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(clr),sipType_wxColour,clrState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_SetHTMLBackgroundColour, doc_wxHtmlWindow_SetHTMLBackgroundColour);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_SetHTMLBackgroundImage, "SetHTMLBackgroundImage(self, bmpBg: Bitmap)");

extern "C" {static PyObject *meth_wxHtmlWindow_SetHTMLBackgroundImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_SetHTMLBackgroundImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxBitmap* bmpBg;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_bmpBg,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxBitmap, &bmpBg))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::SetHTMLBackgroundImage(*bmpBg) : sipCpp->SetHTMLBackgroundImage(*bmpBg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_SetHTMLBackgroundImage, doc_wxHtmlWindow_SetHTMLBackgroundImage);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_SetHTMLStatusText, "SetHTMLStatusText(self, text: object)");

extern "C" {static PyObject *meth_wxHtmlWindow_SetHTMLStatusText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_SetHTMLStatusText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* text;
        int textState = 0;
         ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_text,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxString,&text, &textState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::SetHTMLStatusText(*text) : sipCpp->SetHTMLStatusText(*text));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_SetHTMLStatusText, doc_wxHtmlWindow_SetHTMLStatusText);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_GetHTMLCursor, "GetHTMLCursor(self, type: HtmlWindowInterface.HTMLCursor) -> Cursor");

extern "C" {static PyObject *meth_wxHtmlWindow_GetHTMLCursor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_GetHTMLCursor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHtmlWindowInterface::HTMLCursor type;
        const  ::wxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxHtmlWindowInterface_HTMLCursor, &type))
        {
             ::wxCursor*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxCursor((sipSelfWasArg ? sipCpp-> ::wxHtmlWindow::GetHTMLCursor(type) : sipCpp->GetHTMLCursor(type)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxCursor,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_GetHTMLCursor, doc_wxHtmlWindow_GetHTMLCursor);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_OnCellClicked, "OnCellClicked(cell, x, y, event) -> bool\n"
"\n"
"This method is called when a mouse button is clicked inside\n"
"wxHtmlWindow.");

extern "C" {static PyObject *meth_wxHtmlWindow_OnCellClicked(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_OnCellClicked(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHtmlCell* cell;
         ::wxCoord x;
         ::wxCoord y;
        const  ::wxMouseEvent* event;
        sipwxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_cell,
            sipName_x,
            sipName_y,
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8iiJ9", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxHtmlCell, &cell, &x, &y, sipType_wxMouseEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_OnCellClicked(sipSelfWasArg,cell,x,y,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_OnCellClicked, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHtmlWindow_OnCellMouseHover, "OnCellMouseHover(cell, x, y)\n"
"\n"
"This method is called when a mouse moves over an HTML cell.");

extern "C" {static PyObject *meth_wxHtmlWindow_OnCellMouseHover(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHtmlWindow_OnCellMouseHover(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxHtmlCell* cell;
         ::wxCoord x;
         ::wxCoord y;
        sipwxHtmlWindow *sipCpp;

        static const char *sipKwdList[] = {
            sipName_cell,
            sipName_x,
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8ii", &sipSelf, sipType_wxHtmlWindow, &sipCpp, sipType_wxHtmlCell, &cell, &x, &y))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_OnCellMouseHover(sipSelfWasArg,cell,x,y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HtmlWindow, sipName_OnCellMouseHover, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxHtmlWindow(void *, const sipTypeDef *);}
static void *cast_wxHtmlWindow(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxHtmlWindow *sipCpp = reinterpret_cast< ::wxHtmlWindow *>(sipCppV);

    if (targetType == sipType_wxScrolledWindow)
        return static_cast< ::wxScrolledWindow *>(sipCpp);

    if (targetType == sipType__ScrolledWindowBase)
        return static_cast<wxScrolled<wxPanel> *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    if (targetType == sipType_wxHtmlWindowInterface)
        return static_cast< ::wxHtmlWindowInterface *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxHtmlWindow(void *, int);}
static void release_wxHtmlWindow(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxHtmlWindow *>(sipCppV);
    else
        delete reinterpret_cast< ::wxHtmlWindow *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxHtmlWindow(sipSimpleWrapper *);}
static void dealloc_wxHtmlWindow(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxHtmlWindow *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxHtmlWindow(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxHtmlWindow(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxHtmlWindow(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxHtmlWindow *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxHtmlWindow();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxHW_DEFAULT_STYLE;
        const  ::wxString& namedef = "htmlWindow";
        const  ::wxString* name = &namedef;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J1lJ1", sipType_wxWindow, &parent, sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxString,&name, &nameState))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxHtmlWindow(parent,id,*pos,*size,style,*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxHtmlWindow[] = {{35, 0, 0}, {37, 255, 1}};


static PyMethodDef methods_wxHtmlWindow[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxHtmlWindow_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxHtmlWindow_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxHtmlWindow_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_AddChild), (PyCFunction)meth_wxHtmlWindow_AddChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_AddChild)},
    {SIP_MLNAME_CAST(sipName_AddFilter), (PyCFunction)meth_wxHtmlWindow_AddFilter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_AddFilter)},
    {SIP_MLNAME_CAST(sipName_AppendToPage), (PyCFunction)meth_wxHtmlWindow_AppendToPage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_AppendToPage)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxHtmlWindow_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_Destroy)},
    {SIP_MLNAME_CAST(sipName_DoEnable), (PyCFunction)meth_wxHtmlWindow_DoEnable, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), (PyCFunction)meth_wxHtmlWindow_DoFreeze, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), (PyCFunction)meth_wxHtmlWindow_DoGetBestClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), (PyCFunction)meth_wxHtmlWindow_DoGetBestSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), (PyCFunction)meth_wxHtmlWindow_DoGetBorderSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), (PyCFunction)meth_wxHtmlWindow_DoGetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), (PyCFunction)meth_wxHtmlWindow_DoGetPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), (PyCFunction)meth_wxHtmlWindow_DoGetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), (PyCFunction)meth_wxHtmlWindow_DoMoveWindow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), (PyCFunction)meth_wxHtmlWindow_DoSetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), (PyCFunction)meth_wxHtmlWindow_DoSetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), (PyCFunction)meth_wxHtmlWindow_DoSetSizeHints, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), (PyCFunction)meth_wxHtmlWindow_DoSetWindowVariant, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoThaw), (PyCFunction)meth_wxHtmlWindow_DoThaw, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_DoThaw)},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), (PyCFunction)meth_wxHtmlWindow_GetClassDefaultAttributes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxHtmlWindow_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), (PyCFunction)meth_wxHtmlWindow_GetDefaultBorder, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), (PyCFunction)meth_wxHtmlWindow_GetDefaultBorderForControl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetHTMLBackgroundColour), meth_wxHtmlWindow_GetHTMLBackgroundColour, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_GetHTMLBackgroundColour)},
    {SIP_MLNAME_CAST(sipName_GetHTMLCursor), (PyCFunction)meth_wxHtmlWindow_GetHTMLCursor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_GetHTMLCursor)},
    {SIP_MLNAME_CAST(sipName_GetHTMLWindow), meth_wxHtmlWindow_GetHTMLWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_GetHTMLWindow)},
    {SIP_MLNAME_CAST(sipName_GetInternalRepresentation), meth_wxHtmlWindow_GetInternalRepresentation, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_GetInternalRepresentation)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxHtmlWindow_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetOpenedAnchor), meth_wxHtmlWindow_GetOpenedAnchor, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_GetOpenedAnchor)},
    {SIP_MLNAME_CAST(sipName_GetOpenedPage), meth_wxHtmlWindow_GetOpenedPage, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_GetOpenedPage)},
    {SIP_MLNAME_CAST(sipName_GetOpenedPageTitle), meth_wxHtmlWindow_GetOpenedPageTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_GetOpenedPageTitle)},
    {SIP_MLNAME_CAST(sipName_GetParser), meth_wxHtmlWindow_GetParser, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_GetParser)},
    {SIP_MLNAME_CAST(sipName_GetRelatedFrame), meth_wxHtmlWindow_GetRelatedFrame, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_GetRelatedFrame)},
    {SIP_MLNAME_CAST(sipName_GetSizeAvailableForScrollTarget), (PyCFunction)meth_wxHtmlWindow_GetSizeAvailableForScrollTarget, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxHtmlWindow_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_GetValidator)},
    {SIP_MLNAME_CAST(sipName_HTMLCoordsToWindow), (PyCFunction)meth_wxHtmlWindow_HTMLCoordsToWindow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_HTMLCoordsToWindow)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), (PyCFunction)meth_wxHtmlWindow_HasTransparentBackground, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_HistoryBack), meth_wxHtmlWindow_HistoryBack, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_HistoryBack)},
    {SIP_MLNAME_CAST(sipName_HistoryCanBack), meth_wxHtmlWindow_HistoryCanBack, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_HistoryCanBack)},
    {SIP_MLNAME_CAST(sipName_HistoryCanForward), meth_wxHtmlWindow_HistoryCanForward, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_HistoryCanForward)},
    {SIP_MLNAME_CAST(sipName_HistoryClear), meth_wxHtmlWindow_HistoryClear, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_HistoryClear)},
    {SIP_MLNAME_CAST(sipName_HistoryForward), meth_wxHtmlWindow_HistoryForward, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_HistoryForward)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), (PyCFunction)meth_wxHtmlWindow_InformFirstDirection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxHtmlWindow_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxHtmlWindow_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_InitDialog)},
    {SIP_MLNAME_CAST(sipName_LoadFile), (PyCFunction)meth_wxHtmlWindow_LoadFile, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_LoadFile)},
    {SIP_MLNAME_CAST(sipName_LoadPage), (PyCFunction)meth_wxHtmlWindow_LoadPage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_LoadPage)},
    {SIP_MLNAME_CAST(sipName_OnCellClicked), (PyCFunction)meth_wxHtmlWindow_OnCellClicked, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_OnCellClicked)},
    {SIP_MLNAME_CAST(sipName_OnCellMouseHover), (PyCFunction)meth_wxHtmlWindow_OnCellMouseHover, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_OnCellMouseHover)},
    {SIP_MLNAME_CAST(sipName_OnHTMLLinkClicked), (PyCFunction)meth_wxHtmlWindow_OnHTMLLinkClicked, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_OnHTMLLinkClicked)},
    {SIP_MLNAME_CAST(sipName_OnHTMLOpeningURL), (PyCFunction)meth_wxHtmlWindow_OnHTMLOpeningURL, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_OnHTMLOpeningURL)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxHtmlWindow_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_OnLinkClicked), (PyCFunction)meth_wxHtmlWindow_OnLinkClicked, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_OnLinkClicked)},
    {SIP_MLNAME_CAST(sipName_OnOpeningURL), (PyCFunction)meth_wxHtmlWindow_OnOpeningURL, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_OnOpeningURL)},
    {SIP_MLNAME_CAST(sipName_OnSetTitle), (PyCFunction)meth_wxHtmlWindow_OnSetTitle, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_OnSetTitle)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), (PyCFunction)meth_wxHtmlWindow_ProcessEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_ReadCustomization), (PyCFunction)meth_wxHtmlWindow_ReadCustomization, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_ReadCustomization)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), (PyCFunction)meth_wxHtmlWindow_RemoveChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_SelectAll), meth_wxHtmlWindow_SelectAll, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_SelectAll)},
    {SIP_MLNAME_CAST(sipName_SelectLine), (PyCFunction)meth_wxHtmlWindow_SelectLine, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_SelectLine)},
    {SIP_MLNAME_CAST(sipName_SelectWord), (PyCFunction)meth_wxHtmlWindow_SelectWord, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_SelectWord)},
    {SIP_MLNAME_CAST(sipName_SelectionToText), meth_wxHtmlWindow_SelectionToText, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_SelectionToText)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), (PyCFunction)meth_wxHtmlWindow_SendDestroyEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_SetBorders), (PyCFunction)meth_wxHtmlWindow_SetBorders, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_SetBorders)},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), (PyCFunction)meth_wxHtmlWindow_SetCanFocus, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetFonts), (PyCFunction)meth_wxHtmlWindow_SetFonts, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_SetFonts)},
    {SIP_MLNAME_CAST(sipName_SetHTMLBackgroundColour), (PyCFunction)meth_wxHtmlWindow_SetHTMLBackgroundColour, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_SetHTMLBackgroundColour)},
    {SIP_MLNAME_CAST(sipName_SetHTMLBackgroundImage), (PyCFunction)meth_wxHtmlWindow_SetHTMLBackgroundImage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_SetHTMLBackgroundImage)},
    {SIP_MLNAME_CAST(sipName_SetHTMLStatusText), (PyCFunction)meth_wxHtmlWindow_SetHTMLStatusText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_SetHTMLStatusText)},
    {SIP_MLNAME_CAST(sipName_SetHTMLWindowTitle), (PyCFunction)meth_wxHtmlWindow_SetHTMLWindowTitle, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_SetHTMLWindowTitle)},
    {SIP_MLNAME_CAST(sipName_SetPage), (PyCFunction)meth_wxHtmlWindow_SetPage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_SetPage)},
    {SIP_MLNAME_CAST(sipName_SetRelatedFrame), (PyCFunction)meth_wxHtmlWindow_SetRelatedFrame, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_SetRelatedFrame)},
    {SIP_MLNAME_CAST(sipName_SetRelatedStatusBar), (PyCFunction)meth_wxHtmlWindow_SetRelatedStatusBar, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_SetRelatedStatusBar)},
    {SIP_MLNAME_CAST(sipName_SetStandardFonts), (PyCFunction)meth_wxHtmlWindow_SetStandardFonts, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_SetStandardFonts)},
    {SIP_MLNAME_CAST(sipName_SetValidator), (PyCFunction)meth_wxHtmlWindow_SetValidator, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_SetValidator)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxHtmlWindow_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_ToText), meth_wxHtmlWindow_ToText, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_ToText)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxHtmlWindow_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxHtmlWindow_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), (PyCFunction)meth_wxHtmlWindow_TryAfter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), (PyCFunction)meth_wxHtmlWindow_TryBefore, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_TryBefore)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxHtmlWindow_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHtmlWindow_Validate)},
    {SIP_MLNAME_CAST(sipName_WriteCustomization), (PyCFunction)meth_wxHtmlWindow_WriteCustomization, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHtmlWindow_WriteCustomization)}
};

sipVariableDef variables_wxHtmlWindow[] = {
    {PropertyVariable, sipName_RelatedFrame, &methods_wxHtmlWindow[34], &methods_wxHtmlWindow[73], NULL, NULL},
    {PropertyVariable, sipName_Parser, &methods_wxHtmlWindow[33], NULL, NULL, NULL},
    {PropertyVariable, sipName_OpenedPageTitle, &methods_wxHtmlWindow[32], NULL, NULL, NULL},
    {PropertyVariable, sipName_OpenedPage, &methods_wxHtmlWindow[31], NULL, NULL, NULL},
    {PropertyVariable, sipName_OpenedAnchor, &methods_wxHtmlWindow[30], NULL, NULL, NULL},
    {PropertyVariable, sipName_InternalRepresentation, &methods_wxHtmlWindow[28], NULL, NULL, NULL},
};

PyDoc_STRVAR(doc_wxHtmlWindow, "HtmlWindow()\n"
"HtmlWindow(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=HW_DEFAULT_STYLE, name=\"htmlWindow\")\n"
"\n"
"wxHtmlWindow is probably the only class you will directly use unless\n"
"you want to do something special (like adding new tag handlers or MIME\n"
"filters).");


sipClassTypeDef sipTypeDef__html_wxHtmlWindow = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxHtmlWindow,
        {0},
        0
    },
    {
        sipNameNr_HtmlWindow,
        {0, 0, 1},
        85, methods_wxHtmlWindow,
        0, 0,
        6, variables_wxHtmlWindow,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxHtmlWindow,
    -1,
    -1,
    supers_wxHtmlWindow,
    0,
    init_type_wxHtmlWindow,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxHtmlWindow,
    0,
    0,
    0,
    release_wxHtmlWindow,
    cast_wxHtmlWindow,
    0,
    0,
    0,
    0,
    0,
    0
};
