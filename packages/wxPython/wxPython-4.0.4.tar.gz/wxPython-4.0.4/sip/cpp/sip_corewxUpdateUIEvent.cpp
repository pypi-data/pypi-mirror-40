/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/event.h>

        #include <wx/event.h>
        #include <wx/window.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxUpdateUIEvent : public  ::wxUpdateUIEvent
{
public:
    sipwxUpdateUIEvent( ::wxWindowID);
    sipwxUpdateUIEvent(const  ::wxUpdateUIEvent&);
    virtual ~sipwxUpdateUIEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxEventCategory GetEventCategory() const;
     ::wxEvent* Clone() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxUpdateUIEvent(const sipwxUpdateUIEvent &);
    sipwxUpdateUIEvent &operator = (const sipwxUpdateUIEvent &);

    char sipPyMethods[2];
};

sipwxUpdateUIEvent::sipwxUpdateUIEvent( ::wxWindowID commandId):  ::wxUpdateUIEvent(commandId), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxUpdateUIEvent::sipwxUpdateUIEvent(const  ::wxUpdateUIEvent& a0):  ::wxUpdateUIEvent(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxUpdateUIEvent::~sipwxUpdateUIEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxEventCategory sipwxUpdateUIEvent::GetEventCategory() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_GetEventCategory);

    if (!sipMeth)
        return  ::wxUpdateUIEvent::GetEventCategory();

    extern  ::wxEventCategory sipVH__core_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_96(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxEvent* sipwxUpdateUIEvent::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_Clone);

    if (!sipMeth)
        return  ::wxUpdateUIEvent::Clone();

    extern  ::wxEvent* sipVH__core_95(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_95(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_Check, "Check(check)\n"
"\n"
"Check or uncheck the UI element.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_Check(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_Check(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool check;
         ::wxUpdateUIEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_check,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp, &check))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Check(check);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_Check, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_Enable, "Enable(enable)\n"
"\n"
"Enable or disable the UI element.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_Enable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_Enable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool enable;
         ::wxUpdateUIEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Enable(enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_Enable, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_GetChecked, "GetChecked() -> bool\n"
"\n"
"Returns true if the UI element should be checked.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_GetChecked(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_GetChecked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxUpdateUIEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetChecked();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_GetChecked, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_GetEnabled, "GetEnabled() -> bool\n"
"\n"
"Returns true if the UI element should be enabled.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_GetEnabled(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_GetEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxUpdateUIEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetEnabled();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_GetEnabled, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_GetSetChecked, "GetSetChecked() -> bool\n"
"\n"
"Returns true if the application has called Check().");

extern "C" {static PyObject *meth_wxUpdateUIEvent_GetSetChecked(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_GetSetChecked(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxUpdateUIEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSetChecked();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_GetSetChecked, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_GetSetEnabled, "GetSetEnabled() -> bool\n"
"\n"
"Returns true if the application has called Enable().");

extern "C" {static PyObject *meth_wxUpdateUIEvent_GetSetEnabled(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_GetSetEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxUpdateUIEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSetEnabled();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_GetSetEnabled, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_GetSetShown, "GetSetShown() -> bool\n"
"\n"
"Returns true if the application has called Show().");

extern "C" {static PyObject *meth_wxUpdateUIEvent_GetSetShown(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_GetSetShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxUpdateUIEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSetShown();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_GetSetShown, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_GetSetText, "GetSetText() -> bool\n"
"\n"
"Returns true if the application has called SetText().");

extern "C" {static PyObject *meth_wxUpdateUIEvent_GetSetText(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_GetSetText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxUpdateUIEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSetText();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_GetSetText, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_GetShown, "GetShown() -> bool\n"
"\n"
"Returns true if the UI element should be shown.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_GetShown(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_GetShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxUpdateUIEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetShown();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_GetShown, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_GetText, "GetText() -> String\n"
"\n"
"Returns the text that should be set for the UI element.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_GetText(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_GetText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxUpdateUIEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetText());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_GetText, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_SetText, "SetText(text)\n"
"\n"
"Sets the text for this UI element.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_SetText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_SetText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* text;
        int textState = 0;
         ::wxUpdateUIEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_text,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp, sipType_wxString,&text, &textState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetText(*text);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_SetText, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_Show, "Show(show)\n"
"\n"
"Show or hide the UI element.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_Show(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_Show(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool show;
         ::wxUpdateUIEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_show,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp, &show))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Show(show);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_Show, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_CanUpdate, "CanUpdate(window) -> bool\n"
"\n"
"Returns true if it is appropriate to update (send UI update events to)\n"
"this window.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_CanUpdate(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_CanUpdate(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* window;

        static const char *sipKwdList[] = {
            sipName_window,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8", sipType_wxWindow, &window))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxUpdateUIEvent::CanUpdate(window);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_CanUpdate, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_GetMode, "GetMode() -> UpdateUIMode\n"
"\n"
"Static function returning a value specifying how wxWidgets will send\n"
"update events: to all windows, or only to those which specify that\n"
"they will process the events.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_GetMode(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_GetMode(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::wxUpdateUIMode sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxUpdateUIEvent::GetMode();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxUpdateUIMode);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_GetMode, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_GetUpdateInterval, "GetUpdateInterval() -> long\n"
"\n"
"Returns the current interval between updates in milliseconds.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_GetUpdateInterval(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_GetUpdateInterval(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            long sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxUpdateUIEvent::GetUpdateInterval();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_GetUpdateInterval, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_ResetUpdateTime, "ResetUpdateTime()\n"
"\n"
"Used internally to reset the last-updated time to the current time.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_ResetUpdateTime(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_ResetUpdateTime(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxUpdateUIEvent::ResetUpdateTime();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_ResetUpdateTime, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_SetMode, "SetMode(mode)\n"
"\n"
"Specify how wxWidgets will send update events: to all windows, or only\n"
"to those which specify that they will process the events.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_SetMode(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_SetMode(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxUpdateUIMode mode;

        static const char *sipKwdList[] = {
            sipName_mode,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "E", sipType_wxUpdateUIMode, &mode))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxUpdateUIEvent::SetMode(mode);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_SetMode, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_SetUpdateInterval, "SetUpdateInterval(updateInterval)\n"
"\n"
"Sets the interval between updates in milliseconds.");

extern "C" {static PyObject *meth_wxUpdateUIEvent_SetUpdateInterval(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_SetUpdateInterval(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        long updateInterval;

        static const char *sipKwdList[] = {
            sipName_updateInterval,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "l", &updateInterval))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxUpdateUIEvent::SetUpdateInterval(updateInterval);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_SetUpdateInterval, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxUpdateUIEvent_Clone, "Clone(self) -> Event");

extern "C" {static PyObject *meth_wxUpdateUIEvent_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxUpdateUIEvent_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxUpdateUIEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxUpdateUIEvent, &sipCpp))
        {
             ::wxEvent*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxUpdateUIEvent::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxEvent,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_UpdateUIEvent, sipName_Clone, doc_wxUpdateUIEvent_Clone);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxUpdateUIEvent(void *, const sipTypeDef *);}
static void *cast_wxUpdateUIEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxUpdateUIEvent *sipCpp = reinterpret_cast< ::wxUpdateUIEvent *>(sipCppV);

    if (targetType == sipType_wxCommandEvent)
        return static_cast< ::wxCommandEvent *>(sipCpp);

    if (targetType == sipType_wxEvent)
        return static_cast< ::wxEvent *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxUpdateUIEvent(void *, int);}
static void release_wxUpdateUIEvent(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxUpdateUIEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::wxUpdateUIEvent *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxUpdateUIEvent(sipSimpleWrapper *);}
static void dealloc_wxUpdateUIEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxUpdateUIEvent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxUpdateUIEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxUpdateUIEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxUpdateUIEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxUpdateUIEvent *sipCpp = 0;

    {
         ::wxWindowID commandId = 0;

        static const char *sipKwdList[] = {
            sipName_commandId,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|i", &commandId))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxUpdateUIEvent(commandId);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxUpdateUIEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxUpdateUIEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxUpdateUIEvent(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxUpdateUIEvent[] = {{78, 255, 1}};


static PyMethodDef methods_wxUpdateUIEvent[] = {
    {SIP_MLNAME_CAST(sipName_CanUpdate), (PyCFunction)meth_wxUpdateUIEvent_CanUpdate, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxUpdateUIEvent_CanUpdate)},
    {SIP_MLNAME_CAST(sipName_Check), (PyCFunction)meth_wxUpdateUIEvent_Check, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxUpdateUIEvent_Check)},
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxUpdateUIEvent_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxUpdateUIEvent_Clone)},
    {SIP_MLNAME_CAST(sipName_Enable), (PyCFunction)meth_wxUpdateUIEvent_Enable, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxUpdateUIEvent_Enable)},
    {SIP_MLNAME_CAST(sipName_GetChecked), meth_wxUpdateUIEvent_GetChecked, METH_VARARGS, SIP_MLDOC_CAST(doc_wxUpdateUIEvent_GetChecked)},
    {SIP_MLNAME_CAST(sipName_GetEnabled), meth_wxUpdateUIEvent_GetEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_wxUpdateUIEvent_GetEnabled)},
    {SIP_MLNAME_CAST(sipName_GetMode), meth_wxUpdateUIEvent_GetMode, METH_VARARGS, SIP_MLDOC_CAST(doc_wxUpdateUIEvent_GetMode)},
    {SIP_MLNAME_CAST(sipName_GetSetChecked), meth_wxUpdateUIEvent_GetSetChecked, METH_VARARGS, SIP_MLDOC_CAST(doc_wxUpdateUIEvent_GetSetChecked)},
    {SIP_MLNAME_CAST(sipName_GetSetEnabled), meth_wxUpdateUIEvent_GetSetEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_wxUpdateUIEvent_GetSetEnabled)},
    {SIP_MLNAME_CAST(sipName_GetSetShown), meth_wxUpdateUIEvent_GetSetShown, METH_VARARGS, SIP_MLDOC_CAST(doc_wxUpdateUIEvent_GetSetShown)},
    {SIP_MLNAME_CAST(sipName_GetSetText), meth_wxUpdateUIEvent_GetSetText, METH_VARARGS, SIP_MLDOC_CAST(doc_wxUpdateUIEvent_GetSetText)},
    {SIP_MLNAME_CAST(sipName_GetShown), meth_wxUpdateUIEvent_GetShown, METH_VARARGS, SIP_MLDOC_CAST(doc_wxUpdateUIEvent_GetShown)},
    {SIP_MLNAME_CAST(sipName_GetText), meth_wxUpdateUIEvent_GetText, METH_VARARGS, SIP_MLDOC_CAST(doc_wxUpdateUIEvent_GetText)},
    {SIP_MLNAME_CAST(sipName_GetUpdateInterval), meth_wxUpdateUIEvent_GetUpdateInterval, METH_VARARGS, SIP_MLDOC_CAST(doc_wxUpdateUIEvent_GetUpdateInterval)},
    {SIP_MLNAME_CAST(sipName_ResetUpdateTime), meth_wxUpdateUIEvent_ResetUpdateTime, METH_VARARGS, SIP_MLDOC_CAST(doc_wxUpdateUIEvent_ResetUpdateTime)},
    {SIP_MLNAME_CAST(sipName_SetMode), (PyCFunction)meth_wxUpdateUIEvent_SetMode, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxUpdateUIEvent_SetMode)},
    {SIP_MLNAME_CAST(sipName_SetText), (PyCFunction)meth_wxUpdateUIEvent_SetText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxUpdateUIEvent_SetText)},
    {SIP_MLNAME_CAST(sipName_SetUpdateInterval), (PyCFunction)meth_wxUpdateUIEvent_SetUpdateInterval, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxUpdateUIEvent_SetUpdateInterval)},
    {SIP_MLNAME_CAST(sipName_Show), (PyCFunction)meth_wxUpdateUIEvent_Show, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxUpdateUIEvent_Show)}
};

sipVariableDef variables_wxUpdateUIEvent[] = {
    {PropertyVariable, sipName_Text, &methods_wxUpdateUIEvent[12], &methods_wxUpdateUIEvent[16], NULL, NULL},
    {PropertyVariable, sipName_Shown, &methods_wxUpdateUIEvent[11], &methods_wxUpdateUIEvent[18], NULL, NULL},
    {PropertyVariable, sipName_Enabled, &methods_wxUpdateUIEvent[5], &methods_wxUpdateUIEvent[3], NULL, NULL},
    {PropertyVariable, sipName_Checked, &methods_wxUpdateUIEvent[4], &methods_wxUpdateUIEvent[1], NULL, NULL},
};

PyDoc_STRVAR(doc_wxUpdateUIEvent, "UpdateUIEvent(commandId=0)\n"
"\n"
"This class is used for pseudo-events which are called by wxWidgets to\n"
"give an application the chance to update various user interface\n"
"elements.");


sipClassTypeDef sipTypeDef__core_wxUpdateUIEvent = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxUpdateUIEvent,
        {0},
        0
    },
    {
        sipNameNr_UpdateUIEvent,
        {0, 0, 1},
        19, methods_wxUpdateUIEvent,
        0, 0,
        4, variables_wxUpdateUIEvent,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxUpdateUIEvent,
    -1,
    -1,
    supers_wxUpdateUIEvent,
    0,
    init_type_wxUpdateUIEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxUpdateUIEvent,
    0,
    0,
    0,
    release_wxUpdateUIEvent,
    cast_wxUpdateUIEvent,
    0,
    0,
    0,
    0,
    0,
    0
};
