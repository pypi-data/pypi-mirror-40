/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/filectrl.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/validate.h>
        #include <wx/dc.h>
        #include <wx/event.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/region.h>
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>
    wxArrayString* _wxFileCtrl_GetFilenames(wxFileCtrl* self)
    {
        wxArrayString* arr = new wxArrayString;
        self->GetFilenames(*arr);
        return arr;
    }
    wxArrayString* _wxFileCtrl_GetPaths(wxFileCtrl* self)
    {
        wxArrayString* arr = new wxArrayString;
        self->GetPaths(*arr);
        return arr;
    }


class sipwxFileCtrl : public  ::wxFileCtrl
{
public:
    sipwxFileCtrl();
    sipwxFileCtrl( ::wxWindow*, ::wxWindowID,const  ::wxString&,const  ::wxString&,const  ::wxString&,long,const  ::wxPoint&,const  ::wxSize&,const  ::wxString&);
    virtual ~sipwxFileCtrl();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxSize DoGetBestClientSize() const;
     ::wxSize DoGetBestSize() const;
    void DoThaw();
    void DoFreeze();
     ::wxBorder GetDefaultBorderForControl() const;
     ::wxBorder GetDefaultBorder() const;
    void DoSetWindowVariant( ::wxWindowVariant);
    void DoMoveWindow(int,int,int,int);
     ::wxSize DoGetBorderSize() const;
    void DoSetSizeHints(int,int,int,int,int,int);
    void DoSetClientSize(int,int);
    void DoSetSize(int,int,int,int,int);
    void DoGetClientSize(int*,int*) const;
    void DoGetSize(int*,int*) const;
    void DoGetPosition(int*,int*) const;
    void DoEnable(bool);
     ::wxWindow* GetMainWindowOfCompositeControl();
    void OnInternalIdle();
    void InitDialog();
    void InheritAttributes();
    bool Destroy();
    bool Validate();
    bool TransferDataToWindow();
    bool TransferDataFromWindow();
    void SetValidator(const  ::wxValidator&);
     ::wxValidator* GetValidator();
    bool ShouldInheritColours() const;
    bool HasTransparentBackground();
     ::wxPoint GetClientAreaOrigin() const;
    bool InformFirstDirection(int,int,int);
    void SetCanFocus(bool);
    bool AcceptsFocusRecursively() const;
    bool AcceptsFocusFromKeyboard() const;
    bool AcceptsFocus() const;
    bool TryAfter( ::wxEvent&);
    bool TryBefore( ::wxEvent&);
    bool ProcessEvent( ::wxEvent&);
    void AddChild( ::wxWindowBase*);
    void RemoveChild( ::wxWindowBase*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxFileCtrl(const sipwxFileCtrl &);
    sipwxFileCtrl &operator = (const sipwxFileCtrl &);

    char sipPyMethods[39];
};

sipwxFileCtrl::sipwxFileCtrl():  ::wxFileCtrl(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxFileCtrl::sipwxFileCtrl( ::wxWindow*parent, ::wxWindowID id,const  ::wxString& defaultDirectory,const  ::wxString& defaultFilename,const  ::wxString& wildCard,long style,const  ::wxPoint& pos,const  ::wxSize& size,const  ::wxString& name):  ::wxFileCtrl(parent,id,defaultDirectory,defaultFilename,wildCard,style,pos,size,name), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxFileCtrl::~sipwxFileCtrl()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxSize sipwxFileCtrl::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxFileCtrl::DoGetBestClientSize();

    extern  ::wxSize sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxFileCtrl::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxFileCtrl::DoGetBestSize();

    extern  ::wxSize sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxFileCtrl::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxFileCtrl::DoThaw();
        return;
    }

    extern void sipVH__core_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_48(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxFileCtrl::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxFileCtrl::DoFreeze();
        return;
    }

    extern void sipVH__core_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_48(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxFileCtrl::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxFileCtrl::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxFileCtrl::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxFileCtrl::GetDefaultBorder();

    extern  ::wxBorder sipVH__core_126(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_126(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxFileCtrl::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxFileCtrl::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__core_125(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__core_125(sipGILState, 0, sipPySelf, sipMeth, variant);
}

void sipwxFileCtrl::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxFileCtrl::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__core_124(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__core_124(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

 ::wxSize sipwxFileCtrl::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxFileCtrl::DoGetBorderSize();

    extern  ::wxSize sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxFileCtrl::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxFileCtrl::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__core_123(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__core_123(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

void sipwxFileCtrl::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxFileCtrl::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__core_122(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__core_122(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxFileCtrl::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxFileCtrl::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__core_121(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__core_121(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxFileCtrl::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxFileCtrl::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__core_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_120(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxFileCtrl::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxFileCtrl::DoGetSize(width,height);
        return;
    }

    extern void sipVH__core_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_120(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxFileCtrl::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxFileCtrl::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__core_120(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__core_120(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxFileCtrl::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxFileCtrl::DoEnable(enable);
        return;
    }

    extern void sipVH__core_87(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_87(sipGILState, 0, sipPySelf, sipMeth, enable);
}

 ::wxWindow* sipwxFileCtrl::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxFileCtrl::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__core_119(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_119(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxFileCtrl::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxFileCtrl::OnInternalIdle();
        return;
    }

    extern void sipVH__core_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_48(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxFileCtrl::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxFileCtrl::InitDialog();
        return;
    }

    extern void sipVH__core_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_48(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxFileCtrl::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxFileCtrl::InheritAttributes();
        return;
    }

    extern void sipVH__core_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_48(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxFileCtrl::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_Destroy);

    if (!sipMeth)
        return  ::wxFileCtrl::Destroy();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxFileCtrl::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_Validate);

    if (!sipMeth)
        return  ::wxFileCtrl::Validate();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxFileCtrl::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxFileCtrl::TransferDataToWindow();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxFileCtrl::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxFileCtrl::TransferDataFromWindow();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxFileCtrl::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxFileCtrl::SetValidator(validator);
        return;
    }

    extern void sipVH__core_118(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__core_118(sipGILState, 0, sipPySelf, sipMeth, validator);
}

 ::wxValidator* sipwxFileCtrl::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxFileCtrl::GetValidator();

    extern  ::wxValidator* sipVH__core_117(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_117(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxFileCtrl::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxFileCtrl::ShouldInheritColours();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxFileCtrl::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxFileCtrl::HasTransparentBackground();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPoint sipwxFileCtrl::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxFileCtrl::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__core_116(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_116(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxFileCtrl::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxFileCtrl::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__core_115(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__core_115(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

void sipwxFileCtrl::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxFileCtrl::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__core_87(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_87(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

bool sipwxFileCtrl::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxFileCtrl::AcceptsFocusRecursively();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxFileCtrl::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxFileCtrl::AcceptsFocusFromKeyboard();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxFileCtrl::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxFileCtrl::AcceptsFocus();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxFileCtrl::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxFileCtrl::TryAfter(event);

    extern bool sipVH__core_94(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_94(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxFileCtrl::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxFileCtrl::TryBefore(event);

    extern bool sipVH__core_94(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_94(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxFileCtrl::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxFileCtrl::ProcessEvent(event);

    extern bool sipVH__core_94(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__core_94(sipGILState, 0, sipPySelf, sipMeth, event);
}

void sipwxFileCtrl::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxFileCtrl::AddChild(child);
        return;
    }

    extern void sipVH__core_114(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__core_114(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxFileCtrl::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxFileCtrl::RemoveChild(child);
        return;
    }

    extern void sipVH__core_114(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__core_114(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxFileCtrl::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sipwxFileCtrl::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxFileCtrl::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxFileCtrl::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxFileCtrl::DoEnable(enable) : DoEnable(enable));
}

void sipwxFileCtrl::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxFileCtrl::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxFileCtrl::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxFileCtrl::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxFileCtrl::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxFileCtrl::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxFileCtrl::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxFileCtrl::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxFileCtrl::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxFileCtrl::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxFileCtrl::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxFileCtrl::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxFileCtrl::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxFileCtrl::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxFileCtrl::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxFileCtrl::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxFileCtrl::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxFileCtrl::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxFileCtrl::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxFileCtrl::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxFileCtrl::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxFileCtrl::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxFileCtrl::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxFileCtrl::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxFileCtrl::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxFileCtrl::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxFileCtrl::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxFileCtrl::DoFreeze() : DoFreeze());
}

void sipwxFileCtrl::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxFileCtrl::DoThaw() : DoThaw());
}

bool sipwxFileCtrl::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxFileCtrl::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxFileCtrl::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxFileCtrl::TryBefore(event) : TryBefore(event));
}

bool sipwxFileCtrl::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxFileCtrl::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxFileCtrl_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxFileCtrl_SendDestroyEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipwxFileCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_SendDestroyEvent, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_Create, "Create(parent, id=ID_ANY, defaultDirectory=EmptyString, defaultFilename=EmptyString, wildCard=FileSelectorDefaultWildcardStr, style=FC_DEFAULT_STYLE, pos=DefaultPosition, size=DefaultSize, name=FileCtrlNameStr) -> bool\n"
"\n"
"Create function for two-step construction.");

extern "C" {static PyObject *meth_wxFileCtrl_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxString& defaultDirectorydef = wxEmptyString;
        const  ::wxString* defaultDirectory = &defaultDirectorydef;
        int defaultDirectoryState = 0;
        const  ::wxString& defaultFilenamedef = wxEmptyString;
        const  ::wxString* defaultFilename = &defaultFilenamedef;
        int defaultFilenameState = 0;
        const  ::wxString& wildCarddef = wxFileSelectorDefaultWildcardStr;
        const  ::wxString* wildCard = &wildCarddef;
        int wildCardState = 0;
        long style = wxFC_DEFAULT_STYLE;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        const  ::wxString& namedef = wxFileCtrlNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;
        sipWrapper *sipOwner = 0;
         ::wxFileCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_defaultDirectory,
            sipName_defaultFilename,
            sipName_wildCard,
            sipName_style,
            sipName_pos,
            sipName_size,
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJH|iJ1J1J1lJ1J1J1", &sipSelf, sipType_wxFileCtrl, &sipCpp, sipType_wxWindow, &parent, &sipOwner, &id, sipType_wxString,&defaultDirectory, &defaultDirectoryState, sipType_wxString,&defaultFilename, &defaultFilenameState, sipType_wxString,&wildCard, &wildCardState, &style, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, sipType_wxString,&name, &nameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,id,*defaultDirectory,*defaultFilename,*wildCard,style,*pos,*size,*name);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(const_cast< ::wxString *>(defaultDirectory),sipType_wxString,defaultDirectoryState);
            sipReleaseType(const_cast< ::wxString *>(defaultFilename),sipType_wxString,defaultFilenameState);
            sipReleaseType(const_cast< ::wxString *>(wildCard),sipType_wxString,wildCardState);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_Create, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_GetDirectory, "GetDirectory() -> String\n"
"\n"
"Returns the current directory of the file control (i.e. the directory\n"
"shown by it).");

extern "C" {static PyObject *meth_wxFileCtrl_GetDirectory(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_GetDirectory(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxFileCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetDirectory());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_GetDirectory, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_GetFilename, "GetFilename() -> String\n"
"\n"
"Returns the currently selected filename.");

extern "C" {static PyObject *meth_wxFileCtrl_GetFilename(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_GetFilename(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxFileCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetFilename());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_GetFilename, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_GetFilenames, "GetFilenames() -> ArrayString\n"
"\n"
"Returns a list of filenames selected in the control.  This function\n"
"should only be used with controls which have the wx.FC_MULTIPLE style,\n"
"use GetFilename for the others.");

extern "C" {static PyObject *meth_wxFileCtrl_GetFilenames(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_GetFilenames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxFileCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
             ::wxArrayString*sipRes = 0;
            int sipIsErr = 0;

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFileCtrl_GetFilenames(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxArrayString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_GetFilenames, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_GetFilterIndex, "GetFilterIndex() -> int\n"
"\n"
"Returns the zero-based index of the currently selected filter.");

extern "C" {static PyObject *meth_wxFileCtrl_GetFilterIndex(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_GetFilterIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxFileCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetFilterIndex();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_GetFilterIndex, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_GetPath, "GetPath() -> String\n"
"\n"
"Returns the full path (directory and filename) of the currently\n"
"selected file.");

extern "C" {static PyObject *meth_wxFileCtrl_GetPath(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_GetPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxFileCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetPath());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_GetPath, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_GetPaths, "GetPaths() -> ArrayString\n"
"\n"
"Returns a list of the full paths (directory and filename) of the files\n"
"chosen. This function should only be used with controlss which have\n"
"the wx.FC_MULTIPLE style, use GetPath for the others.");

extern "C" {static PyObject *meth_wxFileCtrl_GetPaths(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_GetPaths(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxFileCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
             ::wxArrayString*sipRes = 0;
            int sipIsErr = 0;

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxFileCtrl_GetPaths(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxArrayString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_GetPaths, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_GetWildcard, "GetWildcard() -> String\n"
"\n"
"Returns the current wildcard.");

extern "C" {static PyObject *meth_wxFileCtrl_GetWildcard(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_GetWildcard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxFileCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetWildcard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_GetWildcard, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_SetDirectory, "SetDirectory(directory) -> bool\n"
"\n"
"Sets(changes) the current directory displayed in the control.");

extern "C" {static PyObject *meth_wxFileCtrl_SetDirectory(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_SetDirectory(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* directory;
        int directoryState = 0;
         ::wxFileCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_directory,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxFileCtrl, &sipCpp, sipType_wxString,&directory, &directoryState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetDirectory(*directory);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(directory),sipType_wxString,directoryState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_SetDirectory, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_SetFilename, "SetFilename(filename) -> bool\n"
"\n"
"Selects a certain file.");

extern "C" {static PyObject *meth_wxFileCtrl_SetFilename(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_SetFilename(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* filename;
        int filenameState = 0;
         ::wxFileCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_filename,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxFileCtrl, &sipCpp, sipType_wxString,&filename, &filenameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetFilename(*filename);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(filename),sipType_wxString,filenameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_SetFilename, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_SetPath, "SetPath(path) -> bool\n"
"\n"
"Changes to a certain directory and selects a certain file.");

extern "C" {static PyObject *meth_wxFileCtrl_SetPath(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_SetPath(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* path;
        int pathState = 0;
         ::wxFileCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_path,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxFileCtrl, &sipCpp, sipType_wxString,&path, &pathState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetPath(*path);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(path),sipType_wxString,pathState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_SetPath, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_SetFilterIndex, "SetFilterIndex(filterIndex)\n"
"\n"
"Sets the current filter index, starting from zero.");

extern "C" {static PyObject *meth_wxFileCtrl_SetFilterIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_SetFilterIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int filterIndex;
         ::wxFileCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_filterIndex,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxFileCtrl, &sipCpp, &filterIndex))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFilterIndex(filterIndex);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_SetFilterIndex, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_SetWildcard, "SetWildcard(wildCard)\n"
"\n"
"Sets the wildcard, which can contain multiple file types, for example:\n"
"\"BMP files (*.bmp)|*.bmp|GIF files (*.gif)|*.gif\".");

extern "C" {static PyObject *meth_wxFileCtrl_SetWildcard(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_SetWildcard(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* wildCard;
        int wildCardState = 0;
         ::wxFileCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_wildCard,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxFileCtrl, &sipCpp, sipType_wxString,&wildCard, &wildCardState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetWildcard(*wildCard);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(wildCard),sipType_wxString,wildCardState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_SetWildcard, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_ShowHidden, "ShowHidden(show)\n"
"\n"
"Sets whether hidden files and folders are shown or not.");

extern "C" {static PyObject *meth_wxFileCtrl_ShowHidden(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_ShowHidden(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool show;
         ::wxFileCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_show,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxFileCtrl, &sipCpp, &show))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ShowHidden(show);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_ShowHidden, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxFileCtrl_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxFileCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxFileCtrl::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_GetClientAreaOrigin, doc_wxFileCtrl_GetClientAreaOrigin);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxFileCtrl_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxFileCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxFileCtrl::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_Validate, doc_wxFileCtrl_Validate);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxFileCtrl_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxFileCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxFileCtrl::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_TransferDataToWindow, doc_wxFileCtrl_TransferDataToWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxFileCtrl_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxFileCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxFileCtrl::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_TransferDataFromWindow, doc_wxFileCtrl_TransferDataFromWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxFileCtrl_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxFileCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxFileCtrl::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_InitDialog, doc_wxFileCtrl_InitDialog);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxFileCtrl_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxFileCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxFileCtrl::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_AcceptsFocus, doc_wxFileCtrl_AcceptsFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxFileCtrl_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxFileCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxFileCtrl::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_AcceptsFocusRecursively, doc_wxFileCtrl_AcceptsFocusRecursively);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxFileCtrl_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxFileCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxFileCtrl::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_AcceptsFocusFromKeyboard, doc_wxFileCtrl_AcceptsFocusFromKeyboard);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxFileCtrl_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxFileCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxFileCtrl, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxFileCtrl::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_AddChild, doc_wxFileCtrl_AddChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxFileCtrl_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxFileCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxFileCtrl, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxFileCtrl::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_RemoveChild, doc_wxFileCtrl_RemoveChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxFileCtrl_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxFileCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxFileCtrl::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_InheritAttributes, doc_wxFileCtrl_InheritAttributes);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxFileCtrl_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxFileCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxFileCtrl::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_ShouldInheritColours, doc_wxFileCtrl_ShouldInheritColours);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxFileCtrl_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxFileCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxFileCtrl::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_OnInternalIdle, doc_wxFileCtrl_OnInternalIdle);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxFileCtrl_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxFileCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxFileCtrl::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_GetMainWindowOfCompositeControl, doc_wxFileCtrl_GetMainWindowOfCompositeControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxFileCtrl_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxFileCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biii", &sipSelf, sipType_wxFileCtrl, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxFileCtrl::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_InformFirstDirection, doc_wxFileCtrl_InformFirstDirection);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxFileCtrl_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxFileCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxFileCtrl, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxFileCtrl::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_SetCanFocus, doc_wxFileCtrl_SetCanFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxFileCtrl_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxFileCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxFileCtrl::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_Destroy, doc_wxFileCtrl_Destroy);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxFileCtrl_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxFileCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxFileCtrl, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxFileCtrl::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_SetValidator, doc_wxFileCtrl_SetValidator);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxFileCtrl_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxFileCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxFileCtrl::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_GetValidator, doc_wxFileCtrl_GetValidator);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxFileCtrl_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxFileCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxFileCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_ProcessEvent, doc_wxFileCtrl_ProcessEvent);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxFileCtrl_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxFileCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxFileCtrl, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_DoEnable, doc_wxFileCtrl_DoEnable);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxFileCtrl_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxFileCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_DoGetPosition, doc_wxFileCtrl_DoGetPosition);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxFileCtrl_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxFileCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_DoGetSize, doc_wxFileCtrl_DoGetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxFileCtrl_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxFileCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_DoGetClientSize, doc_wxFileCtrl_DoGetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxFileCtrl_DoGetBestSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxFileCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_DoGetBestSize, doc_wxFileCtrl_DoGetBestSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxFileCtrl_DoGetBestClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxFileCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_DoGetBestClientSize, doc_wxFileCtrl_DoGetBestClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxFileCtrl_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxFileCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiii", &sipSelf, sipType_wxFileCtrl, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_DoSetSize, doc_wxFileCtrl_DoSetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxFileCtrl_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxFileCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxFileCtrl, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_DoSetClientSize, doc_wxFileCtrl_DoSetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxFileCtrl_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxFileCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiiii", &sipSelf, sipType_wxFileCtrl, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_DoSetSizeHints, doc_wxFileCtrl_DoSetSizeHints);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxFileCtrl_DoGetBorderSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxFileCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_DoGetBorderSize, doc_wxFileCtrl_DoGetBorderSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxFileCtrl_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxFileCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiii", &sipSelf, sipType_wxFileCtrl, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_DoMoveWindow, doc_wxFileCtrl_DoMoveWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxFileCtrl_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxFileCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE", &sipSelf, sipType_wxFileCtrl, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_DoSetWindowVariant, doc_wxFileCtrl_DoSetWindowVariant);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxFileCtrl_GetDefaultBorder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxFileCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_GetDefaultBorder, doc_wxFileCtrl_GetDefaultBorder);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxFileCtrl_GetDefaultBorderForControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxFileCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_GetDefaultBorderForControl, doc_wxFileCtrl_GetDefaultBorderForControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxFileCtrl_DoFreeze(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_DoFreeze(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxFileCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_DoFreeze, doc_wxFileCtrl_DoFreeze);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxFileCtrl_DoThaw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_DoThaw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxFileCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_DoThaw, doc_wxFileCtrl_DoThaw);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxFileCtrl_HasTransparentBackground(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxFileCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxFileCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_HasTransparentBackground, doc_wxFileCtrl_HasTransparentBackground);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxFileCtrl_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxFileCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxFileCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_TryBefore, doc_wxFileCtrl_TryBefore);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxFileCtrl_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxFileCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxFileCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_TryAfter, doc_wxFileCtrl_TryAfter);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileCtrl_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant: WindowVariant = wxWINDOW_VARIANT_NORMAL) -> VisualAttributes");

extern "C" {static PyObject *meth_wxFileCtrl_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileCtrl_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxFileCtrl::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileCtrl, sipName_GetClassDefaultAttributes, doc_wxFileCtrl_GetClassDefaultAttributes);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxFileCtrl(void *, const sipTypeDef *);}
static void *cast_wxFileCtrl(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxFileCtrl *sipCpp = reinterpret_cast< ::wxFileCtrl *>(sipCppV);

    if (targetType == sipType_wxControl)
        return static_cast< ::wxControl *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxFileCtrl(void *, int);}
static void release_wxFileCtrl(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxFileCtrl *>(sipCppV);
    else
        delete reinterpret_cast< ::wxFileCtrl *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxFileCtrl(sipSimpleWrapper *);}
static void dealloc_wxFileCtrl(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxFileCtrl *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxFileCtrl(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxFileCtrl(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxFileCtrl(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxFileCtrl *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxFileCtrl();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxString& defaultDirectorydef = wxEmptyString;
        const  ::wxString* defaultDirectory = &defaultDirectorydef;
        int defaultDirectoryState = 0;
        const  ::wxString& defaultFilenamedef = wxEmptyString;
        const  ::wxString* defaultFilename = &defaultFilenamedef;
        int defaultFilenameState = 0;
        const  ::wxString& wildCarddef = wxFileSelectorDefaultWildcardStr;
        const  ::wxString* wildCard = &wildCarddef;
        int wildCardState = 0;
        long style = wxFC_DEFAULT_STYLE;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        const  ::wxString& namedef = wxFileCtrlNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_defaultDirectory,
            sipName_defaultFilename,
            sipName_wildCard,
            sipName_style,
            sipName_pos,
            sipName_size,
            sipName_name,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J1J1lJ1J1J1", sipType_wxWindow, &parent, sipOwner, &id, sipType_wxString,&defaultDirectory, &defaultDirectoryState, sipType_wxString,&defaultFilename, &defaultFilenameState, sipType_wxString,&wildCard, &wildCardState, &style, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, sipType_wxString,&name, &nameState))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxFileCtrl(parent,id,*defaultDirectory,*defaultFilename,*wildCard,style,*pos,*size,*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(defaultDirectory),sipType_wxString,defaultDirectoryState);
            sipReleaseType(const_cast< ::wxString *>(defaultFilename),sipType_wxString,defaultFilenameState);
            sipReleaseType(const_cast< ::wxString *>(wildCard),sipType_wxString,wildCardState);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxFileCtrl[] = {{90, 255, 1}};


static PyMethodDef methods_wxFileCtrl[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxFileCtrl_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrl_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxFileCtrl_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrl_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxFileCtrl_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrl_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_AddChild), (PyCFunction)meth_wxFileCtrl_AddChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_AddChild)},
    {SIP_MLNAME_CAST(sipName_Create), (PyCFunction)meth_wxFileCtrl_Create, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_Create)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxFileCtrl_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrl_Destroy)},
    {SIP_MLNAME_CAST(sipName_DoEnable), (PyCFunction)meth_wxFileCtrl_DoEnable, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), (PyCFunction)meth_wxFileCtrl_DoFreeze, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), (PyCFunction)meth_wxFileCtrl_DoGetBestClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), (PyCFunction)meth_wxFileCtrl_DoGetBestSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), (PyCFunction)meth_wxFileCtrl_DoGetBorderSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), (PyCFunction)meth_wxFileCtrl_DoGetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), (PyCFunction)meth_wxFileCtrl_DoGetPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), (PyCFunction)meth_wxFileCtrl_DoGetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), (PyCFunction)meth_wxFileCtrl_DoMoveWindow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), (PyCFunction)meth_wxFileCtrl_DoSetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), (PyCFunction)meth_wxFileCtrl_DoSetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), (PyCFunction)meth_wxFileCtrl_DoSetSizeHints, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), (PyCFunction)meth_wxFileCtrl_DoSetWindowVariant, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoThaw), (PyCFunction)meth_wxFileCtrl_DoThaw, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_DoThaw)},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), (PyCFunction)meth_wxFileCtrl_GetClassDefaultAttributes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxFileCtrl_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrl_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), (PyCFunction)meth_wxFileCtrl_GetDefaultBorder, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), (PyCFunction)meth_wxFileCtrl_GetDefaultBorderForControl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetDirectory), meth_wxFileCtrl_GetDirectory, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrl_GetDirectory)},
    {SIP_MLNAME_CAST(sipName_GetFilename), meth_wxFileCtrl_GetFilename, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrl_GetFilename)},
    {SIP_MLNAME_CAST(sipName_GetFilenames), meth_wxFileCtrl_GetFilenames, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrl_GetFilenames)},
    {SIP_MLNAME_CAST(sipName_GetFilterIndex), meth_wxFileCtrl_GetFilterIndex, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrl_GetFilterIndex)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxFileCtrl_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrl_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetPath), meth_wxFileCtrl_GetPath, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrl_GetPath)},
    {SIP_MLNAME_CAST(sipName_GetPaths), meth_wxFileCtrl_GetPaths, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrl_GetPaths)},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxFileCtrl_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrl_GetValidator)},
    {SIP_MLNAME_CAST(sipName_GetWildcard), meth_wxFileCtrl_GetWildcard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrl_GetWildcard)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), (PyCFunction)meth_wxFileCtrl_HasTransparentBackground, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), (PyCFunction)meth_wxFileCtrl_InformFirstDirection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxFileCtrl_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrl_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxFileCtrl_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrl_InitDialog)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxFileCtrl_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrl_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), (PyCFunction)meth_wxFileCtrl_ProcessEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), (PyCFunction)meth_wxFileCtrl_RemoveChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), (PyCFunction)meth_wxFileCtrl_SendDestroyEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), (PyCFunction)meth_wxFileCtrl_SetCanFocus, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetDirectory), (PyCFunction)meth_wxFileCtrl_SetDirectory, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_SetDirectory)},
    {SIP_MLNAME_CAST(sipName_SetFilename), (PyCFunction)meth_wxFileCtrl_SetFilename, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_SetFilename)},
    {SIP_MLNAME_CAST(sipName_SetFilterIndex), (PyCFunction)meth_wxFileCtrl_SetFilterIndex, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_SetFilterIndex)},
    {SIP_MLNAME_CAST(sipName_SetPath), (PyCFunction)meth_wxFileCtrl_SetPath, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_SetPath)},
    {SIP_MLNAME_CAST(sipName_SetValidator), (PyCFunction)meth_wxFileCtrl_SetValidator, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_SetValidator)},
    {SIP_MLNAME_CAST(sipName_SetWildcard), (PyCFunction)meth_wxFileCtrl_SetWildcard, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_SetWildcard)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxFileCtrl_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrl_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_ShowHidden), (PyCFunction)meth_wxFileCtrl_ShowHidden, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_ShowHidden)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxFileCtrl_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrl_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxFileCtrl_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrl_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), (PyCFunction)meth_wxFileCtrl_TryAfter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), (PyCFunction)meth_wxFileCtrl_TryBefore, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileCtrl_TryBefore)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxFileCtrl_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFileCtrl_Validate)}
};

sipVariableDef variables_wxFileCtrl[] = {
    {PropertyVariable, sipName_Wildcard, &methods_wxFileCtrl[32], &methods_wxFileCtrl[47], NULL, NULL},
    {PropertyVariable, sipName_Paths, &methods_wxFileCtrl[30], NULL, NULL, NULL},
    {PropertyVariable, sipName_Path, &methods_wxFileCtrl[29], &methods_wxFileCtrl[45], NULL, NULL},
    {PropertyVariable, sipName_FilterIndex, &methods_wxFileCtrl[27], &methods_wxFileCtrl[44], NULL, NULL},
    {PropertyVariable, sipName_Filenames, &methods_wxFileCtrl[26], NULL, NULL, NULL},
    {PropertyVariable, sipName_Filename, &methods_wxFileCtrl[25], &methods_wxFileCtrl[43], NULL, NULL},
    {PropertyVariable, sipName_Directory, &methods_wxFileCtrl[24], &methods_wxFileCtrl[42], NULL, NULL},
};

PyDoc_STRVAR(doc_wxFileCtrl, "FileCtrl()\n"
"FileCtrl(parent, id=ID_ANY, defaultDirectory=EmptyString, defaultFilename=EmptyString, wildCard=FileSelectorDefaultWildcardStr, style=FC_DEFAULT_STYLE, pos=DefaultPosition, size=DefaultSize, name=FileCtrlNameStr)\n"
"\n"
"This control allows the user to select a file.");


sipClassTypeDef sipTypeDef__core_wxFileCtrl = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxFileCtrl,
        {0},
        0
    },
    {
        sipNameNr_FileCtrl,
        {0, 0, 1},
        55, methods_wxFileCtrl,
        0, 0,
        7, variables_wxFileCtrl,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxFileCtrl,
    -1,
    -1,
    supers_wxFileCtrl,
    0,
    init_type_wxFileCtrl,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxFileCtrl,
    0,
    0,
    0,
    release_wxFileCtrl,
    cast_wxFileCtrl,
    0,
    0,
    0,
    0,
    0,
    0
};
