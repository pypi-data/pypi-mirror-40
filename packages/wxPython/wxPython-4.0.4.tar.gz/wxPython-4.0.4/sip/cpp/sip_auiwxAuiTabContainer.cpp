/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_aui.h"

        #include <wx/aui/auibook.h>

        #include <wx/window.h>
        #include <wx/dc.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/bitmap.h>
        #include <wx/gdicmn.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/aui/auibook.h>
        #include <wx/aui/auibook.h>
        #include <wx/aui/auibook.h>


class sipwxAuiTabContainer : public  ::wxAuiTabContainer
{
public:
    sipwxAuiTabContainer();
    sipwxAuiTabContainer(const  ::wxAuiTabContainer&);
    ~sipwxAuiTabContainer();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxAuiTabContainer(const sipwxAuiTabContainer &);
    sipwxAuiTabContainer &operator = (const sipwxAuiTabContainer &);
};

sipwxAuiTabContainer::sipwxAuiTabContainer():  ::wxAuiTabContainer(), sipPySelf(0)
{
}

sipwxAuiTabContainer::sipwxAuiTabContainer(const  ::wxAuiTabContainer& a0):  ::wxAuiTabContainer(a0), sipPySelf(0)
{
}

sipwxAuiTabContainer::~sipwxAuiTabContainer()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_wxAuiTabContainer_SetArtProvider, "SetArtProvider(art)");

extern "C" {static PyObject *meth_wxAuiTabContainer_SetArtProvider(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_SetArtProvider(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxAuiTabArt* art;
         ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_art,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, sipType_wxAuiTabArt, &art))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetArtProvider(art);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_SetArtProvider, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_GetArtProvider, "GetArtProvider() -> AuiTabArt");

extern "C" {static PyObject *meth_wxAuiTabContainer_GetArtProvider(PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_GetArtProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxAuiTabContainer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiTabContainer, &sipCpp))
        {
             ::wxAuiTabArt*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetArtProvider();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiTabArt,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_GetArtProvider, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_SetFlags, "SetFlags(flags)");

extern "C" {static PyObject *meth_wxAuiTabContainer_SetFlags(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_SetFlags(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint flags;
         ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bu", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFlags(flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_SetFlags, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_GetFlags, "GetFlags() -> unsignedint");

extern "C" {static PyObject *meth_wxAuiTabContainer_GetFlags(PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_GetFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxAuiTabContainer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiTabContainer, &sipCpp))
        {
            uint sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetFlags();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_GetFlags, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_AddPage, "AddPage(page, info) -> bool");

extern "C" {static PyObject *meth_wxAuiTabContainer_AddPage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_AddPage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* page;
        const  ::wxAuiNotebookPage* info;
         ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
            sipName_info,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J9", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, sipType_wxWindow, &page, sipType_wxAuiNotebookPage, &info))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AddPage(page,*info);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_AddPage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_InsertPage, "InsertPage(page, info, idx) -> bool");

extern "C" {static PyObject *meth_wxAuiTabContainer_InsertPage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_InsertPage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* page;
        const  ::wxAuiNotebookPage* info;
         ::size_t* idx;
        int idxState = 0;
         ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
            sipName_info,
            sipName_idx,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J9J1", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, sipType_wxWindow, &page, sipType_wxAuiNotebookPage, &info, sipType_size_t,&idx, &idxState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertPage(page,*info,*idx);
            Py_END_ALLOW_THREADS
            sipReleaseType(idx,sipType_size_t,idxState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_InsertPage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_MovePage, "MovePage(page, newIdx) -> bool");

extern "C" {static PyObject *meth_wxAuiTabContainer_MovePage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_MovePage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* page;
         ::size_t* newIdx;
        int newIdxState = 0;
         ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
            sipName_newIdx,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J1", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, sipType_wxWindow, &page, sipType_size_t,&newIdx, &newIdxState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->MovePage(page,*newIdx);
            Py_END_ALLOW_THREADS
            sipReleaseType(newIdx,sipType_size_t,newIdxState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_MovePage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_RemovePage, "RemovePage(page) -> bool");

extern "C" {static PyObject *meth_wxAuiTabContainer_RemovePage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_RemovePage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* page;
         ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, sipType_wxWindow, &page))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->RemovePage(page);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_RemovePage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_SetActivePage, "SetActivePage(page) -> bool\n"
"SetActivePage(page) -> bool\n"
"");

extern "C" {static PyObject *meth_wxAuiTabContainer_SetActivePage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_SetActivePage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* page;
         ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, sipType_wxWindow, &page))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetActivePage(page);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::size_t* page;
        int pageState = 0;
         ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, sipType_size_t,&page, &pageState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetActivePage(*page);
            Py_END_ALLOW_THREADS
            sipReleaseType(page,sipType_size_t,pageState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_SetActivePage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_SetNoneActive, "SetNoneActive()");

extern "C" {static PyObject *meth_wxAuiTabContainer_SetNoneActive(PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_SetNoneActive(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxAuiTabContainer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiTabContainer, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetNoneActive();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_SetNoneActive, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_GetActivePage, "GetActivePage() -> int");

extern "C" {static PyObject *meth_wxAuiTabContainer_GetActivePage(PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_GetActivePage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxAuiTabContainer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiTabContainer, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetActivePage();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_GetActivePage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_TabHitTest, "TabHitTest(x, y, hit) -> bool");

extern "C" {static PyObject *meth_wxAuiTabContainer_TabHitTest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_TabHitTest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int x;
        int y;
         ::wxWindow* hit;
        const  ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, &x, &y))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->TabHitTest(x,y,&hit);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bD)",sipRes,hit,sipType_wxWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_TabHitTest, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_ButtonHitTest, "ButtonHitTest(x, y, hit) -> bool");

extern "C" {static PyObject *meth_wxAuiTabContainer_ButtonHitTest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_ButtonHitTest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int x;
        int y;
         ::wxAuiTabContainerButton* hit;
        const  ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, &x, &y))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ButtonHitTest(x,y,&hit);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bD)",sipRes,hit,sipType_wxAuiTabContainerButton,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_ButtonHitTest, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_GetWindowFromIdx, "GetWindowFromIdx(idx) -> wx.Window");

extern "C" {static PyObject *meth_wxAuiTabContainer_GetWindowFromIdx(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_GetWindowFromIdx(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::size_t* idx;
        int idxState = 0;
        const  ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_idx,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, sipType_size_t,&idx, &idxState))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetWindowFromIdx(*idx);
            Py_END_ALLOW_THREADS
            sipReleaseType(idx,sipType_size_t,idxState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_GetWindowFromIdx, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_GetIdxFromWindow, "GetIdxFromWindow(page) -> int");

extern "C" {static PyObject *meth_wxAuiTabContainer_GetIdxFromWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_GetIdxFromWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* page;
        const  ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, sipType_wxWindow, &page))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetIdxFromWindow(page);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_GetIdxFromWindow, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_GetPageCount, "GetPageCount() -> size_t");

extern "C" {static PyObject *meth_wxAuiTabContainer_GetPageCount(PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_GetPageCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxAuiTabContainer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiTabContainer, &sipCpp))
        {
             ::size_t*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::size_t(sipCpp->GetPageCount());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_size_t,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_GetPageCount, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_GetPage, "GetPage(idx) -> AuiNotebookPage");

extern "C" {static PyObject *meth_wxAuiTabContainer_GetPage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_GetPage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::size_t* idx;
        int idxState = 0;
         ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_idx,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, sipType_size_t,&idx, &idxState))
        {
             ::wxAuiNotebookPage*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->GetPage(*idx);
            Py_END_ALLOW_THREADS
            sipReleaseType(idx,sipType_size_t,idxState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiNotebookPage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_GetPage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_GetPages, "GetPages() -> AuiNotebookPageArray");

extern "C" {static PyObject *meth_wxAuiTabContainer_GetPages(PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_GetPages(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxAuiTabContainer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiTabContainer, &sipCpp))
        {
             ::wxAuiNotebookPageArray*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->GetPages();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiNotebookPageArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_GetPages, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_SetNormalFont, "SetNormalFont(normalFont)");

extern "C" {static PyObject *meth_wxAuiTabContainer_SetNormalFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_SetNormalFont(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxFont* normalFont;
         ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_normalFont,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, sipType_wxFont, &normalFont))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetNormalFont(*normalFont);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_SetNormalFont, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_SetSelectedFont, "SetSelectedFont(selectedFont)");

extern "C" {static PyObject *meth_wxAuiTabContainer_SetSelectedFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_SetSelectedFont(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxFont* selectedFont;
         ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_selectedFont,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, sipType_wxFont, &selectedFont))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSelectedFont(*selectedFont);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_SetSelectedFont, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_SetMeasuringFont, "SetMeasuringFont(measuringFont)");

extern "C" {static PyObject *meth_wxAuiTabContainer_SetMeasuringFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_SetMeasuringFont(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxFont* measuringFont;
         ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_measuringFont,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, sipType_wxFont, &measuringFont))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetMeasuringFont(*measuringFont);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_SetMeasuringFont, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_SetColour, "SetColour(colour)");

extern "C" {static PyObject *meth_wxAuiTabContainer_SetColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_SetColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxColour* colour;
        int colourState = 0;
         ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_colour,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, sipType_wxColour, &colour, &colourState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetColour(*colour);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(colour),sipType_wxColour,colourState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_SetColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_SetActiveColour, "SetActiveColour(colour)");

extern "C" {static PyObject *meth_wxAuiTabContainer_SetActiveColour(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_SetActiveColour(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxColour* colour;
        int colourState = 0;
         ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_colour,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, sipType_wxColour, &colour, &colourState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetActiveColour(*colour);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(colour),sipType_wxColour,colourState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_SetActiveColour, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_DoShowHide, "DoShowHide()");

extern "C" {static PyObject *meth_wxAuiTabContainer_DoShowHide(PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_DoShowHide(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxAuiTabContainer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiTabContainer, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DoShowHide();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_DoShowHide, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_SetRect, "SetRect(rect)");

extern "C" {static PyObject *meth_wxAuiTabContainer_SetRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_SetRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxRect* rect;
        int rectState = 0;
         ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rect,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, sipType_wxRect, &rect, &rectState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetRect(*rect);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_SetRect, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_RemoveButton, "RemoveButton(id)");

extern "C" {static PyObject *meth_wxAuiTabContainer_RemoveButton(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_RemoveButton(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int id;
         ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, &id))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->RemoveButton(id);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_RemoveButton, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_AddButton, "AddButton(id, location, normalBitmap=wx.NullBitmap, disabledBitmap=wx.NullBitmap)");

extern "C" {static PyObject *meth_wxAuiTabContainer_AddButton(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_AddButton(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int id;
        int location;
        const  ::wxBitmap& normalBitmapdef = wxNullBitmap;
        const  ::wxBitmap* normalBitmap = &normalBitmapdef;
        const  ::wxBitmap& disabledBitmapdef = wxNullBitmap;
        const  ::wxBitmap* disabledBitmap = &disabledBitmapdef;
         ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_id,
            sipName_location,
            sipName_normalBitmap,
            sipName_disabledBitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii|J9J9", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, &id, &location, sipType_wxBitmap, &normalBitmap, sipType_wxBitmap, &disabledBitmap))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->AddButton(id,location,*normalBitmap,*disabledBitmap);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_AddButton, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_GetTabOffset, "GetTabOffset() -> size_t");

extern "C" {static PyObject *meth_wxAuiTabContainer_GetTabOffset(PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_GetTabOffset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxAuiTabContainer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiTabContainer, &sipCpp))
        {
             ::size_t*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::size_t(sipCpp->GetTabOffset());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_size_t,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_GetTabOffset, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_SetTabOffset, "SetTabOffset(offset)");

extern "C" {static PyObject *meth_wxAuiTabContainer_SetTabOffset(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_SetTabOffset(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::size_t* offset;
        int offsetState = 0;
         ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_offset,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, sipType_size_t,&offset, &offsetState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetTabOffset(*offset);
            Py_END_ALLOW_THREADS
            sipReleaseType(offset,sipType_size_t,offsetState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_SetTabOffset, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_IsTabVisible, "IsTabVisible(tabPage, tabOffset, dc, wnd) -> bool");

extern "C" {static PyObject *meth_wxAuiTabContainer_IsTabVisible(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_IsTabVisible(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int tabPage;
        int tabOffset;
         ::wxDC* dc;
         ::wxWindow* wnd;
         ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tabPage,
            sipName_tabOffset,
            sipName_dc,
            sipName_wnd,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiiJ8J8", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, &tabPage, &tabOffset, sipType_wxDC, &dc, sipType_wxWindow, &wnd))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsTabVisible(tabPage,tabOffset,dc,wnd);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_IsTabVisible, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiTabContainer_MakeTabVisible, "MakeTabVisible(tabPage, win)");

extern "C" {static PyObject *meth_wxAuiTabContainer_MakeTabVisible(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiTabContainer_MakeTabVisible(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int tabPage;
         ::wxWindow* win;
         ::wxAuiTabContainer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_tabPage,
            sipName_win,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BiJ8", &sipSelf, sipType_wxAuiTabContainer, &sipCpp, &tabPage, sipType_wxWindow, &win))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->MakeTabVisible(tabPage,win);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiTabContainer, sipName_MakeTabVisible, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxAuiTabContainer(void *, int);}
static void release_wxAuiTabContainer(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxAuiTabContainer *>(sipCppV);
    else
        delete reinterpret_cast< ::wxAuiTabContainer *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_wxAuiTabContainer(void *, SIP_SSIZE_T, void *);}
static void assign_wxAuiTabContainer(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxAuiTabContainer *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxAuiTabContainer *>(sipSrc);
}


extern "C" {static void *array_wxAuiTabContainer(SIP_SSIZE_T);}
static void *array_wxAuiTabContainer(SIP_SSIZE_T sipNrElem)
{
    return new  ::wxAuiTabContainer[sipNrElem];
}


extern "C" {static void *copy_wxAuiTabContainer(const void *, SIP_SSIZE_T);}
static void *copy_wxAuiTabContainer(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxAuiTabContainer(reinterpret_cast<const  ::wxAuiTabContainer *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxAuiTabContainer(sipSimpleWrapper *);}
static void dealloc_wxAuiTabContainer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxAuiTabContainer *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxAuiTabContainer(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxAuiTabContainer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxAuiTabContainer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxAuiTabContainer *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxAuiTabContainer();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxAuiTabContainer* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxAuiTabContainer, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxAuiTabContainer(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_wxAuiTabContainer[] = {
    {SIP_MLNAME_CAST(sipName_AddButton), (PyCFunction)meth_wxAuiTabContainer_AddButton, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_AddButton)},
    {SIP_MLNAME_CAST(sipName_AddPage), (PyCFunction)meth_wxAuiTabContainer_AddPage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_AddPage)},
    {SIP_MLNAME_CAST(sipName_ButtonHitTest), (PyCFunction)meth_wxAuiTabContainer_ButtonHitTest, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_ButtonHitTest)},
    {SIP_MLNAME_CAST(sipName_DoShowHide), meth_wxAuiTabContainer_DoShowHide, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_DoShowHide)},
    {SIP_MLNAME_CAST(sipName_GetActivePage), meth_wxAuiTabContainer_GetActivePage, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_GetActivePage)},
    {SIP_MLNAME_CAST(sipName_GetArtProvider), meth_wxAuiTabContainer_GetArtProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_GetArtProvider)},
    {SIP_MLNAME_CAST(sipName_GetFlags), meth_wxAuiTabContainer_GetFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_GetFlags)},
    {SIP_MLNAME_CAST(sipName_GetIdxFromWindow), (PyCFunction)meth_wxAuiTabContainer_GetIdxFromWindow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_GetIdxFromWindow)},
    {SIP_MLNAME_CAST(sipName_GetPage), (PyCFunction)meth_wxAuiTabContainer_GetPage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_GetPage)},
    {SIP_MLNAME_CAST(sipName_GetPageCount), meth_wxAuiTabContainer_GetPageCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_GetPageCount)},
    {SIP_MLNAME_CAST(sipName_GetPages), meth_wxAuiTabContainer_GetPages, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_GetPages)},
    {SIP_MLNAME_CAST(sipName_GetTabOffset), meth_wxAuiTabContainer_GetTabOffset, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_GetTabOffset)},
    {SIP_MLNAME_CAST(sipName_GetWindowFromIdx), (PyCFunction)meth_wxAuiTabContainer_GetWindowFromIdx, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_GetWindowFromIdx)},
    {SIP_MLNAME_CAST(sipName_InsertPage), (PyCFunction)meth_wxAuiTabContainer_InsertPage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_InsertPage)},
    {SIP_MLNAME_CAST(sipName_IsTabVisible), (PyCFunction)meth_wxAuiTabContainer_IsTabVisible, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_IsTabVisible)},
    {SIP_MLNAME_CAST(sipName_MakeTabVisible), (PyCFunction)meth_wxAuiTabContainer_MakeTabVisible, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_MakeTabVisible)},
    {SIP_MLNAME_CAST(sipName_MovePage), (PyCFunction)meth_wxAuiTabContainer_MovePage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_MovePage)},
    {SIP_MLNAME_CAST(sipName_RemoveButton), (PyCFunction)meth_wxAuiTabContainer_RemoveButton, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_RemoveButton)},
    {SIP_MLNAME_CAST(sipName_RemovePage), (PyCFunction)meth_wxAuiTabContainer_RemovePage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_RemovePage)},
    {SIP_MLNAME_CAST(sipName_SetActiveColour), (PyCFunction)meth_wxAuiTabContainer_SetActiveColour, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_SetActiveColour)},
    {SIP_MLNAME_CAST(sipName_SetActivePage), (PyCFunction)meth_wxAuiTabContainer_SetActivePage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_SetActivePage)},
    {SIP_MLNAME_CAST(sipName_SetArtProvider), (PyCFunction)meth_wxAuiTabContainer_SetArtProvider, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_SetArtProvider)},
    {SIP_MLNAME_CAST(sipName_SetColour), (PyCFunction)meth_wxAuiTabContainer_SetColour, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_SetColour)},
    {SIP_MLNAME_CAST(sipName_SetFlags), (PyCFunction)meth_wxAuiTabContainer_SetFlags, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_SetFlags)},
    {SIP_MLNAME_CAST(sipName_SetMeasuringFont), (PyCFunction)meth_wxAuiTabContainer_SetMeasuringFont, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_SetMeasuringFont)},
    {SIP_MLNAME_CAST(sipName_SetNoneActive), meth_wxAuiTabContainer_SetNoneActive, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_SetNoneActive)},
    {SIP_MLNAME_CAST(sipName_SetNormalFont), (PyCFunction)meth_wxAuiTabContainer_SetNormalFont, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_SetNormalFont)},
    {SIP_MLNAME_CAST(sipName_SetRect), (PyCFunction)meth_wxAuiTabContainer_SetRect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_SetRect)},
    {SIP_MLNAME_CAST(sipName_SetSelectedFont), (PyCFunction)meth_wxAuiTabContainer_SetSelectedFont, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_SetSelectedFont)},
    {SIP_MLNAME_CAST(sipName_SetTabOffset), (PyCFunction)meth_wxAuiTabContainer_SetTabOffset, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_SetTabOffset)},
    {SIP_MLNAME_CAST(sipName_TabHitTest), (PyCFunction)meth_wxAuiTabContainer_TabHitTest, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiTabContainer_TabHitTest)}
};

sipVariableDef variables_wxAuiTabContainer[] = {
    {PropertyVariable, sipName_TabOffset, &methods_wxAuiTabContainer[11], &methods_wxAuiTabContainer[29], NULL, NULL},
    {PropertyVariable, sipName_Pages, &methods_wxAuiTabContainer[10], NULL, NULL, NULL},
    {PropertyVariable, sipName_PageCount, &methods_wxAuiTabContainer[9], NULL, NULL, NULL},
    {PropertyVariable, sipName_Flags, &methods_wxAuiTabContainer[6], &methods_wxAuiTabContainer[23], NULL, NULL},
    {PropertyVariable, sipName_ArtProvider, &methods_wxAuiTabContainer[5], &methods_wxAuiTabContainer[21], NULL, NULL},
    {PropertyVariable, sipName_ActivePage, &methods_wxAuiTabContainer[4], &methods_wxAuiTabContainer[20], NULL, NULL},
};

PyDoc_STRVAR(doc_wxAuiTabContainer, "AuiTabContainer()\n"
"\n"
"wxAuiTabContainer is a class which contains information about each\n"
"tab.");


sipClassTypeDef sipTypeDef__aui_wxAuiTabContainer = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxAuiTabContainer,
        {0},
        0
    },
    {
        sipNameNr_AuiTabContainer,
        {0, 0, 1},
        31, methods_wxAuiTabContainer,
        0, 0,
        6, variables_wxAuiTabContainer,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxAuiTabContainer,
    -1,
    -1,
    0,
    0,
    init_type_wxAuiTabContainer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxAuiTabContainer,
    assign_wxAuiTabContainer,
    array_wxAuiTabContainer,
    copy_wxAuiTabContainer,
    release_wxAuiTabContainer,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
