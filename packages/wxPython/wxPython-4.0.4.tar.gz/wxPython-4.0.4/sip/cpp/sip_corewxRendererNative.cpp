/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/renderer.h>

        #include <wx/renderer.h>
        #include <wx/renderer.h>
        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/dc.h>
        #include <wx/gdicmn.h>
        #include <wx/renderer.h>
    void _wxRendererNative_DrawTitleBarBitmap(wxRendererNative* self, wxWindow *win, wxDC *dc, const wxRect *rect, wxTitleBarButton button, int flags)
    {
        #ifdef wxHAS_DRAW_TITLE_BAR_BITMAP
            self->DrawTitleBarBitmap(win, *dc, *rect, button, flags);
        #endif
    }


PyDoc_STRVAR(doc_wxRendererNative_DrawCheckBox, "DrawCheckBox(win, dc, rect, flags=0)\n"
"\n"
"Draw a check box.");

extern "C" {static PyObject *meth_wxRendererNative_DrawCheckBox(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawCheckBox(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawCheckBox);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawCheckBox(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawCheckBox, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawComboBoxDropButton, "DrawComboBoxDropButton(win, dc, rect, flags=0)\n"
"\n"
"Draw a button like the one used by wxComboBox to show a drop down\n"
"window.");

extern "C" {static PyObject *meth_wxRendererNative_DrawComboBoxDropButton(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawComboBoxDropButton(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawComboBoxDropButton);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawComboBoxDropButton(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawComboBoxDropButton, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawDropArrow, "DrawDropArrow(win, dc, rect, flags=0)\n"
"\n"
"Draw a drop down arrow that is suitable for use outside a combo box.");

extern "C" {static PyObject *meth_wxRendererNative_DrawDropArrow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawDropArrow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawDropArrow);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawDropArrow(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawDropArrow, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawFocusRect, "DrawFocusRect(win, dc, rect, flags=0)\n"
"\n"
"Draw a focus rectangle using the specified rectangle.");

extern "C" {static PyObject *meth_wxRendererNative_DrawFocusRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawFocusRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawFocusRect);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawFocusRect(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawFocusRect, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawHeaderButton, "DrawHeaderButton(win, dc, rect, flags=0, sortArrow=HDR_SORT_ICON_NONE, params=None) -> int\n"
"\n"
"Draw the header control button (used, for example, by wxListCtrl).");

extern "C" {static PyObject *meth_wxRendererNative_DrawHeaderButton(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawHeaderButton(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxHeaderSortIconType sortArrow = wxHDR_SORT_ICON_NONE;
         ::wxHeaderButtonParams* params = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
            sipName_sortArrow,
            sipName_params,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J9J1|iEJ8", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags, sipType_wxHeaderSortIconType, &sortArrow, sipType_wxHeaderButtonParams, &params))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawHeaderButton);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DrawHeaderButton(win,*dc,*rect,flags,sortArrow,params);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawHeaderButton, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawHeaderButtonContents, "DrawHeaderButtonContents(win, dc, rect, flags=0, sortArrow=HDR_SORT_ICON_NONE, params=None) -> int\n"
"\n"
"Draw the contents of a header control button (label, sort arrows,\n"
"etc.).");

extern "C" {static PyObject *meth_wxRendererNative_DrawHeaderButtonContents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawHeaderButtonContents(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxHeaderSortIconType sortArrow = wxHDR_SORT_ICON_NONE;
         ::wxHeaderButtonParams* params = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
            sipName_sortArrow,
            sipName_params,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J9J1|iEJ8", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags, sipType_wxHeaderSortIconType, &sortArrow, sipType_wxHeaderButtonParams, &params))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawHeaderButtonContents);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DrawHeaderButtonContents(win,*dc,*rect,flags,sortArrow,params);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawHeaderButtonContents, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawItemSelectionRect, "DrawItemSelectionRect(win, dc, rect, flags=0)\n"
"\n"
"Draw a selection rectangle underneath the text as used e.g.");

extern "C" {static PyObject *meth_wxRendererNative_DrawItemSelectionRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawItemSelectionRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawItemSelectionRect);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawItemSelectionRect(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawItemSelectionRect, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawPushButton, "DrawPushButton(win, dc, rect, flags=0)\n"
"\n"
"Draw a blank push button that looks very similar to wxButton.");

extern "C" {static PyObject *meth_wxRendererNative_DrawPushButton(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawPushButton(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawPushButton);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawPushButton(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawPushButton, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawSplitterBorder, "DrawSplitterBorder(win, dc, rect, flags=0)\n"
"\n"
"Draw the border for sash window: this border must be such that the\n"
"sash drawn by DrawSplitterSash() blends into it well.");

extern "C" {static PyObject *meth_wxRendererNative_DrawSplitterBorder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawSplitterBorder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawSplitterBorder);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawSplitterBorder(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawSplitterBorder, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawSplitterSash, "DrawSplitterSash(win, dc, size, position, orient, flags=0)\n"
"\n"
"Draw a sash.");

extern "C" {static PyObject *meth_wxRendererNative_DrawSplitterSash(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawSplitterSash(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxSize* size;
        int sizeState = 0;
         ::wxCoord position;
         ::wxOrientation orient;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_size,
            sipName_position,
            sipName_orient,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J9J1iE|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxSize, &size, &sizeState, &position, sipType_wxOrientation, &orient, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawSplitterSash);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawSplitterSash(win,*dc,*size,position,orient,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawSplitterSash, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawTreeItemButton, "DrawTreeItemButton(win, dc, rect, flags=0)\n"
"\n"
"Draw the expanded/collapsed icon for a tree control item.");

extern "C" {static PyObject *meth_wxRendererNative_DrawTreeItemButton(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawTreeItemButton(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawTreeItemButton);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawTreeItemButton(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawTreeItemButton, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawChoice, "DrawChoice(win, dc, rect, flags=0)\n"
"\n"
"Draw a native wxChoice.");

extern "C" {static PyObject *meth_wxRendererNative_DrawChoice(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawChoice(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawChoice);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawChoice(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawChoice, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawComboBox, "DrawComboBox(win, dc, rect, flags=0)\n"
"\n"
"Draw a native wxComboBox.");

extern "C" {static PyObject *meth_wxRendererNative_DrawComboBox(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawComboBox(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawComboBox);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawComboBox(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawComboBox, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawTextCtrl, "DrawTextCtrl(win, dc, rect, flags=0)\n"
"\n"
"Draw a native wxTextCtrl frame.");

extern "C" {static PyObject *meth_wxRendererNative_DrawTextCtrl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawTextCtrl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawTextCtrl);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawTextCtrl(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawTextCtrl, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawRadioBitmap, "DrawRadioBitmap(win, dc, rect, flags=0)\n"
"\n"
"Draw a native wxRadioButton bitmap.");

extern "C" {static PyObject *meth_wxRendererNative_DrawRadioBitmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawRadioBitmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawRadioBitmap);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawRadioBitmap(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawRadioBitmap, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawTitleBarBitmap, "DrawTitleBarBitmap(win, dc, rect, button, flags=0)\n"
"\n"
"Draw a title bar button in the given state.");

extern "C" {static PyObject *meth_wxRendererNative_DrawTitleBarBitmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawTitleBarBitmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
         ::wxTitleBarButton button;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_button,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J9J1E|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, sipType_wxTitleBarButton, &button, &flags))
        {
            int sipIsErr = 0;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawTitleBarBitmap);
                return NULL;
            }

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxRendererNative_DrawTitleBarBitmap(sipCpp, win, dc, rect, button, flags);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (sipIsErr)
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawTitleBarBitmap, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_GetCheckBoxSize, "GetCheckBoxSize(win) -> Size\n"
"\n"
"Returns the size of a check box.");

extern "C" {static PyObject *meth_wxRendererNative_GetCheckBoxSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_GetCheckBoxSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win))
        {
             ::wxSize*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_GetCheckBoxSize);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->GetCheckBoxSize(win));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_GetCheckBoxSize, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_GetHeaderButtonHeight, "GetHeaderButtonHeight(win) -> int\n"
"\n"
"Returns the height of a header button, either a fixed platform height\n"
"if available, or a generic height based on the win window's font.");

extern "C" {static PyObject *meth_wxRendererNative_GetHeaderButtonHeight(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_GetHeaderButtonHeight(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_GetHeaderButtonHeight);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetHeaderButtonHeight(win);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_GetHeaderButtonHeight, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_GetHeaderButtonMargin, "GetHeaderButtonMargin(win) -> int\n"
"\n"
"Returns the horizontal margin on the left and right sides of header\n"
"button's label.");

extern "C" {static PyObject *meth_wxRendererNative_GetHeaderButtonMargin(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_GetHeaderButtonMargin(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_GetHeaderButtonMargin);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetHeaderButtonMargin(win);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_GetHeaderButtonMargin, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_GetSplitterParams, "GetSplitterParams(win) -> SplitterRenderParams\n"
"\n"
"Get the splitter parameters, see wxSplitterRenderParams.");

extern "C" {static PyObject *meth_wxRendererNative_GetSplitterParams(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_GetSplitterParams(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxWindow* win;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win))
        {
             ::wxSplitterRenderParams*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_GetSplitterParams);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSplitterRenderParams(sipCpp->GetSplitterParams(win));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSplitterRenderParams,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_GetSplitterParams, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_GetVersion, "GetVersion() -> RendererVersion\n"
"\n"
"This function is used for version checking: Load() refuses to load any\n"
"shared libraries implementing an older or incompatible version.");

extern "C" {static PyObject *meth_wxRendererNative_GetVersion(PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_GetVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxRendererNative *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRendererNative, &sipCpp))
        {
             ::wxRendererVersion*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_GetVersion);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRendererVersion(sipCpp->GetVersion());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRendererVersion,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_GetVersion, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_Get, "Get() -> RendererNative\n"
"\n"
"Return the currently used renderer.");

extern "C" {static PyObject *meth_wxRendererNative_Get(PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_Get(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::wxRendererNative*sipRes;

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = & ::wxRendererNative::Get();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRendererNative,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_Get, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_GetDefault, "GetDefault() -> RendererNative\n"
"\n"
"Return the default (native) implementation for this platform  this is\n"
"also the one used by default but this may be changed by calling Set()\n"
"in which case the return value of this method may be different from\n"
"the return value of Get().");

extern "C" {static PyObject *meth_wxRendererNative_GetDefault(PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_GetDefault(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::wxRendererNative*sipRes;

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = & ::wxRendererNative::GetDefault();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRendererNative,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_GetDefault, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_GetGeneric, "GetGeneric() -> RendererNative\n"
"\n"
"Return the generic implementation of the renderer.");

extern "C" {static PyObject *meth_wxRendererNative_GetGeneric(PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_GetGeneric(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::wxRendererNative*sipRes;

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = & ::wxRendererNative::GetGeneric();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRendererNative,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_GetGeneric, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_Load, "Load(name) -> RendererNative\n"
"\n"
"Load the renderer from the specified DLL, the returned pointer must be\n"
"deleted by caller if not NULL when it is not used any more.");

extern "C" {static PyObject *meth_wxRendererNative_Load(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_Load(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* name;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1", sipType_wxString,&name, &nameState))
        {
             ::wxRendererNative*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRendererNative::Load(*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRendererNative,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_Load, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRendererNative_Set, "Set(renderer) -> RendererNative\n"
"\n"
"Set the renderer to use, passing NULL reverts to using the default\n"
"renderer (the global renderer must always exist).");

extern "C" {static PyObject *meth_wxRendererNative_Set(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_Set(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxRendererNative* renderer;

        static const char *sipKwdList[] = {
            sipName_renderer,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J8", sipType_wxRendererNative, &renderer))
        {
             ::wxRendererNative*sipRes;

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRendererNative::Set(renderer);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRendererNative,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_Set, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxRendererNative(void *, int);}
static void release_wxRendererNative(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::wxRendererNative *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxRendererNative(sipSimpleWrapper *);}
static void dealloc_wxRendererNative(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxRendererNative(sipGetAddress(sipSelf), 0);
    }
}


static PyMethodDef methods_wxRendererNative[] = {
    {SIP_MLNAME_CAST(sipName_DrawCheckBox), (PyCFunction)meth_wxRendererNative_DrawCheckBox, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawCheckBox)},
    {SIP_MLNAME_CAST(sipName_DrawChoice), (PyCFunction)meth_wxRendererNative_DrawChoice, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawChoice)},
    {SIP_MLNAME_CAST(sipName_DrawComboBox), (PyCFunction)meth_wxRendererNative_DrawComboBox, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawComboBox)},
    {SIP_MLNAME_CAST(sipName_DrawComboBoxDropButton), (PyCFunction)meth_wxRendererNative_DrawComboBoxDropButton, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawComboBoxDropButton)},
    {SIP_MLNAME_CAST(sipName_DrawDropArrow), (PyCFunction)meth_wxRendererNative_DrawDropArrow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawDropArrow)},
    {SIP_MLNAME_CAST(sipName_DrawFocusRect), (PyCFunction)meth_wxRendererNative_DrawFocusRect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawFocusRect)},
    {SIP_MLNAME_CAST(sipName_DrawHeaderButton), (PyCFunction)meth_wxRendererNative_DrawHeaderButton, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawHeaderButton)},
    {SIP_MLNAME_CAST(sipName_DrawHeaderButtonContents), (PyCFunction)meth_wxRendererNative_DrawHeaderButtonContents, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawHeaderButtonContents)},
    {SIP_MLNAME_CAST(sipName_DrawItemSelectionRect), (PyCFunction)meth_wxRendererNative_DrawItemSelectionRect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawItemSelectionRect)},
    {SIP_MLNAME_CAST(sipName_DrawPushButton), (PyCFunction)meth_wxRendererNative_DrawPushButton, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawPushButton)},
    {SIP_MLNAME_CAST(sipName_DrawRadioBitmap), (PyCFunction)meth_wxRendererNative_DrawRadioBitmap, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawRadioBitmap)},
    {SIP_MLNAME_CAST(sipName_DrawSplitterBorder), (PyCFunction)meth_wxRendererNative_DrawSplitterBorder, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawSplitterBorder)},
    {SIP_MLNAME_CAST(sipName_DrawSplitterSash), (PyCFunction)meth_wxRendererNative_DrawSplitterSash, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawSplitterSash)},
    {SIP_MLNAME_CAST(sipName_DrawTextCtrl), (PyCFunction)meth_wxRendererNative_DrawTextCtrl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawTextCtrl)},
    {SIP_MLNAME_CAST(sipName_DrawTitleBarBitmap), (PyCFunction)meth_wxRendererNative_DrawTitleBarBitmap, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawTitleBarBitmap)},
    {SIP_MLNAME_CAST(sipName_DrawTreeItemButton), (PyCFunction)meth_wxRendererNative_DrawTreeItemButton, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawTreeItemButton)},
    {SIP_MLNAME_CAST(sipName_Get), meth_wxRendererNative_Get, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRendererNative_Get)},
    {SIP_MLNAME_CAST(sipName_GetCheckBoxSize), (PyCFunction)meth_wxRendererNative_GetCheckBoxSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_GetCheckBoxSize)},
    {SIP_MLNAME_CAST(sipName_GetDefault), meth_wxRendererNative_GetDefault, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRendererNative_GetDefault)},
    {SIP_MLNAME_CAST(sipName_GetGeneric), meth_wxRendererNative_GetGeneric, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRendererNative_GetGeneric)},
    {SIP_MLNAME_CAST(sipName_GetHeaderButtonHeight), (PyCFunction)meth_wxRendererNative_GetHeaderButtonHeight, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_GetHeaderButtonHeight)},
    {SIP_MLNAME_CAST(sipName_GetHeaderButtonMargin), (PyCFunction)meth_wxRendererNative_GetHeaderButtonMargin, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_GetHeaderButtonMargin)},
    {SIP_MLNAME_CAST(sipName_GetSplitterParams), (PyCFunction)meth_wxRendererNative_GetSplitterParams, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_GetSplitterParams)},
    {SIP_MLNAME_CAST(sipName_GetVersion), meth_wxRendererNative_GetVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRendererNative_GetVersion)},
    {SIP_MLNAME_CAST(sipName_Load), (PyCFunction)meth_wxRendererNative_Load, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_Load)},
    {SIP_MLNAME_CAST(sipName_Set), (PyCFunction)meth_wxRendererNative_Set, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_Set)}
};

sipVariableDef variables_wxRendererNative[] = {
    {PropertyVariable, sipName_Version, &methods_wxRendererNative[23], NULL, NULL, NULL},
};

PyDoc_STRVAR(doc_wxRendererNative, "First, a brief introduction to wxRendererNative and why it is needed.");


sipClassTypeDef sipTypeDef__core_wxRendererNative = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_wxRendererNative,
        {0},
        0
    },
    {
        sipNameNr_RendererNative,
        {0, 0, 1},
        26, methods_wxRendererNative,
        0, 0,
        1, variables_wxRendererNative,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxRendererNative,
    -1,
    -1,
    0,
    0,
    0,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxRendererNative,
    0,
    0,
    0,
    release_wxRendererNative,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
