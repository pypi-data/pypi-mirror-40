/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/translation.h>



class sipwxFileTranslationsLoader : public  ::wxFileTranslationsLoader
{
public:
    sipwxFileTranslationsLoader();
    sipwxFileTranslationsLoader(const  ::wxFileTranslationsLoader&);
    virtual ~sipwxFileTranslationsLoader();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxMsgCatalog* LoadCatalog(const  ::wxString&,const  ::wxString&);
     ::wxArrayString GetAvailableTranslations(const  ::wxString&) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxFileTranslationsLoader(const sipwxFileTranslationsLoader &);
    sipwxFileTranslationsLoader &operator = (const sipwxFileTranslationsLoader &);

    char sipPyMethods[2];
};

sipwxFileTranslationsLoader::sipwxFileTranslationsLoader():  ::wxFileTranslationsLoader(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxFileTranslationsLoader::sipwxFileTranslationsLoader(const  ::wxFileTranslationsLoader& a0):  ::wxFileTranslationsLoader(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxFileTranslationsLoader::~sipwxFileTranslationsLoader()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxMsgCatalog* sipwxFileTranslationsLoader::LoadCatalog(const  ::wxString& domain,const  ::wxString& lang)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_LoadCatalog);

    if (!sipMeth)
        return  ::wxFileTranslationsLoader::LoadCatalog(domain,lang);

    extern  ::wxMsgCatalog* sipVH__core_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&,const  ::wxString&);

    return sipVH__core_2(sipGILState, 0, sipPySelf, sipMeth, domain, lang);
}

 ::wxArrayString sipwxFileTranslationsLoader::GetAvailableTranslations(const  ::wxString& domain) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_GetAvailableTranslations);

    if (!sipMeth)
        return  ::wxFileTranslationsLoader::GetAvailableTranslations(domain);

    extern  ::wxArrayString sipVH__core_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&);

    return sipVH__core_3(sipGILState, 0, sipPySelf, sipMeth, domain);
}


PyDoc_STRVAR(doc_wxFileTranslationsLoader_AddCatalogLookupPathPrefix, "AddCatalogLookupPathPrefix(prefix)\n"
"\n"
"Add a prefix to the catalog lookup path: the message catalog files\n"
"will be looked up under prefix/lang/LC_MESSAGES and prefix/lang\n"
"directories (in this order).");

extern "C" {static PyObject *meth_wxFileTranslationsLoader_AddCatalogLookupPathPrefix(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileTranslationsLoader_AddCatalogLookupPathPrefix(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* prefix;
        int prefixState = 0;

        static const char *sipKwdList[] = {
            sipName_prefix,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "J1", sipType_wxString,&prefix, &prefixState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
             ::wxFileTranslationsLoader::AddCatalogLookupPathPrefix(*prefix);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(prefix),sipType_wxString,prefixState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileTranslationsLoader, sipName_AddCatalogLookupPathPrefix, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileTranslationsLoader_LoadCatalog, "LoadCatalog(self, domain: object, lang: object) -> MsgCatalog");

extern "C" {static PyObject *meth_wxFileTranslationsLoader_LoadCatalog(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileTranslationsLoader_LoadCatalog(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* domain;
        int domainState = 0;
        const  ::wxString* lang;
        int langState = 0;
         ::wxFileTranslationsLoader *sipCpp;

        static const char *sipKwdList[] = {
            sipName_domain,
            sipName_lang,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1", &sipSelf, sipType_wxFileTranslationsLoader, &sipCpp, sipType_wxString,&domain, &domainState, sipType_wxString,&lang, &langState))
        {
             ::wxMsgCatalog*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxFileTranslationsLoader::LoadCatalog(*domain,*lang) : sipCpp->LoadCatalog(*domain,*lang));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(domain),sipType_wxString,domainState);
            sipReleaseType(const_cast< ::wxString *>(lang),sipType_wxString,langState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxMsgCatalog,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileTranslationsLoader, sipName_LoadCatalog, doc_wxFileTranslationsLoader_LoadCatalog);

    return NULL;
}


PyDoc_STRVAR(doc_wxFileTranslationsLoader_GetAvailableTranslations, "GetAvailableTranslations(self, domain: object) -> object");

extern "C" {static PyObject *meth_wxFileTranslationsLoader_GetAvailableTranslations(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFileTranslationsLoader_GetAvailableTranslations(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* domain;
        int domainState = 0;
        const  ::wxFileTranslationsLoader *sipCpp;

        static const char *sipKwdList[] = {
            sipName_domain,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxFileTranslationsLoader, &sipCpp, sipType_wxString,&domain, &domainState))
        {
             ::wxArrayString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxArrayString((sipSelfWasArg ? sipCpp-> ::wxFileTranslationsLoader::GetAvailableTranslations(*domain) : sipCpp->GetAvailableTranslations(*domain)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(domain),sipType_wxString,domainState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxArrayString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FileTranslationsLoader, sipName_GetAvailableTranslations, doc_wxFileTranslationsLoader_GetAvailableTranslations);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxFileTranslationsLoader(void *, const sipTypeDef *);}
static void *cast_wxFileTranslationsLoader(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxFileTranslationsLoader *sipCpp = reinterpret_cast< ::wxFileTranslationsLoader *>(sipCppV);

    if (targetType == sipType_wxTranslationsLoader)
        return static_cast< ::wxTranslationsLoader *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxFileTranslationsLoader(void *, int);}
static void release_wxFileTranslationsLoader(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxFileTranslationsLoader *>(sipCppV);
    else
        delete reinterpret_cast< ::wxFileTranslationsLoader *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_wxFileTranslationsLoader(void *, SIP_SSIZE_T, void *);}
static void assign_wxFileTranslationsLoader(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxFileTranslationsLoader *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxFileTranslationsLoader *>(sipSrc);
}


extern "C" {static void *array_wxFileTranslationsLoader(SIP_SSIZE_T);}
static void *array_wxFileTranslationsLoader(SIP_SSIZE_T sipNrElem)
{
    return new  ::wxFileTranslationsLoader[sipNrElem];
}


extern "C" {static void *copy_wxFileTranslationsLoader(const void *, SIP_SSIZE_T);}
static void *copy_wxFileTranslationsLoader(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxFileTranslationsLoader(reinterpret_cast<const  ::wxFileTranslationsLoader *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxFileTranslationsLoader(sipSimpleWrapper *);}
static void dealloc_wxFileTranslationsLoader(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxFileTranslationsLoader *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxFileTranslationsLoader(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxFileTranslationsLoader(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxFileTranslationsLoader(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxFileTranslationsLoader *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxFileTranslationsLoader();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxFileTranslationsLoader* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxFileTranslationsLoader, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxFileTranslationsLoader(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxFileTranslationsLoader[] = {{543, 255, 1}};


static PyMethodDef methods_wxFileTranslationsLoader[] = {
    {SIP_MLNAME_CAST(sipName_AddCatalogLookupPathPrefix), (PyCFunction)meth_wxFileTranslationsLoader_AddCatalogLookupPathPrefix, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileTranslationsLoader_AddCatalogLookupPathPrefix)},
    {SIP_MLNAME_CAST(sipName_GetAvailableTranslations), (PyCFunction)meth_wxFileTranslationsLoader_GetAvailableTranslations, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileTranslationsLoader_GetAvailableTranslations)},
    {SIP_MLNAME_CAST(sipName_LoadCatalog), (PyCFunction)meth_wxFileTranslationsLoader_LoadCatalog, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFileTranslationsLoader_LoadCatalog)}
};

PyDoc_STRVAR(doc_wxFileTranslationsLoader, "Standard wxTranslationsLoader implementation.");


sipClassTypeDef sipTypeDef__core_wxFileTranslationsLoader = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxFileTranslationsLoader,
        {0},
        0
    },
    {
        sipNameNr_FileTranslationsLoader,
        {0, 0, 1},
        3, methods_wxFileTranslationsLoader,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxFileTranslationsLoader,
    -1,
    -1,
    supers_wxFileTranslationsLoader,
    0,
    init_type_wxFileTranslationsLoader,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxFileTranslationsLoader,
    assign_wxFileTranslationsLoader,
    array_wxFileTranslationsLoader,
    copy_wxFileTranslationsLoader,
    release_wxFileTranslationsLoader,
    cast_wxFileTranslationsLoader,
    0,
    0,
    0,
    0,
    0,
    0
};
