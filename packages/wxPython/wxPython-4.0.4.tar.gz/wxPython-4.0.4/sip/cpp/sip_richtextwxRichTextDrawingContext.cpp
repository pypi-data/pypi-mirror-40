/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_richtext.h"

        #include <wx/richtext/richtextbuffer.h>

        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


PyDoc_STRVAR(doc_wxRichTextDrawingContext_Init, "Init()");

extern "C" {static PyObject *meth_wxRichTextDrawingContext_Init(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextDrawingContext_Init(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxRichTextDrawingContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextDrawingContext, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Init();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextDrawingContext, sipName_Init, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextDrawingContext_HasVirtualAttributes, "HasVirtualAttributes(obj) -> bool\n"
"\n"
"Does this object have virtual attributes? Virtual attributes can be\n"
"provided for visual cues without affecting the actual styling.");

extern "C" {static PyObject *meth_wxRichTextDrawingContext_HasVirtualAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextDrawingContext_HasVirtualAttributes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxRichTextObject* obj;
        const  ::wxRichTextDrawingContext *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxRichTextDrawingContext, &sipCpp, sipType_wxRichTextObject, &obj))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->HasVirtualAttributes(obj);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextDrawingContext, sipName_HasVirtualAttributes, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextDrawingContext_GetVirtualAttributes, "GetVirtualAttributes(obj) -> RichTextAttr\n"
"\n"
"Returns the virtual attributes for this object.");

extern "C" {static PyObject *meth_wxRichTextDrawingContext_GetVirtualAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextDrawingContext_GetVirtualAttributes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxRichTextObject* obj;
        const  ::wxRichTextDrawingContext *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxRichTextDrawingContext, &sipCpp, sipType_wxRichTextObject, &obj))
        {
             ::wxRichTextAttr*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRichTextAttr(sipCpp->GetVirtualAttributes(obj));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRichTextAttr,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextDrawingContext, sipName_GetVirtualAttributes, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextDrawingContext_ApplyVirtualAttributes, "ApplyVirtualAttributes(attr, obj) -> bool\n"
"\n"
"Applies any virtual attributes relevant to this object.");

extern "C" {static PyObject *meth_wxRichTextDrawingContext_ApplyVirtualAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextDrawingContext_ApplyVirtualAttributes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxRichTextAttr* attr;
         ::wxRichTextObject* obj;
        const  ::wxRichTextDrawingContext *sipCpp;

        static const char *sipKwdList[] = {
            sipName_attr,
            sipName_obj,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J8", &sipSelf, sipType_wxRichTextDrawingContext, &sipCpp, sipType_wxRichTextAttr, &attr, sipType_wxRichTextObject, &obj))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ApplyVirtualAttributes(*attr,obj);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextDrawingContext, sipName_ApplyVirtualAttributes, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextDrawingContext_GetVirtualSubobjectAttributesCount, "GetVirtualSubobjectAttributesCount(obj) -> int\n"
"\n"
"Gets the count for mixed virtual attributes for individual positions\n"
"within the object.");

extern "C" {static PyObject *meth_wxRichTextDrawingContext_GetVirtualSubobjectAttributesCount(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextDrawingContext_GetVirtualSubobjectAttributesCount(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxRichTextObject* obj;
        const  ::wxRichTextDrawingContext *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxRichTextDrawingContext, &sipCpp, sipType_wxRichTextObject, &obj))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetVirtualSubobjectAttributesCount(obj);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextDrawingContext, sipName_GetVirtualSubobjectAttributesCount, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextDrawingContext_GetVirtualSubobjectAttributes, "GetVirtualSubobjectAttributes(obj, positions, attributes) -> int\n"
"\n"
"Gets the mixed virtual attributes for individual positions within the\n"
"object.");

extern "C" {static PyObject *meth_wxRichTextDrawingContext_GetVirtualSubobjectAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextDrawingContext_GetVirtualSubobjectAttributes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxRichTextObject* obj;
         ::wxArrayInt* positions;
        int positionsState = 0;
         ::wxRichTextAttrArray* attributes;
        const  ::wxRichTextDrawingContext *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
            sipName_positions,
            sipName_attributes,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J1J9", &sipSelf, sipType_wxRichTextDrawingContext, &sipCpp, sipType_wxRichTextObject, &obj, sipType_wxArrayInt,&positions, &positionsState, sipType_wxRichTextAttrArray, &attributes))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetVirtualSubobjectAttributes(obj,*positions,*attributes);
            Py_END_ALLOW_THREADS
            sipReleaseType(positions,sipType_wxArrayInt,positionsState);

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextDrawingContext, sipName_GetVirtualSubobjectAttributes, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextDrawingContext_HasVirtualText, "HasVirtualText(obj) -> bool\n"
"\n"
"Do we have virtual text for this object? Virtual text allows an\n"
"application to replace characters in an object for editing and display\n"
"purposes, for example for highlighting special characters.");

extern "C" {static PyObject *meth_wxRichTextDrawingContext_HasVirtualText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextDrawingContext_HasVirtualText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxRichTextPlainText* obj;
        const  ::wxRichTextDrawingContext *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxRichTextDrawingContext, &sipCpp, sipType_wxRichTextPlainText, &obj))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->HasVirtualText(obj);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextDrawingContext, sipName_HasVirtualText, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextDrawingContext_GetVirtualText, "GetVirtualText(obj, text) -> bool\n"
"\n"
"Gets the virtual text for this object.");

extern "C" {static PyObject *meth_wxRichTextDrawingContext_GetVirtualText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextDrawingContext_GetVirtualText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxRichTextPlainText* obj;
         ::wxString* text;
        int textState = 0;
        const  ::wxRichTextDrawingContext *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
            sipName_text,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J1", &sipSelf, sipType_wxRichTextDrawingContext, &sipCpp, sipType_wxRichTextPlainText, &obj, sipType_wxString,&text, &textState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetVirtualText(obj,*text);
            Py_END_ALLOW_THREADS
            sipReleaseType(text,sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextDrawingContext, sipName_GetVirtualText, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextDrawingContext_EnableVirtualAttributes, "EnableVirtualAttributes(b)\n"
"\n"
"Enables virtual attribute processing.");

extern "C" {static PyObject *meth_wxRichTextDrawingContext_EnableVirtualAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextDrawingContext_EnableVirtualAttributes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool b;
         ::wxRichTextDrawingContext *sipCpp;

        static const char *sipKwdList[] = {
            sipName_b,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxRichTextDrawingContext, &sipCpp, &b))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EnableVirtualAttributes(b);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextDrawingContext, sipName_EnableVirtualAttributes, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextDrawingContext_GetVirtualAttributesEnabled, "GetVirtualAttributesEnabled() -> bool\n"
"\n"
"Returns true if virtual attribute processing is enabled.");

extern "C" {static PyObject *meth_wxRichTextDrawingContext_GetVirtualAttributesEnabled(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextDrawingContext_GetVirtualAttributesEnabled(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxRichTextDrawingContext *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextDrawingContext, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetVirtualAttributesEnabled();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextDrawingContext, sipName_GetVirtualAttributesEnabled, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxRichTextDrawingContext(void *, const sipTypeDef *);}
static void *cast_wxRichTextDrawingContext(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxRichTextDrawingContext *sipCpp = reinterpret_cast< ::wxRichTextDrawingContext *>(sipCppV);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxRichTextDrawingContext(void *, int);}
static void release_wxRichTextDrawingContext(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::wxRichTextDrawingContext *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxRichTextDrawingContext(sipSimpleWrapper *);}
static void dealloc_wxRichTextDrawingContext(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxRichTextDrawingContext(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_wxRichTextDrawingContext(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxRichTextDrawingContext(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::wxRichTextDrawingContext *sipCpp = 0;

    {
         ::wxRichTextBuffer* buffer;

        static const char *sipKwdList[] = {
            sipName_buffer,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8", sipType_wxRichTextBuffer, &buffer))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxRichTextDrawingContext(buffer);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            return sipCpp;
        }
    }

    {
        const  ::wxRichTextDrawingContext* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxRichTextDrawingContext, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxRichTextDrawingContext(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxRichTextDrawingContext[] = {{42, 0, 1}};


static PyMethodDef methods_wxRichTextDrawingContext[] = {
    {SIP_MLNAME_CAST(sipName_ApplyVirtualAttributes), (PyCFunction)meth_wxRichTextDrawingContext_ApplyVirtualAttributes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextDrawingContext_ApplyVirtualAttributes)},
    {SIP_MLNAME_CAST(sipName_EnableVirtualAttributes), (PyCFunction)meth_wxRichTextDrawingContext_EnableVirtualAttributes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextDrawingContext_EnableVirtualAttributes)},
    {SIP_MLNAME_CAST(sipName_GetVirtualAttributes), (PyCFunction)meth_wxRichTextDrawingContext_GetVirtualAttributes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextDrawingContext_GetVirtualAttributes)},
    {SIP_MLNAME_CAST(sipName_GetVirtualAttributesEnabled), meth_wxRichTextDrawingContext_GetVirtualAttributesEnabled, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextDrawingContext_GetVirtualAttributesEnabled)},
    {SIP_MLNAME_CAST(sipName_GetVirtualSubobjectAttributes), (PyCFunction)meth_wxRichTextDrawingContext_GetVirtualSubobjectAttributes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextDrawingContext_GetVirtualSubobjectAttributes)},
    {SIP_MLNAME_CAST(sipName_GetVirtualSubobjectAttributesCount), (PyCFunction)meth_wxRichTextDrawingContext_GetVirtualSubobjectAttributesCount, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextDrawingContext_GetVirtualSubobjectAttributesCount)},
    {SIP_MLNAME_CAST(sipName_GetVirtualText), (PyCFunction)meth_wxRichTextDrawingContext_GetVirtualText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextDrawingContext_GetVirtualText)},
    {SIP_MLNAME_CAST(sipName_HasVirtualAttributes), (PyCFunction)meth_wxRichTextDrawingContext_HasVirtualAttributes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextDrawingContext_HasVirtualAttributes)},
    {SIP_MLNAME_CAST(sipName_HasVirtualText), (PyCFunction)meth_wxRichTextDrawingContext_HasVirtualText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextDrawingContext_HasVirtualText)},
    {SIP_MLNAME_CAST(sipName_Init), meth_wxRichTextDrawingContext_Init, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextDrawingContext_Init)}
};


extern "C" {static PyObject *varget_wxRichTextDrawingContext_m_buffer(void *, PyObject *, PyObject *);}
static PyObject *varget_wxRichTextDrawingContext_m_buffer(void *sipSelf, PyObject *, PyObject *)
{
     ::wxRichTextBuffer*sipVal;
     ::wxRichTextDrawingContext *sipCpp = reinterpret_cast< ::wxRichTextDrawingContext *>(sipSelf);

    sipVal = sipCpp->m_buffer;

    return sipConvertFromType(sipVal, sipType_wxRichTextBuffer, NULL);
}


extern "C" {static int varset_wxRichTextDrawingContext_m_buffer(void *, PyObject *, PyObject *);}
static int varset_wxRichTextDrawingContext_m_buffer(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::wxRichTextBuffer*sipVal;
     ::wxRichTextDrawingContext *sipCpp = reinterpret_cast< ::wxRichTextDrawingContext *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::wxRichTextBuffer *>(sipForceConvertToType(sipPy,sipType_wxRichTextBuffer,NULL,0,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->m_buffer = sipVal;

    return 0;
}

sipVariableDef variables_wxRichTextDrawingContext[] = {
    {PropertyVariable, sipName_VirtualAttributesEnabled, &methods_wxRichTextDrawingContext[3], NULL, NULL, NULL},
    {InstanceVariable, sipName_m_buffer, (PyMethodDef *)varget_wxRichTextDrawingContext_m_buffer, (PyMethodDef *)varset_wxRichTextDrawingContext_m_buffer, NULL, NULL},
};

PyDoc_STRVAR(doc_wxRichTextDrawingContext, "RichTextDrawingContext(buffer)\n"
"\n"
"A class for passing information to drawing and measuring functions.");


sipClassTypeDef sipTypeDef__richtext_wxRichTextDrawingContext = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxRichTextDrawingContext,
        {0},
        0
    },
    {
        sipNameNr_RichTextDrawingContext,
        {0, 0, 1},
        10, methods_wxRichTextDrawingContext,
        0, 0,
        2, variables_wxRichTextDrawingContext,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxRichTextDrawingContext,
    -1,
    -1,
    supers_wxRichTextDrawingContext,
    0,
    init_type_wxRichTextDrawingContext,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxRichTextDrawingContext,
    0,
    0,
    0,
    release_wxRichTextDrawingContext,
    cast_wxRichTextDrawingContext,
    0,
    0,
    0,
    0,
    0,
    0
};
