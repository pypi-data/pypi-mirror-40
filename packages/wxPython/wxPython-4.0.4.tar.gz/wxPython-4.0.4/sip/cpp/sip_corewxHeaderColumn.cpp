/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/headercol.h>

        #include <wx/bitmap.h>


class sipwxHeaderColumn : public  ::wxHeaderColumn
{
public:
    sipwxHeaderColumn();
    sipwxHeaderColumn(const  ::wxHeaderColumn&);
    virtual ~sipwxHeaderColumn();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool IsSortOrderAscending() const;
    bool IsSortKey() const;
    bool IsHidden() const;
    bool IsReorderable() const;
    bool IsSortable() const;
    bool IsResizeable() const;
    int GetFlags() const;
     ::wxAlignment GetAlignment() const;
    int GetMinWidth() const;
    int GetWidth() const;
     ::wxBitmap GetBitmap() const;
     ::wxString GetTitle() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxHeaderColumn(const sipwxHeaderColumn &);
    sipwxHeaderColumn &operator = (const sipwxHeaderColumn &);

    char sipPyMethods[12];
};

sipwxHeaderColumn::sipwxHeaderColumn():  ::wxHeaderColumn(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxHeaderColumn::sipwxHeaderColumn(const  ::wxHeaderColumn& a0):  ::wxHeaderColumn(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxHeaderColumn::~sipwxHeaderColumn()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxHeaderColumn::IsSortOrderAscending() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,sipName_HeaderColumn,sipName_IsSortOrderAscending);

    if (!sipMeth)
        return 0;

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHeaderColumn::IsSortKey() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,sipName_HeaderColumn,sipName_IsSortKey);

    if (!sipMeth)
        return 0;

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHeaderColumn::IsHidden() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_IsHidden);

    if (!sipMeth)
        return  ::wxHeaderColumn::IsHidden();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHeaderColumn::IsReorderable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_IsReorderable);

    if (!sipMeth)
        return  ::wxHeaderColumn::IsReorderable();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHeaderColumn::IsSortable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_IsSortable);

    if (!sipMeth)
        return  ::wxHeaderColumn::IsSortable();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHeaderColumn::IsResizeable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_IsResizeable);

    if (!sipMeth)
        return  ::wxHeaderColumn::IsResizeable();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxHeaderColumn::GetFlags() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,sipName_HeaderColumn,sipName_GetFlags);

    if (!sipMeth)
        return 0;

    extern int sipVH__core_101(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_101(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxAlignment sipwxHeaderColumn::GetAlignment() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,sipName_HeaderColumn,sipName_GetAlignment);

    if (!sipMeth)
        return ::wxALIGN_INVALID;

    extern  ::wxAlignment sipVH__core_154(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_154(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxHeaderColumn::GetMinWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,sipName_HeaderColumn,sipName_GetMinWidth);

    if (!sipMeth)
        return 0;

    extern int sipVH__core_101(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_101(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxHeaderColumn::GetWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,sipName_HeaderColumn,sipName_GetWidth);

    if (!sipMeth)
        return 0;

    extern int sipVH__core_101(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_101(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBitmap sipwxHeaderColumn::GetBitmap() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,sipName_HeaderColumn,sipName_GetBitmap);

    if (!sipMeth)
        return  ::wxBitmap();

    extern  ::wxBitmap sipVH__core_72(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_72(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxString sipwxHeaderColumn::GetTitle() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,sipName_HeaderColumn,sipName_GetTitle);

    if (!sipMeth)
        return  ::wxString();

    extern  ::wxString sipVH__core_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_13(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxHeaderColumn_GetTitle, "GetTitle() -> String\n"
"\n"
"Get the text shown in the column header.");

extern "C" {static PyObject *meth_wxHeaderColumn_GetTitle(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumn_GetTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxHeaderColumn *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderColumn, &sipCpp))
        {
             ::wxString*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_HeaderColumn, sipName_GetTitle);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetTitle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumn, sipName_GetTitle, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumn_GetBitmap, "GetBitmap() -> Bitmap\n"
"\n"
"Returns the bitmap in the header of the column, if any.");

extern "C" {static PyObject *meth_wxHeaderColumn_GetBitmap(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumn_GetBitmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxHeaderColumn *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderColumn, &sipCpp))
        {
             ::wxBitmap*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_HeaderColumn, sipName_GetBitmap);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxBitmap(sipCpp->GetBitmap());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxBitmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumn, sipName_GetBitmap, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumn_GetWidth, "GetWidth() -> int\n"
"\n"
"Returns the current width of the column.");

extern "C" {static PyObject *meth_wxHeaderColumn_GetWidth(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumn_GetWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxHeaderColumn *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderColumn, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_HeaderColumn, sipName_GetWidth);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetWidth();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumn, sipName_GetWidth, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumn_GetMinWidth, "GetMinWidth() -> int\n"
"\n"
"Return the minimal column width.");

extern "C" {static PyObject *meth_wxHeaderColumn_GetMinWidth(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumn_GetMinWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxHeaderColumn *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderColumn, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_HeaderColumn, sipName_GetMinWidth);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetMinWidth();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumn, sipName_GetMinWidth, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumn_GetAlignment, "GetAlignment() -> Alignment\n"
"\n"
"Returns the current column alignment.");

extern "C" {static PyObject *meth_wxHeaderColumn_GetAlignment(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumn_GetAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxHeaderColumn *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderColumn, &sipCpp))
        {
             ::wxAlignment sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_HeaderColumn, sipName_GetAlignment);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetAlignment();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxAlignment);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumn, sipName_GetAlignment, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumn_GetFlags, "GetFlags() -> int\n"
"\n"
"Get the column flags.");

extern "C" {static PyObject *meth_wxHeaderColumn_GetFlags(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumn_GetFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxHeaderColumn *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderColumn, &sipCpp))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_HeaderColumn, sipName_GetFlags);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetFlags();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumn, sipName_GetFlags, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumn_HasFlag, "HasFlag(flag) -> bool\n"
"\n"
"Return true if the specified flag is currently set for this column.");

extern "C" {static PyObject *meth_wxHeaderColumn_HasFlag(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumn_HasFlag(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int flag;
        const  ::wxHeaderColumn *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flag,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxHeaderColumn, &sipCpp, &flag))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->HasFlag(flag);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumn, sipName_HasFlag, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumn_IsResizeable, "IsResizeable() -> bool\n"
"\n"
"Return true if the column can be resized by the user.");

extern "C" {static PyObject *meth_wxHeaderColumn_IsResizeable(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumn_IsResizeable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHeaderColumn *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderColumn, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHeaderColumn::IsResizeable() : sipCpp->IsResizeable());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumn, sipName_IsResizeable, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumn_IsSortable, "IsSortable() -> bool\n"
"\n"
"Returns true if the column can be clicked by user to sort the control\n"
"contents by the field in this column.");

extern "C" {static PyObject *meth_wxHeaderColumn_IsSortable(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumn_IsSortable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHeaderColumn *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderColumn, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHeaderColumn::IsSortable() : sipCpp->IsSortable());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumn, sipName_IsSortable, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumn_IsReorderable, "IsReorderable() -> bool\n"
"\n"
"Returns true if the column can be dragged by user to change its order.");

extern "C" {static PyObject *meth_wxHeaderColumn_IsReorderable(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumn_IsReorderable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHeaderColumn *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderColumn, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHeaderColumn::IsReorderable() : sipCpp->IsReorderable());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumn, sipName_IsReorderable, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumn_IsHidden, "IsHidden() -> bool\n"
"\n"
"Returns true if the column is currently hidden.");

extern "C" {static PyObject *meth_wxHeaderColumn_IsHidden(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumn_IsHidden(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHeaderColumn *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderColumn, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHeaderColumn::IsHidden() : sipCpp->IsHidden());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumn, sipName_IsHidden, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumn_IsShown, "IsShown() -> bool\n"
"\n"
"Returns true if the column is currently shown.");

extern "C" {static PyObject *meth_wxHeaderColumn_IsShown(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumn_IsShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxHeaderColumn *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderColumn, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsShown();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumn, sipName_IsShown, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumn_IsSortKey, "IsSortKey() -> bool\n"
"\n"
"Returns true if the column is currently used for sorting.");

extern "C" {static PyObject *meth_wxHeaderColumn_IsSortKey(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumn_IsSortKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxHeaderColumn *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderColumn, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_HeaderColumn, sipName_IsSortKey);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsSortKey();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumn, sipName_IsSortKey, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumn_IsSortOrderAscending, "IsSortOrderAscending() -> bool\n"
"\n"
"Returns true, if the sort order is ascending.");

extern "C" {static PyObject *meth_wxHeaderColumn_IsSortOrderAscending(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumn_IsSortOrderAscending(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxHeaderColumn *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderColumn, &sipCpp))
        {
            bool sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_HeaderColumn, sipName_IsSortOrderAscending);
                return NULL;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsSortOrderAscending();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumn, sipName_IsSortOrderAscending, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxHeaderColumn(void *, int);}
static void release_wxHeaderColumn(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxHeaderColumn *>(sipCppV);
    else
        delete reinterpret_cast< ::wxHeaderColumn *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxHeaderColumn(sipSimpleWrapper *);}
static void dealloc_wxHeaderColumn(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxHeaderColumn *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxHeaderColumn(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxHeaderColumn(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxHeaderColumn(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxHeaderColumn *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxHeaderColumn();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxHeaderColumn* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxHeaderColumn, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxHeaderColumn(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_wxHeaderColumn[] = {
    {SIP_MLNAME_CAST(sipName_GetAlignment), meth_wxHeaderColumn_GetAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderColumn_GetAlignment)},
    {SIP_MLNAME_CAST(sipName_GetBitmap), meth_wxHeaderColumn_GetBitmap, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderColumn_GetBitmap)},
    {SIP_MLNAME_CAST(sipName_GetFlags), meth_wxHeaderColumn_GetFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderColumn_GetFlags)},
    {SIP_MLNAME_CAST(sipName_GetMinWidth), meth_wxHeaderColumn_GetMinWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderColumn_GetMinWidth)},
    {SIP_MLNAME_CAST(sipName_GetTitle), meth_wxHeaderColumn_GetTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderColumn_GetTitle)},
    {SIP_MLNAME_CAST(sipName_GetWidth), meth_wxHeaderColumn_GetWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderColumn_GetWidth)},
    {SIP_MLNAME_CAST(sipName_HasFlag), (PyCFunction)meth_wxHeaderColumn_HasFlag, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderColumn_HasFlag)},
    {SIP_MLNAME_CAST(sipName_IsHidden), meth_wxHeaderColumn_IsHidden, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderColumn_IsHidden)},
    {SIP_MLNAME_CAST(sipName_IsReorderable), meth_wxHeaderColumn_IsReorderable, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderColumn_IsReorderable)},
    {SIP_MLNAME_CAST(sipName_IsResizeable), meth_wxHeaderColumn_IsResizeable, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderColumn_IsResizeable)},
    {SIP_MLNAME_CAST(sipName_IsShown), meth_wxHeaderColumn_IsShown, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderColumn_IsShown)},
    {SIP_MLNAME_CAST(sipName_IsSortKey), meth_wxHeaderColumn_IsSortKey, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderColumn_IsSortKey)},
    {SIP_MLNAME_CAST(sipName_IsSortOrderAscending), meth_wxHeaderColumn_IsSortOrderAscending, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderColumn_IsSortOrderAscending)},
    {SIP_MLNAME_CAST(sipName_IsSortable), meth_wxHeaderColumn_IsSortable, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderColumn_IsSortable)}
};

sipVariableDef variables_wxHeaderColumn[] = {
    {PropertyVariable, sipName_SortKey, &methods_wxHeaderColumn[11], NULL, NULL, NULL},
    {PropertyVariable, sipName_SortOrderAscending, &methods_wxHeaderColumn[12], NULL, NULL, NULL},
    {PropertyVariable, sipName_Shown, &methods_wxHeaderColumn[10], NULL, NULL, NULL},
    {PropertyVariable, sipName_Hidden, &methods_wxHeaderColumn[7], NULL, NULL, NULL},
    {PropertyVariable, sipName_Reorderable, &methods_wxHeaderColumn[8], NULL, NULL, NULL},
    {PropertyVariable, sipName_Sortable, &methods_wxHeaderColumn[13], NULL, NULL, NULL},
    {PropertyVariable, sipName_Resizeable, &methods_wxHeaderColumn[9], NULL, NULL, NULL},
    {PropertyVariable, sipName_Width, &methods_wxHeaderColumn[5], NULL, NULL, NULL},
    {PropertyVariable, sipName_Title, &methods_wxHeaderColumn[4], NULL, NULL, NULL},
    {PropertyVariable, sipName_MinWidth, &methods_wxHeaderColumn[3], NULL, NULL, NULL},
    {PropertyVariable, sipName_Flags, &methods_wxHeaderColumn[2], NULL, NULL, NULL},
    {PropertyVariable, sipName_Bitmap, &methods_wxHeaderColumn[1], NULL, NULL, NULL},
    {PropertyVariable, sipName_Alignment, &methods_wxHeaderColumn[0], NULL, NULL, NULL},
};

PyDoc_STRVAR(doc_wxHeaderColumn, "Represents a column header in controls displaying tabular data such as\n"
"wxDataViewCtrl or wxGrid.");


sipClassTypeDef sipTypeDef__core_wxHeaderColumn = {
    {
        -1,
        0,
        0,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_wxHeaderColumn,
        {0},
        0
    },
    {
        sipNameNr_HeaderColumn,
        {0, 0, 1},
        14, methods_wxHeaderColumn,
        0, 0,
        13, variables_wxHeaderColumn,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxHeaderColumn,
    -1,
    -1,
    0,
    0,
    init_type_wxHeaderColumn,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxHeaderColumn,
    0,
    0,
    0,
    release_wxHeaderColumn,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
