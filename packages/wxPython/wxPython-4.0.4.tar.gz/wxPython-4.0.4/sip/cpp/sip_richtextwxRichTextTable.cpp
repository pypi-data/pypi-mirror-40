/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_richtext.h"

        #include <wx/richtext/richtextbuffer.h>

        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/position.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/window.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/dc.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/gdicmn.h>
        #include <wx/xml/xml.h>
        #include <wx/richtext/richtextxml.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        
        #include <wx/richtext/richtextstyles.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextstyles.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/image.h>
        #include <wx/richtext/richtextctrl.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxRichTextTable : public  ::wxRichTextTable
{
public:
    sipwxRichTextTable( ::wxRichTextObject*);
    sipwxRichTextTable(const  ::wxRichTextTable&);
    virtual ~sipwxRichTextTable();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool AddColumns(int,int,const  ::wxRichTextAttr&);
    bool AddRows(int,int,const  ::wxRichTextAttr&);
    bool DeleteColumns(int,int);
    bool DeleteRows(int,int);
    bool SetCellStyle(const  ::wxRichTextSelection&,const  ::wxRichTextAttr&,int);
    bool CreateTable(int,int);
    void ClearTable();
     ::wxPosition GetFocusedCell() const;
    bool GetCellRowColumnPosition(long,int&,int&) const;
     ::wxRichTextCell* GetCell(long) const;
     ::wxRichTextCell* GetCell(int,int) const;
    bool UpdateFloatingObjects(const  ::wxRect&, ::wxRichTextObject*);
    void InvalidateHierarchy(const  ::wxRichTextRange&);
    void DoInvalidate(const  ::wxRichTextRange&);
    const  ::wxRichTextAttr& GetBasicStyle() const;
    void SetBasicStyle(const  ::wxRichTextAttr&);
    const  ::wxRichTextAttr& GetDefaultStyle() const;
    bool SetDefaultStyle(const  ::wxRichTextAttr&);
     ::wxString GetText() const;
    void UpdateRanges();
    bool ApplyStyleSheet( ::wxRichTextStyleSheet*);
    bool CopyFragment(const  ::wxRichTextRange&, ::wxRichTextParagraphLayoutBox&);
    bool InsertFragment(long, ::wxRichTextParagraphLayoutBox&);
    void PrepareContent( ::wxRichTextParagraphLayoutBox&);
    bool HasParagraphAttributes(const  ::wxRichTextRange&,const  ::wxRichTextAttr&) const;
    bool HasCharacterAttributes(const  ::wxRichTextRange&,const  ::wxRichTextAttr&) const;
    bool SetObjectPropertiesWithUndo( ::wxRichTextObject&,const  ::wxRichTextProperties&, ::wxRichTextObject*);
    bool SetProperties(const  ::wxRichTextRange&,const  ::wxRichTextProperties&,int);
    bool FindNextParagraphNumber( ::wxRichTextParagraph*, ::wxRichTextAttr&) const;
    bool DoNumberList(const  ::wxRichTextRange&,const  ::wxRichTextRange&,int, ::wxRichTextListStyleDefinition*,int,int,int);
    bool ClearListStyle(const  ::wxRichTextRange&,int);
    bool GetStyleForRange(const  ::wxRichTextRange&, ::wxRichTextAttr&);
    bool DoGetStyle(long, ::wxRichTextAttr&,bool);
    bool GetUncombinedStyle(long, ::wxRichTextAttr&);
    bool GetStyle(long, ::wxRichTextAttr&);
    void SetStyle( ::wxRichTextObject*,const  ::wxRichTextAttr&,int);
    bool SetStyle(const  ::wxRichTextRange&,const  ::wxRichTextAttr&,int);
    bool PositionToXY(long,long*,long*) const;
    long XYToPosition(long,long) const;
     ::wxString GetParagraphText(long) const;
    int GetLineCount() const;
    int GetParagraphCount() const;
    int GetParagraphLength(long) const;
     ::wxRichTextParagraph* GetParagraphForLine( ::wxRichTextLine*) const;
     ::wxRichTextParagraph* GetParagraphAtLine(long) const;
     ::wxRichTextObject* GetLeafObjectAtPosition(long) const;
     ::wxRichTextLine* GetLineForVisibleLineNumber(long) const;
    long GetVisibleLineNumber(long,bool,bool) const;
     ::wxSize GetLineSizeAtPosition(long,bool) const;
     ::wxRichTextParagraph* GetParagraphAtPosition(long,bool) const;
     ::wxRichTextLine* GetLineAtYPosition(int) const;
     ::wxRichTextLine* GetLineAtPosition(long,bool) const;
     ::wxRichTextRange AddParagraphs(const  ::wxString&, ::wxRichTextAttr*);
     ::wxRichTextRange AddImage(const  ::wxImage&, ::wxRichTextAttr*);
     ::wxRichTextRange AddParagraph(const  ::wxString&, ::wxRichTextAttr*);
    void Reset();
    void Clear();
     ::wxRichTextStyleSheet* GetStyleSheet() const;
    bool PromoteList(int,const  ::wxRichTextRange&,const  ::wxString&,int,int);
    bool PromoteList(int,const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int);
    bool NumberList(const  ::wxRichTextRange&,const  ::wxString&,int,int,int);
    bool NumberList(const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int,int);
    bool SetListStyle(const  ::wxRichTextRange&,const  ::wxString&,int,int,int);
    bool SetListStyle(const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int,int);
    void Move(const  ::wxPoint&);
     ::wxRichTextObject* Clone() const;
    void Show(bool);
    bool IsTopLevel() const;
    bool AdjustAttributes( ::wxRichTextAttr&, ::wxRichTextDrawingContext&);
    bool LayoutToBestSize( ::wxDC&, ::wxRichTextDrawingContext&, ::wxRichTextBuffer*,const  ::wxRichTextAttr&,const  ::wxRichTextAttr&,const  ::wxRect&,const  ::wxRect&,int);
     ::wxRect GetAvailableContentArea( ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&) const;
    int GetBottomMargin() const;
    int GetTopMargin() const;
    int GetRightMargin() const;
    int GetLeftMargin() const;
    void SetMargins(int,int,int,int);
    void SetMargins(int);
     ::wxRichTextParagraphLayoutBox* GetParentContainer() const;
     ::wxRichTextParagraphLayoutBox* GetContainer() const;
    void SetParent( ::wxRichTextObject*);
     ::wxRichTextObject* GetParent() const;
    bool IsAtomic() const;
    bool IsComposite() const;
     ::wxRect GetRect() const;
     ::wxPoint GetAbsolutePosition() const;
    void SetPosition(const  ::wxPoint&);
     ::wxPoint GetPosition() const;
     ::wxTextAttrSize GetNaturalSize() const;
    void SetMinSize(const  ::wxSize&);
     ::wxSize GetMinSize() const;
    void SetMaxSize(const  ::wxSize&);
     ::wxSize GetMaxSize() const;
    void SetCachedSize(const  ::wxSize&);
     ::wxSize GetCachedSize() const;
     ::wxRichTextSelection GetSelection(long,long) const;
    bool HandlesChildSelections() const;
    void Invalidate(const  ::wxRichTextRange&);
     ::wxString GetXMLNodeName() const;
    bool UsesParagraphAttributes() const;
    bool ImportFromXML( ::wxRichTextBuffer*, ::wxXmlNode*, ::wxRichTextXMLHandler*,bool*);
    bool AcceptsFocus() const;
     ::wxString GetPropertiesMenuLabel() const;
    bool EditProperties( ::wxWindow*, ::wxRichTextBuffer*);
    bool CanEditProperties() const;
     ::wxRichTextObject* Split( ::wxRichTextDrawingContext&);
    bool CanSplit( ::wxRichTextDrawingContext&) const;
    bool Merge( ::wxRichTextObject*, ::wxRichTextDrawingContext&);
    bool CanMerge( ::wxRichTextObject*, ::wxRichTextDrawingContext&) const;
     ::wxString GetTextForRange(const  ::wxRichTextRange&) const;
    int GetFloatDirection() const;
    bool IsFloating() const;
    bool IsFloatable() const;
    bool IsEmpty() const;
    bool DeleteRange(const  ::wxRichTextRange&);
    void CalculateRange(long,long&);
     ::wxRichTextObject* DoSplit(long);
    bool GetRangeSize(const  ::wxRichTextRange&, ::wxSize&,int&, ::wxDC&, ::wxRichTextDrawingContext&,int,const  ::wxPoint&,const  ::wxSize&, ::wxArrayInt*) const;
     ::wxSize GetBestSize() const;
    bool FindPosition( ::wxDC&, ::wxRichTextDrawingContext&,long, ::wxPoint&,int*,bool);
    int HitTest( ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxPoint&,long&, ::wxRichTextObject**, ::wxRichTextObject**,int);
    bool Layout( ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&,const  ::wxRect&,int);
    bool Draw( ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRichTextRange&,const  ::wxRichTextSelection&,const  ::wxRect&,int,int);
     ::wxRichTextObject* GetChildAtPosition(long) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxRichTextTable(const sipwxRichTextTable &);
    sipwxRichTextTable &operator = (const sipwxRichTextTable &);

    char sipPyMethods[123];
};

sipwxRichTextTable::sipwxRichTextTable( ::wxRichTextObject*parent):  ::wxRichTextTable(parent), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextTable::sipwxRichTextTable(const  ::wxRichTextTable& obj):  ::wxRichTextTable(obj), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextTable::~sipwxRichTextTable()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxRichTextTable::AddColumns(int startCol,int noCols,const  ::wxRichTextAttr& attr)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_AddColumns);

    if (!sipMeth)
        return  ::wxRichTextTable::AddColumns(startCol,noCols,attr);

    extern bool sipVH__richtext_106(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::wxRichTextAttr&);

    return sipVH__richtext_106(sipGILState, 0, sipPySelf, sipMeth, startCol, noCols, attr);
}

bool sipwxRichTextTable::AddRows(int startRow,int noRows,const  ::wxRichTextAttr& attr)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_AddRows);

    if (!sipMeth)
        return  ::wxRichTextTable::AddRows(startRow,noRows,attr);

    extern bool sipVH__richtext_106(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::wxRichTextAttr&);

    return sipVH__richtext_106(sipGILState, 0, sipPySelf, sipMeth, startRow, noRows, attr);
}

bool sipwxRichTextTable::DeleteColumns(int startCol,int noCols)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_DeleteColumns);

    if (!sipMeth)
        return  ::wxRichTextTable::DeleteColumns(startCol,noCols);

    extern bool sipVH__richtext_104(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH__richtext_104(sipGILState, 0, sipPySelf, sipMeth, startCol, noCols);
}

bool sipwxRichTextTable::DeleteRows(int startRow,int noRows)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_DeleteRows);

    if (!sipMeth)
        return  ::wxRichTextTable::DeleteRows(startRow,noRows);

    extern bool sipVH__richtext_104(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH__richtext_104(sipGILState, 0, sipPySelf, sipMeth, startRow, noRows);
}

bool sipwxRichTextTable::SetCellStyle(const  ::wxRichTextSelection& selection,const  ::wxRichTextAttr& style,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_SetCellStyle);

    if (!sipMeth)
        return  ::wxRichTextTable::SetCellStyle(selection,style,flags);

    extern bool sipVH__richtext_105(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextSelection&,const  ::wxRichTextAttr&,int);

    return sipVH__richtext_105(sipGILState, 0, sipPySelf, sipMeth, selection, style, flags);
}

bool sipwxRichTextTable::CreateTable(int rows,int cols)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_CreateTable);

    if (!sipMeth)
        return  ::wxRichTextTable::CreateTable(rows,cols);

    extern bool sipVH__richtext_104(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH__richtext_104(sipGILState, 0, sipPySelf, sipMeth, rows, cols);
}

void sipwxRichTextTable::ClearTable()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_ClearTable);

    if (!sipMeth)
    {
         ::wxRichTextTable::ClearTable();
        return;
    }

    extern void sipVH__richtext_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__richtext_40(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPosition sipwxRichTextTable::GetFocusedCell() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_GetFocusedCell);

    if (!sipMeth)
        return  ::wxRichTextTable::GetFocusedCell();

    extern  ::wxPosition sipVH__richtext_103(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_103(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextTable::GetCellRowColumnPosition(long pos,int& row,int& col) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_GetCellRowColumnPosition);

    if (!sipMeth)
        return  ::wxRichTextTable::GetCellRowColumnPosition(pos,row,col);

    extern bool sipVH__richtext_102(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,int&,int&);

    return sipVH__richtext_102(sipGILState, 0, sipPySelf, sipMeth, pos, row, col);
}

 ::wxRichTextCell* sipwxRichTextTable::GetCell(long pos) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_GetCell);

    if (!sipMeth)
        return  ::wxRichTextTable::GetCell(pos);

    extern  ::wxRichTextCell* sipVH__richtext_101(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_101(sipGILState, 0, sipPySelf, sipMeth, pos);
}

 ::wxRichTextCell* sipwxRichTextTable::GetCell(int row,int col) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_GetCell);

    if (!sipMeth)
        return  ::wxRichTextTable::GetCell(row,col);

    extern  ::wxRichTextCell* sipVH__richtext_100(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH__richtext_100(sipGILState, 0, sipPySelf, sipMeth, row, col);
}

bool sipwxRichTextTable::UpdateFloatingObjects(const  ::wxRect& availableRect, ::wxRichTextObject*untilObj)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_UpdateFloatingObjects);

    if (!sipMeth)
        return  ::wxRichTextTable::UpdateFloatingObjects(availableRect,untilObj);

    extern bool sipVH__richtext_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRect&, ::wxRichTextObject*);

    return sipVH__richtext_73(sipGILState, 0, sipPySelf, sipMeth, availableRect, untilObj);
}

void sipwxRichTextTable::InvalidateHierarchy(const  ::wxRichTextRange& invalidRange)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_InvalidateHierarchy);

    if (!sipMeth)
    {
         ::wxRichTextTable::InvalidateHierarchy(invalidRange);
        return;
    }

    extern void sipVH__richtext_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    sipVH__richtext_18(sipGILState, 0, sipPySelf, sipMeth, invalidRange);
}

void sipwxRichTextTable::DoInvalidate(const  ::wxRichTextRange& invalidRange)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_DoInvalidate);

    if (!sipMeth)
    {
         ::wxRichTextTable::DoInvalidate(invalidRange);
        return;
    }

    extern void sipVH__richtext_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    sipVH__richtext_18(sipGILState, 0, sipPySelf, sipMeth, invalidRange);
}

const  ::wxRichTextAttr& sipwxRichTextTable::GetBasicStyle() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_GetBasicStyle);

    if (!sipMeth)
        return  ::wxRichTextTable::GetBasicStyle();

    extern const  ::wxRichTextAttr& sipVH__richtext_71(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_71(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextTable::SetBasicStyle(const  ::wxRichTextAttr& style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_SetBasicStyle);

    if (!sipMeth)
    {
         ::wxRichTextTable::SetBasicStyle(style);
        return;
    }

    extern void sipVH__richtext_72(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextAttr&);

    sipVH__richtext_72(sipGILState, 0, sipPySelf, sipMeth, style);
}

const  ::wxRichTextAttr& sipwxRichTextTable::GetDefaultStyle() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_GetDefaultStyle);

    if (!sipMeth)
        return  ::wxRichTextTable::GetDefaultStyle();

    extern const  ::wxRichTextAttr& sipVH__richtext_71(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_71(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextTable::SetDefaultStyle(const  ::wxRichTextAttr& style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_SetDefaultStyle);

    if (!sipMeth)
        return  ::wxRichTextTable::SetDefaultStyle(style);

    extern bool sipVH__richtext_70(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextAttr&);

    return sipVH__richtext_70(sipGILState, 0, sipPySelf, sipMeth, style);
}

 ::wxString sipwxRichTextTable::GetText() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_GetText);

    if (!sipMeth)
        return  ::wxRichTextTable::GetText();

    extern  ::wxString sipVH__richtext_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_16(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextTable::UpdateRanges()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_UpdateRanges);

    if (!sipMeth)
    {
         ::wxRichTextTable::UpdateRanges();
        return;
    }

    extern void sipVH__richtext_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__richtext_40(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextTable::ApplyStyleSheet( ::wxRichTextStyleSheet*styleSheet)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_ApplyStyleSheet);

    if (!sipMeth)
        return  ::wxRichTextTable::ApplyStyleSheet(styleSheet);

    extern bool sipVH__richtext_69(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextStyleSheet*);

    return sipVH__richtext_69(sipGILState, 0, sipPySelf, sipMeth, styleSheet);
}

bool sipwxRichTextTable::CopyFragment(const  ::wxRichTextRange& range, ::wxRichTextParagraphLayoutBox& fragment)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_CopyFragment);

    if (!sipMeth)
        return  ::wxRichTextTable::CopyFragment(range,fragment);

    extern bool sipVH__richtext_68(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&, ::wxRichTextParagraphLayoutBox&);

    return sipVH__richtext_68(sipGILState, 0, sipPySelf, sipMeth, range, fragment);
}

bool sipwxRichTextTable::InsertFragment(long position, ::wxRichTextParagraphLayoutBox& fragment)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_InsertFragment);

    if (!sipMeth)
        return  ::wxRichTextTable::InsertFragment(position,fragment);

    extern bool sipVH__richtext_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long, ::wxRichTextParagraphLayoutBox&);

    return sipVH__richtext_67(sipGILState, 0, sipPySelf, sipMeth, position, fragment);
}

void sipwxRichTextTable::PrepareContent( ::wxRichTextParagraphLayoutBox& container)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_PrepareContent);

    if (!sipMeth)
    {
         ::wxRichTextTable::PrepareContent(container);
        return;
    }

    extern void sipVH__richtext_66(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextParagraphLayoutBox&);

    sipVH__richtext_66(sipGILState, 0, sipPySelf, sipMeth, container);
}

bool sipwxRichTextTable::HasParagraphAttributes(const  ::wxRichTextRange& range,const  ::wxRichTextAttr& style) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_HasParagraphAttributes);

    if (!sipMeth)
        return  ::wxRichTextTable::HasParagraphAttributes(range,style);

    extern bool sipVH__richtext_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxRichTextAttr&);

    return sipVH__richtext_65(sipGILState, 0, sipPySelf, sipMeth, range, style);
}

bool sipwxRichTextTable::HasCharacterAttributes(const  ::wxRichTextRange& range,const  ::wxRichTextAttr& style) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_HasCharacterAttributes);

    if (!sipMeth)
        return  ::wxRichTextTable::HasCharacterAttributes(range,style);

    extern bool sipVH__richtext_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxRichTextAttr&);

    return sipVH__richtext_65(sipGILState, 0, sipPySelf, sipMeth, range, style);
}

bool sipwxRichTextTable::SetObjectPropertiesWithUndo( ::wxRichTextObject& obj,const  ::wxRichTextProperties& properties, ::wxRichTextObject*objToSet)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_SetObjectPropertiesWithUndo);

    if (!sipMeth)
        return  ::wxRichTextTable::SetObjectPropertiesWithUndo(obj,properties,objToSet);

    extern bool sipVH__richtext_64(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject&,const  ::wxRichTextProperties&, ::wxRichTextObject*);

    return sipVH__richtext_64(sipGILState, 0, sipPySelf, sipMeth, obj, properties, objToSet);
}

bool sipwxRichTextTable::SetProperties(const  ::wxRichTextRange& range,const  ::wxRichTextProperties& properties,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_SetProperties);

    if (!sipMeth)
        return  ::wxRichTextTable::SetProperties(range,properties,flags);

    extern bool sipVH__richtext_63(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxRichTextProperties&,int);

    return sipVH__richtext_63(sipGILState, 0, sipPySelf, sipMeth, range, properties, flags);
}

bool sipwxRichTextTable::FindNextParagraphNumber( ::wxRichTextParagraph*previousParagraph, ::wxRichTextAttr& attr) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_FindNextParagraphNumber);

    if (!sipMeth)
        return  ::wxRichTextTable::FindNextParagraphNumber(previousParagraph,attr);

    extern bool sipVH__richtext_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextParagraph*, ::wxRichTextAttr&);

    return sipVH__richtext_62(sipGILState, 0, sipPySelf, sipMeth, previousParagraph, attr);
}

bool sipwxRichTextTable::DoNumberList(const  ::wxRichTextRange& range,const  ::wxRichTextRange& promotionRange,int promoteBy, ::wxRichTextListStyleDefinition*styleDef,int flags,int startFrom,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_DoNumberList);

    if (!sipMeth)
        return  ::wxRichTextTable::DoNumberList(range,promotionRange,promoteBy,styleDef,flags,startFrom,specifiedLevel);

    extern bool sipVH__richtext_61(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxRichTextRange&,int, ::wxRichTextListStyleDefinition*,int,int,int);

    return sipVH__richtext_61(sipGILState, 0, sipPySelf, sipMeth, range, promotionRange, promoteBy, styleDef, flags, startFrom, specifiedLevel);
}

bool sipwxRichTextTable::ClearListStyle(const  ::wxRichTextRange& range,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_ClearListStyle);

    if (!sipMeth)
        return  ::wxRichTextTable::ClearListStyle(range,flags);

    extern bool sipVH__richtext_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,int);

    return sipVH__richtext_60(sipGILState, 0, sipPySelf, sipMeth, range, flags);
}

bool sipwxRichTextTable::GetStyleForRange(const  ::wxRichTextRange& range, ::wxRichTextAttr& style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_GetStyleForRange);

    if (!sipMeth)
        return  ::wxRichTextTable::GetStyleForRange(range,style);

    extern bool sipVH__richtext_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&, ::wxRichTextAttr&);

    return sipVH__richtext_59(sipGILState, 0, sipPySelf, sipMeth, range, style);
}

bool sipwxRichTextTable::DoGetStyle(long position, ::wxRichTextAttr& style,bool combineStyles)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_DoGetStyle);

    if (!sipMeth)
        return  ::wxRichTextTable::DoGetStyle(position,style,combineStyles);

    extern bool sipVH__richtext_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long, ::wxRichTextAttr&,bool);

    return sipVH__richtext_58(sipGILState, 0, sipPySelf, sipMeth, position, style, combineStyles);
}

bool sipwxRichTextTable::GetUncombinedStyle(long position, ::wxRichTextAttr& style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_GetUncombinedStyle);

    if (!sipMeth)
        return  ::wxRichTextTable::GetUncombinedStyle(position,style);

    extern bool sipVH__richtext_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long, ::wxRichTextAttr&);

    return sipVH__richtext_57(sipGILState, 0, sipPySelf, sipMeth, position, style);
}

bool sipwxRichTextTable::GetStyle(long position, ::wxRichTextAttr& style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_GetStyle);

    if (!sipMeth)
        return  ::wxRichTextTable::GetStyle(position,style);

    extern bool sipVH__richtext_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long, ::wxRichTextAttr&);

    return sipVH__richtext_57(sipGILState, 0, sipPySelf, sipMeth, position, style);
}

void sipwxRichTextTable::SetStyle( ::wxRichTextObject*obj,const  ::wxRichTextAttr& textAttr,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_SetStyle);

    if (!sipMeth)
    {
         ::wxRichTextTable::SetStyle(obj,textAttr,flags);
        return;
    }

    extern void sipVH__richtext_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*,const  ::wxRichTextAttr&,int);

    sipVH__richtext_56(sipGILState, 0, sipPySelf, sipMeth, obj, textAttr, flags);
}

bool sipwxRichTextTable::SetStyle(const  ::wxRichTextRange& range,const  ::wxRichTextAttr& style,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_SetStyle);

    if (!sipMeth)
        return  ::wxRichTextTable::SetStyle(range,style,flags);

    extern bool sipVH__richtext_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxRichTextAttr&,int);

    return sipVH__richtext_55(sipGILState, 0, sipPySelf, sipMeth, range, style, flags);
}

bool sipwxRichTextTable::PositionToXY(long pos,long*x,long*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_PositionToXY);

    if (!sipMeth)
        return  ::wxRichTextTable::PositionToXY(pos,x,y);

    extern bool sipVH__richtext_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,long*,long*);

    return sipVH__richtext_54(sipGILState, 0, sipPySelf, sipMeth, pos, x, y);
}

long sipwxRichTextTable::XYToPosition(long x,long y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_XYToPosition);

    if (!sipMeth)
        return  ::wxRichTextTable::XYToPosition(x,y);

    extern long sipVH__richtext_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,long);

    return sipVH__richtext_53(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

 ::wxString sipwxRichTextTable::GetParagraphText(long paragraphNumber) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_GetParagraphText);

    if (!sipMeth)
        return  ::wxRichTextTable::GetParagraphText(paragraphNumber);

    extern  ::wxString sipVH__richtext_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_52(sipGILState, 0, sipPySelf, sipMeth, paragraphNumber);
}

int sipwxRichTextTable::GetLineCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_GetLineCount);

    if (!sipMeth)
        return  ::wxRichTextTable::GetLineCount();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextTable::GetParagraphCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_GetParagraphCount);

    if (!sipMeth)
        return  ::wxRichTextTable::GetParagraphCount();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextTable::GetParagraphLength(long paragraphNumber) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,NULL,sipName_GetParagraphLength);

    if (!sipMeth)
        return  ::wxRichTextTable::GetParagraphLength(paragraphNumber);

    extern int sipVH__richtext_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_51(sipGILState, 0, sipPySelf, sipMeth, paragraphNumber);
}

 ::wxRichTextParagraph* sipwxRichTextTable::GetParagraphForLine( ::wxRichTextLine*line) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[43]),sipPySelf,NULL,sipName_GetParagraphForLine);

    if (!sipMeth)
        return  ::wxRichTextTable::GetParagraphForLine(line);

    extern  ::wxRichTextParagraph* sipVH__richtext_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextLine*);

    return sipVH__richtext_50(sipGILState, 0, sipPySelf, sipMeth, line);
}

 ::wxRichTextParagraph* sipwxRichTextTable::GetParagraphAtLine(long paragraphNumber) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[44]),sipPySelf,NULL,sipName_GetParagraphAtLine);

    if (!sipMeth)
        return  ::wxRichTextTable::GetParagraphAtLine(paragraphNumber);

    extern  ::wxRichTextParagraph* sipVH__richtext_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_49(sipGILState, 0, sipPySelf, sipMeth, paragraphNumber);
}

 ::wxRichTextObject* sipwxRichTextTable::GetLeafObjectAtPosition(long position) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,NULL,sipName_GetLeafObjectAtPosition);

    if (!sipMeth)
        return  ::wxRichTextTable::GetLeafObjectAtPosition(position);

    extern  ::wxRichTextObject* sipVH__richtext_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_6(sipGILState, 0, sipPySelf, sipMeth, position);
}

 ::wxRichTextLine* sipwxRichTextTable::GetLineForVisibleLineNumber(long lineNumber) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,NULL,sipName_GetLineForVisibleLineNumber);

    if (!sipMeth)
        return  ::wxRichTextTable::GetLineForVisibleLineNumber(lineNumber);

    extern  ::wxRichTextLine* sipVH__richtext_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_48(sipGILState, 0, sipPySelf, sipMeth, lineNumber);
}

long sipwxRichTextTable::GetVisibleLineNumber(long pos,bool caretPosition,bool startOfLine) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[47]),sipPySelf,NULL,sipName_GetVisibleLineNumber);

    if (!sipMeth)
        return  ::wxRichTextTable::GetVisibleLineNumber(pos,caretPosition,startOfLine);

    extern long sipVH__richtext_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,bool,bool);

    return sipVH__richtext_47(sipGILState, 0, sipPySelf, sipMeth, pos, caretPosition, startOfLine);
}

 ::wxSize sipwxRichTextTable::GetLineSizeAtPosition(long pos,bool caretPosition) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[48]),sipPySelf,NULL,sipName_GetLineSizeAtPosition);

    if (!sipMeth)
        return  ::wxRichTextTable::GetLineSizeAtPosition(pos,caretPosition);

    extern  ::wxSize sipVH__richtext_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,bool);

    return sipVH__richtext_46(sipGILState, 0, sipPySelf, sipMeth, pos, caretPosition);
}

 ::wxRichTextParagraph* sipwxRichTextTable::GetParagraphAtPosition(long pos,bool caretPosition) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[49]),sipPySelf,NULL,sipName_GetParagraphAtPosition);

    if (!sipMeth)
        return  ::wxRichTextTable::GetParagraphAtPosition(pos,caretPosition);

    extern  ::wxRichTextParagraph* sipVH__richtext_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,bool);

    return sipVH__richtext_45(sipGILState, 0, sipPySelf, sipMeth, pos, caretPosition);
}

 ::wxRichTextLine* sipwxRichTextTable::GetLineAtYPosition(int y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[50]),sipPySelf,NULL,sipName_GetLineAtYPosition);

    if (!sipMeth)
        return  ::wxRichTextTable::GetLineAtYPosition(y);

    extern  ::wxRichTextLine* sipVH__richtext_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__richtext_44(sipGILState, 0, sipPySelf, sipMeth, y);
}

 ::wxRichTextLine* sipwxRichTextTable::GetLineAtPosition(long pos,bool caretPosition) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[51]),sipPySelf,NULL,sipName_GetLineAtPosition);

    if (!sipMeth)
        return  ::wxRichTextTable::GetLineAtPosition(pos,caretPosition);

    extern  ::wxRichTextLine* sipVH__richtext_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,bool);

    return sipVH__richtext_43(sipGILState, 0, sipPySelf, sipMeth, pos, caretPosition);
}

 ::wxRichTextRange sipwxRichTextTable::AddParagraphs(const  ::wxString& text, ::wxRichTextAttr*paraStyle)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[52],sipPySelf,NULL,sipName_AddParagraphs);

    if (!sipMeth)
        return  ::wxRichTextTable::AddParagraphs(text,paraStyle);

    extern  ::wxRichTextRange sipVH__richtext_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&, ::wxRichTextAttr*);

    return sipVH__richtext_41(sipGILState, 0, sipPySelf, sipMeth, text, paraStyle);
}

 ::wxRichTextRange sipwxRichTextTable::AddImage(const  ::wxImage& image, ::wxRichTextAttr*paraStyle)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[53],sipPySelf,NULL,sipName_AddImage);

    if (!sipMeth)
        return  ::wxRichTextTable::AddImage(image,paraStyle);

    extern  ::wxRichTextRange sipVH__richtext_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxImage&, ::wxRichTextAttr*);

    return sipVH__richtext_42(sipGILState, 0, sipPySelf, sipMeth, image, paraStyle);
}

 ::wxRichTextRange sipwxRichTextTable::AddParagraph(const  ::wxString& text, ::wxRichTextAttr*paraStyle)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_AddParagraph);

    if (!sipMeth)
        return  ::wxRichTextTable::AddParagraph(text,paraStyle);

    extern  ::wxRichTextRange sipVH__richtext_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&, ::wxRichTextAttr*);

    return sipVH__richtext_41(sipGILState, 0, sipPySelf, sipMeth, text, paraStyle);
}

void sipwxRichTextTable::Reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_Reset);

    if (!sipMeth)
    {
         ::wxRichTextTable::Reset();
        return;
    }

    extern void sipVH__richtext_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__richtext_40(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextTable::Clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[56],sipPySelf,NULL,sipName_Clear);

    if (!sipMeth)
    {
         ::wxRichTextTable::Clear();
        return;
    }

    extern void sipVH__richtext_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__richtext_40(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRichTextStyleSheet* sipwxRichTextTable::GetStyleSheet() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[57]),sipPySelf,NULL,sipName_GetStyleSheet);

    if (!sipMeth)
        return  ::wxRichTextTable::GetStyleSheet();

    extern  ::wxRichTextStyleSheet* sipVH__richtext_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_39(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextTable::PromoteList(int promoteBy,const  ::wxRichTextRange& range,const  ::wxString& defName,int flags,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[58],sipPySelf,NULL,sipName_PromoteList);

    if (!sipMeth)
        return  ::wxRichTextTable::PromoteList(promoteBy,range,defName,flags,specifiedLevel);

    extern bool sipVH__richtext_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::wxRichTextRange&,const  ::wxString&,int,int);

    return sipVH__richtext_38(sipGILState, 0, sipPySelf, sipMeth, promoteBy, range, defName, flags, specifiedLevel);
}

bool sipwxRichTextTable::PromoteList(int promoteBy,const  ::wxRichTextRange& range, ::wxRichTextListStyleDefinition*def,int flags,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[59],sipPySelf,NULL,sipName_PromoteList);

    if (!sipMeth)
        return  ::wxRichTextTable::PromoteList(promoteBy,range,def,flags,specifiedLevel);

    extern bool sipVH__richtext_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int);

    return sipVH__richtext_37(sipGILState, 0, sipPySelf, sipMeth, promoteBy, range, def, flags, specifiedLevel);
}

bool sipwxRichTextTable::NumberList(const  ::wxRichTextRange& range,const  ::wxString& defName,int flags,int startFrom,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[60],sipPySelf,NULL,sipName_NumberList);

    if (!sipMeth)
        return  ::wxRichTextTable::NumberList(range,defName,flags,startFrom,specifiedLevel);

    extern bool sipVH__richtext_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxString&,int,int,int);

    return sipVH__richtext_36(sipGILState, 0, sipPySelf, sipMeth, range, defName, flags, startFrom, specifiedLevel);
}

bool sipwxRichTextTable::NumberList(const  ::wxRichTextRange& range, ::wxRichTextListStyleDefinition*def,int flags,int startFrom,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[61],sipPySelf,NULL,sipName_NumberList);

    if (!sipMeth)
        return  ::wxRichTextTable::NumberList(range,def,flags,startFrom,specifiedLevel);

    extern bool sipVH__richtext_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int,int);

    return sipVH__richtext_35(sipGILState, 0, sipPySelf, sipMeth, range, def, flags, startFrom, specifiedLevel);
}

bool sipwxRichTextTable::SetListStyle(const  ::wxRichTextRange& range,const  ::wxString& defName,int flags,int startFrom,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[62],sipPySelf,NULL,sipName_SetListStyle);

    if (!sipMeth)
        return  ::wxRichTextTable::SetListStyle(range,defName,flags,startFrom,specifiedLevel);

    extern bool sipVH__richtext_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxString&,int,int,int);

    return sipVH__richtext_36(sipGILState, 0, sipPySelf, sipMeth, range, defName, flags, startFrom, specifiedLevel);
}

bool sipwxRichTextTable::SetListStyle(const  ::wxRichTextRange& range, ::wxRichTextListStyleDefinition*styleDef,int flags,int startFrom,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[63],sipPySelf,NULL,sipName_SetListStyle);

    if (!sipMeth)
        return  ::wxRichTextTable::SetListStyle(range,styleDef,flags,startFrom,specifiedLevel);

    extern bool sipVH__richtext_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int,int);

    return sipVH__richtext_35(sipGILState, 0, sipPySelf, sipMeth, range, styleDef, flags, startFrom, specifiedLevel);
}

void sipwxRichTextTable::Move(const  ::wxPoint& pt)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[64],sipPySelf,NULL,sipName_Move);

    if (!sipMeth)
    {
         ::wxRichTextTable::Move(pt);
        return;
    }

    extern void sipVH__richtext_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxPoint&);

    sipVH__richtext_23(sipGILState, 0, sipPySelf, sipMeth, pt);
}

 ::wxRichTextObject* sipwxRichTextTable::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[65]),sipPySelf,NULL,sipName_Clone);

    if (!sipMeth)
        return  ::wxRichTextTable::Clone();

    extern  ::wxRichTextObject* sipVH__richtext_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextTable::Show(bool show)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[66],sipPySelf,NULL,sipName_Show);

    if (!sipMeth)
    {
         ::wxRichTextTable::Show(show);
        return;
    }

    extern void sipVH__richtext_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__richtext_33(sipGILState, 0, sipPySelf, sipMeth, show);
}

bool sipwxRichTextTable::IsTopLevel() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[67]),sipPySelf,NULL,sipName_IsTopLevel);

    if (!sipMeth)
        return  ::wxRichTextTable::IsTopLevel();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextTable::AdjustAttributes( ::wxRichTextAttr& attr, ::wxRichTextDrawingContext& context)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[68],sipPySelf,NULL,sipName_AdjustAttributes);

    if (!sipMeth)
        return  ::wxRichTextTable::AdjustAttributes(attr,context);

    extern bool sipVH__richtext_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextAttr&, ::wxRichTextDrawingContext&);

    return sipVH__richtext_32(sipGILState, 0, sipPySelf, sipMeth, attr, context);
}

bool sipwxRichTextTable::LayoutToBestSize( ::wxDC& dc, ::wxRichTextDrawingContext& context, ::wxRichTextBuffer*buffer,const  ::wxRichTextAttr& parentAttr,const  ::wxRichTextAttr& attr,const  ::wxRect& availableParentSpace,const  ::wxRect& availableContainerSpace,int style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[69],sipPySelf,NULL,sipName_LayoutToBestSize);

    if (!sipMeth)
        return  ::wxRichTextTable::LayoutToBestSize(dc,context,buffer,parentAttr,attr,availableParentSpace,availableContainerSpace,style);

    extern bool sipVH__richtext_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&, ::wxRichTextBuffer*,const  ::wxRichTextAttr&,const  ::wxRichTextAttr&,const  ::wxRect&,const  ::wxRect&,int);

    return sipVH__richtext_31(sipGILState, 0, sipPySelf, sipMeth, dc, context, buffer, parentAttr, attr, availableParentSpace, availableContainerSpace, style);
}

 ::wxRect sipwxRichTextTable::GetAvailableContentArea( ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxRect& outerRect) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[70]),sipPySelf,NULL,sipName_GetAvailableContentArea);

    if (!sipMeth)
        return  ::wxRichTextTable::GetAvailableContentArea(dc,context,outerRect);

    extern  ::wxRect sipVH__richtext_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&);

    return sipVH__richtext_30(sipGILState, 0, sipPySelf, sipMeth, dc, context, outerRect);
}

int sipwxRichTextTable::GetBottomMargin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[71]),sipPySelf,NULL,sipName_GetBottomMargin);

    if (!sipMeth)
        return  ::wxRichTextTable::GetBottomMargin();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextTable::GetTopMargin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[72]),sipPySelf,NULL,sipName_GetTopMargin);

    if (!sipMeth)
        return  ::wxRichTextTable::GetTopMargin();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextTable::GetRightMargin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[73]),sipPySelf,NULL,sipName_GetRightMargin);

    if (!sipMeth)
        return  ::wxRichTextTable::GetRightMargin();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextTable::GetLeftMargin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[74]),sipPySelf,NULL,sipName_GetLeftMargin);

    if (!sipMeth)
        return  ::wxRichTextTable::GetLeftMargin();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextTable::SetMargins(int leftMargin,int rightMargin,int topMargin,int bottomMargin)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[75],sipPySelf,NULL,sipName_SetMargins);

    if (!sipMeth)
    {
         ::wxRichTextTable::SetMargins(leftMargin,rightMargin,topMargin,bottomMargin);
        return;
    }

    extern void sipVH__richtext_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__richtext_29(sipGILState, 0, sipPySelf, sipMeth, leftMargin, rightMargin, topMargin, bottomMargin);
}

void sipwxRichTextTable::SetMargins(int margin)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[76],sipPySelf,NULL,sipName_SetMargins);

    if (!sipMeth)
    {
         ::wxRichTextTable::SetMargins(margin);
        return;
    }

    extern void sipVH__richtext_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__richtext_28(sipGILState, 0, sipPySelf, sipMeth, margin);
}

 ::wxRichTextParagraphLayoutBox* sipwxRichTextTable::GetParentContainer() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[77]),sipPySelf,NULL,sipName_GetParentContainer);

    if (!sipMeth)
        return  ::wxRichTextTable::GetParentContainer();

    extern  ::wxRichTextParagraphLayoutBox* sipVH__richtext_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_27(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRichTextParagraphLayoutBox* sipwxRichTextTable::GetContainer() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[78]),sipPySelf,NULL,sipName_GetContainer);

    if (!sipMeth)
        return  ::wxRichTextTable::GetContainer();

    extern  ::wxRichTextParagraphLayoutBox* sipVH__richtext_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_27(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextTable::SetParent( ::wxRichTextObject*parent)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[79],sipPySelf,NULL,sipName_SetParent);

    if (!sipMeth)
    {
         ::wxRichTextTable::SetParent(parent);
        return;
    }

    extern void sipVH__richtext_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*);

    sipVH__richtext_26(sipGILState, 0, sipPySelf, sipMeth, parent);
}

 ::wxRichTextObject* sipwxRichTextTable::GetParent() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[80]),sipPySelf,NULL,sipName_GetParent);

    if (!sipMeth)
        return  ::wxRichTextTable::GetParent();

    extern  ::wxRichTextObject* sipVH__richtext_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_34(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextTable::IsAtomic() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[81]),sipPySelf,NULL,sipName_IsAtomic);

    if (!sipMeth)
        return  ::wxRichTextTable::IsAtomic();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextTable::IsComposite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[82]),sipPySelf,NULL,sipName_IsComposite);

    if (!sipMeth)
        return  ::wxRichTextTable::IsComposite();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRect sipwxRichTextTable::GetRect() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[83]),sipPySelf,NULL,sipName_GetRect);

    if (!sipMeth)
        return  ::wxRichTextTable::GetRect();

    extern  ::wxRect sipVH__richtext_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_24(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPoint sipwxRichTextTable::GetAbsolutePosition() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[84]),sipPySelf,NULL,sipName_GetAbsolutePosition);

    if (!sipMeth)
        return  ::wxRichTextTable::GetAbsolutePosition();

    extern  ::wxPoint sipVH__richtext_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_22(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextTable::SetPosition(const  ::wxPoint& pos)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[85],sipPySelf,NULL,sipName_SetPosition);

    if (!sipMeth)
    {
         ::wxRichTextTable::SetPosition(pos);
        return;
    }

    extern void sipVH__richtext_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxPoint&);

    sipVH__richtext_23(sipGILState, 0, sipPySelf, sipMeth, pos);
}

 ::wxPoint sipwxRichTextTable::GetPosition() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[86]),sipPySelf,NULL,sipName_GetPosition);

    if (!sipMeth)
        return  ::wxRichTextTable::GetPosition();

    extern  ::wxPoint sipVH__richtext_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_22(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxTextAttrSize sipwxRichTextTable::GetNaturalSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[87]),sipPySelf,NULL,sipName_GetNaturalSize);

    if (!sipMeth)
        return  ::wxRichTextTable::GetNaturalSize();

    extern  ::wxTextAttrSize sipVH__richtext_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_21(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextTable::SetMinSize(const  ::wxSize& sz)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[88],sipPySelf,NULL,sipName_SetMinSize);

    if (!sipMeth)
    {
         ::wxRichTextTable::SetMinSize(sz);
        return;
    }

    extern void sipVH__richtext_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&);

    sipVH__richtext_20(sipGILState, 0, sipPySelf, sipMeth, sz);
}

 ::wxSize sipwxRichTextTable::GetMinSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[89]),sipPySelf,NULL,sipName_GetMinSize);

    if (!sipMeth)
        return  ::wxRichTextTable::GetMinSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextTable::SetMaxSize(const  ::wxSize& sz)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[90],sipPySelf,NULL,sipName_SetMaxSize);

    if (!sipMeth)
    {
         ::wxRichTextTable::SetMaxSize(sz);
        return;
    }

    extern void sipVH__richtext_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&);

    sipVH__richtext_20(sipGILState, 0, sipPySelf, sipMeth, sz);
}

 ::wxSize sipwxRichTextTable::GetMaxSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[91]),sipPySelf,NULL,sipName_GetMaxSize);

    if (!sipMeth)
        return  ::wxRichTextTable::GetMaxSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextTable::SetCachedSize(const  ::wxSize& sz)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[92],sipPySelf,NULL,sipName_SetCachedSize);

    if (!sipMeth)
    {
         ::wxRichTextTable::SetCachedSize(sz);
        return;
    }

    extern void sipVH__richtext_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&);

    sipVH__richtext_20(sipGILState, 0, sipPySelf, sipMeth, sz);
}

 ::wxSize sipwxRichTextTable::GetCachedSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[93]),sipPySelf,NULL,sipName_GetCachedSize);

    if (!sipMeth)
        return  ::wxRichTextTable::GetCachedSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRichTextSelection sipwxRichTextTable::GetSelection(long start,long end) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[94]),sipPySelf,NULL,sipName_GetSelection);

    if (!sipMeth)
        return  ::wxRichTextTable::GetSelection(start,end);

    extern  ::wxRichTextSelection sipVH__richtext_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,long);

    return sipVH__richtext_19(sipGILState, 0, sipPySelf, sipMeth, start, end);
}

bool sipwxRichTextTable::HandlesChildSelections() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[95]),sipPySelf,NULL,sipName_HandlesChildSelections);

    if (!sipMeth)
        return  ::wxRichTextTable::HandlesChildSelections();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextTable::Invalidate(const  ::wxRichTextRange& invalidRange)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[96],sipPySelf,NULL,sipName_Invalidate);

    if (!sipMeth)
    {
         ::wxRichTextTable::Invalidate(invalidRange);
        return;
    }

    extern void sipVH__richtext_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    sipVH__richtext_18(sipGILState, 0, sipPySelf, sipMeth, invalidRange);
}

 ::wxString sipwxRichTextTable::GetXMLNodeName() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[97]),sipPySelf,NULL,sipName_GetXMLNodeName);

    if (!sipMeth)
        return  ::wxRichTextTable::GetXMLNodeName();

    extern  ::wxString sipVH__richtext_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_16(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextTable::UsesParagraphAttributes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[98]),sipPySelf,NULL,sipName_UsesParagraphAttributes);

    if (!sipMeth)
        return  ::wxRichTextTable::UsesParagraphAttributes();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextTable::ImportFromXML( ::wxRichTextBuffer*buffer, ::wxXmlNode*node, ::wxRichTextXMLHandler*handler,bool*recurse)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[99],sipPySelf,NULL,sipName_ImportFromXML);

    if (!sipMeth)
        return  ::wxRichTextTable::ImportFromXML(buffer,node,handler,recurse);

    extern bool sipVH__richtext_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextBuffer*, ::wxXmlNode*, ::wxRichTextXMLHandler*,bool*);

    return sipVH__richtext_17(sipGILState, 0, sipPySelf, sipMeth, buffer, node, handler, recurse);
}

bool sipwxRichTextTable::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[100]),sipPySelf,NULL,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxRichTextTable::AcceptsFocus();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxString sipwxRichTextTable::GetPropertiesMenuLabel() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[101]),sipPySelf,NULL,sipName_GetPropertiesMenuLabel);

    if (!sipMeth)
        return  ::wxRichTextTable::GetPropertiesMenuLabel();

    extern  ::wxString sipVH__richtext_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_16(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextTable::EditProperties( ::wxWindow*parent, ::wxRichTextBuffer*buffer)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[102],sipPySelf,NULL,sipName_EditProperties);

    if (!sipMeth)
        return  ::wxRichTextTable::EditProperties(parent,buffer);

    extern bool sipVH__richtext_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindow*, ::wxRichTextBuffer*);

    return sipVH__richtext_15(sipGILState, 0, sipPySelf, sipMeth, parent, buffer);
}

bool sipwxRichTextTable::CanEditProperties() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[103]),sipPySelf,NULL,sipName_CanEditProperties);

    if (!sipMeth)
        return  ::wxRichTextTable::CanEditProperties();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRichTextObject* sipwxRichTextTable::Split( ::wxRichTextDrawingContext& context)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[104],sipPySelf,NULL,sipName_Split);

    if (!sipMeth)
        return  ::wxRichTextTable::Split(context);

    extern  ::wxRichTextObject* sipVH__richtext_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextDrawingContext&);

    return sipVH__richtext_14(sipGILState, 0, sipPySelf, sipMeth, context);
}

bool sipwxRichTextTable::CanSplit( ::wxRichTextDrawingContext& context) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[105]),sipPySelf,NULL,sipName_CanSplit);

    if (!sipMeth)
        return  ::wxRichTextTable::CanSplit(context);

    extern bool sipVH__richtext_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextDrawingContext&);

    return sipVH__richtext_13(sipGILState, 0, sipPySelf, sipMeth, context);
}

bool sipwxRichTextTable::Merge( ::wxRichTextObject*object, ::wxRichTextDrawingContext& context)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[106],sipPySelf,NULL,sipName_Merge);

    if (!sipMeth)
        return  ::wxRichTextTable::Merge(object,context);

    extern bool sipVH__richtext_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*, ::wxRichTextDrawingContext&);

    return sipVH__richtext_12(sipGILState, 0, sipPySelf, sipMeth, object, context);
}

bool sipwxRichTextTable::CanMerge( ::wxRichTextObject*object, ::wxRichTextDrawingContext& context) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[107]),sipPySelf,NULL,sipName_CanMerge);

    if (!sipMeth)
        return  ::wxRichTextTable::CanMerge(object,context);

    extern bool sipVH__richtext_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*, ::wxRichTextDrawingContext&);

    return sipVH__richtext_12(sipGILState, 0, sipPySelf, sipMeth, object, context);
}

 ::wxString sipwxRichTextTable::GetTextForRange(const  ::wxRichTextRange& range) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[108]),sipPySelf,NULL,sipName_GetTextForRange);

    if (!sipMeth)
        return  ::wxRichTextTable::GetTextForRange(range);

    extern  ::wxString sipVH__richtext_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    return sipVH__richtext_11(sipGILState, 0, sipPySelf, sipMeth, range);
}

int sipwxRichTextTable::GetFloatDirection() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[109]),sipPySelf,NULL,sipName_GetFloatDirection);

    if (!sipMeth)
        return  ::wxRichTextTable::GetFloatDirection();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextTable::IsFloating() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[110]),sipPySelf,NULL,sipName_IsFloating);

    if (!sipMeth)
        return  ::wxRichTextTable::IsFloating();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextTable::IsFloatable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[111]),sipPySelf,NULL,sipName_IsFloatable);

    if (!sipMeth)
        return  ::wxRichTextTable::IsFloatable();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextTable::IsEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[112]),sipPySelf,NULL,sipName_IsEmpty);

    if (!sipMeth)
        return  ::wxRichTextTable::IsEmpty();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextTable::DeleteRange(const  ::wxRichTextRange& range)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[113],sipPySelf,NULL,sipName_DeleteRange);

    if (!sipMeth)
        return  ::wxRichTextTable::DeleteRange(range);

    extern bool sipVH__richtext_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    return sipVH__richtext_8(sipGILState, 0, sipPySelf, sipMeth, range);
}

void sipwxRichTextTable::CalculateRange(long start,long& end)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[114],sipPySelf,NULL,sipName_CalculateRange);

    if (!sipMeth)
    {
         ::wxRichTextTable::CalculateRange(start,end);
        return;
    }

    extern void sipVH__richtext_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,long&);

    sipVH__richtext_7(sipGILState, 0, sipPySelf, sipMeth, start, end);
}

 ::wxRichTextObject* sipwxRichTextTable::DoSplit(long pos)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[115],sipPySelf,NULL,sipName_DoSplit);

    if (!sipMeth)
        return  ::wxRichTextTable::DoSplit(pos);

    extern  ::wxRichTextObject* sipVH__richtext_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_6(sipGILState, 0, sipPySelf, sipMeth, pos);
}

bool sipwxRichTextTable::GetRangeSize(const  ::wxRichTextRange& range, ::wxSize& size,int& descent, ::wxDC& dc, ::wxRichTextDrawingContext& context,int flags,const  ::wxPoint& position,const  ::wxSize& parentSize, ::wxArrayInt*partialExtents) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[116]),sipPySelf,NULL,sipName_GetRangeSize);

    if (!sipMeth)
        return  ::wxRichTextTable::GetRangeSize(range,size,descent,dc,context,flags,position,parentSize,partialExtents);

    extern bool sipVH__richtext_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&, ::wxSize&,int&, ::wxDC&, ::wxRichTextDrawingContext&,int,const  ::wxPoint&,const  ::wxSize&, ::wxArrayInt*);

    return sipVH__richtext_5(sipGILState, 0, sipPySelf, sipMeth, range, size, descent, dc, context, flags, position, parentSize, partialExtents);
}

 ::wxSize sipwxRichTextTable::GetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[117]),sipPySelf,NULL,sipName_GetBestSize);

    if (!sipMeth)
        return  ::wxRichTextTable::GetBestSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextTable::FindPosition( ::wxDC& dc, ::wxRichTextDrawingContext& context,long index, ::wxPoint& pt,int*height,bool forceLineStart)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[118],sipPySelf,NULL,sipName_FindPosition);

    if (!sipMeth)
        return  ::wxRichTextTable::FindPosition(dc,context,index,pt,height,forceLineStart);

    extern bool sipVH__richtext_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,long, ::wxPoint&,int*,bool);

    return sipVH__richtext_3(sipGILState, 0, sipPySelf, sipMeth, dc, context, index, pt, height, forceLineStart);
}

int sipwxRichTextTable::HitTest( ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxPoint& pt,long& textPosition, ::wxRichTextObject**obj, ::wxRichTextObject**contextObj,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[119],sipPySelf,NULL,sipName_HitTest);

    if (!sipMeth)
        return  ::wxRichTextTable::HitTest(dc,context,pt,textPosition,obj,contextObj,flags);

    extern int sipVH__richtext_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxPoint&,long&, ::wxRichTextObject**, ::wxRichTextObject**,int);

    return sipVH__richtext_2(sipGILState, 0, sipPySelf, sipMeth, dc, context, pt, textPosition, obj, contextObj, flags);
}

bool sipwxRichTextTable::Layout( ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxRect& rect,const  ::wxRect& parentRect,int style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[120],sipPySelf,NULL,sipName_Layout);

    if (!sipMeth)
        return  ::wxRichTextTable::Layout(dc,context,rect,parentRect,style);

    extern bool sipVH__richtext_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&,const  ::wxRect&,int);

    return sipVH__richtext_1(sipGILState, 0, sipPySelf, sipMeth, dc, context, rect, parentRect, style);
}

bool sipwxRichTextTable::Draw( ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxRichTextRange& range,const  ::wxRichTextSelection& selection,const  ::wxRect& rect,int descent,int style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[121],sipPySelf,NULL,sipName_Draw);

    if (!sipMeth)
        return  ::wxRichTextTable::Draw(dc,context,range,selection,rect,descent,style);

    extern bool sipVH__richtext_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRichTextRange&,const  ::wxRichTextSelection&,const  ::wxRect&,int,int);

    return sipVH__richtext_0(sipGILState, 0, sipPySelf, sipMeth, dc, context, range, selection, rect, descent, style);
}

 ::wxRichTextObject* sipwxRichTextTable::GetChildAtPosition(long pos) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[122]),sipPySelf,NULL,sipName_GetChildAtPosition);

    if (!sipMeth)
        return  ::wxRichTextTable::GetChildAtPosition(pos);

    extern  ::wxRichTextObject* sipVH__richtext_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_6(sipGILState, 0, sipPySelf, sipMeth, pos);
}


PyDoc_STRVAR(doc_wxRichTextTable_Draw, "Draw(dc, context, range, selection, rect, descent, style) -> bool\n"
"\n"
"Draw the item, within the given range.");

extern "C" {static PyObject *meth_wxRichTextTable_Draw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_Draw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        const  ::wxRichTextRange* range;
        int rangeState = 0;
        const  ::wxRichTextSelection* selection;
        const  ::wxRect* rect;
        int rectState = 0;
        int descent;
        int style;
         ::wxRichTextTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_context,
            sipName_range,
            sipName_selection,
            sipName_rect,
            sipName_descent,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9J1J9J1ii", &sipSelf, sipType_wxRichTextTable, &sipCpp, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, sipType_wxRichTextRange, &range, &rangeState, sipType_wxRichTextSelection, &selection, sipType_wxRect, &rect, &rectState, &descent, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::Draw(*dc,*context,*range,*selection,*rect,descent,style) : sipCpp->Draw(*dc,*context,*range,*selection,*rect,descent,style));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range),sipType_wxRichTextRange,rangeState);
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_Draw, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_HitTest, "HitTest(dc, context, pt, flags=0) -> (int, textPosition, obj, contextObj)\n"
"\n"
"Hit-testing: returns a flag indicating hit test details, plus\n"
"information about position.");

extern "C" {static PyObject *meth_wxRichTextTable_HitTest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_HitTest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        const  ::wxPoint* pt;
        int ptState = 0;
        long textPosition;
         ::wxRichTextObject* obj;
         ::wxRichTextObject* contextObj;
        int flags = 0;
         ::wxRichTextTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_context,
            sipName_pt,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9J1|i", &sipSelf, sipType_wxRichTextTable, &sipCpp, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, sipType_wxPoint, &pt, &ptState, &flags))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::HitTest(*dc,*context,*pt,textPosition,&obj,&contextObj,flags) : sipCpp->HitTest(*dc,*context,*pt,textPosition,&obj,&contextObj,flags));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pt),sipType_wxPoint,ptState);

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ilDD)",sipRes,textPosition,obj,sipType_wxRichTextObject,NULL,contextObj,sipType_wxRichTextObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_HitTest, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_GetXMLNodeName, "GetXMLNodeName() -> String\n"
"\n"
"Returns the XML node name of this object.");

extern "C" {static PyObject *meth_wxRichTextTable_GetXMLNodeName(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_GetXMLNodeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextTable, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxRichTextTable::GetXMLNodeName() : sipCpp->GetXMLNodeName()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_GetXMLNodeName, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_Layout, "Layout(dc, context, rect, parentRect, style) -> bool\n"
"\n"
"Lay the item out at the specified position with the given size\n"
"constraint.");

extern "C" {static PyObject *meth_wxRichTextTable_Layout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_Layout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        const  ::wxRect* rect;
        int rectState = 0;
        const  ::wxRect* parentRect;
        int parentRectState = 0;
        int style;
         ::wxRichTextTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_context,
            sipName_rect,
            sipName_parentRect,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9J1J1i", &sipSelf, sipType_wxRichTextTable, &sipCpp, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, sipType_wxRect, &rect, &rectState, sipType_wxRect, &parentRect, &parentRectState, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::Layout(*dc,*context,*rect,*parentRect,style) : sipCpp->Layout(*dc,*context,*rect,*parentRect,style));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);
            sipReleaseType(const_cast< ::wxRect *>(parentRect),sipType_wxRect,parentRectState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_Layout, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_GetRangeSize, "GetRangeSize(range, size, descent, dc, context, flags, position=wx.Point(0,0), parentSize=wx.DefaultSize, partialExtents=None) -> bool\n"
"\n"
"Returns the object size for the given range.");

extern "C" {static PyObject *meth_wxRichTextTable_GetRangeSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_GetRangeSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
         ::wxSize* size;
        int sizeState = 0;
        int descent;
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        int flags;
        const  ::wxPoint& positiondef = wxPoint(0,0);
        const  ::wxPoint* position = &positiondef;
        int positionState = 0;
        const  ::wxSize& parentSizedef = wxDefaultSize;
        const  ::wxSize* parentSize = &parentSizedef;
        int parentSizeState = 0;
         ::wxArrayInt* partialExtents = 0;
        int partialExtentsState = 0;
        const  ::wxRichTextTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
            sipName_size,
            sipName_dc,
            sipName_context,
            sipName_flags,
            sipName_position,
            sipName_parentSize,
            sipName_partialExtents,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1J9J9i|J1J1J0", &sipSelf, sipType_wxRichTextTable, &sipCpp, sipType_wxRichTextRange, &range, &rangeState, sipType_wxSize, &size, &sizeState, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, &flags, sipType_wxPoint, &position, &positionState, sipType_wxSize, &parentSize, &parentSizeState, sipType_wxArrayInt,&partialExtents, &partialExtentsState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::GetRangeSize(*range,*size,descent,*dc,*context,flags,*position,*parentSize,partialExtents) : sipCpp->GetRangeSize(*range,*size,descent,*dc,*context,flags,*position,*parentSize,partialExtents));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range),sipType_wxRichTextRange,rangeState);
            sipReleaseType(size,sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxPoint *>(position),sipType_wxPoint,positionState);
            sipReleaseType(const_cast< ::wxSize *>(parentSize),sipType_wxSize,parentSizeState);
            sipReleaseType(partialExtents,sipType_wxArrayInt,partialExtentsState);

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bi)",sipRes,descent);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_GetRangeSize, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_DeleteRange, "DeleteRange(range) -> bool\n"
"\n"
"Deletes the given range.");

extern "C" {static PyObject *meth_wxRichTextTable_DeleteRange(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_DeleteRange(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
         ::wxRichTextTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRichTextTable, &sipCpp, sipType_wxRichTextRange, &range, &rangeState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::DeleteRange(*range) : sipCpp->DeleteRange(*range));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range),sipType_wxRichTextRange,rangeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_DeleteRange, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_GetTextForRange, "GetTextForRange(range) -> String\n"
"\n"
"Returns any text in this object for the given range.");

extern "C" {static PyObject *meth_wxRichTextTable_GetTextForRange(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_GetTextForRange(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
        const  ::wxRichTextTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRichTextTable, &sipCpp, sipType_wxRichTextRange, &range, &rangeState))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxRichTextTable::GetTextForRange(*range) : sipCpp->GetTextForRange(*range)));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range),sipType_wxRichTextRange,rangeState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_GetTextForRange, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_ImportFromXML, "ImportFromXML(buffer, node, handler, recurse) -> bool\n"
"\n"
"Imports this object from XML.");

extern "C" {static PyObject *meth_wxRichTextTable_ImportFromXML(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_ImportFromXML(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextBuffer* buffer;
         ::wxXmlNode* node;
         ::wxRichTextXMLHandler* handler;
        bool recurse;
         ::wxRichTextTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_buffer,
            sipName_node,
            sipName_handler,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J8J8", &sipSelf, sipType_wxRichTextTable, &sipCpp, sipType_wxRichTextBuffer, &buffer, sipType_wxXmlNode, &node, sipType_wxRichTextXMLHandler, &handler))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::ImportFromXML(buffer,node,handler,&recurse) : sipCpp->ImportFromXML(buffer,node,handler,&recurse));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bb)",sipRes,recurse);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_ImportFromXML, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_FindPosition, "FindPosition(dc, context, index, forceLineStart) -> (bool, pt, height)\n"
"\n"
"Finds the absolute position and row height for the given character\n"
"position.");

extern "C" {static PyObject *meth_wxRichTextTable_FindPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_FindPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        long index;
         ::wxPoint* pt;
        int height;
        bool forceLineStart;
         ::wxRichTextTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_context,
            sipName_index,
            sipName_forceLineStart,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9lb", &sipSelf, sipType_wxRichTextTable, &sipCpp, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, &index, &forceLineStart))
        {
            bool sipRes;
            pt = new  ::wxPoint();

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::FindPosition(*dc,*context,index,*pt,&height,forceLineStart) : sipCpp->FindPosition(*dc,*context,index,*pt,&height,forceLineStart));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bNi)",sipRes,pt,sipType_wxPoint,NULL,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_FindPosition, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_CalculateRange, "CalculateRange(start) -> end\n"
"\n"
"Calculates the range of the object.");

extern "C" {static PyObject *meth_wxRichTextTable_CalculateRange(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_CalculateRange(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long start;
        long end;
         ::wxRichTextTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_start,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bl", &sipSelf, sipType_wxRichTextTable, &sipCpp, &start))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::CalculateRange(start,end) : sipCpp->CalculateRange(start,end));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(end);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_CalculateRange, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_HandlesChildSelections, "HandlesChildSelections() -> bool\n"
"\n"
"Returns true if this object can handle the selections of its children,\n"
"fOr example a table.");

extern "C" {static PyObject *meth_wxRichTextTable_HandlesChildSelections(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_HandlesChildSelections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextTable, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::HandlesChildSelections() : sipCpp->HandlesChildSelections());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_HandlesChildSelections, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_GetSelection, "GetSelection(start, end) -> RichTextSelection\n"
"\n"
"Returns a selection object specifying the selections between start and\n"
"end character positions.");

extern "C" {static PyObject *meth_wxRichTextTable_GetSelection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_GetSelection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long start;
        long end;
        const  ::wxRichTextTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_start,
            sipName_end,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bll", &sipSelf, sipType_wxRichTextTable, &sipCpp, &start, &end))
        {
             ::wxRichTextSelection*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRichTextSelection((sipSelfWasArg ? sipCpp-> ::wxRichTextTable::GetSelection(start,end) : sipCpp->GetSelection(start,end)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRichTextSelection,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_GetSelection, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_CanEditProperties, "CanEditProperties() -> bool\n"
"\n"
"Returns true if we can edit the object's properties via a GUI.");

extern "C" {static PyObject *meth_wxRichTextTable_CanEditProperties(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_CanEditProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextTable, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::CanEditProperties() : sipCpp->CanEditProperties());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_CanEditProperties, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_EditProperties, "EditProperties(parent, buffer) -> bool\n"
"\n"
"Edits the object's properties via a GUI.");

extern "C" {static PyObject *meth_wxRichTextTable_EditProperties(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_EditProperties(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindow* parent;
         ::wxRichTextBuffer* buffer;
         ::wxRichTextTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_buffer,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J8", &sipSelf, sipType_wxRichTextTable, &sipCpp, sipType_wxWindow, &parent, sipType_wxRichTextBuffer, &buffer))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::EditProperties(parent,buffer) : sipCpp->EditProperties(parent,buffer));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_EditProperties, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_GetPropertiesMenuLabel, "GetPropertiesMenuLabel() -> String\n"
"\n"
"Returns the label to be used for the properties context menu item.");

extern "C" {static PyObject *meth_wxRichTextTable_GetPropertiesMenuLabel(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_GetPropertiesMenuLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextTable, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxRichTextTable::GetPropertiesMenuLabel() : sipCpp->GetPropertiesMenuLabel()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_GetPropertiesMenuLabel, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_AcceptsFocus, "AcceptsFocus() -> bool\n"
"\n"
"Returns true if objects of this class can accept the focus, i.e. a\n"
"call to SetFocusObject is possible.");

extern "C" {static PyObject *meth_wxRichTextTable_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextTable, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_AcceptsFocus, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_GetCells, "GetCells() -> RichTextObjectPtrArrayArray\n"
"\n"
"Returns the cells array.");

extern "C" {static PyObject *meth_wxRichTextTable_GetCells(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_GetCells(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxRichTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextTable, &sipCpp))
        {
             ::wxRichTextObjectPtrArrayArray*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->GetCells();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextObjectPtrArrayArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_GetCells, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_GetRowCount, "GetRowCount() -> int\n"
"\n"
"Returns the row count.");

extern "C" {static PyObject *meth_wxRichTextTable_GetRowCount(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_GetRowCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxRichTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextTable, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetRowCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_GetRowCount, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_GetColumnCount, "GetColumnCount() -> int\n"
"\n"
"Returns the column count.");

extern "C" {static PyObject *meth_wxRichTextTable_GetColumnCount(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_GetColumnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxRichTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextTable, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetColumnCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_GetColumnCount, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_GetCell, "GetCell(row, col) -> RichTextCell\n"
"GetCell(pos) -> RichTextCell\n"
"\n"
"Returns the cell at the given row/column position.\n"
"");

extern "C" {static PyObject *meth_wxRichTextTable_GetCell(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_GetCell(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
        int col;
        const  ::wxRichTextTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxRichTextTable, &sipCpp, &row, &col))
        {
             ::wxRichTextCell*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::GetCell(row,col) : sipCpp->GetCell(row,col));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextCell,NULL);
        }
    }

    {
        long pos;
        const  ::wxRichTextTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bl", &sipSelf, sipType_wxRichTextTable, &sipCpp, &pos))
        {
             ::wxRichTextCell*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::GetCell(pos) : sipCpp->GetCell(pos));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRichTextCell,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_GetCell, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_GetCellRowColumnPosition, "GetCellRowColumnPosition(pos, row, col) -> bool\n"
"\n"
"Returns the row/column for a given character position.");

extern "C" {static PyObject *meth_wxRichTextTable_GetCellRowColumnPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_GetCellRowColumnPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long pos;
        int row;
        int col;
        const  ::wxRichTextTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bl", &sipSelf, sipType_wxRichTextTable, &sipCpp, &pos))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::GetCellRowColumnPosition(pos,row,col) : sipCpp->GetCellRowColumnPosition(pos,row,col));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bii)",sipRes,row,col);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_GetCellRowColumnPosition, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_GetFocusedCell, "GetFocusedCell() -> wx.Position\n"
"\n"
"Returns the coordinates of the cell with keyboard focus, or (-1,-1) if\n"
"none.");

extern "C" {static PyObject *meth_wxRichTextTable_GetFocusedCell(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_GetFocusedCell(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextTable, &sipCpp))
        {
             ::wxPosition*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPosition((sipSelfWasArg ? sipCpp-> ::wxRichTextTable::GetFocusedCell() : sipCpp->GetFocusedCell()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPosition,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_GetFocusedCell, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_ClearTable, "ClearTable()\n"
"\n"
"Clears the table.");

extern "C" {static PyObject *meth_wxRichTextTable_ClearTable(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_ClearTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextTable, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::ClearTable() : sipCpp->ClearTable());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_ClearTable, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_CreateTable, "CreateTable(rows, cols) -> bool\n"
"\n"
"Creates a table of the given dimensions.");

extern "C" {static PyObject *meth_wxRichTextTable_CreateTable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_CreateTable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int rows;
        int cols;
         ::wxRichTextTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rows,
            sipName_cols,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxRichTextTable, &sipCpp, &rows, &cols))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::CreateTable(rows,cols) : sipCpp->CreateTable(rows,cols));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_CreateTable, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_SetCellStyle, "SetCellStyle(selection, style, flags=RICHTEXT_SETSTYLE_WITH_UNDO) -> bool\n"
"\n"
"Sets the attributes for the cells specified by the selection.");

extern "C" {static PyObject *meth_wxRichTextTable_SetCellStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_SetCellStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextSelection* selection;
        const  ::wxRichTextAttr* style;
        int flags = wxRICHTEXT_SETSTYLE_WITH_UNDO;
         ::wxRichTextTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_selection,
            sipName_style,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9|i", &sipSelf, sipType_wxRichTextTable, &sipCpp, sipType_wxRichTextSelection, &selection, sipType_wxRichTextAttr, &style, &flags))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::SetCellStyle(*selection,*style,flags) : sipCpp->SetCellStyle(*selection,*style,flags));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_SetCellStyle, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_DeleteRows, "DeleteRows(startRow, noRows=1) -> bool\n"
"\n"
"Deletes rows from the given row position.");

extern "C" {static PyObject *meth_wxRichTextTable_DeleteRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_DeleteRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int startRow;
        int noRows = 1;
         ::wxRichTextTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_startRow,
            sipName_noRows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|i", &sipSelf, sipType_wxRichTextTable, &sipCpp, &startRow, &noRows))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::DeleteRows(startRow,noRows) : sipCpp->DeleteRows(startRow,noRows));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_DeleteRows, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_DeleteColumns, "DeleteColumns(startCol, noCols=1) -> bool\n"
"\n"
"Deletes columns from the given column position.");

extern "C" {static PyObject *meth_wxRichTextTable_DeleteColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_DeleteColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int startCol;
        int noCols = 1;
         ::wxRichTextTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_startCol,
            sipName_noCols,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|i", &sipSelf, sipType_wxRichTextTable, &sipCpp, &startCol, &noCols))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::DeleteColumns(startCol,noCols) : sipCpp->DeleteColumns(startCol,noCols));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_DeleteColumns, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_AddRows, "AddRows(startRow, noRows=1, attr=RichTextAttr()) -> bool\n"
"\n"
"Adds rows from the given row position.");

extern "C" {static PyObject *meth_wxRichTextTable_AddRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_AddRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int startRow;
        int noRows = 1;
        const  ::wxRichTextAttr& attrdef = wxRichTextAttr();
        const  ::wxRichTextAttr* attr = &attrdef;
         ::wxRichTextTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_startRow,
            sipName_noRows,
            sipName_attr,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|iJ9", &sipSelf, sipType_wxRichTextTable, &sipCpp, &startRow, &noRows, sipType_wxRichTextAttr, &attr))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::AddRows(startRow,noRows,*attr) : sipCpp->AddRows(startRow,noRows,*attr));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_AddRows, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_AddColumns, "AddColumns(startCol, noCols=1, attr=RichTextAttr()) -> bool\n"
"\n"
"Adds columns from the given column position.");

extern "C" {static PyObject *meth_wxRichTextTable_AddColumns(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_AddColumns(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int startCol;
        int noCols = 1;
        const  ::wxRichTextAttr& attrdef = wxRichTextAttr();
        const  ::wxRichTextAttr* attr = &attrdef;
         ::wxRichTextTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_startCol,
            sipName_noCols,
            sipName_attr,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi|iJ9", &sipSelf, sipType_wxRichTextTable, &sipCpp, &startCol, &noCols, sipType_wxRichTextAttr, &attr))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::AddColumns(startCol,noCols,*attr) : sipCpp->AddColumns(startCol,noCols,*attr));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_AddColumns, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_Clone, "Clone() -> RichTextObject\n"
"\n"
"Clones the object.");

extern "C" {static PyObject *meth_wxRichTextTable_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextTable, &sipCpp))
        {
             ::wxRichTextObject*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextTable::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRichTextObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_Clone, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextTable_Copy, "Copy(obj)");

extern "C" {static PyObject *meth_wxRichTextTable_Copy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextTable_Copy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxRichTextTable* obj;
         ::wxRichTextTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxRichTextTable, &sipCpp, sipType_wxRichTextTable, &obj))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Copy(*obj);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextTable, sipName_Copy, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxRichTextTable(void *, const sipTypeDef *);}
static void *cast_wxRichTextTable(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxRichTextTable *sipCpp = reinterpret_cast< ::wxRichTextTable *>(sipCppV);

    if (targetType == sipType_wxRichTextBox)
        return static_cast< ::wxRichTextBox *>(sipCpp);

    if (targetType == sipType_wxRichTextParagraphLayoutBox)
        return static_cast< ::wxRichTextParagraphLayoutBox *>(sipCpp);

    if (targetType == sipType_wxRichTextCompositeObject)
        return static_cast< ::wxRichTextCompositeObject *>(sipCpp);

    if (targetType == sipType_wxRichTextObject)
        return static_cast< ::wxRichTextObject *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxRichTextTable(void *, int);}
static void release_wxRichTextTable(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxRichTextTable *>(sipCppV);
    else
        delete reinterpret_cast< ::wxRichTextTable *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_wxRichTextTable(void *, SIP_SSIZE_T, void *);}
static void assign_wxRichTextTable(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxRichTextTable *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxRichTextTable *>(sipSrc);
}


extern "C" {static void *array_wxRichTextTable(SIP_SSIZE_T);}
static void *array_wxRichTextTable(SIP_SSIZE_T sipNrElem)
{
    return new  ::wxRichTextTable[sipNrElem];
}


extern "C" {static void *copy_wxRichTextTable(const void *, SIP_SSIZE_T);}
static void *copy_wxRichTextTable(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxRichTextTable(reinterpret_cast<const  ::wxRichTextTable *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxRichTextTable(sipSimpleWrapper *);}
static void dealloc_wxRichTextTable(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxRichTextTable *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxRichTextTable(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxRichTextTable(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxRichTextTable(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxRichTextTable *sipCpp = 0;

    {
         ::wxRichTextObject* parent = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J8", sipType_wxRichTextObject, &parent))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextTable(parent);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxRichTextTable* obj;

        static const char *sipKwdList[] = {
            sipName_obj,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9", sipType_wxRichTextTable, &obj))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextTable(*obj);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxRichTextTable[] = {{5, 255, 1}};


static PyMethodDef methods_wxRichTextTable[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxRichTextTable_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextTable_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AddColumns), (PyCFunction)meth_wxRichTextTable_AddColumns, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextTable_AddColumns)},
    {SIP_MLNAME_CAST(sipName_AddRows), (PyCFunction)meth_wxRichTextTable_AddRows, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextTable_AddRows)},
    {SIP_MLNAME_CAST(sipName_CalculateRange), (PyCFunction)meth_wxRichTextTable_CalculateRange, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextTable_CalculateRange)},
    {SIP_MLNAME_CAST(sipName_CanEditProperties), meth_wxRichTextTable_CanEditProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextTable_CanEditProperties)},
    {SIP_MLNAME_CAST(sipName_ClearTable), meth_wxRichTextTable_ClearTable, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextTable_ClearTable)},
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxRichTextTable_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextTable_Clone)},
    {SIP_MLNAME_CAST(sipName_Copy), (PyCFunction)meth_wxRichTextTable_Copy, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextTable_Copy)},
    {SIP_MLNAME_CAST(sipName_CreateTable), (PyCFunction)meth_wxRichTextTable_CreateTable, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextTable_CreateTable)},
    {SIP_MLNAME_CAST(sipName_DeleteColumns), (PyCFunction)meth_wxRichTextTable_DeleteColumns, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextTable_DeleteColumns)},
    {SIP_MLNAME_CAST(sipName_DeleteRange), (PyCFunction)meth_wxRichTextTable_DeleteRange, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextTable_DeleteRange)},
    {SIP_MLNAME_CAST(sipName_DeleteRows), (PyCFunction)meth_wxRichTextTable_DeleteRows, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextTable_DeleteRows)},
    {SIP_MLNAME_CAST(sipName_Draw), (PyCFunction)meth_wxRichTextTable_Draw, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextTable_Draw)},
    {SIP_MLNAME_CAST(sipName_EditProperties), (PyCFunction)meth_wxRichTextTable_EditProperties, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextTable_EditProperties)},
    {SIP_MLNAME_CAST(sipName_FindPosition), (PyCFunction)meth_wxRichTextTable_FindPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextTable_FindPosition)},
    {SIP_MLNAME_CAST(sipName_GetCell), (PyCFunction)meth_wxRichTextTable_GetCell, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextTable_GetCell)},
    {SIP_MLNAME_CAST(sipName_GetCellRowColumnPosition), (PyCFunction)meth_wxRichTextTable_GetCellRowColumnPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextTable_GetCellRowColumnPosition)},
    {SIP_MLNAME_CAST(sipName_GetCells), meth_wxRichTextTable_GetCells, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextTable_GetCells)},
    {SIP_MLNAME_CAST(sipName_GetColumnCount), meth_wxRichTextTable_GetColumnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextTable_GetColumnCount)},
    {SIP_MLNAME_CAST(sipName_GetFocusedCell), meth_wxRichTextTable_GetFocusedCell, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextTable_GetFocusedCell)},
    {SIP_MLNAME_CAST(sipName_GetPropertiesMenuLabel), meth_wxRichTextTable_GetPropertiesMenuLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextTable_GetPropertiesMenuLabel)},
    {SIP_MLNAME_CAST(sipName_GetRangeSize), (PyCFunction)meth_wxRichTextTable_GetRangeSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextTable_GetRangeSize)},
    {SIP_MLNAME_CAST(sipName_GetRowCount), meth_wxRichTextTable_GetRowCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextTable_GetRowCount)},
    {SIP_MLNAME_CAST(sipName_GetSelection), (PyCFunction)meth_wxRichTextTable_GetSelection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextTable_GetSelection)},
    {SIP_MLNAME_CAST(sipName_GetTextForRange), (PyCFunction)meth_wxRichTextTable_GetTextForRange, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextTable_GetTextForRange)},
    {SIP_MLNAME_CAST(sipName_GetXMLNodeName), meth_wxRichTextTable_GetXMLNodeName, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextTable_GetXMLNodeName)},
    {SIP_MLNAME_CAST(sipName_HandlesChildSelections), meth_wxRichTextTable_HandlesChildSelections, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextTable_HandlesChildSelections)},
    {SIP_MLNAME_CAST(sipName_HitTest), (PyCFunction)meth_wxRichTextTable_HitTest, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextTable_HitTest)},
    {SIP_MLNAME_CAST(sipName_ImportFromXML), (PyCFunction)meth_wxRichTextTable_ImportFromXML, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextTable_ImportFromXML)},
    {SIP_MLNAME_CAST(sipName_Layout), (PyCFunction)meth_wxRichTextTable_Layout, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextTable_Layout)},
    {SIP_MLNAME_CAST(sipName_SetCellStyle), (PyCFunction)meth_wxRichTextTable_SetCellStyle, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextTable_SetCellStyle)}
};

sipVariableDef variables_wxRichTextTable[] = {
    {PropertyVariable, sipName_XMLNodeName, &methods_wxRichTextTable[25], NULL, NULL, NULL},
    {PropertyVariable, sipName_RowCount, &methods_wxRichTextTable[22], NULL, NULL, NULL},
    {PropertyVariable, sipName_PropertiesMenuLabel, &methods_wxRichTextTable[20], NULL, NULL, NULL},
    {PropertyVariable, sipName_FocusedCell, &methods_wxRichTextTable[19], NULL, NULL, NULL},
    {PropertyVariable, sipName_ColumnCount, &methods_wxRichTextTable[18], NULL, NULL, NULL},
    {PropertyVariable, sipName_Cells, &methods_wxRichTextTable[17], NULL, NULL, NULL},
};

PyDoc_STRVAR(doc_wxRichTextTable, "RichTextTable(parent=None)\n"
"RichTextTable(obj)\n"
"\n"
"wxRichTextTable represents a table with arbitrary columns and rows.");


sipClassTypeDef sipTypeDef__richtext_wxRichTextTable = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxRichTextTable,
        {0},
        0
    },
    {
        sipNameNr_RichTextTable,
        {0, 0, 1},
        31, methods_wxRichTextTable,
        0, 0,
        6, variables_wxRichTextTable,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxRichTextTable,
    -1,
    -1,
    supers_wxRichTextTable,
    0,
    init_type_wxRichTextTable,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxRichTextTable,
    assign_wxRichTextTable,
    array_wxRichTextTable,
    copy_wxRichTextTable,
    release_wxRichTextTable,
    cast_wxRichTextTable,
    0,
    0,
    0,
    0,
    0,
    0
};
