/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_richtext.h"

        #include <wx/richtext/richtextbuffer.h>

        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/window.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/gdicmn.h>
        #include <wx/dc.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/richtext/richtextbuffer.h>
        
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextstyles.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextstyles.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/image.h>
        #include <wx/richtext/richtextctrl.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/xml/xml.h>
        #include <wx/richtext/richtextxml.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/richtext/richtextbuffer.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxRichTextField : public  ::wxRichTextField
{
public:
    sipwxRichTextField(const  ::wxString&, ::wxRichTextObject*);
    sipwxRichTextField(const  ::wxRichTextField&);
    virtual ~sipwxRichTextField();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool UpdateField( ::wxRichTextBuffer*);
     ::wxRichTextObject* GetChildAtPosition(long) const;
    bool Draw( ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRichTextRange&,const  ::wxRichTextSelection&,const  ::wxRect&,int,int);
    bool Layout( ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&,const  ::wxRect&,int);
    int HitTest( ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxPoint&,long&, ::wxRichTextObject**, ::wxRichTextObject**,int);
    bool FindPosition( ::wxDC&, ::wxRichTextDrawingContext&,long, ::wxPoint&,int*,bool);
     ::wxSize GetBestSize() const;
    bool GetRangeSize(const  ::wxRichTextRange&, ::wxSize&,int&, ::wxDC&, ::wxRichTextDrawingContext&,int,const  ::wxPoint&,const  ::wxSize&, ::wxArrayInt*) const;
     ::wxRichTextObject* DoSplit(long);
    void CalculateRange(long,long&);
    bool DeleteRange(const  ::wxRichTextRange&);
    bool IsEmpty() const;
    bool IsFloatable() const;
    bool IsFloating() const;
    int GetFloatDirection() const;
     ::wxString GetTextForRange(const  ::wxRichTextRange&) const;
    bool CanMerge( ::wxRichTextObject*, ::wxRichTextDrawingContext&) const;
    bool Merge( ::wxRichTextObject*, ::wxRichTextDrawingContext&);
    bool CanSplit( ::wxRichTextDrawingContext&) const;
     ::wxRichTextObject* Split( ::wxRichTextDrawingContext&);
    bool CanEditProperties() const;
    bool EditProperties( ::wxWindow*, ::wxRichTextBuffer*);
     ::wxString GetPropertiesMenuLabel() const;
    bool AcceptsFocus() const;
    bool ImportFromXML( ::wxRichTextBuffer*, ::wxXmlNode*, ::wxRichTextXMLHandler*,bool*);
    bool UsesParagraphAttributes() const;
     ::wxString GetXMLNodeName() const;
    void Invalidate(const  ::wxRichTextRange&);
    bool HandlesChildSelections() const;
     ::wxRichTextSelection GetSelection(long,long) const;
     ::wxSize GetCachedSize() const;
    void SetCachedSize(const  ::wxSize&);
     ::wxSize GetMaxSize() const;
    void SetMaxSize(const  ::wxSize&);
     ::wxSize GetMinSize() const;
    void SetMinSize(const  ::wxSize&);
     ::wxTextAttrSize GetNaturalSize() const;
     ::wxPoint GetPosition() const;
    void SetPosition(const  ::wxPoint&);
     ::wxPoint GetAbsolutePosition() const;
     ::wxRect GetRect() const;
    bool IsComposite() const;
    bool IsAtomic() const;
     ::wxRichTextObject* GetParent() const;
    void SetParent( ::wxRichTextObject*);
     ::wxRichTextParagraphLayoutBox* GetContainer() const;
     ::wxRichTextParagraphLayoutBox* GetParentContainer() const;
    void SetMargins(int);
    void SetMargins(int,int,int,int);
    int GetLeftMargin() const;
    int GetRightMargin() const;
    int GetTopMargin() const;
    int GetBottomMargin() const;
     ::wxRect GetAvailableContentArea( ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&) const;
    bool LayoutToBestSize( ::wxDC&, ::wxRichTextDrawingContext&, ::wxRichTextBuffer*,const  ::wxRichTextAttr&,const  ::wxRichTextAttr&,const  ::wxRect&,const  ::wxRect&,int);
    bool AdjustAttributes( ::wxRichTextAttr&, ::wxRichTextDrawingContext&);
    bool IsTopLevel() const;
    void Show(bool);
     ::wxRichTextObject* Clone() const;
    void Move(const  ::wxPoint&);
    bool SetListStyle(const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int,int);
    bool SetListStyle(const  ::wxRichTextRange&,const  ::wxString&,int,int,int);
    bool NumberList(const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int,int);
    bool NumberList(const  ::wxRichTextRange&,const  ::wxString&,int,int,int);
    bool PromoteList(int,const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int);
    bool PromoteList(int,const  ::wxRichTextRange&,const  ::wxString&,int,int);
     ::wxRichTextStyleSheet* GetStyleSheet() const;
    void Clear();
    void Reset();
     ::wxRichTextRange AddParagraph(const  ::wxString&, ::wxRichTextAttr*);
     ::wxRichTextRange AddImage(const  ::wxImage&, ::wxRichTextAttr*);
     ::wxRichTextRange AddParagraphs(const  ::wxString&, ::wxRichTextAttr*);
     ::wxRichTextLine* GetLineAtPosition(long,bool) const;
     ::wxRichTextLine* GetLineAtYPosition(int) const;
     ::wxRichTextParagraph* GetParagraphAtPosition(long,bool) const;
     ::wxSize GetLineSizeAtPosition(long,bool) const;
    long GetVisibleLineNumber(long,bool,bool) const;
     ::wxRichTextLine* GetLineForVisibleLineNumber(long) const;
     ::wxRichTextObject* GetLeafObjectAtPosition(long) const;
     ::wxRichTextParagraph* GetParagraphAtLine(long) const;
     ::wxRichTextParagraph* GetParagraphForLine( ::wxRichTextLine*) const;
    int GetParagraphLength(long) const;
    int GetParagraphCount() const;
    int GetLineCount() const;
     ::wxString GetParagraphText(long) const;
    long XYToPosition(long,long) const;
    bool PositionToXY(long,long*,long*) const;
    bool SetStyle(const  ::wxRichTextRange&,const  ::wxRichTextAttr&,int);
    void SetStyle( ::wxRichTextObject*,const  ::wxRichTextAttr&,int);
    bool GetStyle(long, ::wxRichTextAttr&);
    bool GetUncombinedStyle(long, ::wxRichTextAttr&);
    bool DoGetStyle(long, ::wxRichTextAttr&,bool);
    bool GetStyleForRange(const  ::wxRichTextRange&, ::wxRichTextAttr&);
    bool ClearListStyle(const  ::wxRichTextRange&,int);
    bool DoNumberList(const  ::wxRichTextRange&,const  ::wxRichTextRange&,int, ::wxRichTextListStyleDefinition*,int,int,int);
    bool FindNextParagraphNumber( ::wxRichTextParagraph*, ::wxRichTextAttr&) const;
    bool SetProperties(const  ::wxRichTextRange&,const  ::wxRichTextProperties&,int);
    bool SetObjectPropertiesWithUndo( ::wxRichTextObject&,const  ::wxRichTextProperties&, ::wxRichTextObject*);
    bool HasCharacterAttributes(const  ::wxRichTextRange&,const  ::wxRichTextAttr&) const;
    bool HasParagraphAttributes(const  ::wxRichTextRange&,const  ::wxRichTextAttr&) const;
    void PrepareContent( ::wxRichTextParagraphLayoutBox&);
    bool InsertFragment(long, ::wxRichTextParagraphLayoutBox&);
    bool CopyFragment(const  ::wxRichTextRange&, ::wxRichTextParagraphLayoutBox&);
    bool ApplyStyleSheet( ::wxRichTextStyleSheet*);
    void UpdateRanges();
     ::wxString GetText() const;
    bool SetDefaultStyle(const  ::wxRichTextAttr&);
    const  ::wxRichTextAttr& GetDefaultStyle() const;
    void SetBasicStyle(const  ::wxRichTextAttr&);
    const  ::wxRichTextAttr& GetBasicStyle() const;
    void DoInvalidate(const  ::wxRichTextRange&);
    void InvalidateHierarchy(const  ::wxRichTextRange&);
    bool UpdateFloatingObjects(const  ::wxRect&, ::wxRichTextObject*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxRichTextField(const sipwxRichTextField &);
    sipwxRichTextField &operator = (const sipwxRichTextField &);

    char sipPyMethods[113];
};

sipwxRichTextField::sipwxRichTextField(const  ::wxString& fieldType, ::wxRichTextObject*parent):  ::wxRichTextField(fieldType,parent), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextField::sipwxRichTextField(const  ::wxRichTextField& obj):  ::wxRichTextField(obj), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRichTextField::~sipwxRichTextField()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxRichTextField::UpdateField( ::wxRichTextBuffer*buffer)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_UpdateField);

    if (!sipMeth)
        return  ::wxRichTextField::UpdateField(buffer);

    extern bool sipVH__richtext_74(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextBuffer*);

    return sipVH__richtext_74(sipGILState, 0, sipPySelf, sipMeth, buffer);
}

 ::wxRichTextObject* sipwxRichTextField::GetChildAtPosition(long pos) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_GetChildAtPosition);

    if (!sipMeth)
        return  ::wxRichTextField::GetChildAtPosition(pos);

    extern  ::wxRichTextObject* sipVH__richtext_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_6(sipGILState, 0, sipPySelf, sipMeth, pos);
}

bool sipwxRichTextField::Draw( ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxRichTextRange& range,const  ::wxRichTextSelection& selection,const  ::wxRect& rect,int descent,int style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_Draw);

    if (!sipMeth)
        return  ::wxRichTextField::Draw(dc,context,range,selection,rect,descent,style);

    extern bool sipVH__richtext_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRichTextRange&,const  ::wxRichTextSelection&,const  ::wxRect&,int,int);

    return sipVH__richtext_0(sipGILState, 0, sipPySelf, sipMeth, dc, context, range, selection, rect, descent, style);
}

bool sipwxRichTextField::Layout( ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxRect& rect,const  ::wxRect& parentRect,int style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_Layout);

    if (!sipMeth)
        return  ::wxRichTextField::Layout(dc,context,rect,parentRect,style);

    extern bool sipVH__richtext_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&,const  ::wxRect&,int);

    return sipVH__richtext_1(sipGILState, 0, sipPySelf, sipMeth, dc, context, rect, parentRect, style);
}

int sipwxRichTextField::HitTest( ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxPoint& pt,long& textPosition, ::wxRichTextObject**obj, ::wxRichTextObject**contextObj,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_HitTest);

    if (!sipMeth)
        return  ::wxRichTextField::HitTest(dc,context,pt,textPosition,obj,contextObj,flags);

    extern int sipVH__richtext_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxPoint&,long&, ::wxRichTextObject**, ::wxRichTextObject**,int);

    return sipVH__richtext_2(sipGILState, 0, sipPySelf, sipMeth, dc, context, pt, textPosition, obj, contextObj, flags);
}

bool sipwxRichTextField::FindPosition( ::wxDC& dc, ::wxRichTextDrawingContext& context,long index, ::wxPoint& pt,int*height,bool forceLineStart)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_FindPosition);

    if (!sipMeth)
        return  ::wxRichTextField::FindPosition(dc,context,index,pt,height,forceLineStart);

    extern bool sipVH__richtext_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,long, ::wxPoint&,int*,bool);

    return sipVH__richtext_3(sipGILState, 0, sipPySelf, sipMeth, dc, context, index, pt, height, forceLineStart);
}

 ::wxSize sipwxRichTextField::GetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_GetBestSize);

    if (!sipMeth)
        return  ::wxRichTextField::GetBestSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextField::GetRangeSize(const  ::wxRichTextRange& range, ::wxSize& size,int& descent, ::wxDC& dc, ::wxRichTextDrawingContext& context,int flags,const  ::wxPoint& position,const  ::wxSize& parentSize, ::wxArrayInt*partialExtents) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_GetRangeSize);

    if (!sipMeth)
        return  ::wxRichTextField::GetRangeSize(range,size,descent,dc,context,flags,position,parentSize,partialExtents);

    extern bool sipVH__richtext_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&, ::wxSize&,int&, ::wxDC&, ::wxRichTextDrawingContext&,int,const  ::wxPoint&,const  ::wxSize&, ::wxArrayInt*);

    return sipVH__richtext_5(sipGILState, 0, sipPySelf, sipMeth, range, size, descent, dc, context, flags, position, parentSize, partialExtents);
}

 ::wxRichTextObject* sipwxRichTextField::DoSplit(long pos)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_DoSplit);

    if (!sipMeth)
        return  ::wxRichTextField::DoSplit(pos);

    extern  ::wxRichTextObject* sipVH__richtext_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_6(sipGILState, 0, sipPySelf, sipMeth, pos);
}

void sipwxRichTextField::CalculateRange(long start,long& end)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_CalculateRange);

    if (!sipMeth)
    {
         ::wxRichTextField::CalculateRange(start,end);
        return;
    }

    extern void sipVH__richtext_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,long&);

    sipVH__richtext_7(sipGILState, 0, sipPySelf, sipMeth, start, end);
}

bool sipwxRichTextField::DeleteRange(const  ::wxRichTextRange& range)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_DeleteRange);

    if (!sipMeth)
        return  ::wxRichTextField::DeleteRange(range);

    extern bool sipVH__richtext_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    return sipVH__richtext_8(sipGILState, 0, sipPySelf, sipMeth, range);
}

bool sipwxRichTextField::IsEmpty() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_IsEmpty);

    if (!sipMeth)
        return  ::wxRichTextField::IsEmpty();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextField::IsFloatable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_IsFloatable);

    if (!sipMeth)
        return  ::wxRichTextField::IsFloatable();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextField::IsFloating() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_IsFloating);

    if (!sipMeth)
        return  ::wxRichTextField::IsFloating();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextField::GetFloatDirection() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_GetFloatDirection);

    if (!sipMeth)
        return  ::wxRichTextField::GetFloatDirection();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxString sipwxRichTextField::GetTextForRange(const  ::wxRichTextRange& range) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_GetTextForRange);

    if (!sipMeth)
        return  ::wxRichTextField::GetTextForRange(range);

    extern  ::wxString sipVH__richtext_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    return sipVH__richtext_11(sipGILState, 0, sipPySelf, sipMeth, range);
}

bool sipwxRichTextField::CanMerge( ::wxRichTextObject*object, ::wxRichTextDrawingContext& context) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[16]),sipPySelf,NULL,sipName_CanMerge);

    if (!sipMeth)
        return  ::wxRichTextField::CanMerge(object,context);

    extern bool sipVH__richtext_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*, ::wxRichTextDrawingContext&);

    return sipVH__richtext_12(sipGILState, 0, sipPySelf, sipMeth, object, context);
}

bool sipwxRichTextField::Merge( ::wxRichTextObject*object, ::wxRichTextDrawingContext& context)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_Merge);

    if (!sipMeth)
        return  ::wxRichTextField::Merge(object,context);

    extern bool sipVH__richtext_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*, ::wxRichTextDrawingContext&);

    return sipVH__richtext_12(sipGILState, 0, sipPySelf, sipMeth, object, context);
}

bool sipwxRichTextField::CanSplit( ::wxRichTextDrawingContext& context) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[18]),sipPySelf,NULL,sipName_CanSplit);

    if (!sipMeth)
        return  ::wxRichTextField::CanSplit(context);

    extern bool sipVH__richtext_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextDrawingContext&);

    return sipVH__richtext_13(sipGILState, 0, sipPySelf, sipMeth, context);
}

 ::wxRichTextObject* sipwxRichTextField::Split( ::wxRichTextDrawingContext& context)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_Split);

    if (!sipMeth)
        return  ::wxRichTextField::Split(context);

    extern  ::wxRichTextObject* sipVH__richtext_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextDrawingContext&);

    return sipVH__richtext_14(sipGILState, 0, sipPySelf, sipMeth, context);
}

bool sipwxRichTextField::CanEditProperties() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[20]),sipPySelf,NULL,sipName_CanEditProperties);

    if (!sipMeth)
        return  ::wxRichTextField::CanEditProperties();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextField::EditProperties( ::wxWindow*parent, ::wxRichTextBuffer*buffer)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_EditProperties);

    if (!sipMeth)
        return  ::wxRichTextField::EditProperties(parent,buffer);

    extern bool sipVH__richtext_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindow*, ::wxRichTextBuffer*);

    return sipVH__richtext_15(sipGILState, 0, sipPySelf, sipMeth, parent, buffer);
}

 ::wxString sipwxRichTextField::GetPropertiesMenuLabel() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[22]),sipPySelf,NULL,sipName_GetPropertiesMenuLabel);

    if (!sipMeth)
        return  ::wxRichTextField::GetPropertiesMenuLabel();

    extern  ::wxString sipVH__richtext_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_16(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextField::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[23]),sipPySelf,NULL,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxRichTextField::AcceptsFocus();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextField::ImportFromXML( ::wxRichTextBuffer*buffer, ::wxXmlNode*node, ::wxRichTextXMLHandler*handler,bool*recurse)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_ImportFromXML);

    if (!sipMeth)
        return  ::wxRichTextField::ImportFromXML(buffer,node,handler,recurse);

    extern bool sipVH__richtext_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextBuffer*, ::wxXmlNode*, ::wxRichTextXMLHandler*,bool*);

    return sipVH__richtext_17(sipGILState, 0, sipPySelf, sipMeth, buffer, node, handler, recurse);
}

bool sipwxRichTextField::UsesParagraphAttributes() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_UsesParagraphAttributes);

    if (!sipMeth)
        return  ::wxRichTextField::UsesParagraphAttributes();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxString sipwxRichTextField::GetXMLNodeName() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_GetXMLNodeName);

    if (!sipMeth)
        return  ::wxRichTextField::GetXMLNodeName();

    extern  ::wxString sipVH__richtext_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_16(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextField::Invalidate(const  ::wxRichTextRange& invalidRange)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_Invalidate);

    if (!sipMeth)
    {
         ::wxRichTextField::Invalidate(invalidRange);
        return;
    }

    extern void sipVH__richtext_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    sipVH__richtext_18(sipGILState, 0, sipPySelf, sipMeth, invalidRange);
}

bool sipwxRichTextField::HandlesChildSelections() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_HandlesChildSelections);

    if (!sipMeth)
        return  ::wxRichTextField::HandlesChildSelections();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRichTextSelection sipwxRichTextField::GetSelection(long start,long end) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_GetSelection);

    if (!sipMeth)
        return  ::wxRichTextField::GetSelection(start,end);

    extern  ::wxRichTextSelection sipVH__richtext_19(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,long);

    return sipVH__richtext_19(sipGILState, 0, sipPySelf, sipMeth, start, end);
}

 ::wxSize sipwxRichTextField::GetCachedSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_GetCachedSize);

    if (!sipMeth)
        return  ::wxRichTextField::GetCachedSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextField::SetCachedSize(const  ::wxSize& sz)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_SetCachedSize);

    if (!sipMeth)
    {
         ::wxRichTextField::SetCachedSize(sz);
        return;
    }

    extern void sipVH__richtext_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&);

    sipVH__richtext_20(sipGILState, 0, sipPySelf, sipMeth, sz);
}

 ::wxSize sipwxRichTextField::GetMaxSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_GetMaxSize);

    if (!sipMeth)
        return  ::wxRichTextField::GetMaxSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextField::SetMaxSize(const  ::wxSize& sz)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[33],sipPySelf,NULL,sipName_SetMaxSize);

    if (!sipMeth)
    {
         ::wxRichTextField::SetMaxSize(sz);
        return;
    }

    extern void sipVH__richtext_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&);

    sipVH__richtext_20(sipGILState, 0, sipPySelf, sipMeth, sz);
}

 ::wxSize sipwxRichTextField::GetMinSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_GetMinSize);

    if (!sipMeth)
        return  ::wxRichTextField::GetMinSize();

    extern  ::wxSize sipVH__richtext_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_4(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextField::SetMinSize(const  ::wxSize& sz)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_SetMinSize);

    if (!sipMeth)
    {
         ::wxRichTextField::SetMinSize(sz);
        return;
    }

    extern void sipVH__richtext_20(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxSize&);

    sipVH__richtext_20(sipGILState, 0, sipPySelf, sipMeth, sz);
}

 ::wxTextAttrSize sipwxRichTextField::GetNaturalSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[36]),sipPySelf,NULL,sipName_GetNaturalSize);

    if (!sipMeth)
        return  ::wxRichTextField::GetNaturalSize();

    extern  ::wxTextAttrSize sipVH__richtext_21(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_21(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPoint sipwxRichTextField::GetPosition() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_GetPosition);

    if (!sipMeth)
        return  ::wxRichTextField::GetPosition();

    extern  ::wxPoint sipVH__richtext_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_22(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextField::SetPosition(const  ::wxPoint& pos)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_SetPosition);

    if (!sipMeth)
    {
         ::wxRichTextField::SetPosition(pos);
        return;
    }

    extern void sipVH__richtext_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxPoint&);

    sipVH__richtext_23(sipGILState, 0, sipPySelf, sipMeth, pos);
}

 ::wxPoint sipwxRichTextField::GetAbsolutePosition() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[39]),sipPySelf,NULL,sipName_GetAbsolutePosition);

    if (!sipMeth)
        return  ::wxRichTextField::GetAbsolutePosition();

    extern  ::wxPoint sipVH__richtext_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_22(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRect sipwxRichTextField::GetRect() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[40]),sipPySelf,NULL,sipName_GetRect);

    if (!sipMeth)
        return  ::wxRichTextField::GetRect();

    extern  ::wxRect sipVH__richtext_24(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_24(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextField::IsComposite() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[41]),sipPySelf,NULL,sipName_IsComposite);

    if (!sipMeth)
        return  ::wxRichTextField::IsComposite();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextField::IsAtomic() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[42]),sipPySelf,NULL,sipName_IsAtomic);

    if (!sipMeth)
        return  ::wxRichTextField::IsAtomic();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRichTextObject* sipwxRichTextField::GetParent() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[43]),sipPySelf,NULL,sipName_GetParent);

    if (!sipMeth)
        return  ::wxRichTextField::GetParent();

    extern  ::wxRichTextObject* sipVH__richtext_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextField::SetParent( ::wxRichTextObject*parent)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[44],sipPySelf,NULL,sipName_SetParent);

    if (!sipMeth)
    {
         ::wxRichTextField::SetParent(parent);
        return;
    }

    extern void sipVH__richtext_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*);

    sipVH__richtext_26(sipGILState, 0, sipPySelf, sipMeth, parent);
}

 ::wxRichTextParagraphLayoutBox* sipwxRichTextField::GetContainer() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[45]),sipPySelf,NULL,sipName_GetContainer);

    if (!sipMeth)
        return  ::wxRichTextField::GetContainer();

    extern  ::wxRichTextParagraphLayoutBox* sipVH__richtext_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_27(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRichTextParagraphLayoutBox* sipwxRichTextField::GetParentContainer() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[46]),sipPySelf,NULL,sipName_GetParentContainer);

    if (!sipMeth)
        return  ::wxRichTextField::GetParentContainer();

    extern  ::wxRichTextParagraphLayoutBox* sipVH__richtext_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_27(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextField::SetMargins(int margin)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[47],sipPySelf,NULL,sipName_SetMargins);

    if (!sipMeth)
    {
         ::wxRichTextField::SetMargins(margin);
        return;
    }

    extern void sipVH__richtext_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__richtext_28(sipGILState, 0, sipPySelf, sipMeth, margin);
}

void sipwxRichTextField::SetMargins(int leftMargin,int rightMargin,int topMargin,int bottomMargin)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[48],sipPySelf,NULL,sipName_SetMargins);

    if (!sipMeth)
    {
         ::wxRichTextField::SetMargins(leftMargin,rightMargin,topMargin,bottomMargin);
        return;
    }

    extern void sipVH__richtext_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__richtext_29(sipGILState, 0, sipPySelf, sipMeth, leftMargin, rightMargin, topMargin, bottomMargin);
}

int sipwxRichTextField::GetLeftMargin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[49]),sipPySelf,NULL,sipName_GetLeftMargin);

    if (!sipMeth)
        return  ::wxRichTextField::GetLeftMargin();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextField::GetRightMargin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[50]),sipPySelf,NULL,sipName_GetRightMargin);

    if (!sipMeth)
        return  ::wxRichTextField::GetRightMargin();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextField::GetTopMargin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[51]),sipPySelf,NULL,sipName_GetTopMargin);

    if (!sipMeth)
        return  ::wxRichTextField::GetTopMargin();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextField::GetBottomMargin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[52]),sipPySelf,NULL,sipName_GetBottomMargin);

    if (!sipMeth)
        return  ::wxRichTextField::GetBottomMargin();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRect sipwxRichTextField::GetAvailableContentArea( ::wxDC& dc, ::wxRichTextDrawingContext& context,const  ::wxRect& outerRect) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[53]),sipPySelf,NULL,sipName_GetAvailableContentArea);

    if (!sipMeth)
        return  ::wxRichTextField::GetAvailableContentArea(dc,context,outerRect);

    extern  ::wxRect sipVH__richtext_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&,const  ::wxRect&);

    return sipVH__richtext_30(sipGILState, 0, sipPySelf, sipMeth, dc, context, outerRect);
}

bool sipwxRichTextField::LayoutToBestSize( ::wxDC& dc, ::wxRichTextDrawingContext& context, ::wxRichTextBuffer*buffer,const  ::wxRichTextAttr& parentAttr,const  ::wxRichTextAttr& attr,const  ::wxRect& availableParentSpace,const  ::wxRect& availableContainerSpace,int style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[54],sipPySelf,NULL,sipName_LayoutToBestSize);

    if (!sipMeth)
        return  ::wxRichTextField::LayoutToBestSize(dc,context,buffer,parentAttr,attr,availableParentSpace,availableContainerSpace,style);

    extern bool sipVH__richtext_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxDC&, ::wxRichTextDrawingContext&, ::wxRichTextBuffer*,const  ::wxRichTextAttr&,const  ::wxRichTextAttr&,const  ::wxRect&,const  ::wxRect&,int);

    return sipVH__richtext_31(sipGILState, 0, sipPySelf, sipMeth, dc, context, buffer, parentAttr, attr, availableParentSpace, availableContainerSpace, style);
}

bool sipwxRichTextField::AdjustAttributes( ::wxRichTextAttr& attr, ::wxRichTextDrawingContext& context)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[55],sipPySelf,NULL,sipName_AdjustAttributes);

    if (!sipMeth)
        return  ::wxRichTextField::AdjustAttributes(attr,context);

    extern bool sipVH__richtext_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextAttr&, ::wxRichTextDrawingContext&);

    return sipVH__richtext_32(sipGILState, 0, sipPySelf, sipMeth, attr, context);
}

bool sipwxRichTextField::IsTopLevel() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[56]),sipPySelf,NULL,sipName_IsTopLevel);

    if (!sipMeth)
        return  ::wxRichTextField::IsTopLevel();

    extern bool sipVH__richtext_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_9(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextField::Show(bool show)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[57],sipPySelf,NULL,sipName_Show);

    if (!sipMeth)
    {
         ::wxRichTextField::Show(show);
        return;
    }

    extern void sipVH__richtext_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__richtext_33(sipGILState, 0, sipPySelf, sipMeth, show);
}

 ::wxRichTextObject* sipwxRichTextField::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[58]),sipPySelf,NULL,sipName_Clone);

    if (!sipMeth)
        return  ::wxRichTextField::Clone();

    extern  ::wxRichTextObject* sipVH__richtext_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_34(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextField::Move(const  ::wxPoint& pt)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[59],sipPySelf,NULL,sipName_Move);

    if (!sipMeth)
    {
         ::wxRichTextField::Move(pt);
        return;
    }

    extern void sipVH__richtext_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxPoint&);

    sipVH__richtext_23(sipGILState, 0, sipPySelf, sipMeth, pt);
}

bool sipwxRichTextField::SetListStyle(const  ::wxRichTextRange& range, ::wxRichTextListStyleDefinition*styleDef,int flags,int startFrom,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[60],sipPySelf,NULL,sipName_SetListStyle);

    if (!sipMeth)
        return  ::wxRichTextField::SetListStyle(range,styleDef,flags,startFrom,specifiedLevel);

    extern bool sipVH__richtext_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int,int);

    return sipVH__richtext_35(sipGILState, 0, sipPySelf, sipMeth, range, styleDef, flags, startFrom, specifiedLevel);
}

bool sipwxRichTextField::SetListStyle(const  ::wxRichTextRange& range,const  ::wxString& defName,int flags,int startFrom,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[61],sipPySelf,NULL,sipName_SetListStyle);

    if (!sipMeth)
        return  ::wxRichTextField::SetListStyle(range,defName,flags,startFrom,specifiedLevel);

    extern bool sipVH__richtext_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxString&,int,int,int);

    return sipVH__richtext_36(sipGILState, 0, sipPySelf, sipMeth, range, defName, flags, startFrom, specifiedLevel);
}

bool sipwxRichTextField::NumberList(const  ::wxRichTextRange& range, ::wxRichTextListStyleDefinition*def,int flags,int startFrom,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[62],sipPySelf,NULL,sipName_NumberList);

    if (!sipMeth)
        return  ::wxRichTextField::NumberList(range,def,flags,startFrom,specifiedLevel);

    extern bool sipVH__richtext_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int,int);

    return sipVH__richtext_35(sipGILState, 0, sipPySelf, sipMeth, range, def, flags, startFrom, specifiedLevel);
}

bool sipwxRichTextField::NumberList(const  ::wxRichTextRange& range,const  ::wxString& defName,int flags,int startFrom,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[63],sipPySelf,NULL,sipName_NumberList);

    if (!sipMeth)
        return  ::wxRichTextField::NumberList(range,defName,flags,startFrom,specifiedLevel);

    extern bool sipVH__richtext_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxString&,int,int,int);

    return sipVH__richtext_36(sipGILState, 0, sipPySelf, sipMeth, range, defName, flags, startFrom, specifiedLevel);
}

bool sipwxRichTextField::PromoteList(int promoteBy,const  ::wxRichTextRange& range, ::wxRichTextListStyleDefinition*def,int flags,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[64],sipPySelf,NULL,sipName_PromoteList);

    if (!sipMeth)
        return  ::wxRichTextField::PromoteList(promoteBy,range,def,flags,specifiedLevel);

    extern bool sipVH__richtext_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::wxRichTextRange&, ::wxRichTextListStyleDefinition*,int,int);

    return sipVH__richtext_37(sipGILState, 0, sipPySelf, sipMeth, promoteBy, range, def, flags, specifiedLevel);
}

bool sipwxRichTextField::PromoteList(int promoteBy,const  ::wxRichTextRange& range,const  ::wxString& defName,int flags,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[65],sipPySelf,NULL,sipName_PromoteList);

    if (!sipMeth)
        return  ::wxRichTextField::PromoteList(promoteBy,range,defName,flags,specifiedLevel);

    extern bool sipVH__richtext_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::wxRichTextRange&,const  ::wxString&,int,int);

    return sipVH__richtext_38(sipGILState, 0, sipPySelf, sipMeth, promoteBy, range, defName, flags, specifiedLevel);
}

 ::wxRichTextStyleSheet* sipwxRichTextField::GetStyleSheet() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[66]),sipPySelf,NULL,sipName_GetStyleSheet);

    if (!sipMeth)
        return  ::wxRichTextField::GetStyleSheet();

    extern  ::wxRichTextStyleSheet* sipVH__richtext_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_39(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextField::Clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[67],sipPySelf,NULL,sipName_Clear);

    if (!sipMeth)
    {
         ::wxRichTextField::Clear();
        return;
    }

    extern void sipVH__richtext_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__richtext_40(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextField::Reset()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[68],sipPySelf,NULL,sipName_Reset);

    if (!sipMeth)
    {
         ::wxRichTextField::Reset();
        return;
    }

    extern void sipVH__richtext_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__richtext_40(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxRichTextRange sipwxRichTextField::AddParagraph(const  ::wxString& text, ::wxRichTextAttr*paraStyle)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[69],sipPySelf,NULL,sipName_AddParagraph);

    if (!sipMeth)
        return  ::wxRichTextField::AddParagraph(text,paraStyle);

    extern  ::wxRichTextRange sipVH__richtext_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&, ::wxRichTextAttr*);

    return sipVH__richtext_41(sipGILState, 0, sipPySelf, sipMeth, text, paraStyle);
}

 ::wxRichTextRange sipwxRichTextField::AddImage(const  ::wxImage& image, ::wxRichTextAttr*paraStyle)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[70],sipPySelf,NULL,sipName_AddImage);

    if (!sipMeth)
        return  ::wxRichTextField::AddImage(image,paraStyle);

    extern  ::wxRichTextRange sipVH__richtext_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxImage&, ::wxRichTextAttr*);

    return sipVH__richtext_42(sipGILState, 0, sipPySelf, sipMeth, image, paraStyle);
}

 ::wxRichTextRange sipwxRichTextField::AddParagraphs(const  ::wxString& text, ::wxRichTextAttr*paraStyle)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[71],sipPySelf,NULL,sipName_AddParagraphs);

    if (!sipMeth)
        return  ::wxRichTextField::AddParagraphs(text,paraStyle);

    extern  ::wxRichTextRange sipVH__richtext_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&, ::wxRichTextAttr*);

    return sipVH__richtext_41(sipGILState, 0, sipPySelf, sipMeth, text, paraStyle);
}

 ::wxRichTextLine* sipwxRichTextField::GetLineAtPosition(long pos,bool caretPosition) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[72]),sipPySelf,NULL,sipName_GetLineAtPosition);

    if (!sipMeth)
        return  ::wxRichTextField::GetLineAtPosition(pos,caretPosition);

    extern  ::wxRichTextLine* sipVH__richtext_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,bool);

    return sipVH__richtext_43(sipGILState, 0, sipPySelf, sipMeth, pos, caretPosition);
}

 ::wxRichTextLine* sipwxRichTextField::GetLineAtYPosition(int y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[73]),sipPySelf,NULL,sipName_GetLineAtYPosition);

    if (!sipMeth)
        return  ::wxRichTextField::GetLineAtYPosition(y);

    extern  ::wxRichTextLine* sipVH__richtext_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__richtext_44(sipGILState, 0, sipPySelf, sipMeth, y);
}

 ::wxRichTextParagraph* sipwxRichTextField::GetParagraphAtPosition(long pos,bool caretPosition) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[74]),sipPySelf,NULL,sipName_GetParagraphAtPosition);

    if (!sipMeth)
        return  ::wxRichTextField::GetParagraphAtPosition(pos,caretPosition);

    extern  ::wxRichTextParagraph* sipVH__richtext_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,bool);

    return sipVH__richtext_45(sipGILState, 0, sipPySelf, sipMeth, pos, caretPosition);
}

 ::wxSize sipwxRichTextField::GetLineSizeAtPosition(long pos,bool caretPosition) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[75]),sipPySelf,NULL,sipName_GetLineSizeAtPosition);

    if (!sipMeth)
        return  ::wxRichTextField::GetLineSizeAtPosition(pos,caretPosition);

    extern  ::wxSize sipVH__richtext_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,bool);

    return sipVH__richtext_46(sipGILState, 0, sipPySelf, sipMeth, pos, caretPosition);
}

long sipwxRichTextField::GetVisibleLineNumber(long pos,bool caretPosition,bool startOfLine) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[76]),sipPySelf,NULL,sipName_GetVisibleLineNumber);

    if (!sipMeth)
        return  ::wxRichTextField::GetVisibleLineNumber(pos,caretPosition,startOfLine);

    extern long sipVH__richtext_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,bool,bool);

    return sipVH__richtext_47(sipGILState, 0, sipPySelf, sipMeth, pos, caretPosition, startOfLine);
}

 ::wxRichTextLine* sipwxRichTextField::GetLineForVisibleLineNumber(long lineNumber) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[77]),sipPySelf,NULL,sipName_GetLineForVisibleLineNumber);

    if (!sipMeth)
        return  ::wxRichTextField::GetLineForVisibleLineNumber(lineNumber);

    extern  ::wxRichTextLine* sipVH__richtext_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_48(sipGILState, 0, sipPySelf, sipMeth, lineNumber);
}

 ::wxRichTextObject* sipwxRichTextField::GetLeafObjectAtPosition(long position) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[78]),sipPySelf,NULL,sipName_GetLeafObjectAtPosition);

    if (!sipMeth)
        return  ::wxRichTextField::GetLeafObjectAtPosition(position);

    extern  ::wxRichTextObject* sipVH__richtext_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_6(sipGILState, 0, sipPySelf, sipMeth, position);
}

 ::wxRichTextParagraph* sipwxRichTextField::GetParagraphAtLine(long paragraphNumber) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[79]),sipPySelf,NULL,sipName_GetParagraphAtLine);

    if (!sipMeth)
        return  ::wxRichTextField::GetParagraphAtLine(paragraphNumber);

    extern  ::wxRichTextParagraph* sipVH__richtext_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_49(sipGILState, 0, sipPySelf, sipMeth, paragraphNumber);
}

 ::wxRichTextParagraph* sipwxRichTextField::GetParagraphForLine( ::wxRichTextLine*line) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[80]),sipPySelf,NULL,sipName_GetParagraphForLine);

    if (!sipMeth)
        return  ::wxRichTextField::GetParagraphForLine(line);

    extern  ::wxRichTextParagraph* sipVH__richtext_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextLine*);

    return sipVH__richtext_50(sipGILState, 0, sipPySelf, sipMeth, line);
}

int sipwxRichTextField::GetParagraphLength(long paragraphNumber) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[81]),sipPySelf,NULL,sipName_GetParagraphLength);

    if (!sipMeth)
        return  ::wxRichTextField::GetParagraphLength(paragraphNumber);

    extern int sipVH__richtext_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_51(sipGILState, 0, sipPySelf, sipMeth, paragraphNumber);
}

int sipwxRichTextField::GetParagraphCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[82]),sipPySelf,NULL,sipName_GetParagraphCount);

    if (!sipMeth)
        return  ::wxRichTextField::GetParagraphCount();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxRichTextField::GetLineCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[83]),sipPySelf,NULL,sipName_GetLineCount);

    if (!sipMeth)
        return  ::wxRichTextField::GetLineCount();

    extern int sipVH__richtext_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_10(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxString sipwxRichTextField::GetParagraphText(long paragraphNumber) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[84]),sipPySelf,NULL,sipName_GetParagraphText);

    if (!sipMeth)
        return  ::wxRichTextField::GetParagraphText(paragraphNumber);

    extern  ::wxString sipVH__richtext_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long);

    return sipVH__richtext_52(sipGILState, 0, sipPySelf, sipMeth, paragraphNumber);
}

long sipwxRichTextField::XYToPosition(long x,long y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[85]),sipPySelf,NULL,sipName_XYToPosition);

    if (!sipMeth)
        return  ::wxRichTextField::XYToPosition(x,y);

    extern long sipVH__richtext_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,long);

    return sipVH__richtext_53(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

bool sipwxRichTextField::PositionToXY(long pos,long*x,long*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[86]),sipPySelf,NULL,sipName_PositionToXY);

    if (!sipMeth)
        return  ::wxRichTextField::PositionToXY(pos,x,y);

    extern bool sipVH__richtext_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long,long*,long*);

    return sipVH__richtext_54(sipGILState, 0, sipPySelf, sipMeth, pos, x, y);
}

bool sipwxRichTextField::SetStyle(const  ::wxRichTextRange& range,const  ::wxRichTextAttr& style,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[87],sipPySelf,NULL,sipName_SetStyle);

    if (!sipMeth)
        return  ::wxRichTextField::SetStyle(range,style,flags);

    extern bool sipVH__richtext_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxRichTextAttr&,int);

    return sipVH__richtext_55(sipGILState, 0, sipPySelf, sipMeth, range, style, flags);
}

void sipwxRichTextField::SetStyle( ::wxRichTextObject*obj,const  ::wxRichTextAttr& textAttr,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[88],sipPySelf,NULL,sipName_SetStyle);

    if (!sipMeth)
    {
         ::wxRichTextField::SetStyle(obj,textAttr,flags);
        return;
    }

    extern void sipVH__richtext_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject*,const  ::wxRichTextAttr&,int);

    sipVH__richtext_56(sipGILState, 0, sipPySelf, sipMeth, obj, textAttr, flags);
}

bool sipwxRichTextField::GetStyle(long position, ::wxRichTextAttr& style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[89],sipPySelf,NULL,sipName_GetStyle);

    if (!sipMeth)
        return  ::wxRichTextField::GetStyle(position,style);

    extern bool sipVH__richtext_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long, ::wxRichTextAttr&);

    return sipVH__richtext_57(sipGILState, 0, sipPySelf, sipMeth, position, style);
}

bool sipwxRichTextField::GetUncombinedStyle(long position, ::wxRichTextAttr& style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[90],sipPySelf,NULL,sipName_GetUncombinedStyle);

    if (!sipMeth)
        return  ::wxRichTextField::GetUncombinedStyle(position,style);

    extern bool sipVH__richtext_57(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long, ::wxRichTextAttr&);

    return sipVH__richtext_57(sipGILState, 0, sipPySelf, sipMeth, position, style);
}

bool sipwxRichTextField::DoGetStyle(long position, ::wxRichTextAttr& style,bool combineStyles)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[91],sipPySelf,NULL,sipName_DoGetStyle);

    if (!sipMeth)
        return  ::wxRichTextField::DoGetStyle(position,style,combineStyles);

    extern bool sipVH__richtext_58(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long, ::wxRichTextAttr&,bool);

    return sipVH__richtext_58(sipGILState, 0, sipPySelf, sipMeth, position, style, combineStyles);
}

bool sipwxRichTextField::GetStyleForRange(const  ::wxRichTextRange& range, ::wxRichTextAttr& style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[92],sipPySelf,NULL,sipName_GetStyleForRange);

    if (!sipMeth)
        return  ::wxRichTextField::GetStyleForRange(range,style);

    extern bool sipVH__richtext_59(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&, ::wxRichTextAttr&);

    return sipVH__richtext_59(sipGILState, 0, sipPySelf, sipMeth, range, style);
}

bool sipwxRichTextField::ClearListStyle(const  ::wxRichTextRange& range,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[93],sipPySelf,NULL,sipName_ClearListStyle);

    if (!sipMeth)
        return  ::wxRichTextField::ClearListStyle(range,flags);

    extern bool sipVH__richtext_60(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,int);

    return sipVH__richtext_60(sipGILState, 0, sipPySelf, sipMeth, range, flags);
}

bool sipwxRichTextField::DoNumberList(const  ::wxRichTextRange& range,const  ::wxRichTextRange& promotionRange,int promoteBy, ::wxRichTextListStyleDefinition*styleDef,int flags,int startFrom,int specifiedLevel)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[94],sipPySelf,NULL,sipName_DoNumberList);

    if (!sipMeth)
        return  ::wxRichTextField::DoNumberList(range,promotionRange,promoteBy,styleDef,flags,startFrom,specifiedLevel);

    extern bool sipVH__richtext_61(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxRichTextRange&,int, ::wxRichTextListStyleDefinition*,int,int,int);

    return sipVH__richtext_61(sipGILState, 0, sipPySelf, sipMeth, range, promotionRange, promoteBy, styleDef, flags, startFrom, specifiedLevel);
}

bool sipwxRichTextField::FindNextParagraphNumber( ::wxRichTextParagraph*previousParagraph, ::wxRichTextAttr& attr) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[95]),sipPySelf,NULL,sipName_FindNextParagraphNumber);

    if (!sipMeth)
        return  ::wxRichTextField::FindNextParagraphNumber(previousParagraph,attr);

    extern bool sipVH__richtext_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextParagraph*, ::wxRichTextAttr&);

    return sipVH__richtext_62(sipGILState, 0, sipPySelf, sipMeth, previousParagraph, attr);
}

bool sipwxRichTextField::SetProperties(const  ::wxRichTextRange& range,const  ::wxRichTextProperties& properties,int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[96],sipPySelf,NULL,sipName_SetProperties);

    if (!sipMeth)
        return  ::wxRichTextField::SetProperties(range,properties,flags);

    extern bool sipVH__richtext_63(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxRichTextProperties&,int);

    return sipVH__richtext_63(sipGILState, 0, sipPySelf, sipMeth, range, properties, flags);
}

bool sipwxRichTextField::SetObjectPropertiesWithUndo( ::wxRichTextObject& obj,const  ::wxRichTextProperties& properties, ::wxRichTextObject*objToSet)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[97],sipPySelf,NULL,sipName_SetObjectPropertiesWithUndo);

    if (!sipMeth)
        return  ::wxRichTextField::SetObjectPropertiesWithUndo(obj,properties,objToSet);

    extern bool sipVH__richtext_64(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextObject&,const  ::wxRichTextProperties&, ::wxRichTextObject*);

    return sipVH__richtext_64(sipGILState, 0, sipPySelf, sipMeth, obj, properties, objToSet);
}

bool sipwxRichTextField::HasCharacterAttributes(const  ::wxRichTextRange& range,const  ::wxRichTextAttr& style) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[98]),sipPySelf,NULL,sipName_HasCharacterAttributes);

    if (!sipMeth)
        return  ::wxRichTextField::HasCharacterAttributes(range,style);

    extern bool sipVH__richtext_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxRichTextAttr&);

    return sipVH__richtext_65(sipGILState, 0, sipPySelf, sipMeth, range, style);
}

bool sipwxRichTextField::HasParagraphAttributes(const  ::wxRichTextRange& range,const  ::wxRichTextAttr& style) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[99]),sipPySelf,NULL,sipName_HasParagraphAttributes);

    if (!sipMeth)
        return  ::wxRichTextField::HasParagraphAttributes(range,style);

    extern bool sipVH__richtext_65(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&,const  ::wxRichTextAttr&);

    return sipVH__richtext_65(sipGILState, 0, sipPySelf, sipMeth, range, style);
}

void sipwxRichTextField::PrepareContent( ::wxRichTextParagraphLayoutBox& container)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[100],sipPySelf,NULL,sipName_PrepareContent);

    if (!sipMeth)
    {
         ::wxRichTextField::PrepareContent(container);
        return;
    }

    extern void sipVH__richtext_66(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextParagraphLayoutBox&);

    sipVH__richtext_66(sipGILState, 0, sipPySelf, sipMeth, container);
}

bool sipwxRichTextField::InsertFragment(long position, ::wxRichTextParagraphLayoutBox& fragment)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[101],sipPySelf,NULL,sipName_InsertFragment);

    if (!sipMeth)
        return  ::wxRichTextField::InsertFragment(position,fragment);

    extern bool sipVH__richtext_67(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long, ::wxRichTextParagraphLayoutBox&);

    return sipVH__richtext_67(sipGILState, 0, sipPySelf, sipMeth, position, fragment);
}

bool sipwxRichTextField::CopyFragment(const  ::wxRichTextRange& range, ::wxRichTextParagraphLayoutBox& fragment)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[102],sipPySelf,NULL,sipName_CopyFragment);

    if (!sipMeth)
        return  ::wxRichTextField::CopyFragment(range,fragment);

    extern bool sipVH__richtext_68(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&, ::wxRichTextParagraphLayoutBox&);

    return sipVH__richtext_68(sipGILState, 0, sipPySelf, sipMeth, range, fragment);
}

bool sipwxRichTextField::ApplyStyleSheet( ::wxRichTextStyleSheet*styleSheet)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[103],sipPySelf,NULL,sipName_ApplyStyleSheet);

    if (!sipMeth)
        return  ::wxRichTextField::ApplyStyleSheet(styleSheet);

    extern bool sipVH__richtext_69(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxRichTextStyleSheet*);

    return sipVH__richtext_69(sipGILState, 0, sipPySelf, sipMeth, styleSheet);
}

void sipwxRichTextField::UpdateRanges()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[104],sipPySelf,NULL,sipName_UpdateRanges);

    if (!sipMeth)
    {
         ::wxRichTextField::UpdateRanges();
        return;
    }

    extern void sipVH__richtext_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__richtext_40(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxString sipwxRichTextField::GetText() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[105]),sipPySelf,NULL,sipName_GetText);

    if (!sipMeth)
        return  ::wxRichTextField::GetText();

    extern  ::wxString sipVH__richtext_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_16(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRichTextField::SetDefaultStyle(const  ::wxRichTextAttr& style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[106],sipPySelf,NULL,sipName_SetDefaultStyle);

    if (!sipMeth)
        return  ::wxRichTextField::SetDefaultStyle(style);

    extern bool sipVH__richtext_70(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextAttr&);

    return sipVH__richtext_70(sipGILState, 0, sipPySelf, sipMeth, style);
}

const  ::wxRichTextAttr& sipwxRichTextField::GetDefaultStyle() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[107]),sipPySelf,NULL,sipName_GetDefaultStyle);

    if (!sipMeth)
        return  ::wxRichTextField::GetDefaultStyle();

    extern const  ::wxRichTextAttr& sipVH__richtext_71(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_71(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextField::SetBasicStyle(const  ::wxRichTextAttr& style)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[108],sipPySelf,NULL,sipName_SetBasicStyle);

    if (!sipMeth)
    {
         ::wxRichTextField::SetBasicStyle(style);
        return;
    }

    extern void sipVH__richtext_72(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextAttr&);

    sipVH__richtext_72(sipGILState, 0, sipPySelf, sipMeth, style);
}

const  ::wxRichTextAttr& sipwxRichTextField::GetBasicStyle() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[109]),sipPySelf,NULL,sipName_GetBasicStyle);

    if (!sipMeth)
        return  ::wxRichTextField::GetBasicStyle();

    extern const  ::wxRichTextAttr& sipVH__richtext_71(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__richtext_71(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRichTextField::DoInvalidate(const  ::wxRichTextRange& invalidRange)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[110],sipPySelf,NULL,sipName_DoInvalidate);

    if (!sipMeth)
    {
         ::wxRichTextField::DoInvalidate(invalidRange);
        return;
    }

    extern void sipVH__richtext_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    sipVH__richtext_18(sipGILState, 0, sipPySelf, sipMeth, invalidRange);
}

void sipwxRichTextField::InvalidateHierarchy(const  ::wxRichTextRange& invalidRange)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[111],sipPySelf,NULL,sipName_InvalidateHierarchy);

    if (!sipMeth)
    {
         ::wxRichTextField::InvalidateHierarchy(invalidRange);
        return;
    }

    extern void sipVH__richtext_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRichTextRange&);

    sipVH__richtext_18(sipGILState, 0, sipPySelf, sipMeth, invalidRange);
}

bool sipwxRichTextField::UpdateFloatingObjects(const  ::wxRect& availableRect, ::wxRichTextObject*untilObj)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[112],sipPySelf,NULL,sipName_UpdateFloatingObjects);

    if (!sipMeth)
        return  ::wxRichTextField::UpdateFloatingObjects(availableRect,untilObj);

    extern bool sipVH__richtext_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxRect&, ::wxRichTextObject*);

    return sipVH__richtext_73(sipGILState, 0, sipPySelf, sipMeth, availableRect, untilObj);
}


PyDoc_STRVAR(doc_wxRichTextField_Draw, "Draw(dc, context, range, selection, rect, descent, style) -> bool\n"
"\n"
"Draw the item, within the given range.");

extern "C" {static PyObject *meth_wxRichTextField_Draw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextField_Draw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        const  ::wxRichTextRange* range;
        int rangeState = 0;
        const  ::wxRichTextSelection* selection;
        const  ::wxRect* rect;
        int rectState = 0;
        int descent;
        int style;
         ::wxRichTextField *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_context,
            sipName_range,
            sipName_selection,
            sipName_rect,
            sipName_descent,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9J1J9J1ii", &sipSelf, sipType_wxRichTextField, &sipCpp, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, sipType_wxRichTextRange, &range, &rangeState, sipType_wxRichTextSelection, &selection, sipType_wxRect, &rect, &rectState, &descent, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextField::Draw(*dc,*context,*range,*selection,*rect,descent,style) : sipCpp->Draw(*dc,*context,*range,*selection,*rect,descent,style));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range),sipType_wxRichTextRange,rangeState);
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextField, sipName_Draw, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextField_Layout, "Layout(dc, context, rect, parentRect, style) -> bool\n"
"\n"
"Lay the item out at the specified position with the given size\n"
"constraint.");

extern "C" {static PyObject *meth_wxRichTextField_Layout(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextField_Layout(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        const  ::wxRect* rect;
        int rectState = 0;
        const  ::wxRect* parentRect;
        int parentRectState = 0;
        int style;
         ::wxRichTextField *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dc,
            sipName_context,
            sipName_rect,
            sipName_parentRect,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9J1J1i", &sipSelf, sipType_wxRichTextField, &sipCpp, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, sipType_wxRect, &rect, &rectState, sipType_wxRect, &parentRect, &parentRectState, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextField::Layout(*dc,*context,*rect,*parentRect,style) : sipCpp->Layout(*dc,*context,*rect,*parentRect,style));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);
            sipReleaseType(const_cast< ::wxRect *>(parentRect),sipType_wxRect,parentRectState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextField, sipName_Layout, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextField_GetRangeSize, "GetRangeSize(range, size, descent, dc, context, flags, position=wx.Point(0,0), parentSize=wx.DefaultSize, partialExtents=None) -> bool\n"
"\n"
"Returns the object size for the given range.");

extern "C" {static PyObject *meth_wxRichTextField_GetRangeSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextField_GetRangeSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextRange* range;
        int rangeState = 0;
         ::wxSize* size;
        int sizeState = 0;
        int descent;
         ::wxDC* dc;
         ::wxRichTextDrawingContext* context;
        int flags;
        const  ::wxPoint& positiondef = wxPoint(0,0);
        const  ::wxPoint* position = &positiondef;
        int positionState = 0;
        const  ::wxSize& parentSizedef = wxDefaultSize;
        const  ::wxSize* parentSize = &parentSizedef;
        int parentSizeState = 0;
         ::wxArrayInt* partialExtents = 0;
        int partialExtentsState = 0;
        const  ::wxRichTextField *sipCpp;

        static const char *sipKwdList[] = {
            sipName_range,
            sipName_size,
            sipName_dc,
            sipName_context,
            sipName_flags,
            sipName_position,
            sipName_parentSize,
            sipName_partialExtents,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1J1J9J9i|J1J1J0", &sipSelf, sipType_wxRichTextField, &sipCpp, sipType_wxRichTextRange, &range, &rangeState, sipType_wxSize, &size, &sizeState, sipType_wxDC, &dc, sipType_wxRichTextDrawingContext, &context, &flags, sipType_wxPoint, &position, &positionState, sipType_wxSize, &parentSize, &parentSizeState, sipType_wxArrayInt,&partialExtents, &partialExtentsState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextField::GetRangeSize(*range,*size,descent,*dc,*context,flags,*position,*parentSize,partialExtents) : sipCpp->GetRangeSize(*range,*size,descent,*dc,*context,flags,*position,*parentSize,partialExtents));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRichTextRange *>(range),sipType_wxRichTextRange,rangeState);
            sipReleaseType(size,sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxPoint *>(position),sipType_wxPoint,positionState);
            sipReleaseType(const_cast< ::wxSize *>(parentSize),sipType_wxSize,parentSizeState);
            sipReleaseType(partialExtents,sipType_wxArrayInt,partialExtentsState);

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bi)",sipRes,descent);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextField, sipName_GetRangeSize, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextField_GetXMLNodeName, "GetXMLNodeName() -> String\n"
"\n"
"Returns the XML node name of this object.");

extern "C" {static PyObject *meth_wxRichTextField_GetXMLNodeName(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextField_GetXMLNodeName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextField, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxRichTextField::GetXMLNodeName() : sipCpp->GetXMLNodeName()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextField, sipName_GetXMLNodeName, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextField_CanEditProperties, "CanEditProperties() -> bool\n"
"\n"
"Returns true if we can edit the object's properties via a GUI.");

extern "C" {static PyObject *meth_wxRichTextField_CanEditProperties(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextField_CanEditProperties(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextField, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextField::CanEditProperties() : sipCpp->CanEditProperties());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextField, sipName_CanEditProperties, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextField_EditProperties, "EditProperties(parent, buffer) -> bool\n"
"\n"
"Edits the object's properties via a GUI.");

extern "C" {static PyObject *meth_wxRichTextField_EditProperties(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextField_EditProperties(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindow* parent;
         ::wxRichTextBuffer* buffer;
         ::wxRichTextField *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_buffer,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8J8", &sipSelf, sipType_wxRichTextField, &sipCpp, sipType_wxWindow, &parent, sipType_wxRichTextBuffer, &buffer))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextField::EditProperties(parent,buffer) : sipCpp->EditProperties(parent,buffer));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextField, sipName_EditProperties, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextField_GetPropertiesMenuLabel, "GetPropertiesMenuLabel() -> String\n"
"\n"
"Returns the label to be used for the properties context menu item.");

extern "C" {static PyObject *meth_wxRichTextField_GetPropertiesMenuLabel(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextField_GetPropertiesMenuLabel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextField, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxRichTextField::GetPropertiesMenuLabel() : sipCpp->GetPropertiesMenuLabel()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextField, sipName_GetPropertiesMenuLabel, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextField_AcceptsFocus, "AcceptsFocus() -> bool\n"
"\n"
"Returns true if objects of this class can accept the focus, i.e. a\n"
"call to SetFocusObject is possible.");

extern "C" {static PyObject *meth_wxRichTextField_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextField_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextField, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextField::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextField, sipName_AcceptsFocus, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextField_CalculateRange, "CalculateRange(start) -> end\n"
"\n"
"Calculates the range of the object.");

extern "C" {static PyObject *meth_wxRichTextField_CalculateRange(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextField_CalculateRange(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        long start;
        long end;
         ::wxRichTextField *sipCpp;

        static const char *sipKwdList[] = {
            sipName_start,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bl", &sipSelf, sipType_wxRichTextField, &sipCpp, &start))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRichTextField::CalculateRange(start,end) : sipCpp->CalculateRange(start,end));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromLong(end);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextField, sipName_CalculateRange, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextField_IsAtomic, "IsAtomic() -> bool\n"
"\n"
"If a field has children, we don't want the user to be able to edit it.");

extern "C" {static PyObject *meth_wxRichTextField_IsAtomic(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextField_IsAtomic(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextField, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextField::IsAtomic() : sipCpp->IsAtomic());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextField, sipName_IsAtomic, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextField_IsEmpty, "IsEmpty() -> bool\n"
"\n"
"Returns true if the buffer is empty.");

extern "C" {static PyObject *meth_wxRichTextField_IsEmpty(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextField_IsEmpty(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextField, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextField::IsEmpty() : sipCpp->IsEmpty());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextField, sipName_IsEmpty, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextField_IsTopLevel, "IsTopLevel() -> bool\n"
"\n"
"Returns true if this object is top-level, i.e. contains its own\n"
"paragraphs, such as a text box.");

extern "C" {static PyObject *meth_wxRichTextField_IsTopLevel(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextField_IsTopLevel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextField, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextField::IsTopLevel() : sipCpp->IsTopLevel());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextField, sipName_IsTopLevel, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextField_SetFieldType, "SetFieldType(fieldType)");

extern "C" {static PyObject *meth_wxRichTextField_SetFieldType(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextField_SetFieldType(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* fieldType;
        int fieldTypeState = 0;
         ::wxRichTextField *sipCpp;

        static const char *sipKwdList[] = {
            sipName_fieldType,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRichTextField, &sipCpp, sipType_wxString,&fieldType, &fieldTypeState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFieldType(*fieldType);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(fieldType),sipType_wxString,fieldTypeState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextField, sipName_SetFieldType, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextField_GetFieldType, "GetFieldType() -> String");

extern "C" {static PyObject *meth_wxRichTextField_GetFieldType(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextField_GetFieldType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxRichTextField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextField, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetFieldType());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextField, sipName_GetFieldType, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextField_UpdateField, "UpdateField(buffer) -> bool\n"
"\n"
"Update the field; delegated to the associated field type.");

extern "C" {static PyObject *meth_wxRichTextField_UpdateField(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextField_UpdateField(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRichTextBuffer* buffer;
         ::wxRichTextField *sipCpp;

        static const char *sipKwdList[] = {
            sipName_buffer,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxRichTextField, &sipCpp, sipType_wxRichTextBuffer, &buffer))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextField::UpdateField(buffer) : sipCpp->UpdateField(buffer));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextField, sipName_UpdateField, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextField_Clone, "Clone() -> RichTextObject\n"
"\n"
"Clones the object.");

extern "C" {static PyObject *meth_wxRichTextField_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxRichTextField_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRichTextField *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRichTextField, &sipCpp))
        {
             ::wxRichTextObject*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRichTextField::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRichTextObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextField, sipName_Clone, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRichTextField_Copy, "Copy(obj)");

extern "C" {static PyObject *meth_wxRichTextField_Copy(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRichTextField_Copy(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxRichTextField* obj;
         ::wxRichTextField *sipCpp;

        static const char *sipKwdList[] = {
            sipName_obj,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxRichTextField, &sipCpp, sipType_wxRichTextField, &obj))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Copy(*obj);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RichTextField, sipName_Copy, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxRichTextField(void *, const sipTypeDef *);}
static void *cast_wxRichTextField(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxRichTextField *sipCpp = reinterpret_cast< ::wxRichTextField *>(sipCppV);

    if (targetType == sipType_wxRichTextParagraphLayoutBox)
        return static_cast< ::wxRichTextParagraphLayoutBox *>(sipCpp);

    if (targetType == sipType_wxRichTextCompositeObject)
        return static_cast< ::wxRichTextCompositeObject *>(sipCpp);

    if (targetType == sipType_wxRichTextObject)
        return static_cast< ::wxRichTextObject *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxRichTextField(void *, int);}
static void release_wxRichTextField(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxRichTextField *>(sipCppV);
    else
        delete reinterpret_cast< ::wxRichTextField *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_wxRichTextField(void *, SIP_SSIZE_T, void *);}
static void assign_wxRichTextField(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxRichTextField *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxRichTextField *>(sipSrc);
}


extern "C" {static void *array_wxRichTextField(SIP_SSIZE_T);}
static void *array_wxRichTextField(SIP_SSIZE_T sipNrElem)
{
    return new  ::wxRichTextField[sipNrElem];
}


extern "C" {static void *copy_wxRichTextField(const void *, SIP_SSIZE_T);}
static void *copy_wxRichTextField(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxRichTextField(reinterpret_cast<const  ::wxRichTextField *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxRichTextField(sipSimpleWrapper *);}
static void dealloc_wxRichTextField(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxRichTextField *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxRichTextField(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxRichTextField(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxRichTextField(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxRichTextField *sipCpp = 0;

    {
        const  ::wxString& fieldTypedef = wxEmptyString;
        const  ::wxString* fieldType = &fieldTypedef;
        int fieldTypeState = 0;
         ::wxRichTextObject* parent = 0;

        static const char *sipKwdList[] = {
            sipName_fieldType,
            sipName_parent,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J1J8", sipType_wxString,&fieldType, &fieldTypeState, sipType_wxRichTextObject, &parent))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextField(*fieldType,parent);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(fieldType),sipType_wxString,fieldTypeState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxRichTextField* obj;

        static const char *sipKwdList[] = {
            sipName_obj,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9", sipType_wxRichTextField, &obj))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRichTextField(*obj);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxRichTextField[] = {{52, 255, 1}};


static PyMethodDef methods_wxRichTextField[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxRichTextField_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextField_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_CalculateRange), (PyCFunction)meth_wxRichTextField_CalculateRange, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextField_CalculateRange)},
    {SIP_MLNAME_CAST(sipName_CanEditProperties), meth_wxRichTextField_CanEditProperties, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextField_CanEditProperties)},
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxRichTextField_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextField_Clone)},
    {SIP_MLNAME_CAST(sipName_Copy), (PyCFunction)meth_wxRichTextField_Copy, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextField_Copy)},
    {SIP_MLNAME_CAST(sipName_Draw), (PyCFunction)meth_wxRichTextField_Draw, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextField_Draw)},
    {SIP_MLNAME_CAST(sipName_EditProperties), (PyCFunction)meth_wxRichTextField_EditProperties, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextField_EditProperties)},
    {SIP_MLNAME_CAST(sipName_GetFieldType), meth_wxRichTextField_GetFieldType, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextField_GetFieldType)},
    {SIP_MLNAME_CAST(sipName_GetPropertiesMenuLabel), meth_wxRichTextField_GetPropertiesMenuLabel, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextField_GetPropertiesMenuLabel)},
    {SIP_MLNAME_CAST(sipName_GetRangeSize), (PyCFunction)meth_wxRichTextField_GetRangeSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextField_GetRangeSize)},
    {SIP_MLNAME_CAST(sipName_GetXMLNodeName), meth_wxRichTextField_GetXMLNodeName, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextField_GetXMLNodeName)},
    {SIP_MLNAME_CAST(sipName_IsAtomic), meth_wxRichTextField_IsAtomic, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextField_IsAtomic)},
    {SIP_MLNAME_CAST(sipName_IsEmpty), meth_wxRichTextField_IsEmpty, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextField_IsEmpty)},
    {SIP_MLNAME_CAST(sipName_IsTopLevel), meth_wxRichTextField_IsTopLevel, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRichTextField_IsTopLevel)},
    {SIP_MLNAME_CAST(sipName_Layout), (PyCFunction)meth_wxRichTextField_Layout, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextField_Layout)},
    {SIP_MLNAME_CAST(sipName_SetFieldType), (PyCFunction)meth_wxRichTextField_SetFieldType, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextField_SetFieldType)},
    {SIP_MLNAME_CAST(sipName_UpdateField), (PyCFunction)meth_wxRichTextField_UpdateField, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRichTextField_UpdateField)}
};

sipVariableDef variables_wxRichTextField[] = {
    {PropertyVariable, sipName_XMLNodeName, &methods_wxRichTextField[10], NULL, NULL, NULL},
    {PropertyVariable, sipName_PropertiesMenuLabel, &methods_wxRichTextField[8], NULL, NULL, NULL},
    {PropertyVariable, sipName_FieldType, &methods_wxRichTextField[7], &methods_wxRichTextField[15], NULL, NULL},
};

PyDoc_STRVAR(doc_wxRichTextField, "RichTextField(fieldType=wx.EmptyString, parent=None)\n"
"RichTextField(obj)\n"
"\n"
"This class implements the general concept of a field, an object that\n"
"represents additional functionality such as a footnote, a bookmark, a\n"
"page number, a table of contents, and so on.");


sipClassTypeDef sipTypeDef__richtext_wxRichTextField = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxRichTextField,
        {0},
        0
    },
    {
        sipNameNr_RichTextField,
        {0, 0, 1},
        17, methods_wxRichTextField,
        0, 0,
        3, variables_wxRichTextField,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxRichTextField,
    -1,
    -1,
    supers_wxRichTextField,
    0,
    init_type_wxRichTextField,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxRichTextField,
    assign_wxRichTextField,
    array_wxRichTextField,
    copy_wxRichTextField,
    release_wxRichTextField,
    cast_wxRichTextField,
    0,
    0,
    0,
    0,
    0,
    0
};
