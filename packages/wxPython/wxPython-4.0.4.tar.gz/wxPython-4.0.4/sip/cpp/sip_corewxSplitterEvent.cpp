/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/splitter.h>

        #include <wx/splitter.h>
        #include <wx/event.h>
        #include <wx/window.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxSplitterEvent : public  ::wxSplitterEvent
{
public:
    sipwxSplitterEvent( ::wxEventType, ::wxSplitterWindow*);
    sipwxSplitterEvent(const  ::wxSplitterEvent&);
    virtual ~sipwxSplitterEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxEvent* Clone() const;
     ::wxEventCategory GetEventCategory() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxSplitterEvent(const sipwxSplitterEvent &);
    sipwxSplitterEvent &operator = (const sipwxSplitterEvent &);

    char sipPyMethods[2];
};

sipwxSplitterEvent::sipwxSplitterEvent( ::wxEventType eventType, ::wxSplitterWindow*splitter):  ::wxSplitterEvent(eventType,splitter), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxSplitterEvent::sipwxSplitterEvent(const  ::wxSplitterEvent& a0):  ::wxSplitterEvent(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxSplitterEvent::~sipwxSplitterEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxEvent* sipwxSplitterEvent::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_Clone);

    if (!sipMeth)
        return  ::wxSplitterEvent::Clone();

    extern  ::wxEvent* sipVH__core_95(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_95(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxEventCategory sipwxSplitterEvent::GetEventCategory() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_GetEventCategory);

    if (!sipMeth)
        return  ::wxSplitterEvent::GetEventCategory();

    extern  ::wxEventCategory sipVH__core_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_96(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxSplitterEvent_GetSashPosition, "GetSashPosition() -> int\n"
"\n"
"Returns the new sash position.");

extern "C" {static PyObject *meth_wxSplitterEvent_GetSashPosition(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterEvent_GetSashPosition(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxSplitterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSashPosition();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SplitterEvent, sipName_GetSashPosition, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxSplitterEvent_GetWindowBeingRemoved, "GetWindowBeingRemoved() -> Window\n"
"\n"
"Returns a pointer to the window being removed when a splitter window\n"
"is unsplit.");

extern "C" {static PyObject *meth_wxSplitterEvent_GetWindowBeingRemoved(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterEvent_GetWindowBeingRemoved(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxSplitterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterEvent, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetWindowBeingRemoved();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SplitterEvent, sipName_GetWindowBeingRemoved, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxSplitterEvent_GetX, "GetX() -> int\n"
"\n"
"Returns the x coordinate of the double-click point.");

extern "C" {static PyObject *meth_wxSplitterEvent_GetX(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterEvent_GetX(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxSplitterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetX();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SplitterEvent, sipName_GetX, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxSplitterEvent_GetY, "GetY() -> int\n"
"\n"
"Returns the y coordinate of the double-click point.");

extern "C" {static PyObject *meth_wxSplitterEvent_GetY(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterEvent_GetY(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxSplitterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterEvent, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetY();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SplitterEvent, sipName_GetY, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxSplitterEvent_SetSashPosition, "SetSashPosition(pos)\n"
"\n"
"In the case of wxEVT_SPLITTER_SASH_POS_CHANGED events, sets the new\n"
"sash position.");

extern "C" {static PyObject *meth_wxSplitterEvent_SetSashPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxSplitterEvent_SetSashPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int pos;
         ::wxSplitterEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxSplitterEvent, &sipCpp, &pos))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSashPosition(pos);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SplitterEvent, sipName_SetSashPosition, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxSplitterEvent_Clone, "Clone(self) -> Event");

extern "C" {static PyObject *meth_wxSplitterEvent_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxSplitterEvent_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxSplitterEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxSplitterEvent, &sipCpp))
        {
             ::wxEvent*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxSplitterEvent::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxEvent,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SplitterEvent, sipName_Clone, doc_wxSplitterEvent_Clone);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxSplitterEvent(void *, const sipTypeDef *);}
static void *cast_wxSplitterEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxSplitterEvent *sipCpp = reinterpret_cast< ::wxSplitterEvent *>(sipCppV);

    if (targetType == sipType_wxNotifyEvent)
        return static_cast< ::wxNotifyEvent *>(sipCpp);

    if (targetType == sipType_wxCommandEvent)
        return static_cast< ::wxCommandEvent *>(sipCpp);

    if (targetType == sipType_wxEvent)
        return static_cast< ::wxEvent *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxSplitterEvent(void *, int);}
static void release_wxSplitterEvent(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxSplitterEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::wxSplitterEvent *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxSplitterEvent(sipSimpleWrapper *);}
static void dealloc_wxSplitterEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxSplitterEvent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxSplitterEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxSplitterEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxSplitterEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxSplitterEvent *sipCpp = 0;

    {
         ::wxEventType eventType = wxEVT_NULL;
         ::wxSplitterWindow* splitter = 0;

        static const char *sipKwdList[] = {
            sipName_eventType,
            sipName_splitter,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|iJ8", &eventType, sipType_wxSplitterWindow, &splitter))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxSplitterEvent(eventType,splitter);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxSplitterEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxSplitterEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxSplitterEvent(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxSplitterEvent[] = {{356, 255, 1}};


static PyMethodDef methods_wxSplitterEvent[] = {
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxSplitterEvent_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterEvent_Clone)},
    {SIP_MLNAME_CAST(sipName_GetSashPosition), meth_wxSplitterEvent_GetSashPosition, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterEvent_GetSashPosition)},
    {SIP_MLNAME_CAST(sipName_GetWindowBeingRemoved), meth_wxSplitterEvent_GetWindowBeingRemoved, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterEvent_GetWindowBeingRemoved)},
    {SIP_MLNAME_CAST(sipName_GetX), meth_wxSplitterEvent_GetX, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterEvent_GetX)},
    {SIP_MLNAME_CAST(sipName_GetY), meth_wxSplitterEvent_GetY, METH_VARARGS, SIP_MLDOC_CAST(doc_wxSplitterEvent_GetY)},
    {SIP_MLNAME_CAST(sipName_SetSashPosition), (PyCFunction)meth_wxSplitterEvent_SetSashPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxSplitterEvent_SetSashPosition)}
};

sipVariableDef variables_wxSplitterEvent[] = {
    {PropertyVariable, sipName_Y, &methods_wxSplitterEvent[4], NULL, NULL, NULL},
    {PropertyVariable, sipName_X, &methods_wxSplitterEvent[3], NULL, NULL, NULL},
    {PropertyVariable, sipName_WindowBeingRemoved, &methods_wxSplitterEvent[2], NULL, NULL, NULL},
    {PropertyVariable, sipName_SashPosition, &methods_wxSplitterEvent[1], &methods_wxSplitterEvent[5], NULL, NULL},
};

PyDoc_STRVAR(doc_wxSplitterEvent, "SplitterEvent(eventType=wxEVT_NULL, splitter=None)\n"
"\n"
"This class represents the events generated by a splitter control.");


sipClassTypeDef sipTypeDef__core_wxSplitterEvent = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxSplitterEvent,
        {0},
        0
    },
    {
        sipNameNr_SplitterEvent,
        {0, 0, 1},
        6, methods_wxSplitterEvent,
        0, 0,
        4, variables_wxSplitterEvent,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxSplitterEvent,
    -1,
    -1,
    supers_wxSplitterEvent,
    0,
    init_type_wxSplitterEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxSplitterEvent,
    0,
    0,
    0,
    release_wxSplitterEvent,
    cast_wxSplitterEvent,
    0,
    0,
    0,
    0,
    0,
    0
};
