/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_propgrid.h"

        #include <wx/propgrid/property.h>

        #include <wx/font.h>
        #include <wx/colour.h>
        #include <wx/bitmap.h>


class sipwxPGCellData : public  ::wxPGCellData
{
public:
    sipwxPGCellData();
    ~sipwxPGCellData();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxPGCellData(const sipwxPGCellData &);
    sipwxPGCellData &operator = (const sipwxPGCellData &);
};

sipwxPGCellData::sipwxPGCellData():  ::wxPGCellData(), sipPySelf(0)
{
}

sipwxPGCellData::~sipwxPGCellData()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_wxPGCellData_SetText, "SetText(text)");

extern "C" {static PyObject *meth_wxPGCellData_SetText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGCellData_SetText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* text;
        int textState = 0;
         ::wxPGCellData *sipCpp;

        static const char *sipKwdList[] = {
            sipName_text,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxPGCellData, &sipCpp, sipType_wxString,&text, &textState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetText(*text);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PGCellData, sipName_SetText, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPGCellData_SetBitmap, "SetBitmap(bitmap)");

extern "C" {static PyObject *meth_wxPGCellData_SetBitmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGCellData_SetBitmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxBitmap* bitmap;
         ::wxPGCellData *sipCpp;

        static const char *sipKwdList[] = {
            sipName_bitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxPGCellData, &sipCpp, sipType_wxBitmap, &bitmap))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBitmap(*bitmap);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PGCellData, sipName_SetBitmap, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPGCellData_SetFgCol, "SetFgCol(col)");

extern "C" {static PyObject *meth_wxPGCellData_SetFgCol(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGCellData_SetFgCol(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPGCellData *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxPGCellData, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFgCol(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col),sipType_wxColour,colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PGCellData, sipName_SetFgCol, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPGCellData_SetBgCol, "SetBgCol(col)");

extern "C" {static PyObject *meth_wxPGCellData_SetBgCol(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGCellData_SetBgCol(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxColour* col;
        int colState = 0;
         ::wxPGCellData *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxPGCellData, &sipCpp, sipType_wxColour, &col, &colState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetBgCol(*col);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxColour *>(col),sipType_wxColour,colState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PGCellData, sipName_SetBgCol, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxPGCellData_SetFont, "SetFont(font)");

extern "C" {static PyObject *meth_wxPGCellData_SetFont(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGCellData_SetFont(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxFont* font;
         ::wxPGCellData *sipCpp;

        static const char *sipKwdList[] = {
            sipName_font,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxPGCellData, &sipCpp, sipType_wxFont, &font))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetFont(*font);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PGCellData, sipName_SetFont, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxPGCellData(void *, const sipTypeDef *);}
static void *cast_wxPGCellData(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxPGCellData *sipCpp = reinterpret_cast< ::wxPGCellData *>(sipCppV);

    if (targetType == sipType_wxRefCounter)
        return static_cast< ::wxRefCounter *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxPGCellData(void *, int);}
static void release_wxPGCellData(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxPGCellData *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxPGCellData(sipSimpleWrapper *);}
static void dealloc_wxPGCellData(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxPGCellData *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxPGCellData(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxPGCellData(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxPGCellData(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxPGCellData *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxPGCellData();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxPGCellData[] = {{24, 0, 1}};


static PyMethodDef methods_wxPGCellData[] = {
    {SIP_MLNAME_CAST(sipName_SetBgCol), (PyCFunction)meth_wxPGCellData_SetBgCol, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGCellData_SetBgCol)},
    {SIP_MLNAME_CAST(sipName_SetBitmap), (PyCFunction)meth_wxPGCellData_SetBitmap, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGCellData_SetBitmap)},
    {SIP_MLNAME_CAST(sipName_SetFgCol), (PyCFunction)meth_wxPGCellData_SetFgCol, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGCellData_SetFgCol)},
    {SIP_MLNAME_CAST(sipName_SetFont), (PyCFunction)meth_wxPGCellData_SetFont, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGCellData_SetFont)},
    {SIP_MLNAME_CAST(sipName_SetText), (PyCFunction)meth_wxPGCellData_SetText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGCellData_SetText)}
};

PyDoc_STRVAR(doc_wxPGCellData, "PGCellData()");


sipClassTypeDef sipTypeDef__propgrid_wxPGCellData = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxPGCellData,
        {0},
        0
    },
    {
        sipNameNr_PGCellData,
        {0, 0, 1},
        5, methods_wxPGCellData,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxPGCellData,
    -1,
    -1,
    supers_wxPGCellData,
    0,
    init_type_wxPGCellData,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxPGCellData,
    0,
    0,
    0,
    release_wxPGCellData,
    cast_wxPGCellData,
    0,
    0,
    0,
    0,
    0,
    0
};
