/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

    #include <wxPython/wxpy_api.h>



extern "C" {static void assign_size_t(void *, SIP_SSIZE_T, void *);}
static void assign_size_t(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::size_t *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::size_t *>(sipSrc);
}


extern "C" {static void *array_size_t(SIP_SSIZE_T);}
static void *array_size_t(SIP_SSIZE_T sipNrElem)
{
    return new  ::size_t[sipNrElem];
}


extern "C" {static void *copy_size_t(const void *, SIP_SSIZE_T);}
static void *copy_size_t(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::size_t(reinterpret_cast<const  ::size_t *>(sipSrc)[sipSrcIdx]);
}


/* Call the mapped type's destructor. */
extern "C" {static void release_size_t(void *, int);}
static void release_size_t(void *ptr, int)
{
    Py_BEGIN_ALLOW_THREADS
    delete reinterpret_cast< ::size_t *>(ptr);
    Py_END_ALLOW_THREADS
}



extern "C" {static int convertTo_size_t(PyObject *, void **, int *, PyObject *);}
static int convertTo_size_t(PyObject *sipPy,void **sipCppPtrV,int *sipIsErr,PyObject *sipTransferObj)
{
     ::size_t **sipCppPtr = reinterpret_cast< ::size_t **>(sipCppPtrV);

        // Allow conversions from any number type
        if (!sipIsErr) {
            if (PyNumber_Check(sipPy))
                return TRUE;
            return FALSE;
        }

        // Do the conversion
        *sipCppPtr = new size_t(wxPyInt_AsSize_t(sipPy));
        return sipGetState(sipTransferObj);
}


extern "C" {static PyObject *convertFrom_size_t(void *, PyObject *);}
static PyObject *convertFrom_size_t(void *sipCppV, PyObject *)
{
    ::size_t *sipCpp = reinterpret_cast< ::size_t *>(sipCppV);

        return wxPyInt_FromSize_t(*sipCpp);
}


sipMappedTypeDef sipTypeDef__core_size_t = {
    {
        -1,
        0,
        0,
        SIP_TYPE_MAPPED,
        sipNameNr_size_t,     /* size_t */
        {0},
        0
    },
    {
        -1,
        {0, 0, 1},
        0, 0,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
    },
    assign_size_t,
    array_size_t,
    copy_size_t,
    release_size_t,
    convertTo_size_t,
    convertFrom_size_t
};
