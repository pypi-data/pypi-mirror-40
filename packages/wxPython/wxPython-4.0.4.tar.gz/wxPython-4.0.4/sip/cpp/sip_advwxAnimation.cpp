/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_adv.h"

        #include <wx/animate.h>

        #include <wx/stream.h>
        #include <wx/gdicmn.h>
        #include <wx/image.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxAnimation : public  ::wxAnimation
{
public:
    sipwxAnimation();
    sipwxAnimation(const  ::wxAnimation&);
    sipwxAnimation(const  ::wxString&, ::wxAnimationType);
    virtual ~sipwxAnimation();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool LoadFile(const  ::wxString&, ::wxAnimationType);
    bool Load( ::wxInputStream&, ::wxAnimationType);
    bool IsOk() const;
     ::wxSize GetSize() const;
    uint GetFrameCount() const;
     ::wxImage GetFrame(uint) const;
    int GetDelay(uint) const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxAnimation(const sipwxAnimation &);
    sipwxAnimation &operator = (const sipwxAnimation &);

    char sipPyMethods[7];
};

sipwxAnimation::sipwxAnimation():  ::wxAnimation(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxAnimation::sipwxAnimation(const  ::wxAnimation& anim):  ::wxAnimation(anim), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxAnimation::sipwxAnimation(const  ::wxString& name, ::wxAnimationType type):  ::wxAnimation(name,type), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxAnimation::~sipwxAnimation()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxAnimation::LoadFile(const  ::wxString& name, ::wxAnimationType type)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_LoadFile);

    if (!sipMeth)
        return  ::wxAnimation::LoadFile(name,type);

    extern bool sipVH__adv_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&, ::wxAnimationType);

    return sipVH__adv_38(sipGILState, 0, sipPySelf, sipMeth, name, type);
}

bool sipwxAnimation::Load( ::wxInputStream& stream, ::wxAnimationType type)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_Load);

    if (!sipMeth)
        return  ::wxAnimation::Load(stream,type);

    extern bool sipVH__adv_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxInputStream&, ::wxAnimationType);

    return sipVH__adv_37(sipGILState, 0, sipPySelf, sipMeth, stream, type);
}

bool sipwxAnimation::IsOk() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_IsOk);

    if (!sipMeth)
        return  ::wxAnimation::IsOk();

    extern bool sipVH__adv_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_3(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxAnimation::GetSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_GetSize);

    if (!sipMeth)
        return  ::wxAnimation::GetSize();

    extern  ::wxSize sipVH__adv_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_23(sipGILState, 0, sipPySelf, sipMeth);
}

uint sipwxAnimation::GetFrameCount() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_GetFrameCount);

    if (!sipMeth)
        return  ::wxAnimation::GetFrameCount();

    extern uint sipVH__adv_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__adv_36(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxImage sipwxAnimation::GetFrame(uint i) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_GetFrame);

    if (!sipMeth)
        return  ::wxAnimation::GetFrame(i);

    extern  ::wxImage sipVH__adv_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, uint);

    return sipVH__adv_35(sipGILState, 0, sipPySelf, sipMeth, i);
}

int sipwxAnimation::GetDelay(uint i) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_GetDelay);

    if (!sipMeth)
        return  ::wxAnimation::GetDelay(i);

    extern int sipVH__adv_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, uint);

    return sipVH__adv_34(sipGILState, 0, sipPySelf, sipMeth, i);
}


PyDoc_STRVAR(doc_wxAnimation_GetDelay, "GetDelay(i) -> int\n"
"\n"
"Returns the delay for the i-th frame in milliseconds.");

extern "C" {static PyObject *meth_wxAnimation_GetDelay(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAnimation_GetDelay(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        uint i;
        const  ::wxAnimation *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bu", &sipSelf, sipType_wxAnimation, &sipCpp, &i))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAnimation::GetDelay(i) : sipCpp->GetDelay(i));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Animation, sipName_GetDelay, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAnimation_GetFrame, "GetFrame(i) -> wx.Image\n"
"\n"
"Returns the i-th frame as a wxImage.");

extern "C" {static PyObject *meth_wxAnimation_GetFrame(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAnimation_GetFrame(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        uint i;
        const  ::wxAnimation *sipCpp;

        static const char *sipKwdList[] = {
            sipName_i,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bu", &sipSelf, sipType_wxAnimation, &sipCpp, &i))
        {
             ::wxImage*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxImage((sipSelfWasArg ? sipCpp-> ::wxAnimation::GetFrame(i) : sipCpp->GetFrame(i)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxImage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Animation, sipName_GetFrame, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAnimation_GetFrameCount, "GetFrameCount() -> unsignedint\n"
"\n"
"Returns the number of frames for this animation.");

extern "C" {static PyObject *meth_wxAnimation_GetFrameCount(PyObject *, PyObject *);}
static PyObject *meth_wxAnimation_GetFrameCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAnimation, &sipCpp))
        {
            uint sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAnimation::GetFrameCount() : sipCpp->GetFrameCount());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Animation, sipName_GetFrameCount, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAnimation_GetSize, "GetSize() -> wx.Size\n"
"\n"
"Returns the size of the animation.");

extern "C" {static PyObject *meth_wxAnimation_GetSize(PyObject *, PyObject *);}
static PyObject *meth_wxAnimation_GetSize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAnimation, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize((sipSelfWasArg ? sipCpp-> ::wxAnimation::GetSize() : sipCpp->GetSize()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Animation, sipName_GetSize, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAnimation_IsOk, "IsOk() -> bool\n"
"\n"
"Returns true if animation data is present.");

extern "C" {static PyObject *meth_wxAnimation_IsOk(PyObject *, PyObject *);}
static PyObject *meth_wxAnimation_IsOk(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAnimation *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAnimation, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAnimation::IsOk() : sipCpp->IsOk());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Animation, sipName_IsOk, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAnimation_Load, "Load(stream, type=ANIMATION_TYPE_ANY) -> bool\n"
"\n"
"Loads an animation from the given stream.");

extern "C" {static PyObject *meth_wxAnimation_Load(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAnimation_Load(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxInputStream* stream;
        int streamState = 0;
         ::wxAnimationType type = wxANIMATION_TYPE_ANY;
         ::wxAnimation *sipCpp;

        static const char *sipKwdList[] = {
            sipName_stream,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_wxAnimation, &sipCpp, sipType_wxInputStream, &stream, &streamState, sipType_wxAnimationType, &type))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAnimation::Load(*stream,type) : sipCpp->Load(*stream,type));
            Py_END_ALLOW_THREADS
            sipReleaseType(stream,sipType_wxInputStream,streamState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Animation, sipName_Load, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAnimation_LoadFile, "LoadFile(name, type=ANIMATION_TYPE_ANY) -> bool\n"
"\n"
"Loads an animation from a file.");

extern "C" {static PyObject *meth_wxAnimation_LoadFile(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAnimation_LoadFile(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* name;
        int nameState = 0;
         ::wxAnimationType type = wxANIMATION_TYPE_ANY;
         ::wxAnimation *sipCpp;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_type,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|E", &sipSelf, sipType_wxAnimation, &sipCpp, sipType_wxString,&name, &nameState, sipType_wxAnimationType, &type))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAnimation::LoadFile(*name,type) : sipCpp->LoadFile(*name,type));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Animation, sipName_LoadFile, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxAnimation(void *, const sipTypeDef *);}
static void *cast_wxAnimation(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxAnimation *sipCpp = reinterpret_cast< ::wxAnimation *>(sipCppV);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxAnimation(void *, int);}
static void release_wxAnimation(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxAnimation *>(sipCppV);
    else
        delete reinterpret_cast< ::wxAnimation *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_wxAnimation(void *, SIP_SSIZE_T, void *);}
static void assign_wxAnimation(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxAnimation *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxAnimation *>(sipSrc);
}


extern "C" {static void *array_wxAnimation(SIP_SSIZE_T);}
static void *array_wxAnimation(SIP_SSIZE_T sipNrElem)
{
    return new  ::wxAnimation[sipNrElem];
}


extern "C" {static void *copy_wxAnimation(const void *, SIP_SSIZE_T);}
static void *copy_wxAnimation(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxAnimation(reinterpret_cast<const  ::wxAnimation *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxAnimation(sipSimpleWrapper *);}
static void dealloc_wxAnimation(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxAnimation *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxAnimation(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxAnimation(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxAnimation(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxAnimation *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxAnimation();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxAnimation* anim;

        static const char *sipKwdList[] = {
            sipName_anim,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9", sipType_wxAnimation, &anim))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxAnimation(*anim);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxString* name;
        int nameState = 0;
         ::wxAnimationType type = wxANIMATION_TYPE_ANY;

        static const char *sipKwdList[] = {
            sipName_name,
            sipName_type,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|E", sipType_wxString,&name, &nameState, sipType_wxAnimationType, &type))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxAnimation(*name,type);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxAnimation[] = {{39, 0, 1}};


static PyMethodDef methods_wxAnimation[] = {
    {SIP_MLNAME_CAST(sipName_GetDelay), (PyCFunction)meth_wxAnimation_GetDelay, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAnimation_GetDelay)},
    {SIP_MLNAME_CAST(sipName_GetFrame), (PyCFunction)meth_wxAnimation_GetFrame, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAnimation_GetFrame)},
    {SIP_MLNAME_CAST(sipName_GetFrameCount), meth_wxAnimation_GetFrameCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAnimation_GetFrameCount)},
    {SIP_MLNAME_CAST(sipName_GetSize), meth_wxAnimation_GetSize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAnimation_GetSize)},
    {SIP_MLNAME_CAST(sipName_IsOk), meth_wxAnimation_IsOk, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAnimation_IsOk)},
    {SIP_MLNAME_CAST(sipName_Load), (PyCFunction)meth_wxAnimation_Load, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAnimation_Load)},
    {SIP_MLNAME_CAST(sipName_LoadFile), (PyCFunction)meth_wxAnimation_LoadFile, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAnimation_LoadFile)}
};

sipVariableDef variables_wxAnimation[] = {
    {PropertyVariable, sipName_Size, &methods_wxAnimation[3], NULL, NULL, NULL},
    {PropertyVariable, sipName_FrameCount, &methods_wxAnimation[2], NULL, NULL, NULL},
};

PyDoc_STRVAR(doc_wxAnimation, "Animation()\n"
"Animation(anim)\n"
"Animation(name, type=ANIMATION_TYPE_ANY)\n"
"\n"
"This class encapsulates the concept of a platform-dependent animation.");


sipClassTypeDef sipTypeDef__adv_wxAnimation = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxAnimation,
        {0},
        0
    },
    {
        sipNameNr_Animation,
        {0, 0, 1},
        7, methods_wxAnimation,
        0, 0,
        2, variables_wxAnimation,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxAnimation,
    -1,
    -1,
    supers_wxAnimation,
    0,
    init_type_wxAnimation,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxAnimation,
    assign_wxAnimation,
    array_wxAnimation,
    copy_wxAnimation,
    release_wxAnimation,
    cast_wxAnimation,
    0,
    0,
    0,
    0,
    0,
    0
};
