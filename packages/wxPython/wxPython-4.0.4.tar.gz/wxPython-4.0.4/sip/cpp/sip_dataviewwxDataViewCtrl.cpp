/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_dataview.h"

        #include <wx/dataview.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/validate.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>
        #include <wx/dataview.h>
        #include <wx/gdicmn.h>
        #include <wx/dataobj.h>
        #include <wx/bitmap.h>
        #include <wx/dc.h>
        #include <wx/event.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/region.h>
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>
    wxDataViewItemArray* _wxDataViewCtrl_GetSelections(const wxDataViewCtrl* self)
    {
        wxDataViewItemArray* selections = new wxDataViewItemArray;
        self->GetSelections(*selections);
        return selections;
    }
    PyObject* _wxDataViewCtrl_HitTest(const wxDataViewCtrl* self, const wxPoint* point)
    {
        wxDataViewItem*   item = new wxDataViewItem();;
        wxDataViewColumn* col = NULL;
        
        self->HitTest(*point, *item, col);
        
        wxPyThreadBlocker blocker;
        PyObject* value = PyTuple_New(2);
        PyObject* item_obj =
            wxPyConstructObject((void*)item, wxT("wxDataViewItem"), 1);   // owned
        PyObject* col_obj;
        if (col) {
            col_obj = wxPyConstructObject((void*)col, wxT("wxDataViewColumn"), 0);  // not owned
        } else {
            col_obj = Py_None;
            Py_INCREF(Py_None);
        }
        PyTuple_SET_ITEM(value, 0, item_obj);
        PyTuple_SET_ITEM(value, 1, col_obj);
        // PyTuple steals a reference, so we don't need to decref the items here
        return value;
    }


class sipwxDataViewCtrl : public  ::wxDataViewCtrl
{
public:
    sipwxDataViewCtrl();
    sipwxDataViewCtrl( ::wxWindow*, ::wxWindowID,const  ::wxPoint&,const  ::wxSize&,long,const  ::wxValidator&,const  ::wxString&);
    virtual ~sipwxDataViewCtrl();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxSize DoGetBestClientSize() const;
     ::wxSize DoGetBestSize() const;
    void DoThaw();
    void DoFreeze();
     ::wxBorder GetDefaultBorderForControl() const;
     ::wxBorder GetDefaultBorder() const;
    void DoSetWindowVariant( ::wxWindowVariant);
    void DoMoveWindow(int,int,int,int);
     ::wxSize DoGetBorderSize() const;
    void DoSetSizeHints(int,int,int,int,int,int);
    void DoSetClientSize(int,int);
    void DoSetSize(int,int,int,int,int);
    void DoGetClientSize(int*,int*) const;
    void DoGetSize(int*,int*) const;
    void DoGetPosition(int*,int*) const;
    void DoEnable(bool);
     ::wxWindow* GetMainWindowOfCompositeControl();
    void OnInternalIdle();
    void InitDialog();
    void InheritAttributes();
    bool Destroy();
    bool Validate();
    bool TransferDataToWindow();
    bool TransferDataFromWindow();
    void SetValidator(const  ::wxValidator&);
     ::wxValidator* GetValidator();
    bool ShouldInheritColours() const;
    bool HasTransparentBackground();
     ::wxPoint GetClientAreaOrigin() const;
    bool InformFirstDirection(int,int,int);
    void SetCanFocus(bool);
    bool AcceptsFocusRecursively() const;
    bool AcceptsFocusFromKeyboard() const;
    bool AcceptsFocus() const;
    bool TryAfter( ::wxEvent&);
    bool TryBefore( ::wxEvent&);
    bool ProcessEvent( ::wxEvent&);
    void AddChild( ::wxWindowBase*);
    void RemoveChild( ::wxWindowBase*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxDataViewCtrl(const sipwxDataViewCtrl &);
    sipwxDataViewCtrl &operator = (const sipwxDataViewCtrl &);

    char sipPyMethods[39];
};

sipwxDataViewCtrl::sipwxDataViewCtrl():  ::wxDataViewCtrl(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxDataViewCtrl::sipwxDataViewCtrl( ::wxWindow*parent, ::wxWindowID id,const  ::wxPoint& pos,const  ::wxSize& size,long style,const  ::wxValidator& validator,const  ::wxString& name):  ::wxDataViewCtrl(parent,id,pos,size,style,validator,name), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxDataViewCtrl::~sipwxDataViewCtrl()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxSize sipwxDataViewCtrl::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxDataViewCtrl::DoGetBestClientSize();

    extern  ::wxSize sipVH__dataview_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_31(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxDataViewCtrl::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxDataViewCtrl::DoGetBestSize();

    extern  ::wxSize sipVH__dataview_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_31(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewCtrl::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxDataViewCtrl::DoThaw();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewCtrl::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxDataViewCtrl::DoFreeze();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxDataViewCtrl::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxDataViewCtrl::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__dataview_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_56(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxDataViewCtrl::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxDataViewCtrl::GetDefaultBorder();

    extern  ::wxBorder sipVH__dataview_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_56(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewCtrl::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxDataViewCtrl::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__dataview_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__dataview_55(sipGILState, 0, sipPySelf, sipMeth, variant);
}

void sipwxDataViewCtrl::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxDataViewCtrl::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__dataview_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__dataview_54(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

 ::wxSize sipwxDataViewCtrl::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxDataViewCtrl::DoGetBorderSize();

    extern  ::wxSize sipVH__dataview_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_31(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewCtrl::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxDataViewCtrl::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__dataview_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__dataview_53(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

void sipwxDataViewCtrl::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxDataViewCtrl::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__dataview_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__dataview_52(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxDataViewCtrl::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxDataViewCtrl::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__dataview_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__dataview_51(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxDataViewCtrl::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxDataViewCtrl::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__dataview_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__dataview_50(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxDataViewCtrl::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxDataViewCtrl::DoGetSize(width,height);
        return;
    }

    extern void sipVH__dataview_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__dataview_50(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxDataViewCtrl::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxDataViewCtrl::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__dataview_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__dataview_50(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxDataViewCtrl::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxDataViewCtrl::DoEnable(enable);
        return;
    }

    extern void sipVH__dataview_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__dataview_36(sipGILState, 0, sipPySelf, sipMeth, enable);
}

 ::wxWindow* sipwxDataViewCtrl::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxDataViewCtrl::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__dataview_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_49(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewCtrl::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxDataViewCtrl::OnInternalIdle();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewCtrl::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxDataViewCtrl::InitDialog();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewCtrl::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxDataViewCtrl::InheritAttributes();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewCtrl::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_Destroy);

    if (!sipMeth)
        return  ::wxDataViewCtrl::Destroy();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewCtrl::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_Validate);

    if (!sipMeth)
        return  ::wxDataViewCtrl::Validate();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewCtrl::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxDataViewCtrl::TransferDataToWindow();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewCtrl::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxDataViewCtrl::TransferDataFromWindow();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxDataViewCtrl::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxDataViewCtrl::SetValidator(validator);
        return;
    }

    extern void sipVH__dataview_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__dataview_48(sipGILState, 0, sipPySelf, sipMeth, validator);
}

 ::wxValidator* sipwxDataViewCtrl::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxDataViewCtrl::GetValidator();

    extern  ::wxValidator* sipVH__dataview_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_47(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewCtrl::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxDataViewCtrl::ShouldInheritColours();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewCtrl::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxDataViewCtrl::HasTransparentBackground();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPoint sipwxDataViewCtrl::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[28]),sipPySelf,NULL,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxDataViewCtrl::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__dataview_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_46(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewCtrl::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxDataViewCtrl::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__dataview_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__dataview_45(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

void sipwxDataViewCtrl::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxDataViewCtrl::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__dataview_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__dataview_36(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

bool sipwxDataViewCtrl::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[31]),sipPySelf,NULL,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxDataViewCtrl::AcceptsFocusRecursively();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewCtrl::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxDataViewCtrl::AcceptsFocusFromKeyboard();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewCtrl::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxDataViewCtrl::AcceptsFocus();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxDataViewCtrl::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[34],sipPySelf,NULL,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxDataViewCtrl::TryAfter(event);

    extern bool sipVH__dataview_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__dataview_44(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxDataViewCtrl::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxDataViewCtrl::TryBefore(event);

    extern bool sipVH__dataview_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__dataview_44(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxDataViewCtrl::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxDataViewCtrl::ProcessEvent(event);

    extern bool sipVH__dataview_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__dataview_44(sipGILState, 0, sipPySelf, sipMeth, event);
}

void sipwxDataViewCtrl::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxDataViewCtrl::AddChild(child);
        return;
    }

    extern void sipVH__dataview_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__dataview_43(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxDataViewCtrl::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxDataViewCtrl::RemoveChild(child);
        return;
    }

    extern void sipVH__dataview_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__dataview_43(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxDataViewCtrl::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sipwxDataViewCtrl::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxDataViewCtrl::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxDataViewCtrl::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxDataViewCtrl::DoEnable(enable) : DoEnable(enable));
}

void sipwxDataViewCtrl::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxDataViewCtrl::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxDataViewCtrl::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxDataViewCtrl::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxDataViewCtrl::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxDataViewCtrl::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxDataViewCtrl::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxDataViewCtrl::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxDataViewCtrl::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxDataViewCtrl::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxDataViewCtrl::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxDataViewCtrl::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxDataViewCtrl::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxDataViewCtrl::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxDataViewCtrl::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxDataViewCtrl::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxDataViewCtrl::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxDataViewCtrl::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxDataViewCtrl::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxDataViewCtrl::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxDataViewCtrl::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxDataViewCtrl::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxDataViewCtrl::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxDataViewCtrl::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxDataViewCtrl::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxDataViewCtrl::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxDataViewCtrl::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxDataViewCtrl::DoFreeze() : DoFreeze());
}

void sipwxDataViewCtrl::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxDataViewCtrl::DoThaw() : DoThaw());
}

bool sipwxDataViewCtrl::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxDataViewCtrl::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxDataViewCtrl::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxDataViewCtrl::TryBefore(event) : TryBefore(event));
}

bool sipwxDataViewCtrl::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxDataViewCtrl::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxDataViewCtrl_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxDataViewCtrl_SendDestroyEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipwxDataViewCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_SendDestroyEvent, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_AppendBitmapColumn, "AppendBitmapColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"AppendBitmapColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"\n"
"Appends a column for rendering a bitmap.\n"
"");

extern "C" {static PyObject *meth_wxDataViewCtrl_AppendBitmapColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_AppendBitmapColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* label;
        int labelState = 0;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = -1;
         ::wxAlignment align = wxALIGN_CENTER;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxString,&label, &labelState, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendBitmapColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    {
        const  ::wxBitmap* label;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = -1;
         ::wxAlignment align = wxALIGN_CENTER;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxBitmap, &label, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendBitmapColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_AppendBitmapColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_PrependBitmapColumn, "PrependBitmapColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"PrependBitmapColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"\n"
"Prepends a column for rendering a bitmap.\n"
"");

extern "C" {static PyObject *meth_wxDataViewCtrl_PrependBitmapColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_PrependBitmapColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* label;
        int labelState = 0;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = -1;
         ::wxAlignment align = wxALIGN_CENTER;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxString,&label, &labelState, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->PrependBitmapColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    {
        const  ::wxBitmap* label;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = -1;
         ::wxAlignment align = wxALIGN_CENTER;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxBitmap, &label, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->PrependBitmapColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_PrependBitmapColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_AppendDateColumn, "AppendDateColumn(label, model_column, mode=DATAVIEW_CELL_ACTIVATABLE, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"AppendDateColumn(label, model_column, mode=DATAVIEW_CELL_ACTIVATABLE, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"\n"
"Appends a column for rendering a date.\n"
"");

extern "C" {static PyObject *meth_wxDataViewCtrl_AppendDateColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_AppendDateColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* label;
        int labelState = 0;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_ACTIVATABLE;
        int width = -1;
         ::wxAlignment align = wxALIGN_NOT;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxString,&label, &labelState, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendDateColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    {
        const  ::wxBitmap* label;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_ACTIVATABLE;
        int width = -1;
         ::wxAlignment align = wxALIGN_NOT;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxBitmap, &label, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendDateColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_AppendDateColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_PrependDateColumn, "PrependDateColumn(label, model_column, mode=DATAVIEW_CELL_ACTIVATABLE, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"PrependDateColumn(label, model_column, mode=DATAVIEW_CELL_ACTIVATABLE, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"\n"
"Prepends a column for rendering a date.\n"
"");

extern "C" {static PyObject *meth_wxDataViewCtrl_PrependDateColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_PrependDateColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* label;
        int labelState = 0;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_ACTIVATABLE;
        int width = -1;
         ::wxAlignment align = wxALIGN_NOT;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxString,&label, &labelState, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->PrependDateColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    {
        const  ::wxBitmap* label;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_ACTIVATABLE;
        int width = -1;
         ::wxAlignment align = wxALIGN_NOT;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxBitmap, &label, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->PrependDateColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_PrependDateColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_AppendIconTextColumn, "AppendIconTextColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"AppendIconTextColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"\n"
"Appends a column for rendering text with an icon.\n"
"");

extern "C" {static PyObject *meth_wxDataViewCtrl_AppendIconTextColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_AppendIconTextColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* label;
        int labelState = 0;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = -1;
         ::wxAlignment align = wxALIGN_NOT;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxString,&label, &labelState, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendIconTextColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    {
        const  ::wxBitmap* label;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = -1;
         ::wxAlignment align = wxALIGN_NOT;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxBitmap, &label, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendIconTextColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_AppendIconTextColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_PrependIconTextColumn, "PrependIconTextColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"PrependIconTextColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"\n"
"Prepends a column for rendering text with an icon.\n"
"");

extern "C" {static PyObject *meth_wxDataViewCtrl_PrependIconTextColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_PrependIconTextColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* label;
        int labelState = 0;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = -1;
         ::wxAlignment align = wxALIGN_NOT;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxString,&label, &labelState, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->PrependIconTextColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    {
        const  ::wxBitmap* label;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = -1;
         ::wxAlignment align = wxALIGN_NOT;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxBitmap, &label, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->PrependIconTextColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_PrependIconTextColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_AppendProgressColumn, "AppendProgressColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=80, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"AppendProgressColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=80, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"\n"
"Appends a column for rendering a progress indicator.\n"
"");

extern "C" {static PyObject *meth_wxDataViewCtrl_AppendProgressColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_AppendProgressColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* label;
        int labelState = 0;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = 80;
         ::wxAlignment align = wxALIGN_CENTER;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxString,&label, &labelState, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendProgressColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    {
        const  ::wxBitmap* label;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = 80;
         ::wxAlignment align = wxALIGN_CENTER;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxBitmap, &label, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendProgressColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_AppendProgressColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_PrependProgressColumn, "PrependProgressColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=80, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"PrependProgressColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=80, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"\n"
"Prepends a column for rendering a progress indicator.\n"
"");

extern "C" {static PyObject *meth_wxDataViewCtrl_PrependProgressColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_PrependProgressColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* label;
        int labelState = 0;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = 80;
         ::wxAlignment align = wxALIGN_CENTER;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxString,&label, &labelState, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->PrependProgressColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    {
        const  ::wxBitmap* label;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = 80;
         ::wxAlignment align = wxALIGN_CENTER;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxBitmap, &label, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->PrependProgressColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_PrependProgressColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_AppendTextColumn, "AppendTextColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"AppendTextColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"\n"
"Appends a column for rendering text.\n"
"");

extern "C" {static PyObject *meth_wxDataViewCtrl_AppendTextColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_AppendTextColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* label;
        int labelState = 0;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = -1;
         ::wxAlignment align = wxALIGN_NOT;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxString,&label, &labelState, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendTextColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    {
        const  ::wxBitmap* label;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = -1;
         ::wxAlignment align = wxALIGN_NOT;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxBitmap, &label, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendTextColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_AppendTextColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_PrependTextColumn, "PrependTextColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"PrependTextColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=-1, align=wx.ALIGN_NOT, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"\n"
"Prepends a column for rendering text.\n"
"");

extern "C" {static PyObject *meth_wxDataViewCtrl_PrependTextColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_PrependTextColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* label;
        int labelState = 0;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = -1;
         ::wxAlignment align = wxALIGN_NOT;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxString,&label, &labelState, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->PrependTextColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    {
        const  ::wxBitmap* label;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = -1;
         ::wxAlignment align = wxALIGN_NOT;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxBitmap, &label, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->PrependTextColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_PrependTextColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_AppendToggleColumn, "AppendToggleColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=30, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"AppendToggleColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=30, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"\n"
"Appends a column for rendering a toggle.\n"
"");

extern "C" {static PyObject *meth_wxDataViewCtrl_AppendToggleColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_AppendToggleColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* label;
        int labelState = 0;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = 30;
         ::wxAlignment align = wxALIGN_CENTER;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxString,&label, &labelState, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendToggleColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    {
        const  ::wxBitmap* label;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = 30;
         ::wxAlignment align = wxALIGN_CENTER;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxBitmap, &label, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendToggleColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_AppendToggleColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_PrependToggleColumn, "PrependToggleColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=30, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"PrependToggleColumn(label, model_column, mode=DATAVIEW_CELL_INERT, width=30, align=wx.ALIGN_CENTER, flags=DATAVIEW_COL_RESIZABLE) -> DataViewColumn\n"
"\n"
"Prepends a column for rendering a toggle.\n"
"");

extern "C" {static PyObject *meth_wxDataViewCtrl_PrependToggleColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_PrependToggleColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* label;
        int labelState = 0;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = 30;
         ::wxAlignment align = wxALIGN_CENTER;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxString,&label, &labelState, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->PrependToggleColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    {
        const  ::wxBitmap* label;
        uint model_column;
         ::wxDataViewCellMode mode = wxDATAVIEW_CELL_INERT;
        int width = 30;
         ::wxAlignment align = wxALIGN_CENTER;
        int flags = wxDATAVIEW_COL_RESIZABLE;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_label,
            sipName_model_column,
            sipName_mode,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9u|EiEi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxBitmap, &label, &model_column, sipType_wxDataViewCellMode, &mode, &width, sipType_wxAlignment, &align, &flags))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->PrependToggleColumn(*label,model_column,mode,width,align,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_PrependToggleColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_Create, "Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, validator=wx.DefaultValidator, name=DataViewCtrlNameStr) -> bool\n"
"\n"
"Create the control.");

extern "C" {static PyObject *meth_wxDataViewCtrl_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = 0;
        const  ::wxValidator& validatordef = wxDefaultValidator;
        const  ::wxValidator* validator = &validatordef;
        const  ::wxString& namedef = wxDataViewCtrlNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;
        sipWrapper *sipOwner = 0;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_validator,
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJH|iJ1J1lJ9J1", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxWindow, &parent, &sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxValidator, &validator, sipType_wxString,&name, &nameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,id,*pos,*size,style,*validator,*name);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_Create, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_AppendColumn, "AppendColumn(col) -> bool\n"
"\n"
"Appends a wxDataViewColumn to the control.");

extern "C" {static PyObject *meth_wxDataViewCtrl_AppendColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_AppendColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxDataViewColumn* col;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxDataViewColumn, &col))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendColumn(col);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_AppendColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_PrependColumn, "PrependColumn(col) -> bool\n"
"\n"
"Prepends a wxDataViewColumn to the control.");

extern "C" {static PyObject *meth_wxDataViewCtrl_PrependColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_PrependColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxDataViewColumn* col;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxDataViewColumn, &col))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->PrependColumn(col);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_PrependColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_InsertColumn, "InsertColumn(pos, col) -> bool\n"
"\n"
"Inserts a wxDataViewColumn to the control.");

extern "C" {static PyObject *meth_wxDataViewCtrl_InsertColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_InsertColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint pos;
         ::wxDataViewColumn* col;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BuJ:", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, &pos, sipType_wxDataViewColumn, &col))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->InsertColumn(pos,col);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_InsertColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl__AssociateModel, "_AssociateModel(model) -> bool\n"
"\n"
"Associates a wxDataViewModel with the control.");

extern "C" {static PyObject *meth_wxDataViewCtrl__AssociateModel(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl__AssociateModel(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxDataViewModel* model;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_model,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxDataViewModel, &model))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AssociateModel(model);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName__AssociateModel, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_ClearColumns, "ClearColumns() -> bool\n"
"\n"
"Removes all columns.");

extern "C" {static PyObject *meth_wxDataViewCtrl_ClearColumns(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_ClearColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ClearColumns();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_ClearColumns, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_Collapse, "Collapse(item)\n"
"\n"
"Collapses the item.");

extern "C" {static PyObject *meth_wxDataViewCtrl_Collapse(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_Collapse(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewItem* item;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxDataViewItem, &item))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Collapse(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_Collapse, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_DeleteColumn, "DeleteColumn(column) -> bool\n"
"\n"
"Deletes given column.");

extern "C" {static PyObject *meth_wxDataViewCtrl_DeleteColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_DeleteColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxDataViewColumn* column;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxDataViewColumn, &column))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DeleteColumn(column);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_DeleteColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_EditItem, "EditItem(item, column)\n"
"\n"
"Programmatically starts editing given cell of item.");

extern "C" {static PyObject *meth_wxDataViewCtrl_EditItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_EditItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewItem* item;
        const  ::wxDataViewColumn* column;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J8", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxDataViewItem, &item, sipType_wxDataViewColumn, &column))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EditItem(*item,column);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_EditItem, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_EnableDragSource, "EnableDragSource(format) -> bool\n"
"\n"
"Enable drag operations using the given format.");

extern "C" {static PyObject *meth_wxDataViewCtrl_EnableDragSource(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_EnableDragSource(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataFormat* format;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxDataFormat, &format))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EnableDragSource(*format);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_EnableDragSource, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_EnableDropTarget, "EnableDropTarget(format) -> bool\n"
"\n"
"Enable drop operations using the given format.");

extern "C" {static PyObject *meth_wxDataViewCtrl_EnableDropTarget(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_EnableDropTarget(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataFormat* format;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_format,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxDataFormat, &format))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EnableDropTarget(*format);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_EnableDropTarget, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_EnsureVisible, "EnsureVisible(item, column=None)\n"
"\n"
"Call this to ensure that the given item is visible.");

extern "C" {static PyObject *meth_wxDataViewCtrl_EnsureVisible(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_EnsureVisible(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewItem* item;
        const  ::wxDataViewColumn* column = 0;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J8", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxDataViewItem, &item, sipType_wxDataViewColumn, &column))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->EnsureVisible(*item,column);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_EnsureVisible, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_Expand, "Expand(item)\n"
"\n"
"Expands the item.");

extern "C" {static PyObject *meth_wxDataViewCtrl_Expand(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_Expand(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewItem* item;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxDataViewItem, &item))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Expand(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_Expand, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_ExpandAncestors, "ExpandAncestors(item)\n"
"\n"
"Expands all ancestors of the item.");

extern "C" {static PyObject *meth_wxDataViewCtrl_ExpandAncestors(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_ExpandAncestors(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewItem* item;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxDataViewItem, &item))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ExpandAncestors(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_ExpandAncestors, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_GetColumn, "GetColumn(pos) -> DataViewColumn\n"
"\n"
"Returns pointer to the column.");

extern "C" {static PyObject *meth_wxDataViewCtrl_GetColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_GetColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint pos;
        const  ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bu", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, &pos))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetColumn(pos);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_GetColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_GetColumnCount, "GetColumnCount() -> unsignedint\n"
"\n"
"Returns the number of columns.");

extern "C" {static PyObject *meth_wxDataViewCtrl_GetColumnCount(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_GetColumnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            uint sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetColumnCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_GetColumnCount, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_GetColumnPosition, "GetColumnPosition(column) -> int\n"
"\n"
"Returns the position of the column or -1 if not found in the control.");

extern "C" {static PyObject *meth_wxDataViewCtrl_GetColumnPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_GetColumnPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewColumn* column;
        const  ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_column,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxDataViewColumn, &column))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetColumnPosition(column);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_GetColumnPosition, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_GetExpanderColumn, "GetExpanderColumn() -> DataViewColumn\n"
"\n"
"Returns column containing the expanders.");

extern "C" {static PyObject *meth_wxDataViewCtrl_GetExpanderColumn(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_GetExpanderColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetExpanderColumn();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_GetExpanderColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_GetCurrentItem, "GetCurrentItem() -> DataViewItem\n"
"\n"
"Returns the currently focused item.");

extern "C" {static PyObject *meth_wxDataViewCtrl_GetCurrentItem(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_GetCurrentItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
             ::wxDataViewItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxDataViewItem(sipCpp->GetCurrentItem());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxDataViewItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_GetCurrentItem, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_GetCurrentColumn, "GetCurrentColumn() -> DataViewColumn\n"
"\n"
"Returns the column that currently has focus.");

extern "C" {static PyObject *meth_wxDataViewCtrl_GetCurrentColumn(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_GetCurrentColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetCurrentColumn();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_GetCurrentColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_GetIndent, "GetIndent() -> int\n"
"\n"
"Returns indentation.");

extern "C" {static PyObject *meth_wxDataViewCtrl_GetIndent(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_GetIndent(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetIndent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_GetIndent, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_GetItemRect, "GetItemRect(item, col=None) -> wx.Rect\n"
"\n"
"Returns item rectangle.");

extern "C" {static PyObject *meth_wxDataViewCtrl_GetItemRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_GetItemRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewItem* item;
        const  ::wxDataViewColumn* col = 0;
        const  ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J8", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxDataViewItem, &item, sipType_wxDataViewColumn, &col))
        {
             ::wxRect*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRect(sipCpp->GetItemRect(*item,col));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRect,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_GetItemRect, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_GetModel, "GetModel() -> DataViewModel\n"
"\n"
"Returns pointer to the data model associated with the control (if\n"
"any).");

extern "C" {static PyObject *meth_wxDataViewCtrl_GetModel(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_GetModel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
             ::wxDataViewModel*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetModel();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewModel,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_GetModel, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_GetSelectedItemsCount, "GetSelectedItemsCount() -> int\n"
"\n"
"Returns the number of currently selected items.");

extern "C" {static PyObject *meth_wxDataViewCtrl_GetSelectedItemsCount(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_GetSelectedItemsCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSelectedItemsCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_GetSelectedItemsCount, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_GetSelection, "GetSelection() -> DataViewItem\n"
"\n"
"Returns first selected item or an invalid item if none is selected.");

extern "C" {static PyObject *meth_wxDataViewCtrl_GetSelection(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_GetSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
             ::wxDataViewItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxDataViewItem(sipCpp->GetSelection());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxDataViewItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_GetSelection, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_GetSelections, "GetSelections() -> DataViewItemArray\n"
"\n"
"Returns a list of the currently selected items.");

extern "C" {static PyObject *meth_wxDataViewCtrl_GetSelections(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_GetSelections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
             ::wxDataViewItemArray*sipRes = 0;
            int sipIsErr = 0;

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataViewCtrl_GetSelections(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxDataViewItemArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_GetSelections, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_GetSortingColumn, "GetSortingColumn() -> DataViewColumn\n"
"\n"
"Returns the wxDataViewColumn currently responsible for sorting or NULL\n"
"if none has been selected.");

extern "C" {static PyObject *meth_wxDataViewCtrl_GetSortingColumn(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_GetSortingColumn(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
             ::wxDataViewColumn*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSortingColumn();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewColumn,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_GetSortingColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_HasSelection, "HasSelection() -> bool\n"
"\n"
"Returns true if any items are currently selected.");

extern "C" {static PyObject *meth_wxDataViewCtrl_HasSelection(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_HasSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->HasSelection();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_HasSelection, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_HitTest, "HitTest(point) -> PyObject\n"
"\n"
"HitTest(point) -> (item, col)\n"
"\n"
"Returns the item and column located at point, as a 2 element tuple.");

extern "C" {static PyObject *meth_wxDataViewCtrl_HitTest(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_HitTest(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxPoint* point;
        int pointState = 0;
        const  ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_point,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxPoint, &point, &pointState))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxDataViewCtrl_HitTest(sipCpp, point);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
            sipReleaseType(const_cast< ::wxPoint *>(point),sipType_wxPoint,pointState);

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_HitTest, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_IsExpanded, "IsExpanded(item) -> bool\n"
"\n"
"Return true if the item is expanded.");

extern "C" {static PyObject *meth_wxDataViewCtrl_IsExpanded(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_IsExpanded(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewItem* item;
        const  ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxDataViewItem, &item))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsExpanded(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_IsExpanded, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_IsSelected, "IsSelected(item) -> bool\n"
"\n"
"Return true if the item is selected.");

extern "C" {static PyObject *meth_wxDataViewCtrl_IsSelected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_IsSelected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewItem* item;
        const  ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxDataViewItem, &item))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsSelected(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_IsSelected, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_Select, "Select(item)\n"
"\n"
"Select the given item.");

extern "C" {static PyObject *meth_wxDataViewCtrl_Select(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_Select(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewItem* item;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxDataViewItem, &item))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Select(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_Select, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_SelectAll, "SelectAll()\n"
"\n"
"Select all items.");

extern "C" {static PyObject *meth_wxDataViewCtrl_SelectAll(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_SelectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SelectAll();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_SelectAll, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_SetExpanderColumn, "SetExpanderColumn(col)\n"
"\n"
"Set which column shall contain the tree-like expanders.");

extern "C" {static PyObject *meth_wxDataViewCtrl_SetExpanderColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_SetExpanderColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxDataViewColumn* col;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxDataViewColumn, &col))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetExpanderColumn(col);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_SetExpanderColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_SetCurrentItem, "SetCurrentItem(item)\n"
"\n"
"Changes the currently focused item.");

extern "C" {static PyObject *meth_wxDataViewCtrl_SetCurrentItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_SetCurrentItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewItem* item;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxDataViewItem, &item))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetCurrentItem(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_SetCurrentItem, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_SetIndent, "SetIndent(indent)\n"
"\n"
"Sets the indentation.");

extern "C" {static PyObject *meth_wxDataViewCtrl_SetIndent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_SetIndent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int indent;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_indent,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, &indent))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetIndent(indent);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_SetIndent, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_SetSelections, "SetSelections(sel)\n"
"\n"
"Sets the selection to the array of wxDataViewItems.");

extern "C" {static PyObject *meth_wxDataViewCtrl_SetSelections(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_SetSelections(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewItemArray* sel;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_sel,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxDataViewItemArray, &sel))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSelections(*sel);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_SetSelections, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_Unselect, "Unselect(item)\n"
"\n"
"Unselect the given item.");

extern "C" {static PyObject *meth_wxDataViewCtrl_Unselect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_Unselect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxDataViewItem* item;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxDataViewItem, &item))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Unselect(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_Unselect, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_UnselectAll, "UnselectAll()\n"
"\n"
"Unselect all item.");

extern "C" {static PyObject *meth_wxDataViewCtrl_UnselectAll(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_UnselectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->UnselectAll();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_UnselectAll, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_SetRowHeight, "SetRowHeight(rowHeight) -> bool\n"
"\n"
"Sets the row height.");

extern "C" {static PyObject *meth_wxDataViewCtrl_SetRowHeight(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_SetRowHeight(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int rowHeight;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rowHeight,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, &rowHeight))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetRowHeight(rowHeight);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_SetRowHeight, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxDataViewCtrl_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxDataViewCtrl::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_GetClientAreaOrigin, doc_wxDataViewCtrl_GetClientAreaOrigin);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewCtrl_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewCtrl::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_Validate, doc_wxDataViewCtrl_Validate);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewCtrl_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewCtrl::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_TransferDataToWindow, doc_wxDataViewCtrl_TransferDataToWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewCtrl_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewCtrl::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_TransferDataFromWindow, doc_wxDataViewCtrl_TransferDataFromWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxDataViewCtrl_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewCtrl::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_InitDialog, doc_wxDataViewCtrl_InitDialog);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewCtrl_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewCtrl::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_AcceptsFocus, doc_wxDataViewCtrl_AcceptsFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewCtrl_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewCtrl::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_AcceptsFocusRecursively, doc_wxDataViewCtrl_AcceptsFocusRecursively);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewCtrl_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewCtrl::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_AcceptsFocusFromKeyboard, doc_wxDataViewCtrl_AcceptsFocusFromKeyboard);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxDataViewCtrl_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewCtrl::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_AddChild, doc_wxDataViewCtrl_AddChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxDataViewCtrl_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewCtrl::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_RemoveChild, doc_wxDataViewCtrl_RemoveChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxDataViewCtrl_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewCtrl::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_InheritAttributes, doc_wxDataViewCtrl_InheritAttributes);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewCtrl_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewCtrl::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_ShouldInheritColours, doc_wxDataViewCtrl_ShouldInheritColours);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxDataViewCtrl_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewCtrl::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_OnInternalIdle, doc_wxDataViewCtrl_OnInternalIdle);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxDataViewCtrl_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewCtrl::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_GetMainWindowOfCompositeControl, doc_wxDataViewCtrl_GetMainWindowOfCompositeControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxDataViewCtrl_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biii", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewCtrl::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_InformFirstDirection, doc_wxDataViewCtrl_InformFirstDirection);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxDataViewCtrl_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewCtrl::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_SetCanFocus, doc_wxDataViewCtrl_SetCanFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewCtrl_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewCtrl::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_Destroy, doc_wxDataViewCtrl_Destroy);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxDataViewCtrl_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxDataViewCtrl::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_SetValidator, doc_wxDataViewCtrl_SetValidator);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxDataViewCtrl_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxDataViewCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxDataViewCtrl::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_GetValidator, doc_wxDataViewCtrl_GetValidator);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxDataViewCtrl_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_ProcessEvent, doc_wxDataViewCtrl_ProcessEvent);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxDataViewCtrl_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_DoEnable, doc_wxDataViewCtrl_DoEnable);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxDataViewCtrl_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxDataViewCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_DoGetPosition, doc_wxDataViewCtrl_DoGetPosition);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxDataViewCtrl_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxDataViewCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_DoGetSize, doc_wxDataViewCtrl_DoGetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxDataViewCtrl_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxDataViewCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_DoGetClientSize, doc_wxDataViewCtrl_DoGetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxDataViewCtrl_DoGetBestSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxDataViewCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_DoGetBestSize, doc_wxDataViewCtrl_DoGetBestSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxDataViewCtrl_DoGetBestClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxDataViewCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_DoGetBestClientSize, doc_wxDataViewCtrl_DoGetBestClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxDataViewCtrl_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiii", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_DoSetSize, doc_wxDataViewCtrl_DoSetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxDataViewCtrl_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_DoSetClientSize, doc_wxDataViewCtrl_DoSetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxDataViewCtrl_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiiii", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_DoSetSizeHints, doc_wxDataViewCtrl_DoSetSizeHints);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxDataViewCtrl_DoGetBorderSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxDataViewCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_DoGetBorderSize, doc_wxDataViewCtrl_DoGetBorderSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxDataViewCtrl_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiii", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_DoMoveWindow, doc_wxDataViewCtrl_DoMoveWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxDataViewCtrl_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_DoSetWindowVariant, doc_wxDataViewCtrl_DoSetWindowVariant);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxDataViewCtrl_GetDefaultBorder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxDataViewCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_GetDefaultBorder, doc_wxDataViewCtrl_GetDefaultBorder);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxDataViewCtrl_GetDefaultBorderForControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxDataViewCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_GetDefaultBorderForControl, doc_wxDataViewCtrl_GetDefaultBorderForControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxDataViewCtrl_DoFreeze(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_DoFreeze(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxDataViewCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_DoFreeze, doc_wxDataViewCtrl_DoFreeze);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxDataViewCtrl_DoThaw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_DoThaw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxDataViewCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_DoThaw, doc_wxDataViewCtrl_DoThaw);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxDataViewCtrl_HasTransparentBackground(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxDataViewCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxDataViewCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_HasTransparentBackground, doc_wxDataViewCtrl_HasTransparentBackground);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxDataViewCtrl_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_TryBefore, doc_wxDataViewCtrl_TryBefore);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxDataViewCtrl_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxDataViewCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxDataViewCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_TryAfter, doc_wxDataViewCtrl_TryAfter);

    return NULL;
}


PyDoc_STRVAR(doc_wxDataViewCtrl_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant: WindowVariant = wxWINDOW_VARIANT_NORMAL) -> VisualAttributes");

extern "C" {static PyObject *meth_wxDataViewCtrl_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxDataViewCtrl_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxDataViewCtrl::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_DataViewCtrl, sipName_GetClassDefaultAttributes, doc_wxDataViewCtrl_GetClassDefaultAttributes);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxDataViewCtrl(void *, const sipTypeDef *);}
static void *cast_wxDataViewCtrl(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxDataViewCtrl *sipCpp = reinterpret_cast< ::wxDataViewCtrl *>(sipCppV);

    if (targetType == sipType_wxControl)
        return static_cast< ::wxControl *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxDataViewCtrl(void *, int);}
static void release_wxDataViewCtrl(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxDataViewCtrl *>(sipCppV);
    else
        delete reinterpret_cast< ::wxDataViewCtrl *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxDataViewCtrl(sipSimpleWrapper *);}
static void dealloc_wxDataViewCtrl(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxDataViewCtrl *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxDataViewCtrl(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxDataViewCtrl(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxDataViewCtrl(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxDataViewCtrl *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxDataViewCtrl();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = 0;
        const  ::wxValidator& validatordef = wxDefaultValidator;
        const  ::wxValidator* validator = &validatordef;
        const  ::wxString& namedef = wxDataViewCtrlNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_validator,
            sipName_name,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J1lJ9J1", sipType_wxWindow, &parent, sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxValidator, &validator, sipType_wxString,&name, &nameState))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxDataViewCtrl(parent,id,*pos,*size,style,*validator,*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxDataViewCtrl[] = {{10, 0, 1}};


static PyMethodDef methods_wxDataViewCtrl[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxDataViewCtrl_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxDataViewCtrl_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxDataViewCtrl_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_AddChild), (PyCFunction)meth_wxDataViewCtrl_AddChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_AddChild)},
    {SIP_MLNAME_CAST(sipName_AppendBitmapColumn), (PyCFunction)meth_wxDataViewCtrl_AppendBitmapColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_AppendBitmapColumn)},
    {SIP_MLNAME_CAST(sipName_AppendColumn), (PyCFunction)meth_wxDataViewCtrl_AppendColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_AppendColumn)},
    {SIP_MLNAME_CAST(sipName_AppendDateColumn), (PyCFunction)meth_wxDataViewCtrl_AppendDateColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_AppendDateColumn)},
    {SIP_MLNAME_CAST(sipName_AppendIconTextColumn), (PyCFunction)meth_wxDataViewCtrl_AppendIconTextColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_AppendIconTextColumn)},
    {SIP_MLNAME_CAST(sipName_AppendProgressColumn), (PyCFunction)meth_wxDataViewCtrl_AppendProgressColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_AppendProgressColumn)},
    {SIP_MLNAME_CAST(sipName_AppendTextColumn), (PyCFunction)meth_wxDataViewCtrl_AppendTextColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_AppendTextColumn)},
    {SIP_MLNAME_CAST(sipName_AppendToggleColumn), (PyCFunction)meth_wxDataViewCtrl_AppendToggleColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_AppendToggleColumn)},
    {SIP_MLNAME_CAST(sipName_ClearColumns), meth_wxDataViewCtrl_ClearColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_ClearColumns)},
    {SIP_MLNAME_CAST(sipName_Collapse), (PyCFunction)meth_wxDataViewCtrl_Collapse, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_Collapse)},
    {SIP_MLNAME_CAST(sipName_Create), (PyCFunction)meth_wxDataViewCtrl_Create, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_Create)},
    {SIP_MLNAME_CAST(sipName_DeleteColumn), (PyCFunction)meth_wxDataViewCtrl_DeleteColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_DeleteColumn)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxDataViewCtrl_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_Destroy)},
    {SIP_MLNAME_CAST(sipName_DoEnable), (PyCFunction)meth_wxDataViewCtrl_DoEnable, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), (PyCFunction)meth_wxDataViewCtrl_DoFreeze, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), (PyCFunction)meth_wxDataViewCtrl_DoGetBestClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), (PyCFunction)meth_wxDataViewCtrl_DoGetBestSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), (PyCFunction)meth_wxDataViewCtrl_DoGetBorderSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), (PyCFunction)meth_wxDataViewCtrl_DoGetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), (PyCFunction)meth_wxDataViewCtrl_DoGetPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), (PyCFunction)meth_wxDataViewCtrl_DoGetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), (PyCFunction)meth_wxDataViewCtrl_DoMoveWindow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), (PyCFunction)meth_wxDataViewCtrl_DoSetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), (PyCFunction)meth_wxDataViewCtrl_DoSetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), (PyCFunction)meth_wxDataViewCtrl_DoSetSizeHints, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), (PyCFunction)meth_wxDataViewCtrl_DoSetWindowVariant, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoThaw), (PyCFunction)meth_wxDataViewCtrl_DoThaw, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_DoThaw)},
    {SIP_MLNAME_CAST(sipName_EditItem), (PyCFunction)meth_wxDataViewCtrl_EditItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_EditItem)},
    {SIP_MLNAME_CAST(sipName_EnableDragSource), (PyCFunction)meth_wxDataViewCtrl_EnableDragSource, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_EnableDragSource)},
    {SIP_MLNAME_CAST(sipName_EnableDropTarget), (PyCFunction)meth_wxDataViewCtrl_EnableDropTarget, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_EnableDropTarget)},
    {SIP_MLNAME_CAST(sipName_EnsureVisible), (PyCFunction)meth_wxDataViewCtrl_EnsureVisible, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_EnsureVisible)},
    {SIP_MLNAME_CAST(sipName_Expand), (PyCFunction)meth_wxDataViewCtrl_Expand, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_Expand)},
    {SIP_MLNAME_CAST(sipName_ExpandAncestors), (PyCFunction)meth_wxDataViewCtrl_ExpandAncestors, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_ExpandAncestors)},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), (PyCFunction)meth_wxDataViewCtrl_GetClassDefaultAttributes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxDataViewCtrl_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetColumn), (PyCFunction)meth_wxDataViewCtrl_GetColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_GetColumn)},
    {SIP_MLNAME_CAST(sipName_GetColumnCount), meth_wxDataViewCtrl_GetColumnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_GetColumnCount)},
    {SIP_MLNAME_CAST(sipName_GetColumnPosition), (PyCFunction)meth_wxDataViewCtrl_GetColumnPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_GetColumnPosition)},
    {SIP_MLNAME_CAST(sipName_GetCurrentColumn), meth_wxDataViewCtrl_GetCurrentColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_GetCurrentColumn)},
    {SIP_MLNAME_CAST(sipName_GetCurrentItem), meth_wxDataViewCtrl_GetCurrentItem, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_GetCurrentItem)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), (PyCFunction)meth_wxDataViewCtrl_GetDefaultBorder, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), (PyCFunction)meth_wxDataViewCtrl_GetDefaultBorderForControl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetExpanderColumn), meth_wxDataViewCtrl_GetExpanderColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_GetExpanderColumn)},
    {SIP_MLNAME_CAST(sipName_GetIndent), meth_wxDataViewCtrl_GetIndent, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_GetIndent)},
    {SIP_MLNAME_CAST(sipName_GetItemRect), (PyCFunction)meth_wxDataViewCtrl_GetItemRect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_GetItemRect)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxDataViewCtrl_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetModel), meth_wxDataViewCtrl_GetModel, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_GetModel)},
    {SIP_MLNAME_CAST(sipName_GetSelectedItemsCount), meth_wxDataViewCtrl_GetSelectedItemsCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_GetSelectedItemsCount)},
    {SIP_MLNAME_CAST(sipName_GetSelection), meth_wxDataViewCtrl_GetSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_GetSelection)},
    {SIP_MLNAME_CAST(sipName_GetSelections), meth_wxDataViewCtrl_GetSelections, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_GetSelections)},
    {SIP_MLNAME_CAST(sipName_GetSortingColumn), meth_wxDataViewCtrl_GetSortingColumn, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_GetSortingColumn)},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxDataViewCtrl_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_GetValidator)},
    {SIP_MLNAME_CAST(sipName_HasSelection), meth_wxDataViewCtrl_HasSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_HasSelection)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), (PyCFunction)meth_wxDataViewCtrl_HasTransparentBackground, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_HitTest), (PyCFunction)meth_wxDataViewCtrl_HitTest, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_HitTest)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), (PyCFunction)meth_wxDataViewCtrl_InformFirstDirection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxDataViewCtrl_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxDataViewCtrl_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_InitDialog)},
    {SIP_MLNAME_CAST(sipName_InsertColumn), (PyCFunction)meth_wxDataViewCtrl_InsertColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_InsertColumn)},
    {SIP_MLNAME_CAST(sipName_IsExpanded), (PyCFunction)meth_wxDataViewCtrl_IsExpanded, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_IsExpanded)},
    {SIP_MLNAME_CAST(sipName_IsSelected), (PyCFunction)meth_wxDataViewCtrl_IsSelected, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_IsSelected)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxDataViewCtrl_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_PrependBitmapColumn), (PyCFunction)meth_wxDataViewCtrl_PrependBitmapColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_PrependBitmapColumn)},
    {SIP_MLNAME_CAST(sipName_PrependColumn), (PyCFunction)meth_wxDataViewCtrl_PrependColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_PrependColumn)},
    {SIP_MLNAME_CAST(sipName_PrependDateColumn), (PyCFunction)meth_wxDataViewCtrl_PrependDateColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_PrependDateColumn)},
    {SIP_MLNAME_CAST(sipName_PrependIconTextColumn), (PyCFunction)meth_wxDataViewCtrl_PrependIconTextColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_PrependIconTextColumn)},
    {SIP_MLNAME_CAST(sipName_PrependProgressColumn), (PyCFunction)meth_wxDataViewCtrl_PrependProgressColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_PrependProgressColumn)},
    {SIP_MLNAME_CAST(sipName_PrependTextColumn), (PyCFunction)meth_wxDataViewCtrl_PrependTextColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_PrependTextColumn)},
    {SIP_MLNAME_CAST(sipName_PrependToggleColumn), (PyCFunction)meth_wxDataViewCtrl_PrependToggleColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_PrependToggleColumn)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), (PyCFunction)meth_wxDataViewCtrl_ProcessEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), (PyCFunction)meth_wxDataViewCtrl_RemoveChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_Select), (PyCFunction)meth_wxDataViewCtrl_Select, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_Select)},
    {SIP_MLNAME_CAST(sipName_SelectAll), meth_wxDataViewCtrl_SelectAll, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_SelectAll)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), (PyCFunction)meth_wxDataViewCtrl_SendDestroyEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), (PyCFunction)meth_wxDataViewCtrl_SetCanFocus, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetCurrentItem), (PyCFunction)meth_wxDataViewCtrl_SetCurrentItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_SetCurrentItem)},
    {SIP_MLNAME_CAST(sipName_SetExpanderColumn), (PyCFunction)meth_wxDataViewCtrl_SetExpanderColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_SetExpanderColumn)},
    {SIP_MLNAME_CAST(sipName_SetIndent), (PyCFunction)meth_wxDataViewCtrl_SetIndent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_SetIndent)},
    {SIP_MLNAME_CAST(sipName_SetRowHeight), (PyCFunction)meth_wxDataViewCtrl_SetRowHeight, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_SetRowHeight)},
    {SIP_MLNAME_CAST(sipName_SetSelections), (PyCFunction)meth_wxDataViewCtrl_SetSelections, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_SetSelections)},
    {SIP_MLNAME_CAST(sipName_SetValidator), (PyCFunction)meth_wxDataViewCtrl_SetValidator, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_SetValidator)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxDataViewCtrl_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxDataViewCtrl_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxDataViewCtrl_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), (PyCFunction)meth_wxDataViewCtrl_TryAfter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), (PyCFunction)meth_wxDataViewCtrl_TryBefore, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_TryBefore)},
    {SIP_MLNAME_CAST(sipName_Unselect), (PyCFunction)meth_wxDataViewCtrl_Unselect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_Unselect)},
    {SIP_MLNAME_CAST(sipName_UnselectAll), meth_wxDataViewCtrl_UnselectAll, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_UnselectAll)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxDataViewCtrl_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxDataViewCtrl_Validate)},
    {SIP_MLNAME_CAST(sipName__AssociateModel), (PyCFunction)meth_wxDataViewCtrl__AssociateModel, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxDataViewCtrl__AssociateModel)}
};

sipVariableDef variables_wxDataViewCtrl[] = {
    {PropertyVariable, sipName_SortingColumn, &methods_wxDataViewCtrl[53], NULL, NULL, NULL},
    {PropertyVariable, sipName_Selections, &methods_wxDataViewCtrl[52], &methods_wxDataViewCtrl[82], NULL, NULL},
    {PropertyVariable, sipName_Selection, &methods_wxDataViewCtrl[51], NULL, NULL, NULL},
    {PropertyVariable, sipName_SelectedItemsCount, &methods_wxDataViewCtrl[50], NULL, NULL, NULL},
    {PropertyVariable, sipName_Model, &methods_wxDataViewCtrl[49], NULL, NULL, NULL},
    {PropertyVariable, sipName_Indent, &methods_wxDataViewCtrl[46], &methods_wxDataViewCtrl[80], NULL, NULL},
    {PropertyVariable, sipName_ExpanderColumn, &methods_wxDataViewCtrl[45], &methods_wxDataViewCtrl[79], NULL, NULL},
    {PropertyVariable, sipName_CurrentItem, &methods_wxDataViewCtrl[42], &methods_wxDataViewCtrl[78], NULL, NULL},
    {PropertyVariable, sipName_CurrentColumn, &methods_wxDataViewCtrl[41], NULL, NULL, NULL},
    {PropertyVariable, sipName_ColumnCount, &methods_wxDataViewCtrl[39], NULL, NULL, NULL},
};

PyDoc_STRVAR(doc_wxDataViewCtrl, "DataViewCtrl()\n"
"DataViewCtrl(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, validator=wx.DefaultValidator, name=DataViewCtrlNameStr)\n"
"\n"
"wxDataViewCtrl is a control to display data either in a tree like\n"
"fashion or in a tabular form or both.");


sipClassTypeDef sipTypeDef__dataview_wxDataViewCtrl = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxDataViewCtrl,
        {0},
        0
    },
    {
        sipNameNr_DataViewCtrl,
        {0, 0, 1},
        93, methods_wxDataViewCtrl,
        0, 0,
        10, variables_wxDataViewCtrl,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxDataViewCtrl,
    -1,
    -1,
    supers_wxDataViewCtrl,
    0,
    init_type_wxDataViewCtrl,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxDataViewCtrl,
    0,
    0,
    0,
    release_wxDataViewCtrl,
    cast_wxDataViewCtrl,
    0,
    0,
    0,
    0,
    0,
    0
};
