/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/cshelp.h>

        #include <wx/window.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxContextHelp : public  ::wxContextHelp
{
public:
    sipwxContextHelp( ::wxWindow*,bool);
    sipwxContextHelp(const  ::wxContextHelp&);
    ~sipwxContextHelp();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxContextHelp(const sipwxContextHelp &);
    sipwxContextHelp &operator = (const sipwxContextHelp &);
};

sipwxContextHelp::sipwxContextHelp( ::wxWindow*window,bool doNow):  ::wxContextHelp(window,doNow), sipPySelf(0)
{
}

sipwxContextHelp::sipwxContextHelp(const  ::wxContextHelp& a0):  ::wxContextHelp(a0), sipPySelf(0)
{
}

sipwxContextHelp::~sipwxContextHelp()
{
    sipInstanceDestroyedEx(&sipPySelf);
}


PyDoc_STRVAR(doc_wxContextHelp_BeginContextHelp, "BeginContextHelp(window) -> bool\n"
"\n"
"Puts the application into context-sensitive help mode.");

extern "C" {static PyObject *meth_wxContextHelp_BeginContextHelp(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxContextHelp_BeginContextHelp(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* window;
         ::wxContextHelp *sipCpp;

        static const char *sipKwdList[] = {
            sipName_window,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxContextHelp, &sipCpp, sipType_wxWindow, &window))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->BeginContextHelp(window);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ContextHelp, sipName_BeginContextHelp, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxContextHelp_EndContextHelp, "EndContextHelp() -> bool\n"
"\n"
"Ends context-sensitive help mode.");

extern "C" {static PyObject *meth_wxContextHelp_EndContextHelp(PyObject *, PyObject *);}
static PyObject *meth_wxContextHelp_EndContextHelp(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxContextHelp *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxContextHelp, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EndContextHelp();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_ContextHelp, sipName_EndContextHelp, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxContextHelp(void *, const sipTypeDef *);}
static void *cast_wxContextHelp(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxContextHelp *sipCpp = reinterpret_cast< ::wxContextHelp *>(sipCppV);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxContextHelp(void *, int);}
static void release_wxContextHelp(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxContextHelp *>(sipCppV);
    else
        delete reinterpret_cast< ::wxContextHelp *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_wxContextHelp(void *, SIP_SSIZE_T, void *);}
static void assign_wxContextHelp(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxContextHelp *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxContextHelp *>(sipSrc);
}


extern "C" {static void *array_wxContextHelp(SIP_SSIZE_T);}
static void *array_wxContextHelp(SIP_SSIZE_T sipNrElem)
{
    return new  ::wxContextHelp[sipNrElem];
}


extern "C" {static void *copy_wxContextHelp(const void *, SIP_SSIZE_T);}
static void *copy_wxContextHelp(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxContextHelp(reinterpret_cast<const  ::wxContextHelp *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxContextHelp(sipSimpleWrapper *);}
static void dealloc_wxContextHelp(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxContextHelp *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxContextHelp(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxContextHelp(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxContextHelp(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxContextHelp *sipCpp = 0;

    {
         ::wxWindow* window = 0;
        bool doNow = 1;

        static const char *sipKwdList[] = {
            sipName_window,
            sipName_doNow,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|J8b", sipType_wxWindow, &window, &doNow))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxContextHelp(window,doNow);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxContextHelp* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxContextHelp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxContextHelp(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxContextHelp[] = {{358, 255, 1}};


static PyMethodDef methods_wxContextHelp[] = {
    {SIP_MLNAME_CAST(sipName_BeginContextHelp), (PyCFunction)meth_wxContextHelp_BeginContextHelp, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxContextHelp_BeginContextHelp)},
    {SIP_MLNAME_CAST(sipName_EndContextHelp), meth_wxContextHelp_EndContextHelp, METH_VARARGS, SIP_MLDOC_CAST(doc_wxContextHelp_EndContextHelp)}
};

PyDoc_STRVAR(doc_wxContextHelp, "ContextHelp(window=None, doNow=True)\n"
"\n"
"This class changes the cursor to a query and puts the application into\n"
"a 'context-sensitive help mode'.");


sipClassTypeDef sipTypeDef__core_wxContextHelp = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxContextHelp,
        {0},
        0
    },
    {
        sipNameNr_ContextHelp,
        {0, 0, 1},
        2, methods_wxContextHelp,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxContextHelp,
    -1,
    -1,
    supers_wxContextHelp,
    0,
    init_type_wxContextHelp,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxContextHelp,
    assign_wxContextHelp,
    array_wxContextHelp,
    copy_wxContextHelp,
    release_wxContextHelp,
    cast_wxContextHelp,
    0,
    0,
    0,
    0,
    0,
    0
};
