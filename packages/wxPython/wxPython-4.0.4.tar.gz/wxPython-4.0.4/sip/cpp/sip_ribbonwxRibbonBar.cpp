/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_ribbon.h"

        #include <wx/ribbon/bar.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/validate.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/ribbon/page.h>
        #include <wx/ribbon/art.h>
        #include <wx/dc.h>
        #include <wx/event.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/region.h>
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxRibbonBar : public  ::wxRibbonBar
{
public:
    sipwxRibbonBar();
    sipwxRibbonBar( ::wxWindow*, ::wxWindowID,const  ::wxPoint&,const  ::wxSize&,long);
    virtual ~sipwxRibbonBar();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
     ::wxSize sipProtect_DoGetNextSmallerSize( ::wxOrientation, ::wxSize) const;
     ::wxSize sipProtect_DoGetNextLargerSize( ::wxOrientation, ::wxSize) const;
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void RemoveChild( ::wxWindowBase*);
    void AddChild( ::wxWindowBase*);
    bool ProcessEvent( ::wxEvent&);
    bool TryBefore( ::wxEvent&);
    bool TryAfter( ::wxEvent&);
    bool AcceptsFocus() const;
    bool AcceptsFocusFromKeyboard() const;
    bool AcceptsFocusRecursively() const;
    void SetCanFocus(bool);
    bool InformFirstDirection(int,int,int);
     ::wxPoint GetClientAreaOrigin() const;
    bool HasTransparentBackground();
    bool ShouldInheritColours() const;
     ::wxValidator* GetValidator();
    void SetValidator(const  ::wxValidator&);
    bool TransferDataFromWindow();
    bool TransferDataToWindow();
    bool Validate();
    bool Destroy();
    void InheritAttributes();
    void InitDialog();
    void OnInternalIdle();
     ::wxWindow* GetMainWindowOfCompositeControl();
    void DoEnable(bool);
    void DoGetPosition(int*,int*) const;
    void DoGetSize(int*,int*) const;
    void DoGetClientSize(int*,int*) const;
    void DoSetSize(int,int,int,int,int);
    void DoSetClientSize(int,int);
    void DoSetSizeHints(int,int,int,int,int,int);
     ::wxSize DoGetBorderSize() const;
    void DoMoveWindow(int,int,int,int);
    void DoSetWindowVariant( ::wxWindowVariant);
     ::wxBorder GetDefaultBorder() const;
     ::wxBorder GetDefaultBorderForControl() const;
    void DoFreeze();
    void DoThaw();
     ::wxSize DoGetBestSize() const;
     ::wxSize DoGetBestClientSize() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxRibbonBar(const sipwxRibbonBar &);
    sipwxRibbonBar &operator = (const sipwxRibbonBar &);

    char sipPyMethods[39];
};

sipwxRibbonBar::sipwxRibbonBar():  ::wxRibbonBar(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRibbonBar::sipwxRibbonBar( ::wxWindow*parent, ::wxWindowID id,const  ::wxPoint& pos,const  ::wxSize& size,long style):  ::wxRibbonBar(parent,id,pos,size,style), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxRibbonBar::~sipwxRibbonBar()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxRibbonBar::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxRibbonBar::RemoveChild(child);
        return;
    }

    extern void sipVH__ribbon_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__ribbon_0(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxRibbonBar::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxRibbonBar::AddChild(child);
        return;
    }

    extern void sipVH__ribbon_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__ribbon_0(sipGILState, 0, sipPySelf, sipMeth, child);
}

bool sipwxRibbonBar::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxRibbonBar::ProcessEvent(event);

    extern bool sipVH__ribbon_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__ribbon_1(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxRibbonBar::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxRibbonBar::TryBefore(event);

    extern bool sipVH__ribbon_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__ribbon_1(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxRibbonBar::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxRibbonBar::TryAfter(event);

    extern bool sipVH__ribbon_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__ribbon_1(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxRibbonBar::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxRibbonBar::AcceptsFocus();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRibbonBar::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxRibbonBar::AcceptsFocusFromKeyboard();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRibbonBar::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxRibbonBar::AcceptsFocusRecursively();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonBar::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxRibbonBar::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__ribbon_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__ribbon_3(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

bool sipwxRibbonBar::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxRibbonBar::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__ribbon_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__ribbon_4(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

 ::wxPoint sipwxRibbonBar::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxRibbonBar::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__ribbon_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_5(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRibbonBar::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxRibbonBar::HasTransparentBackground();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRibbonBar::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxRibbonBar::ShouldInheritColours();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxValidator* sipwxRibbonBar::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxRibbonBar::GetValidator();

    extern  ::wxValidator* sipVH__ribbon_6(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_6(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonBar::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxRibbonBar::SetValidator(validator);
        return;
    }

    extern void sipVH__ribbon_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__ribbon_7(sipGILState, 0, sipPySelf, sipMeth, validator);
}

bool sipwxRibbonBar::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxRibbonBar::TransferDataFromWindow();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRibbonBar::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxRibbonBar::TransferDataToWindow();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRibbonBar::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_Validate);

    if (!sipMeth)
        return  ::wxRibbonBar::Validate();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxRibbonBar::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_Destroy);

    if (!sipMeth)
        return  ::wxRibbonBar::Destroy();

    extern bool sipVH__ribbon_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_2(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonBar::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxRibbonBar::InheritAttributes();
        return;
    }

    extern void sipVH__ribbon_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__ribbon_8(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonBar::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxRibbonBar::InitDialog();
        return;
    }

    extern void sipVH__ribbon_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__ribbon_8(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonBar::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxRibbonBar::OnInternalIdle();
        return;
    }

    extern void sipVH__ribbon_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__ribbon_8(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxWindow* sipwxRibbonBar::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxRibbonBar::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__ribbon_9(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_9(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonBar::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxRibbonBar::DoEnable(enable);
        return;
    }

    extern void sipVH__ribbon_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__ribbon_3(sipGILState, 0, sipPySelf, sipMeth, enable);
}

void sipwxRibbonBar::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxRibbonBar::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__ribbon_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__ribbon_10(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxRibbonBar::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxRibbonBar::DoGetSize(width,height);
        return;
    }

    extern void sipVH__ribbon_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__ribbon_10(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxRibbonBar::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxRibbonBar::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__ribbon_10(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__ribbon_10(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxRibbonBar::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxRibbonBar::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__ribbon_11(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__ribbon_11(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxRibbonBar::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxRibbonBar::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__ribbon_12(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__ribbon_12(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxRibbonBar::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxRibbonBar::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__ribbon_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__ribbon_13(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

 ::wxSize sipwxRibbonBar::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxRibbonBar::DoGetBorderSize();

    extern  ::wxSize sipVH__ribbon_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_14(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonBar::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxRibbonBar::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__ribbon_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__ribbon_15(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

void sipwxRibbonBar::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxRibbonBar::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__ribbon_16(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__ribbon_16(sipGILState, 0, sipPySelf, sipMeth, variant);
}

 ::wxBorder sipwxRibbonBar::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxRibbonBar::GetDefaultBorder();

    extern  ::wxBorder sipVH__ribbon_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_17(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxRibbonBar::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxRibbonBar::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__ribbon_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_17(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonBar::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxRibbonBar::DoFreeze();
        return;
    }

    extern void sipVH__ribbon_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__ribbon_8(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonBar::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxRibbonBar::DoThaw();
        return;
    }

    extern void sipVH__ribbon_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__ribbon_8(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxRibbonBar::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxRibbonBar::DoGetBestSize();

    extern  ::wxSize sipVH__ribbon_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_14(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxRibbonBar::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxRibbonBar::DoGetBestClientSize();

    extern  ::wxSize sipVH__ribbon_14(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__ribbon_14(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxRibbonBar::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

 ::wxSize sipwxRibbonBar::sipProtect_DoGetNextSmallerSize( ::wxOrientation direction, ::wxSize relative_to) const
{
    return  ::wxRibbonControl::DoGetNextSmallerSize(direction,relative_to);
}

 ::wxSize sipwxRibbonBar::sipProtect_DoGetNextLargerSize( ::wxOrientation direction, ::wxSize relative_to) const
{
    return  ::wxRibbonControl::DoGetNextLargerSize(direction,relative_to);
}

bool sipwxRibbonBar::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxRibbonBar::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxRibbonBar::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxRibbonBar::DoEnable(enable) : DoEnable(enable));
}

void sipwxRibbonBar::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxRibbonBar::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxRibbonBar::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxRibbonBar::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxRibbonBar::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxRibbonBar::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxRibbonBar::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxRibbonBar::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxRibbonBar::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxRibbonBar::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxRibbonBar::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxRibbonBar::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxRibbonBar::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxRibbonBar::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxRibbonBar::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxRibbonBar::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxRibbonBar::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxRibbonBar::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxRibbonBar::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxRibbonBar::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxRibbonBar::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxRibbonBar::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxRibbonBar::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxRibbonBar::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxRibbonBar::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxRibbonBar::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxRibbonBar::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxRibbonBar::DoFreeze() : DoFreeze());
}

void sipwxRibbonBar::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxRibbonBar::DoThaw() : DoThaw());
}

bool sipwxRibbonBar::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxRibbonBar::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxRibbonBar::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxRibbonBar::TryBefore(event) : TryBefore(event));
}

bool sipwxRibbonBar::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxRibbonBar::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxRibbonBar_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxRibbonBar_SendDestroyEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipwxRibbonBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_SendDestroyEvent, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_DoGetNextSmallerSize, "DoGetNextSmallerSize(direction, relative_to) -> wx.Size\n"
"\n"
"Implementation of GetNextSmallerSize().");

extern "C" {static PyObject *meth_wxRibbonBar_DoGetNextSmallerSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_DoGetNextSmallerSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxOrientation direction;
         ::wxSize* relative_to;
        int relative_toState = 0;
        const sipwxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_relative_to,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ1", &sipSelf, sipType_wxRibbonBar, &sipCpp, sipType_wxOrientation, &direction, sipType_wxSize, &relative_to, &relative_toState))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtect_DoGetNextSmallerSize(direction,*relative_to));
            Py_END_ALLOW_THREADS
            sipReleaseType(relative_to,sipType_wxSize,relative_toState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_DoGetNextSmallerSize, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_DoGetNextLargerSize, "DoGetNextLargerSize(direction, relative_to) -> wx.Size\n"
"\n"
"Implementation of GetNextLargerSize().");

extern "C" {static PyObject *meth_wxRibbonBar_DoGetNextLargerSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_DoGetNextLargerSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxOrientation direction;
         ::wxSize* relative_to;
        int relative_toState = 0;
        const sipwxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_relative_to,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BEJ1", &sipSelf, sipType_wxRibbonBar, &sipCpp, sipType_wxOrientation, &direction, sipType_wxSize, &relative_to, &relative_toState))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtect_DoGetNextLargerSize(direction,*relative_to));
            Py_END_ALLOW_THREADS
            sipReleaseType(relative_to,sipType_wxSize,relative_toState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_DoGetNextLargerSize, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_Create, "Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=RIBBON_BAR_DEFAULT_STYLE) -> bool\n"
"\n"
"Create a ribbon bar in two-step ribbon bar construction.");

extern "C" {static PyObject *meth_wxRibbonBar_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxRIBBON_BAR_DEFAULT_STYLE;
        sipWrapper *sipOwner = 0;
         ::wxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJH|iJ1J1l", &sipSelf, sipType_wxRibbonBar, &sipCpp, sipType_wxWindow, &parent, &sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,id,*pos,*size,style);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_Create, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_SetTabCtrlMargins, "SetTabCtrlMargins(left, right)\n"
"\n"
"Set the margin widths (in pixels) on the left and right sides of the\n"
"tab bar region of the ribbon bar.");

extern "C" {static PyObject *meth_wxRibbonBar_SetTabCtrlMargins(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_SetTabCtrlMargins(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int left;
        int right;
         ::wxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_left,
            sipName_right,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxRibbonBar, &sipCpp, &left, &right))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetTabCtrlMargins(left,right);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_SetTabCtrlMargins, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_SetArtProvider, "SetArtProvider(art)\n"
"\n"
"Set the art provider to be used be the ribbon bar.");

extern "C" {static PyObject *meth_wxRibbonBar_SetArtProvider(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_SetArtProvider(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxRibbonArtProvider* art;
         ::wxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_art,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:", &sipSelf, sipType_wxRibbonBar, &sipCpp, sipType_wxRibbonArtProvider, &art))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetArtProvider(art);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_SetArtProvider, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_SetActivePage, "SetActivePage(page) -> bool\n"
"SetActivePage(page) -> bool\n"
"\n"
"Set the active page by index, without triggering any events.\n"
"");

extern "C" {static PyObject *meth_wxRibbonBar_SetActivePage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_SetActivePage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::size_t* page;
        int pageState = 0;
         ::wxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRibbonBar, &sipCpp, sipType_size_t,&page, &pageState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetActivePage(*page);
            Py_END_ALLOW_THREADS
            sipReleaseType(page,sipType_size_t,pageState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::wxRibbonPage* page;
         ::wxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxRibbonBar, &sipCpp, sipType_wxRibbonPage, &page))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->SetActivePage(page);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_SetActivePage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_GetActivePage, "GetActivePage() -> int\n"
"\n"
"Get the index of the active page.");

extern "C" {static PyObject *meth_wxRibbonBar_GetActivePage(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_GetActivePage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxRibbonBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetActivePage();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_GetActivePage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_GetPage, "GetPage(n) -> RibbonPage\n"
"\n"
"Get a page by index.");

extern "C" {static PyObject *meth_wxRibbonBar_GetPage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_GetPage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int n;
         ::wxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxRibbonBar, &sipCpp, &n))
        {
             ::wxRibbonPage*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetPage(n);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRibbonPage,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_GetPage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_GetPageCount, "GetPageCount() -> size_t\n"
"\n"
"Get the number of pages in this bar.");

extern "C" {static PyObject *meth_wxRibbonBar_GetPageCount(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_GetPageCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxRibbonBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
             ::size_t*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::size_t(sipCpp->GetPageCount());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_size_t,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_GetPageCount, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_DismissExpandedPanel, "DismissExpandedPanel() -> bool\n"
"\n"
"Dismiss the expanded panel of the currently active page.");

extern "C" {static PyObject *meth_wxRibbonBar_DismissExpandedPanel(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_DismissExpandedPanel(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxRibbonBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DismissExpandedPanel();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_DismissExpandedPanel, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_GetPageNumber, "GetPageNumber(page) -> int\n"
"\n"
"Returns the number for a given ribbon bar page.");

extern "C" {static PyObject *meth_wxRibbonBar_GetPageNumber(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_GetPageNumber(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxRibbonPage* page;
        const  ::wxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxRibbonBar, &sipCpp, sipType_wxRibbonPage, &page))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetPageNumber(page);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_GetPageNumber, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_DeletePage, "DeletePage(n)\n"
"\n"
"Delete a single page from this ribbon bar.");

extern "C" {static PyObject *meth_wxRibbonBar_DeletePage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_DeletePage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::size_t* n;
        int nState = 0;
         ::wxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_n,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRibbonBar, &sipCpp, sipType_size_t,&n, &nState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DeletePage(*n);
            Py_END_ALLOW_THREADS
            sipReleaseType(n,sipType_size_t,nState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_DeletePage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_ClearPages, "ClearPages()\n"
"\n"
"Delete all pages from the ribbon bar.");

extern "C" {static PyObject *meth_wxRibbonBar_ClearPages(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_ClearPages(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxRibbonBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ClearPages();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_ClearPages, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_IsPageShown, "IsPageShown(page) -> bool\n"
"\n"
"Indicates whether the tab for the given page is shown to the user or\n"
"not.");

extern "C" {static PyObject *meth_wxRibbonBar_IsPageShown(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_IsPageShown(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::size_t* page;
        int pageState = 0;
        const  ::wxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRibbonBar, &sipCpp, sipType_size_t,&page, &pageState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsPageShown(*page);
            Py_END_ALLOW_THREADS
            sipReleaseType(page,sipType_size_t,pageState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_IsPageShown, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_ShowPage, "ShowPage(page, show_tab=True)\n"
"\n"
"Show or hide the tab for a given page.");

extern "C" {static PyObject *meth_wxRibbonBar_ShowPage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_ShowPage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::size_t* page;
        int pageState = 0;
        bool show_tab = 1;
         ::wxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
            sipName_show_tab,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|b", &sipSelf, sipType_wxRibbonBar, &sipCpp, sipType_size_t,&page, &pageState, &show_tab))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ShowPage(*page,show_tab);
            Py_END_ALLOW_THREADS
            sipReleaseType(page,sipType_size_t,pageState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_ShowPage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_HidePage, "HidePage(page)\n"
"\n"
"Hides the tab for a given page.");

extern "C" {static PyObject *meth_wxRibbonBar_HidePage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_HidePage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::size_t* page;
        int pageState = 0;
         ::wxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRibbonBar, &sipCpp, sipType_size_t,&page, &pageState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->HidePage(*page);
            Py_END_ALLOW_THREADS
            sipReleaseType(page,sipType_size_t,pageState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_HidePage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_IsPageHighlighted, "IsPageHighlighted(page) -> bool\n"
"\n"
"Indicates whether a tab is currently highlighted.");

extern "C" {static PyObject *meth_wxRibbonBar_IsPageHighlighted(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_IsPageHighlighted(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::size_t* page;
        int pageState = 0;
        const  ::wxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRibbonBar, &sipCpp, sipType_size_t,&page, &pageState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsPageHighlighted(*page);
            Py_END_ALLOW_THREADS
            sipReleaseType(page,sipType_size_t,pageState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_IsPageHighlighted, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_AddPageHighlight, "AddPageHighlight(page, highlight=True)\n"
"\n"
"Highlight the specified tab.");

extern "C" {static PyObject *meth_wxRibbonBar_AddPageHighlight(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_AddPageHighlight(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::size_t* page;
        int pageState = 0;
        bool highlight = 1;
         ::wxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
            sipName_highlight,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|b", &sipSelf, sipType_wxRibbonBar, &sipCpp, sipType_size_t,&page, &pageState, &highlight))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->AddPageHighlight(*page,highlight);
            Py_END_ALLOW_THREADS
            sipReleaseType(page,sipType_size_t,pageState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_AddPageHighlight, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_RemovePageHighlight, "RemovePageHighlight(page)\n"
"\n"
"Changes a tab to not be highlighted.");

extern "C" {static PyObject *meth_wxRibbonBar_RemovePageHighlight(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_RemovePageHighlight(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::size_t* page;
        int pageState = 0;
         ::wxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_page,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxRibbonBar, &sipCpp, sipType_size_t,&page, &pageState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->RemovePageHighlight(*page);
            Py_END_ALLOW_THREADS
            sipReleaseType(page,sipType_size_t,pageState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_RemovePageHighlight, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_ShowPanels, "ShowPanels(show=True)\n"
"\n"
"Shows or hides the panel area of the ribbon bar.");

extern "C" {static PyObject *meth_wxRibbonBar_ShowPanels(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_ShowPanels(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        bool show = 1;
         ::wxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_show,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|b", &sipSelf, sipType_wxRibbonBar, &sipCpp, &show))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ShowPanels(show);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_ShowPanels, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_HidePanels, "HidePanels()\n"
"\n"
"Hides the panel area of the ribbon bar.");

extern "C" {static PyObject *meth_wxRibbonBar_HidePanels(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_HidePanels(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxRibbonBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->HidePanels();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_HidePanels, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_ArePanelsShown, "ArePanelsShown() -> bool\n"
"\n"
"Indicates whether the panel area of the ribbon bar is shown.");

extern "C" {static PyObject *meth_wxRibbonBar_ArePanelsShown(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_ArePanelsShown(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxRibbonBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->ArePanelsShown();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_ArePanelsShown, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_Realize, "Realize() -> bool\n"
"\n"
"Perform initial layout and size calculations of the bar and its\n"
"children.");

extern "C" {static PyObject *meth_wxRibbonBar_Realize(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_Realize(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxRibbonBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Realize();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_Realize, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxRibbonBar_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRibbonBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxRibbonBar::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_GetClientAreaOrigin, doc_wxRibbonBar_GetClientAreaOrigin);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonBar_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonBar::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_Validate, doc_wxRibbonBar_Validate);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonBar_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonBar::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_TransferDataToWindow, doc_wxRibbonBar_TransferDataToWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonBar_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonBar::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_TransferDataFromWindow, doc_wxRibbonBar_TransferDataFromWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxRibbonBar_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonBar::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_InitDialog, doc_wxRibbonBar_InitDialog);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonBar_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRibbonBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonBar::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_AcceptsFocus, doc_wxRibbonBar_AcceptsFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonBar_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRibbonBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonBar::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_AcceptsFocusRecursively, doc_wxRibbonBar_AcceptsFocusRecursively);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonBar_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRibbonBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonBar::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_AcceptsFocusFromKeyboard, doc_wxRibbonBar_AcceptsFocusFromKeyboard);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxRibbonBar_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxRibbonBar, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonBar::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_AddChild, doc_wxRibbonBar_AddChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxRibbonBar_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxRibbonBar, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonBar::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_RemoveChild, doc_wxRibbonBar_RemoveChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxRibbonBar_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonBar::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_InheritAttributes, doc_wxRibbonBar_InheritAttributes);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonBar_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxRibbonBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonBar::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_ShouldInheritColours, doc_wxRibbonBar_ShouldInheritColours);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxRibbonBar_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonBar::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_OnInternalIdle, doc_wxRibbonBar_OnInternalIdle);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxRibbonBar_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonBar::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_GetMainWindowOfCompositeControl, doc_wxRibbonBar_GetMainWindowOfCompositeControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxRibbonBar_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biii", &sipSelf, sipType_wxRibbonBar, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonBar::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_InformFirstDirection, doc_wxRibbonBar_InformFirstDirection);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxRibbonBar_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxRibbonBar, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonBar::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_SetCanFocus, doc_wxRibbonBar_SetCanFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonBar_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonBar::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_Destroy, doc_wxRibbonBar_Destroy);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxRibbonBar_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxRibbonBar, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxRibbonBar::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_SetValidator, doc_wxRibbonBar_SetValidator);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxRibbonBar_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxRibbonBar *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxRibbonBar::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_GetValidator, doc_wxRibbonBar_GetValidator);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxRibbonBar_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxRibbonBar, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_ProcessEvent, doc_wxRibbonBar_ProcessEvent);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxRibbonBar_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxRibbonBar, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_DoEnable, doc_wxRibbonBar_DoEnable);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxRibbonBar_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxRibbonBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_DoGetPosition, doc_wxRibbonBar_DoGetPosition);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxRibbonBar_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxRibbonBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_DoGetSize, doc_wxRibbonBar_DoGetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxRibbonBar_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxRibbonBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_DoGetClientSize, doc_wxRibbonBar_DoGetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxRibbonBar_DoGetBestSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxRibbonBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_DoGetBestSize, doc_wxRibbonBar_DoGetBestSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxRibbonBar_DoGetBestClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxRibbonBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_DoGetBestClientSize, doc_wxRibbonBar_DoGetBestClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxRibbonBar_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiii", &sipSelf, sipType_wxRibbonBar, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_DoSetSize, doc_wxRibbonBar_DoSetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxRibbonBar_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxRibbonBar, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_DoSetClientSize, doc_wxRibbonBar_DoSetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxRibbonBar_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiiii", &sipSelf, sipType_wxRibbonBar, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_DoSetSizeHints, doc_wxRibbonBar_DoSetSizeHints);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxRibbonBar_DoGetBorderSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxRibbonBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_DoGetBorderSize, doc_wxRibbonBar_DoGetBorderSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxRibbonBar_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiii", &sipSelf, sipType_wxRibbonBar, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_DoMoveWindow, doc_wxRibbonBar_DoMoveWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxRibbonBar_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE", &sipSelf, sipType_wxRibbonBar, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_DoSetWindowVariant, doc_wxRibbonBar_DoSetWindowVariant);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxRibbonBar_GetDefaultBorder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxRibbonBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_GetDefaultBorder, doc_wxRibbonBar_GetDefaultBorder);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxRibbonBar_GetDefaultBorderForControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxRibbonBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_GetDefaultBorderForControl, doc_wxRibbonBar_GetDefaultBorderForControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxRibbonBar_DoFreeze(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_DoFreeze(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxRibbonBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_DoFreeze, doc_wxRibbonBar_DoFreeze);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxRibbonBar_DoThaw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_DoThaw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxRibbonBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_DoThaw, doc_wxRibbonBar_DoThaw);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxRibbonBar_HasTransparentBackground(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxRibbonBar *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxRibbonBar, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_HasTransparentBackground, doc_wxRibbonBar_HasTransparentBackground);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxRibbonBar_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxRibbonBar, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_TryBefore, doc_wxRibbonBar_TryBefore);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxRibbonBar_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxRibbonBar *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxRibbonBar, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_TryAfter, doc_wxRibbonBar_TryAfter);

    return NULL;
}


PyDoc_STRVAR(doc_wxRibbonBar_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant: WindowVariant = wxWINDOW_VARIANT_NORMAL) -> VisualAttributes");

extern "C" {static PyObject *meth_wxRibbonBar_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRibbonBar_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxRibbonBar::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RibbonBar, sipName_GetClassDefaultAttributes, doc_wxRibbonBar_GetClassDefaultAttributes);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxRibbonBar(void *, const sipTypeDef *);}
static void *cast_wxRibbonBar(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxRibbonBar *sipCpp = reinterpret_cast< ::wxRibbonBar *>(sipCppV);

    if (targetType == sipType_wxRibbonControl)
        return static_cast< ::wxRibbonControl *>(sipCpp);

    if (targetType == sipType_wxControl)
        return static_cast< ::wxControl *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxRibbonBar(void *, int);}
static void release_wxRibbonBar(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxRibbonBar *>(sipCppV);
    else
        delete reinterpret_cast< ::wxRibbonBar *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxRibbonBar(sipSimpleWrapper *);}
static void dealloc_wxRibbonBar(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxRibbonBar *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxRibbonBar(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxRibbonBar(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxRibbonBar(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxRibbonBar *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRibbonBar();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxRIBBON_BAR_DEFAULT_STYLE;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J1l", sipType_wxWindow, &parent, sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxRibbonBar(parent,id,*pos,*size,style);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxRibbonBar[] = {{11, 255, 1}};


static PyMethodDef methods_wxRibbonBar[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxRibbonBar_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonBar_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxRibbonBar_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonBar_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxRibbonBar_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonBar_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_AddChild), (PyCFunction)meth_wxRibbonBar_AddChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_AddChild)},
    {SIP_MLNAME_CAST(sipName_AddPageHighlight), (PyCFunction)meth_wxRibbonBar_AddPageHighlight, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_AddPageHighlight)},
    {SIP_MLNAME_CAST(sipName_ArePanelsShown), meth_wxRibbonBar_ArePanelsShown, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonBar_ArePanelsShown)},
    {SIP_MLNAME_CAST(sipName_ClearPages), meth_wxRibbonBar_ClearPages, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonBar_ClearPages)},
    {SIP_MLNAME_CAST(sipName_Create), (PyCFunction)meth_wxRibbonBar_Create, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_Create)},
    {SIP_MLNAME_CAST(sipName_DeletePage), (PyCFunction)meth_wxRibbonBar_DeletePage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_DeletePage)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxRibbonBar_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonBar_Destroy)},
    {SIP_MLNAME_CAST(sipName_DismissExpandedPanel), meth_wxRibbonBar_DismissExpandedPanel, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonBar_DismissExpandedPanel)},
    {SIP_MLNAME_CAST(sipName_DoEnable), (PyCFunction)meth_wxRibbonBar_DoEnable, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), (PyCFunction)meth_wxRibbonBar_DoFreeze, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), (PyCFunction)meth_wxRibbonBar_DoGetBestClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), (PyCFunction)meth_wxRibbonBar_DoGetBestSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), (PyCFunction)meth_wxRibbonBar_DoGetBorderSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), (PyCFunction)meth_wxRibbonBar_DoGetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetNextLargerSize), (PyCFunction)meth_wxRibbonBar_DoGetNextLargerSize, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_DoGetNextSmallerSize), (PyCFunction)meth_wxRibbonBar_DoGetNextSmallerSize, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), (PyCFunction)meth_wxRibbonBar_DoGetPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), (PyCFunction)meth_wxRibbonBar_DoGetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), (PyCFunction)meth_wxRibbonBar_DoMoveWindow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), (PyCFunction)meth_wxRibbonBar_DoSetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), (PyCFunction)meth_wxRibbonBar_DoSetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), (PyCFunction)meth_wxRibbonBar_DoSetSizeHints, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), (PyCFunction)meth_wxRibbonBar_DoSetWindowVariant, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoThaw), (PyCFunction)meth_wxRibbonBar_DoThaw, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_DoThaw)},
    {SIP_MLNAME_CAST(sipName_GetActivePage), meth_wxRibbonBar_GetActivePage, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonBar_GetActivePage)},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), (PyCFunction)meth_wxRibbonBar_GetClassDefaultAttributes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxRibbonBar_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonBar_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), (PyCFunction)meth_wxRibbonBar_GetDefaultBorder, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), (PyCFunction)meth_wxRibbonBar_GetDefaultBorderForControl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxRibbonBar_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonBar_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetPage), (PyCFunction)meth_wxRibbonBar_GetPage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_GetPage)},
    {SIP_MLNAME_CAST(sipName_GetPageCount), meth_wxRibbonBar_GetPageCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonBar_GetPageCount)},
    {SIP_MLNAME_CAST(sipName_GetPageNumber), (PyCFunction)meth_wxRibbonBar_GetPageNumber, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_GetPageNumber)},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxRibbonBar_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonBar_GetValidator)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), (PyCFunction)meth_wxRibbonBar_HasTransparentBackground, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_HidePage), (PyCFunction)meth_wxRibbonBar_HidePage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_HidePage)},
    {SIP_MLNAME_CAST(sipName_HidePanels), meth_wxRibbonBar_HidePanels, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonBar_HidePanels)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), (PyCFunction)meth_wxRibbonBar_InformFirstDirection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxRibbonBar_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonBar_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxRibbonBar_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonBar_InitDialog)},
    {SIP_MLNAME_CAST(sipName_IsPageHighlighted), (PyCFunction)meth_wxRibbonBar_IsPageHighlighted, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_IsPageHighlighted)},
    {SIP_MLNAME_CAST(sipName_IsPageShown), (PyCFunction)meth_wxRibbonBar_IsPageShown, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_IsPageShown)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxRibbonBar_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonBar_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), (PyCFunction)meth_wxRibbonBar_ProcessEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_Realize), meth_wxRibbonBar_Realize, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonBar_Realize)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), (PyCFunction)meth_wxRibbonBar_RemoveChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_RemovePageHighlight), (PyCFunction)meth_wxRibbonBar_RemovePageHighlight, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_RemovePageHighlight)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), (PyCFunction)meth_wxRibbonBar_SendDestroyEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_SetActivePage), (PyCFunction)meth_wxRibbonBar_SetActivePage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_SetActivePage)},
    {SIP_MLNAME_CAST(sipName_SetArtProvider), (PyCFunction)meth_wxRibbonBar_SetArtProvider, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_SetArtProvider)},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), (PyCFunction)meth_wxRibbonBar_SetCanFocus, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetTabCtrlMargins), (PyCFunction)meth_wxRibbonBar_SetTabCtrlMargins, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_SetTabCtrlMargins)},
    {SIP_MLNAME_CAST(sipName_SetValidator), (PyCFunction)meth_wxRibbonBar_SetValidator, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_SetValidator)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxRibbonBar_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonBar_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_ShowPage), (PyCFunction)meth_wxRibbonBar_ShowPage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_ShowPage)},
    {SIP_MLNAME_CAST(sipName_ShowPanels), (PyCFunction)meth_wxRibbonBar_ShowPanels, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_ShowPanels)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxRibbonBar_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonBar_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxRibbonBar_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonBar_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), (PyCFunction)meth_wxRibbonBar_TryAfter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), (PyCFunction)meth_wxRibbonBar_TryBefore, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRibbonBar_TryBefore)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxRibbonBar_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRibbonBar_Validate)}
};

sipVariableDef variables_wxRibbonBar[] = {
    {PropertyVariable, sipName_PageCount, &methods_wxRibbonBar[34], NULL, NULL, NULL},
    {PropertyVariable, sipName_ActivePage, &methods_wxRibbonBar[27], &methods_wxRibbonBar[51], NULL, NULL},
};

PyDoc_STRVAR(doc_wxRibbonBar, "RibbonBar()\n"
"RibbonBar(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=RIBBON_BAR_DEFAULT_STYLE)\n"
"\n"
"Top-level control in a ribbon user interface.");


sipClassTypeDef sipTypeDef__ribbon_wxRibbonBar = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxRibbonBar,
        {0},
        0
    },
    {
        sipNameNr_RibbonBar,
        {0, 0, 1},
        64, methods_wxRibbonBar,
        0, 0,
        2, variables_wxRibbonBar,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxRibbonBar,
    -1,
    -1,
    supers_wxRibbonBar,
    0,
    init_type_wxRibbonBar,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxRibbonBar,
    0,
    0,
    0,
    release_wxRibbonBar,
    cast_wxRibbonBar,
    0,
    0,
    0,
    0,
    0,
    0
};
