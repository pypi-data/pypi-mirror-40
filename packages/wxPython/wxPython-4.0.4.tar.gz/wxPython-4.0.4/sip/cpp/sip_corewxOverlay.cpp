/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/overlay.h>



PyDoc_STRVAR(doc_wxOverlay_Reset, "Reset()\n"
"\n"
"Clears the overlay without restoring the former state.");

extern "C" {static PyObject *meth_wxOverlay_Reset(PyObject *, PyObject *);}
static PyObject *meth_wxOverlay_Reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxOverlay *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxOverlay, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Reset();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_Overlay, sipName_Reset, NULL);

    return NULL;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxOverlay(void *, int);}
static void release_wxOverlay(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::wxOverlay *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxOverlay(sipSimpleWrapper *);}
static void dealloc_wxOverlay(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxOverlay(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_wxOverlay(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxOverlay(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::wxOverlay *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxOverlay();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            return sipCpp;
        }
    }

    return NULL;
}


static PyMethodDef methods_wxOverlay[] = {
    {SIP_MLNAME_CAST(sipName_Reset), meth_wxOverlay_Reset, METH_VARARGS, SIP_MLDOC_CAST(doc_wxOverlay_Reset)}
};

PyDoc_STRVAR(doc_wxOverlay, "Overlay()\n"
"\n"
"Creates an overlay over an existing window, allowing for manipulations\n"
"like rubberbanding, etc.");


sipClassTypeDef sipTypeDef__core_wxOverlay = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxOverlay,
        {0},
        0
    },
    {
        sipNameNr_Overlay,
        {0, 0, 1},
        1, methods_wxOverlay,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxOverlay,
    -1,
    -1,
    0,
    0,
    init_type_wxOverlay,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxOverlay,
    0,
    0,
    0,
    release_wxOverlay,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
