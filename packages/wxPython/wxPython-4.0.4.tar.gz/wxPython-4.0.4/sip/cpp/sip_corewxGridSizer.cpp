/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/sizer.h>

        #include <wx/gdicmn.h>
        #include <wx/window.h>
        #include <wx/sizer.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/gdicmn.h>
        #include <wx/sizer.h>
        #include <wx/sizer.h>
        
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxGridSizer : public  ::wxGridSizer
{
public:
    sipwxGridSizer(int,int,int);
    sipwxGridSizer(int,const  ::wxSize&);
    sipwxGridSizer(int,int,int,int);
    sipwxGridSizer(int,int,const  ::wxSize&);
    virtual ~sipwxGridSizer();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxSize CalcMin();
    void RecalcSizes();

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxGridSizer(const sipwxGridSizer &);
    sipwxGridSizer &operator = (const sipwxGridSizer &);

    char sipPyMethods[2];
};

sipwxGridSizer::sipwxGridSizer(int cols,int vgap,int hgap):  ::wxGridSizer(cols,vgap,hgap), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxGridSizer::sipwxGridSizer(int cols,const  ::wxSize& gap):  ::wxGridSizer(cols,gap), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxGridSizer::sipwxGridSizer(int rows,int cols,int vgap,int hgap):  ::wxGridSizer(rows,cols,vgap,hgap), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxGridSizer::sipwxGridSizer(int rows,int cols,const  ::wxSize& gap):  ::wxGridSizer(rows,cols,gap), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxGridSizer::~sipwxGridSizer()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxSize sipwxGridSizer::CalcMin()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_CalcMin);

    if (!sipMeth)
        return  ::wxGridSizer::CalcMin();

    extern  ::wxSize sipVH__core_97(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_97(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxGridSizer::RecalcSizes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_RecalcSizes);

    if (!sipMeth)
    {
         ::wxGridSizer::RecalcSizes();
        return;
    }

    extern void sipVH__core_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__core_48(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxGridSizer_GetCols, "GetCols() -> int\n"
"\n"
"Returns the number of columns that has been specified for the sizer.");

extern "C" {static PyObject *meth_wxGridSizer_GetCols(PyObject *, PyObject *);}
static PyObject *meth_wxGridSizer_GetCols(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxGridSizer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridSizer, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetCols();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridSizer, sipName_GetCols, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxGridSizer_GetRows, "GetRows() -> int\n"
"\n"
"Returns the number of rows that has been specified for the sizer.");

extern "C" {static PyObject *meth_wxGridSizer_GetRows(PyObject *, PyObject *);}
static PyObject *meth_wxGridSizer_GetRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxGridSizer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridSizer, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetRows();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridSizer, sipName_GetRows, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxGridSizer_GetEffectiveColsCount, "GetEffectiveColsCount() -> int\n"
"\n"
"Returns the number of columns currently used by the sizer.");

extern "C" {static PyObject *meth_wxGridSizer_GetEffectiveColsCount(PyObject *, PyObject *);}
static PyObject *meth_wxGridSizer_GetEffectiveColsCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxGridSizer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridSizer, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetEffectiveColsCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridSizer, sipName_GetEffectiveColsCount, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxGridSizer_GetEffectiveRowsCount, "GetEffectiveRowsCount() -> int\n"
"\n"
"Returns the number of rows currently used by the sizer.");

extern "C" {static PyObject *meth_wxGridSizer_GetEffectiveRowsCount(PyObject *, PyObject *);}
static PyObject *meth_wxGridSizer_GetEffectiveRowsCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxGridSizer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridSizer, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetEffectiveRowsCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridSizer, sipName_GetEffectiveRowsCount, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxGridSizer_GetHGap, "GetHGap() -> int\n"
"\n"
"Returns the horizontal gap (in pixels) between cells in the sizer.");

extern "C" {static PyObject *meth_wxGridSizer_GetHGap(PyObject *, PyObject *);}
static PyObject *meth_wxGridSizer_GetHGap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxGridSizer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridSizer, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetHGap();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridSizer, sipName_GetHGap, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxGridSizer_GetVGap, "GetVGap() -> int\n"
"\n"
"Returns the vertical gap (in pixels) between the cells in the sizer.");

extern "C" {static PyObject *meth_wxGridSizer_GetVGap(PyObject *, PyObject *);}
static PyObject *meth_wxGridSizer_GetVGap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxGridSizer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridSizer, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetVGap();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridSizer, sipName_GetVGap, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxGridSizer_SetCols, "SetCols(cols)\n"
"\n"
"Sets the number of columns in the sizer.");

extern "C" {static PyObject *meth_wxGridSizer_SetCols(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridSizer_SetCols(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int cols;
         ::wxGridSizer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_cols,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxGridSizer, &sipCpp, &cols))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetCols(cols);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridSizer, sipName_SetCols, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxGridSizer_SetHGap, "SetHGap(gap)\n"
"\n"
"Sets the horizontal gap (in pixels) between cells in the sizer.");

extern "C" {static PyObject *meth_wxGridSizer_SetHGap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridSizer_SetHGap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int gap;
         ::wxGridSizer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_gap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxGridSizer, &sipCpp, &gap))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetHGap(gap);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridSizer, sipName_SetHGap, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxGridSizer_SetRows, "SetRows(rows)\n"
"\n"
"Sets the number of rows in the sizer.");

extern "C" {static PyObject *meth_wxGridSizer_SetRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridSizer_SetRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int rows;
         ::wxGridSizer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_rows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxGridSizer, &sipCpp, &rows))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetRows(rows);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridSizer, sipName_SetRows, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxGridSizer_SetVGap, "SetVGap(gap)\n"
"\n"
"Sets the vertical gap (in pixels) between the cells in the sizer.");

extern "C" {static PyObject *meth_wxGridSizer_SetVGap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridSizer_SetVGap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int gap;
         ::wxGridSizer *sipCpp;

        static const char *sipKwdList[] = {
            sipName_gap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxGridSizer, &sipCpp, &gap))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetVGap(gap);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridSizer, sipName_SetVGap, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxGridSizer_CalcMin, "CalcMin() -> Size\n"
"\n"
"This method is abstract and has to be overwritten by any derived\n"
"class.");

extern "C" {static PyObject *meth_wxGridSizer_CalcMin(PyObject *, PyObject *);}
static PyObject *meth_wxGridSizer_CalcMin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxGridSizer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridSizer, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize((sipSelfWasArg ? sipCpp-> ::wxGridSizer::CalcMin() : sipCpp->CalcMin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridSizer, sipName_CalcMin, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxGridSizer_RecalcSizes, "RecalcSizes()\n"
"\n"
"This method is abstract and has to be overwritten by any derived\n"
"class.");

extern "C" {static PyObject *meth_wxGridSizer_RecalcSizes(PyObject *, PyObject *);}
static PyObject *meth_wxGridSizer_RecalcSizes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxGridSizer *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridSizer, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxGridSizer::RecalcSizes() : sipCpp->RecalcSizes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridSizer, sipName_RecalcSizes, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxGridSizer(void *, const sipTypeDef *);}
static void *cast_wxGridSizer(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxGridSizer *sipCpp = reinterpret_cast< ::wxGridSizer *>(sipCppV);

    if (targetType == sipType_wxSizer)
        return static_cast< ::wxSizer *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxGridSizer(void *, int);}
static void release_wxGridSizer(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxGridSizer *>(sipCppV);
    else
        delete reinterpret_cast< ::wxGridSizer *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxGridSizer(sipSimpleWrapper *);}
static void dealloc_wxGridSizer(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxGridSizer *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxGridSizer(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxGridSizer(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxGridSizer(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxGridSizer *sipCpp = 0;

    {
        int cols;
        int vgap;
        int hgap;

        static const char *sipKwdList[] = {
            sipName_cols,
            sipName_vgap,
            sipName_hgap,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "iii", &cols, &vgap, &hgap))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxGridSizer(cols,vgap,hgap);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int cols;
        const  ::wxSize& gapdef = wxSize(0,0);
        const  ::wxSize* gap = &gapdef;
        int gapState = 0;

        static const char *sipKwdList[] = {
            sipName_cols,
            sipName_gap,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "i|J1", &cols, sipType_wxSize, &gap, &gapState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxGridSizer(cols,*gap);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxSize *>(gap),sipType_wxSize,gapState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int rows;
        int cols;
        int vgap;
        int hgap;

        static const char *sipKwdList[] = {
            sipName_rows,
            sipName_cols,
            sipName_vgap,
            sipName_hgap,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "iiii", &rows, &cols, &vgap, &hgap))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxGridSizer(rows,cols,vgap,hgap);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int rows;
        int cols;
        const  ::wxSize* gap;
        int gapState = 0;

        static const char *sipKwdList[] = {
            sipName_rows,
            sipName_cols,
            sipName_gap,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "iiJ1", &rows, &cols, sipType_wxSize, &gap, &gapState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxGridSizer(rows,cols,*gap);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxSize *>(gap),sipType_wxSize,gapState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxGridSizer[] = {{464, 255, 1}};


static PyMethodDef methods_wxGridSizer[] = {
    {SIP_MLNAME_CAST(sipName_CalcMin), meth_wxGridSizer_CalcMin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridSizer_CalcMin)},
    {SIP_MLNAME_CAST(sipName_GetCols), meth_wxGridSizer_GetCols, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridSizer_GetCols)},
    {SIP_MLNAME_CAST(sipName_GetEffectiveColsCount), meth_wxGridSizer_GetEffectiveColsCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridSizer_GetEffectiveColsCount)},
    {SIP_MLNAME_CAST(sipName_GetEffectiveRowsCount), meth_wxGridSizer_GetEffectiveRowsCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridSizer_GetEffectiveRowsCount)},
    {SIP_MLNAME_CAST(sipName_GetHGap), meth_wxGridSizer_GetHGap, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridSizer_GetHGap)},
    {SIP_MLNAME_CAST(sipName_GetRows), meth_wxGridSizer_GetRows, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridSizer_GetRows)},
    {SIP_MLNAME_CAST(sipName_GetVGap), meth_wxGridSizer_GetVGap, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridSizer_GetVGap)},
    {SIP_MLNAME_CAST(sipName_RecalcSizes), meth_wxGridSizer_RecalcSizes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridSizer_RecalcSizes)},
    {SIP_MLNAME_CAST(sipName_SetCols), (PyCFunction)meth_wxGridSizer_SetCols, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridSizer_SetCols)},
    {SIP_MLNAME_CAST(sipName_SetHGap), (PyCFunction)meth_wxGridSizer_SetHGap, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridSizer_SetHGap)},
    {SIP_MLNAME_CAST(sipName_SetRows), (PyCFunction)meth_wxGridSizer_SetRows, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridSizer_SetRows)},
    {SIP_MLNAME_CAST(sipName_SetVGap), (PyCFunction)meth_wxGridSizer_SetVGap, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridSizer_SetVGap)}
};

sipVariableDef variables_wxGridSizer[] = {
    {PropertyVariable, sipName_VGap, &methods_wxGridSizer[6], &methods_wxGridSizer[11], NULL, NULL},
    {PropertyVariable, sipName_Rows, &methods_wxGridSizer[5], &methods_wxGridSizer[10], NULL, NULL},
    {PropertyVariable, sipName_HGap, &methods_wxGridSizer[4], &methods_wxGridSizer[9], NULL, NULL},
    {PropertyVariable, sipName_EffectiveRowsCount, &methods_wxGridSizer[3], NULL, NULL, NULL},
    {PropertyVariable, sipName_EffectiveColsCount, &methods_wxGridSizer[2], NULL, NULL, NULL},
    {PropertyVariable, sipName_Cols, &methods_wxGridSizer[1], &methods_wxGridSizer[8], NULL, NULL},
};

PyDoc_STRVAR(doc_wxGridSizer, "GridSizer(cols, vgap, hgap)\n"
"GridSizer(cols, gap=Size(0,0))\n"
"GridSizer(rows, cols, vgap, hgap)\n"
"GridSizer(rows, cols, gap)\n"
"\n"
"A grid sizer is a sizer which lays out its children in a two-\n"
"dimensional table with all table fields having the same size, i.e.");


sipClassTypeDef sipTypeDef__core_wxGridSizer = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxGridSizer,
        {0},
        0
    },
    {
        sipNameNr_GridSizer,
        {0, 0, 1},
        12, methods_wxGridSizer,
        0, 0,
        6, variables_wxGridSizer,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxGridSizer,
    -1,
    -1,
    supers_wxGridSizer,
    0,
    init_type_wxGridSizer,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxGridSizer,
    0,
    0,
    0,
    release_wxGridSizer,
    cast_wxGridSizer,
    0,
    0,
    0,
    0,
    0,
    0
};
