/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_richtext.h"

        #include <wx/richtext/richtextbuffer.h>

        #include <wx/richtext/richtextbuffer.h>
    int _wxTextAttrSize___nonzero__(wxTextAttrSize* self)
    {
        return self->IsValid();
    }
    int _wxTextAttrSize___bool__(wxTextAttrSize* self)
    {
        return self->IsValid();
    }


PyDoc_STRVAR(doc_wxTextAttrSize_Reset, "Reset()\n"
"\n"
"Resets the width and height dimensions.");

extern "C" {static PyObject *meth_wxTextAttrSize_Reset(PyObject *, PyObject *);}
static PyObject *meth_wxTextAttrSize_Reset(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTextAttrSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTextAttrSize, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Reset();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TextAttrSize, sipName_Reset, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTextAttrSize_EqPartial, "EqPartial(size, weakTest=True) -> bool\n"
"\n"
"Partial equality test.");

extern "C" {static PyObject *meth_wxTextAttrSize_EqPartial(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTextAttrSize_EqPartial(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxTextAttrSize* size;
        bool weakTest = 1;
        const  ::wxTextAttrSize *sipCpp;

        static const char *sipKwdList[] = {
            sipName_size,
            sipName_weakTest,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|b", &sipSelf, sipType_wxTextAttrSize, &sipCpp, sipType_wxTextAttrSize, &size, &weakTest))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->EqPartial(*size,weakTest);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TextAttrSize, sipName_EqPartial, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTextAttrSize_Apply, "Apply(dims, compareWith=None) -> bool\n"
"\n"
"Apply to this object, but not if the same as compareWith.");

extern "C" {static PyObject *meth_wxTextAttrSize_Apply(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTextAttrSize_Apply(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxTextAttrSize* dims;
        const  ::wxTextAttrSize* compareWith = 0;
         ::wxTextAttrSize *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dims,
            sipName_compareWith,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|J8", &sipSelf, sipType_wxTextAttrSize, &sipCpp, sipType_wxTextAttrSize, &dims, sipType_wxTextAttrSize, &compareWith))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Apply(*dims,compareWith);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TextAttrSize, sipName_Apply, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTextAttrSize_CollectCommonAttributes, "CollectCommonAttributes(attr, clashingAttr, absentAttr)\n"
"\n"
"Collects the attributes that are common to a range of content,\n"
"building up a note of which attributes are absent in some objects and\n"
"which clash in some objects.");

extern "C" {static PyObject *meth_wxTextAttrSize_CollectCommonAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTextAttrSize_CollectCommonAttributes(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxTextAttrSize* attr;
         ::wxTextAttrSize* clashingAttr;
         ::wxTextAttrSize* absentAttr;
         ::wxTextAttrSize *sipCpp;

        static const char *sipKwdList[] = {
            sipName_attr,
            sipName_clashingAttr,
            sipName_absentAttr,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9J9", &sipSelf, sipType_wxTextAttrSize, &sipCpp, sipType_wxTextAttrSize, &attr, sipType_wxTextAttrSize, &clashingAttr, sipType_wxTextAttrSize, &absentAttr))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->CollectCommonAttributes(*attr,*clashingAttr,*absentAttr);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TextAttrSize, sipName_CollectCommonAttributes, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTextAttrSize_RemoveStyle, "RemoveStyle(attr) -> bool\n"
"\n"
"Removes the specified attributes from this object.");

extern "C" {static PyObject *meth_wxTextAttrSize_RemoveStyle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTextAttrSize_RemoveStyle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxTextAttrSize* attr;
         ::wxTextAttrSize *sipCpp;

        static const char *sipKwdList[] = {
            sipName_attr,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTextAttrSize, &sipCpp, sipType_wxTextAttrSize, &attr))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->RemoveStyle(*attr);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TextAttrSize, sipName_RemoveStyle, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTextAttrSize_GetWidth, "GetWidth() -> TextAttrDimension\n"
"\n"
"Returns the width.");

extern "C" {static PyObject *meth_wxTextAttrSize_GetWidth(PyObject *, PyObject *);}
static PyObject *meth_wxTextAttrSize_GetWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTextAttrSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTextAttrSize, &sipCpp))
        {
             ::wxTextAttrDimension*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->GetWidth();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxTextAttrDimension,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TextAttrSize, sipName_GetWidth, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTextAttrSize_SetWidth, "SetWidth(value, flags)\n"
"SetWidth(dim)\n"
"\n"
"Sets the width.\n"
"");

extern "C" {static PyObject *meth_wxTextAttrSize_SetWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTextAttrSize_SetWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int value;
         ::wxTextAttrDimensionFlags flags;
         ::wxTextAttrSize *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bit", &sipSelf, sipType_wxTextAttrSize, &sipCpp, &value, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetWidth(value,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::wxTextAttrDimension* dim;
         ::wxTextAttrSize *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dim,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTextAttrSize, &sipCpp, sipType_wxTextAttrDimension, &dim))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetWidth(*dim);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TextAttrSize, sipName_SetWidth, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTextAttrSize_GetHeight, "GetHeight() -> TextAttrDimension\n"
"\n"
"Gets the height.");

extern "C" {static PyObject *meth_wxTextAttrSize_GetHeight(PyObject *, PyObject *);}
static PyObject *meth_wxTextAttrSize_GetHeight(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTextAttrSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTextAttrSize, &sipCpp))
        {
             ::wxTextAttrDimension*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = &sipCpp->GetHeight();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxTextAttrDimension,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TextAttrSize, sipName_GetHeight, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTextAttrSize_SetHeight, "SetHeight(value, flags)\n"
"SetHeight(dim)\n"
"\n"
"Sets the height.\n"
"");

extern "C" {static PyObject *meth_wxTextAttrSize_SetHeight(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTextAttrSize_SetHeight(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        int value;
         ::wxTextAttrDimensionFlags flags;
         ::wxTextAttrSize *sipCpp;

        static const char *sipKwdList[] = {
            sipName_value,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bit", &sipSelf, sipType_wxTextAttrSize, &sipCpp, &value, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetHeight(value,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
        const  ::wxTextAttrDimension* dim;
         ::wxTextAttrSize *sipCpp;

        static const char *sipKwdList[] = {
            sipName_dim,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTextAttrSize, &sipCpp, sipType_wxTextAttrDimension, &dim))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetHeight(*dim);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TextAttrSize, sipName_SetHeight, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTextAttrSize_IsValid, "IsValid() -> bool\n"
"\n"
"Is the size valid?");

extern "C" {static PyObject *meth_wxTextAttrSize_IsValid(PyObject *, PyObject *);}
static PyObject *meth_wxTextAttrSize_IsValid(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxTextAttrSize *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTextAttrSize, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsValid();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TextAttrSize, sipName_IsValid, NULL);

    return NULL;
}


extern "C" {static PyObject *slot_wxTextAttrSize___ne__(PyObject *,PyObject *);}
static PyObject *slot_wxTextAttrSize___ne__(PyObject *sipSelf,PyObject *sipArg)
{
     ::wxTextAttrSize *sipCpp = reinterpret_cast< ::wxTextAttrSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxTextAttrSize));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::wxTextAttrSize* size;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_wxTextAttrSize, &size))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = !sipCpp-> ::wxTextAttrSize::operator==(*size);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__richtext, ne_slot, sipType_wxTextAttrSize, sipSelf, sipArg);
}


extern "C" {static int slot_wxTextAttrSize___bool__(PyObject *);}
static int slot_wxTextAttrSize___bool__(PyObject *sipSelf)
{
     ::wxTextAttrSize *sipCpp = reinterpret_cast< ::wxTextAttrSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxTextAttrSize));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;
            int sipIsErr = 0;

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTextAttrSize___bool__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return -1;

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static int slot_wxTextAttrSize___nonzero__(PyObject *);}
static int slot_wxTextAttrSize___nonzero__(PyObject *sipSelf)
{
     ::wxTextAttrSize *sipCpp = reinterpret_cast< ::wxTextAttrSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxTextAttrSize));

    if (!sipCpp)
        return -1;


    {
        {
            int sipRes = 0;
            int sipIsErr = 0;

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTextAttrSize___nonzero__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return -1;

            return sipRes;
        }
    }

    return 0;
}


extern "C" {static PyObject *slot_wxTextAttrSize___eq__(PyObject *,PyObject *);}
static PyObject *slot_wxTextAttrSize___eq__(PyObject *sipSelf,PyObject *sipArg)
{
     ::wxTextAttrSize *sipCpp = reinterpret_cast< ::wxTextAttrSize *>(sipGetCppPtr((sipSimpleWrapper *)sipSelf,sipType_wxTextAttrSize));

    if (!sipCpp)
        return 0;

    PyObject *sipParseErr = NULL;

    {
        const  ::wxTextAttrSize* size;

        if (sipParseArgs(&sipParseErr, sipArg, "1J9", sipType_wxTextAttrSize, &size))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp-> ::wxTextAttrSize::operator==(*size);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    Py_XDECREF(sipParseErr);

    if (sipParseErr == Py_None)
        return NULL;

    return sipPySlotExtend(&sipModuleAPI__richtext, eq_slot, sipType_wxTextAttrSize, sipSelf, sipArg);
}


/* Call the instance's destructor. */
extern "C" {static void release_wxTextAttrSize(void *, int);}
static void release_wxTextAttrSize(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::wxTextAttrSize *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_wxTextAttrSize(void *, SIP_SSIZE_T, void *);}
static void assign_wxTextAttrSize(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxTextAttrSize *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxTextAttrSize *>(sipSrc);
}


extern "C" {static void *array_wxTextAttrSize(SIP_SSIZE_T);}
static void *array_wxTextAttrSize(SIP_SSIZE_T sipNrElem)
{
    return new  ::wxTextAttrSize[sipNrElem];
}


extern "C" {static void *copy_wxTextAttrSize(const void *, SIP_SSIZE_T);}
static void *copy_wxTextAttrSize(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxTextAttrSize(reinterpret_cast<const  ::wxTextAttrSize *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxTextAttrSize(sipSimpleWrapper *);}
static void dealloc_wxTextAttrSize(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxTextAttrSize(sipGetAddress(sipSelf), 0);
    }
}


extern "C" {static void *init_type_wxTextAttrSize(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxTextAttrSize(sipSimpleWrapper *, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
     ::wxTextAttrSize *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxTextAttrSize();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            return sipCpp;
        }
    }

    {
        const  ::wxTextAttrSize* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxTextAttrSize, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new  ::wxTextAttrSize(*a0);
            Py_END_ALLOW_THREADS

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's Python slots. */
static sipPySlotDef slots_wxTextAttrSize[] = {
    {(void *)slot_wxTextAttrSize___ne__, ne_slot},
    {(void *)slot_wxTextAttrSize___bool__, bool_slot},
    {(void *)slot_wxTextAttrSize___nonzero__, bool_slot},
    {(void *)slot_wxTextAttrSize___eq__, eq_slot},
    {0, (sipPySlotType)0}
};


static PyMethodDef methods_wxTextAttrSize[] = {
    {SIP_MLNAME_CAST(sipName_Apply), (PyCFunction)meth_wxTextAttrSize_Apply, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTextAttrSize_Apply)},
    {SIP_MLNAME_CAST(sipName_CollectCommonAttributes), (PyCFunction)meth_wxTextAttrSize_CollectCommonAttributes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTextAttrSize_CollectCommonAttributes)},
    {SIP_MLNAME_CAST(sipName_EqPartial), (PyCFunction)meth_wxTextAttrSize_EqPartial, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTextAttrSize_EqPartial)},
    {SIP_MLNAME_CAST(sipName_GetHeight), meth_wxTextAttrSize_GetHeight, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTextAttrSize_GetHeight)},
    {SIP_MLNAME_CAST(sipName_GetWidth), meth_wxTextAttrSize_GetWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTextAttrSize_GetWidth)},
    {SIP_MLNAME_CAST(sipName_IsValid), meth_wxTextAttrSize_IsValid, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTextAttrSize_IsValid)},
    {SIP_MLNAME_CAST(sipName_RemoveStyle), (PyCFunction)meth_wxTextAttrSize_RemoveStyle, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTextAttrSize_RemoveStyle)},
    {SIP_MLNAME_CAST(sipName_Reset), meth_wxTextAttrSize_Reset, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTextAttrSize_Reset)},
    {SIP_MLNAME_CAST(sipName_SetHeight), (PyCFunction)meth_wxTextAttrSize_SetHeight, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTextAttrSize_SetHeight)},
    {SIP_MLNAME_CAST(sipName_SetWidth), (PyCFunction)meth_wxTextAttrSize_SetWidth, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTextAttrSize_SetWidth)}
};


extern "C" {static PyObject *varget_wxTextAttrSize_m_height(void *, PyObject *, PyObject *);}
static PyObject *varget_wxTextAttrSize_m_height(void *sipSelf, PyObject *, PyObject *)
{
     ::wxTextAttrDimension*sipVal;
     ::wxTextAttrSize *sipCpp = reinterpret_cast< ::wxTextAttrSize *>(sipSelf);

    sipVal = &sipCpp->m_height;

    return sipConvertFromType(sipVal, sipType_wxTextAttrDimension, NULL);
}


extern "C" {static int varset_wxTextAttrSize_m_height(void *, PyObject *, PyObject *);}
static int varset_wxTextAttrSize_m_height(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::wxTextAttrDimension*sipVal;
     ::wxTextAttrSize *sipCpp = reinterpret_cast< ::wxTextAttrSize *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::wxTextAttrDimension *>(sipForceConvertToType(sipPy,sipType_wxTextAttrDimension,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->m_height = *sipVal;

    return 0;
}


extern "C" {static PyObject *varget_wxTextAttrSize_m_width(void *, PyObject *, PyObject *);}
static PyObject *varget_wxTextAttrSize_m_width(void *sipSelf, PyObject *, PyObject *)
{
     ::wxTextAttrDimension*sipVal;
     ::wxTextAttrSize *sipCpp = reinterpret_cast< ::wxTextAttrSize *>(sipSelf);

    sipVal = &sipCpp->m_width;

    return sipConvertFromType(sipVal, sipType_wxTextAttrDimension, NULL);
}


extern "C" {static int varset_wxTextAttrSize_m_width(void *, PyObject *, PyObject *);}
static int varset_wxTextAttrSize_m_width(void *sipSelf, PyObject *sipPy, PyObject *)
{
     ::wxTextAttrDimension*sipVal;
     ::wxTextAttrSize *sipCpp = reinterpret_cast< ::wxTextAttrSize *>(sipSelf);

    int sipIsErr = 0;

    sipVal = reinterpret_cast< ::wxTextAttrDimension *>(sipForceConvertToType(sipPy,sipType_wxTextAttrDimension,NULL,SIP_NOT_NONE,NULL,&sipIsErr));

    if (sipIsErr)
        return -1;

    sipCpp->m_width = *sipVal;

    return 0;
}

sipVariableDef variables_wxTextAttrSize[] = {
    {PropertyVariable, sipName_Width, &methods_wxTextAttrSize[4], &methods_wxTextAttrSize[9], NULL, NULL},
    {PropertyVariable, sipName_Height, &methods_wxTextAttrSize[3], &methods_wxTextAttrSize[8], NULL, NULL},
    {InstanceVariable, sipName_m_height, (PyMethodDef *)varget_wxTextAttrSize_m_height, (PyMethodDef *)varset_wxTextAttrSize_m_height, NULL, NULL},
    {InstanceVariable, sipName_m_width, (PyMethodDef *)varget_wxTextAttrSize_m_width, (PyMethodDef *)varset_wxTextAttrSize_m_width, NULL, NULL},
};

PyDoc_STRVAR(doc_wxTextAttrSize, "TextAttrSize()\n"
"\n"
"A class for representing width and height.");


sipClassTypeDef sipTypeDef__richtext_wxTextAttrSize = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxTextAttrSize,
        {0},
        0
    },
    {
        sipNameNr_TextAttrSize,
        {0, 0, 1},
        10, methods_wxTextAttrSize,
        0, 0,
        4, variables_wxTextAttrSize,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxTextAttrSize,
    -1,
    -1,
    0,
    slots_wxTextAttrSize,
    init_type_wxTextAttrSize,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxTextAttrSize,
    assign_wxTextAttrSize,
    array_wxTextAttrSize,
    copy_wxTextAttrSize,
    release_wxTextAttrSize,
    0,
    0,
    0,
    0,
    0,
    0,
    0
};
