/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/event.h>

        #include <wx/event.h>
        #include <wx/window.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxFocusEvent : public  ::wxFocusEvent
{
public:
    sipwxFocusEvent( ::wxEventType,int);
    sipwxFocusEvent(const  ::wxFocusEvent&);
    virtual ~sipwxFocusEvent();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
     ::wxEvent* Clone() const;
     ::wxEventCategory GetEventCategory() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxFocusEvent(const sipwxFocusEvent &);
    sipwxFocusEvent &operator = (const sipwxFocusEvent &);

    char sipPyMethods[2];
};

sipwxFocusEvent::sipwxFocusEvent( ::wxEventType eventType,int id):  ::wxFocusEvent(eventType,id), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxFocusEvent::sipwxFocusEvent(const  ::wxFocusEvent& a0):  ::wxFocusEvent(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxFocusEvent::~sipwxFocusEvent()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

 ::wxEvent* sipwxFocusEvent::Clone() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_Clone);

    if (!sipMeth)
        return  ::wxFocusEvent::Clone();

    extern  ::wxEvent* sipVH__core_95(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_95(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxEventCategory sipwxFocusEvent::GetEventCategory() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_GetEventCategory);

    if (!sipMeth)
        return  ::wxFocusEvent::GetEventCategory();

    extern  ::wxEventCategory sipVH__core_96(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_96(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxFocusEvent_GetWindow, "GetWindow() -> Window\n"
"\n"
"Returns the window associated with this event, that is the window\n"
"which had the focus before for the wxEVT_SET_FOCUS event and the\n"
"window which is going to receive focus for the wxEVT_KILL_FOCUS one.");

extern "C" {static PyObject *meth_wxFocusEvent_GetWindow(PyObject *, PyObject *);}
static PyObject *meth_wxFocusEvent_GetWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxFocusEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFocusEvent, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetWindow();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FocusEvent, sipName_GetWindow, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFocusEvent_SetWindow, "SetWindow(win)");

extern "C" {static PyObject *meth_wxFocusEvent_SetWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxFocusEvent_SetWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* win;
         ::wxFocusEvent *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxFocusEvent, &sipCpp, sipType_wxWindow, &win))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetWindow(win);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FocusEvent, sipName_SetWindow, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxFocusEvent_Clone, "Clone(self) -> Event");

extern "C" {static PyObject *meth_wxFocusEvent_Clone(PyObject *, PyObject *);}
static PyObject *meth_wxFocusEvent_Clone(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxFocusEvent *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxFocusEvent, &sipCpp))
        {
             ::wxEvent*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxFocusEvent::Clone() : sipCpp->Clone());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxEvent,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_FocusEvent, sipName_Clone, doc_wxFocusEvent_Clone);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxFocusEvent(void *, const sipTypeDef *);}
static void *cast_wxFocusEvent(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxFocusEvent *sipCpp = reinterpret_cast< ::wxFocusEvent *>(sipCppV);

    if (targetType == sipType_wxEvent)
        return static_cast< ::wxEvent *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxFocusEvent(void *, int);}
static void release_wxFocusEvent(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxFocusEvent *>(sipCppV);
    else
        delete reinterpret_cast< ::wxFocusEvent *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxFocusEvent(sipSimpleWrapper *);}
static void dealloc_wxFocusEvent(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxFocusEvent *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxFocusEvent(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxFocusEvent(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxFocusEvent(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxFocusEvent *sipCpp = 0;

    {
         ::wxEventType eventType = wxEVT_NULL;
        int id = 0;

        static const char *sipKwdList[] = {
            sipName_eventType,
            sipName_id,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "|ii", &eventType, &id))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxFocusEvent(eventType,id);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxFocusEvent* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxFocusEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxFocusEvent(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxFocusEvent[] = {{141, 255, 1}};


static PyMethodDef methods_wxFocusEvent[] = {
    {SIP_MLNAME_CAST(sipName_Clone), meth_wxFocusEvent_Clone, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFocusEvent_Clone)},
    {SIP_MLNAME_CAST(sipName_GetWindow), meth_wxFocusEvent_GetWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxFocusEvent_GetWindow)},
    {SIP_MLNAME_CAST(sipName_SetWindow), (PyCFunction)meth_wxFocusEvent_SetWindow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxFocusEvent_SetWindow)}
};

sipVariableDef variables_wxFocusEvent[] = {
    {PropertyVariable, sipName_Window, &methods_wxFocusEvent[1], &methods_wxFocusEvent[2], NULL, NULL},
};

PyDoc_STRVAR(doc_wxFocusEvent, "FocusEvent(eventType=wxEVT_NULL, id=0)\n"
"\n"
"A focus event is sent when a window's focus changes.");


sipClassTypeDef sipTypeDef__core_wxFocusEvent = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxFocusEvent,
        {0},
        0
    },
    {
        sipNameNr_FocusEvent,
        {0, 0, 1},
        3, methods_wxFocusEvent,
        0, 0,
        1, variables_wxFocusEvent,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxFocusEvent,
    -1,
    -1,
    supers_wxFocusEvent,
    0,
    init_type_wxFocusEvent,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxFocusEvent,
    0,
    0,
    0,
    release_wxFocusEvent,
    cast_wxFocusEvent,
    0,
    0,
    0,
    0,
    0,
    0
};
