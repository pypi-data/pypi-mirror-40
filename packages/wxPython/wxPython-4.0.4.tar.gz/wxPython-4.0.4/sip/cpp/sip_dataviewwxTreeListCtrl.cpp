/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_dataview.h"

        #include <wx/treelist.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/window.h>
        #include <wx/event.h>
        #include <wx/validate.h>
        #include <wx/dataview.h>
        #include <wx/treelist.h>
        #include <wx/treelist.h>
        #include <wx/imaglist.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/menu.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        #include <wx/region.h>
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>
    PyObject* _wxTreeListCtrl_GetSelections(wxTreeListCtrl* self)
    {
        unsigned count;
        wxTreeListItems items;
        count = self->GetSelections(items);
        
        wxPyThreadBlocker blocker;
        PyObject* list = PyList_New(count);
        for (size_t i=0; i<count; i++) {
            wxTreeListItem* item = new wxTreeListItem(items[i]);
            PyObject* obj = wxPyConstructObject((void*)item, wxT("wxTreeListItem"), true);
            PyList_SET_ITEM(list, i, obj); // PyList_SET_ITEM steals a reference
        }
        return list;
    }


class sipwxTreeListCtrl : public  ::wxTreeListCtrl
{
public:
    sipwxTreeListCtrl();
    sipwxTreeListCtrl( ::wxWindow*, ::wxWindowID,const  ::wxPoint&,const  ::wxSize&,long,const  ::wxString&);
    virtual ~sipwxTreeListCtrl();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void RemoveChild( ::wxWindowBase*);
    void AddChild( ::wxWindowBase*);
    bool ProcessEvent( ::wxEvent&);
    bool TryBefore( ::wxEvent&);
    bool TryAfter( ::wxEvent&);
    bool AcceptsFocus() const;
    bool AcceptsFocusFromKeyboard() const;
    bool AcceptsFocusRecursively() const;
    void SetCanFocus(bool);
    bool InformFirstDirection(int,int,int);
     ::wxPoint GetClientAreaOrigin() const;
    bool HasTransparentBackground();
    bool ShouldInheritColours() const;
     ::wxValidator* GetValidator();
    void SetValidator(const  ::wxValidator&);
    bool TransferDataFromWindow();
    bool TransferDataToWindow();
    bool Validate();
    bool Destroy();
    void InheritAttributes();
    void InitDialog();
    void OnInternalIdle();
     ::wxWindow* GetMainWindowOfCompositeControl();
    void DoEnable(bool);
    void DoGetPosition(int*,int*) const;
    void DoGetSize(int*,int*) const;
    void DoGetClientSize(int*,int*) const;
    void DoSetSize(int,int,int,int,int);
    void DoSetClientSize(int,int);
    void DoSetSizeHints(int,int,int,int,int,int);
     ::wxSize DoGetBorderSize() const;
    void DoMoveWindow(int,int,int,int);
    void DoSetWindowVariant( ::wxWindowVariant);
     ::wxBorder GetDefaultBorder() const;
     ::wxBorder GetDefaultBorderForControl() const;
    void DoFreeze();
    void DoThaw();
     ::wxSize DoGetBestSize() const;
     ::wxSize DoGetBestClientSize() const;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxTreeListCtrl(const sipwxTreeListCtrl &);
    sipwxTreeListCtrl &operator = (const sipwxTreeListCtrl &);

    char sipPyMethods[39];
};

sipwxTreeListCtrl::sipwxTreeListCtrl():  ::wxTreeListCtrl(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxTreeListCtrl::sipwxTreeListCtrl( ::wxWindow*parent, ::wxWindowID id,const  ::wxPoint& pos,const  ::wxSize& size,long style,const  ::wxString& name):  ::wxTreeListCtrl(parent,id,pos,size,style,name), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxTreeListCtrl::~sipwxTreeListCtrl()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

void sipwxTreeListCtrl::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxTreeListCtrl::RemoveChild(child);
        return;
    }

    extern void sipVH__dataview_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__dataview_43(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxTreeListCtrl::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxTreeListCtrl::AddChild(child);
        return;
    }

    extern void sipVH__dataview_43(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__dataview_43(sipGILState, 0, sipPySelf, sipMeth, child);
}

bool sipwxTreeListCtrl::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxTreeListCtrl::ProcessEvent(event);

    extern bool sipVH__dataview_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__dataview_44(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxTreeListCtrl::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxTreeListCtrl::TryBefore(event);

    extern bool sipVH__dataview_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__dataview_44(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxTreeListCtrl::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxTreeListCtrl::TryAfter(event);

    extern bool sipVH__dataview_44(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__dataview_44(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxTreeListCtrl::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxTreeListCtrl::AcceptsFocus();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxTreeListCtrl::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxTreeListCtrl::AcceptsFocusFromKeyboard();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxTreeListCtrl::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxTreeListCtrl::AcceptsFocusRecursively();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxTreeListCtrl::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxTreeListCtrl::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__dataview_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__dataview_36(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

bool sipwxTreeListCtrl::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,NULL,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxTreeListCtrl::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__dataview_45(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__dataview_45(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

 ::wxPoint sipwxTreeListCtrl::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxTreeListCtrl::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__dataview_46(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_46(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxTreeListCtrl::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxTreeListCtrl::HasTransparentBackground();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxTreeListCtrl::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[12]),sipPySelf,NULL,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxTreeListCtrl::ShouldInheritColours();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxValidator* sipwxTreeListCtrl::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxTreeListCtrl::GetValidator();

    extern  ::wxValidator* sipVH__dataview_47(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_47(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxTreeListCtrl::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxTreeListCtrl::SetValidator(validator);
        return;
    }

    extern void sipVH__dataview_48(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__dataview_48(sipGILState, 0, sipPySelf, sipMeth, validator);
}

bool sipwxTreeListCtrl::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxTreeListCtrl::TransferDataFromWindow();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxTreeListCtrl::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxTreeListCtrl::TransferDataToWindow();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxTreeListCtrl::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_Validate);

    if (!sipMeth)
        return  ::wxTreeListCtrl::Validate();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxTreeListCtrl::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_Destroy);

    if (!sipMeth)
        return  ::wxTreeListCtrl::Destroy();

    extern bool sipVH__dataview_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_0(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxTreeListCtrl::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxTreeListCtrl::InheritAttributes();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxTreeListCtrl::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxTreeListCtrl::InitDialog();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxTreeListCtrl::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxTreeListCtrl::OnInternalIdle();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxWindow* sipwxTreeListCtrl::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxTreeListCtrl::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__dataview_49(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_49(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxTreeListCtrl::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxTreeListCtrl::DoEnable(enable);
        return;
    }

    extern void sipVH__dataview_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__dataview_36(sipGILState, 0, sipPySelf, sipMeth, enable);
}

void sipwxTreeListCtrl::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[24]),sipPySelf,NULL,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxTreeListCtrl::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__dataview_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__dataview_50(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxTreeListCtrl::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[25]),sipPySelf,NULL,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxTreeListCtrl::DoGetSize(width,height);
        return;
    }

    extern void sipVH__dataview_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__dataview_50(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxTreeListCtrl::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[26]),sipPySelf,NULL,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxTreeListCtrl::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__dataview_50(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__dataview_50(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxTreeListCtrl::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,NULL,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxTreeListCtrl::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__dataview_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__dataview_51(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxTreeListCtrl::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxTreeListCtrl::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__dataview_52(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__dataview_52(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxTreeListCtrl::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,NULL,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxTreeListCtrl::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__dataview_53(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__dataview_53(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

 ::wxSize sipwxTreeListCtrl::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,NULL,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxTreeListCtrl::DoGetBorderSize();

    extern  ::wxSize sipVH__dataview_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_31(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxTreeListCtrl::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxTreeListCtrl::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__dataview_54(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__dataview_54(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

void sipwxTreeListCtrl::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[32],sipPySelf,NULL,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxTreeListCtrl::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__dataview_55(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__dataview_55(sipGILState, 0, sipPySelf, sipMeth, variant);
}

 ::wxBorder sipwxTreeListCtrl::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxTreeListCtrl::GetDefaultBorder();

    extern  ::wxBorder sipVH__dataview_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_56(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxTreeListCtrl::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxTreeListCtrl::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__dataview_56(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_56(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxTreeListCtrl::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxTreeListCtrl::DoFreeze();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxTreeListCtrl::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxTreeListCtrl::DoThaw();
        return;
    }

    extern void sipVH__dataview_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__dataview_5(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxTreeListCtrl::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[37]),sipPySelf,NULL,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxTreeListCtrl::DoGetBestSize();

    extern  ::wxSize sipVH__dataview_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_31(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxTreeListCtrl::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[38]),sipPySelf,NULL,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxTreeListCtrl::DoGetBestClientSize();

    extern  ::wxSize sipVH__dataview_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__dataview_31(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxTreeListCtrl::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sipwxTreeListCtrl::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxTreeListCtrl::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxTreeListCtrl::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxTreeListCtrl::DoEnable(enable) : DoEnable(enable));
}

void sipwxTreeListCtrl::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxTreeListCtrl::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxTreeListCtrl::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxTreeListCtrl::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxTreeListCtrl::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxTreeListCtrl::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxTreeListCtrl::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxTreeListCtrl::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxTreeListCtrl::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxTreeListCtrl::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxTreeListCtrl::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxTreeListCtrl::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxTreeListCtrl::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxTreeListCtrl::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxTreeListCtrl::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxTreeListCtrl::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxTreeListCtrl::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxTreeListCtrl::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxTreeListCtrl::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxTreeListCtrl::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxTreeListCtrl::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxTreeListCtrl::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxTreeListCtrl::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxTreeListCtrl::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxTreeListCtrl::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxTreeListCtrl::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxTreeListCtrl::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxTreeListCtrl::DoFreeze() : DoFreeze());
}

void sipwxTreeListCtrl::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxTreeListCtrl::DoThaw() : DoThaw());
}

bool sipwxTreeListCtrl::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxTreeListCtrl::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxTreeListCtrl::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxTreeListCtrl::TryBefore(event) : TryBefore(event));
}

bool sipwxTreeListCtrl::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxTreeListCtrl::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxTreeListCtrl_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxTreeListCtrl_SendDestroyEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipwxTreeListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_SendDestroyEvent, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_AssignImageList, "AssignImageList(imageList)\n"
"\n"
"Sets the image list and gives its ownership to the control.");

extern "C" {static PyObject *meth_wxTreeListCtrl_AssignImageList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_AssignImageList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxImageList* imageList;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_imageList,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxImageList, &imageList))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->AssignImageList(imageList);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_AssignImageList, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_SetImageList, "SetImageList(imageList)\n"
"\n"
"Sets the image list.");

extern "C" {static PyObject *meth_wxTreeListCtrl_SetImageList(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_SetImageList(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxImageList* imageList;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_imageList,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxImageList, &imageList))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetImageList(imageList);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_SetImageList, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_AppendColumn, "AppendColumn(title, width=wx.COL_WIDTH_AUTOSIZE, align=wx.ALIGN_LEFT, flags=wx.COL_RESIZABLE) -> int\n"
"\n"
"Add a column with the given title and attributes.");

extern "C" {static PyObject *meth_wxTreeListCtrl_AppendColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_AppendColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* title;
        int titleState = 0;
        int width = wxCOL_WIDTH_AUTOSIZE;
         ::wxAlignment align = wxALIGN_LEFT;
        int flags = wxCOL_RESIZABLE;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_title,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1|iEi", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxString,&title, &titleState, &width, sipType_wxAlignment, &align, &flags))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AppendColumn(*title,width,align,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(title),sipType_wxString,titleState);

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_AppendColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetColumnCount, "GetColumnCount() -> unsigned\n"
"\n"
"Return the total number of columns.");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetColumnCount(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetColumnCount(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            uint sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetColumnCount();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyLong_FromUnsignedLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetColumnCount, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_DeleteColumn, "DeleteColumn(col) -> bool\n"
"\n"
"Delete the column with the given index.");

extern "C" {static PyObject *meth_wxTreeListCtrl_DeleteColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_DeleteColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint col;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bu", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, &col))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DeleteColumn(col);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_DeleteColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_ClearColumns, "ClearColumns()\n"
"\n"
"Delete all columns.");

extern "C" {static PyObject *meth_wxTreeListCtrl_ClearColumns(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_ClearColumns(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ClearColumns();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_ClearColumns, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_SetColumnWidth, "SetColumnWidth(col, width)\n"
"\n"
"Change the width of the given column.");

extern "C" {static PyObject *meth_wxTreeListCtrl_SetColumnWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_SetColumnWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint col;
        int width;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
            sipName_width,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bui", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, &col, &width))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetColumnWidth(col,width);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_SetColumnWidth, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetColumnWidth, "GetColumnWidth(col) -> int\n"
"\n"
"Get the current width of the given column in pixels.");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetColumnWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetColumnWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint col;
        const  ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bu", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, &col))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetColumnWidth(col);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetColumnWidth, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_WidthFor, "WidthFor(text) -> int\n"
"\n"
"Get the width appropriate for showing the given text.");

extern "C" {static PyObject *meth_wxTreeListCtrl_WidthFor(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_WidthFor(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxString* text;
        int textState = 0;
        const  ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_text,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxString,&text, &textState))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->WidthFor(*text);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_WidthFor, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_AppendItem, "AppendItem(parent, text, imageClosed=-1, imageOpened=-1, data=None) -> TreeListItem\n"
"\n"
"Same as InsertItem() with wxTLI_LAST.");

extern "C" {static PyObject *meth_wxTreeListCtrl_AppendItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_AppendItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* parent;
        const  ::wxString* text;
        int textState = 0;
        int imageClosed = -1;
        int imageOpened = -1;
         ::wxClientData* data = 0;
        int dataState = 0;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_text,
            sipName_imageClosed,
            sipName_imageOpened,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|iiJ2", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &parent, sipType_wxString,&text, &textState, &imageClosed, &imageOpened, sipType_wxClientData,&data, &dataState))
        {
             ::wxTreeListItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxTreeListItem(sipCpp->AppendItem(*parent,*text,imageClosed,imageOpened,data));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);
            sipReleaseType(data,sipType_wxClientData,dataState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxTreeListItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_AppendItem, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_InsertItem, "InsertItem(parent, previous, text, imageClosed=-1, imageOpened=-1, data=None) -> TreeListItem\n"
"\n"
"Insert a new item into the tree.");

extern "C" {static PyObject *meth_wxTreeListCtrl_InsertItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_InsertItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* parent;
         ::wxTreeListItem* previous;
        const  ::wxString* text;
        int textState = 0;
        int imageClosed = -1;
        int imageOpened = -1;
         ::wxClientData* data = 0;
        int dataState = 0;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_previous,
            sipName_text,
            sipName_imageClosed,
            sipName_imageOpened,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J9J1|iiJ2", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &parent, sipType_wxTreeListItem, &previous, sipType_wxString,&text, &textState, &imageClosed, &imageOpened, sipType_wxClientData,&data, &dataState))
        {
             ::wxTreeListItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxTreeListItem(sipCpp->InsertItem(*parent,*previous,*text,imageClosed,imageOpened,data));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);
            sipReleaseType(data,sipType_wxClientData,dataState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxTreeListItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_InsertItem, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_PrependItem, "PrependItem(parent, text, imageClosed=-1, imageOpened=-1, data=None) -> TreeListItem\n"
"\n"
"Same as InsertItem() with wxTLI_FIRST.");

extern "C" {static PyObject *meth_wxTreeListCtrl_PrependItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_PrependItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* parent;
        const  ::wxString* text;
        int textState = 0;
        int imageClosed = -1;
        int imageOpened = -1;
         ::wxClientData* data = 0;
        int dataState = 0;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_text,
            sipName_imageClosed,
            sipName_imageOpened,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1|iiJ2", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &parent, sipType_wxString,&text, &textState, &imageClosed, &imageOpened, sipType_wxClientData,&data, &dataState))
        {
             ::wxTreeListItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxTreeListItem(sipCpp->PrependItem(*parent,*text,imageClosed,imageOpened,data));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);
            sipReleaseType(data,sipType_wxClientData,dataState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxTreeListItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_PrependItem, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_DeleteItem, "DeleteItem(item)\n"
"\n"
"Delete the specified item.");

extern "C" {static PyObject *meth_wxTreeListCtrl_DeleteItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_DeleteItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DeleteItem(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_DeleteItem, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_DeleteAllItems, "DeleteAllItems()\n"
"\n"
"Delete all tree items.");

extern "C" {static PyObject *meth_wxTreeListCtrl_DeleteAllItems(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_DeleteAllItems(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DeleteAllItems();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_DeleteAllItems, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetRootItem, "GetRootItem() -> TreeListItem\n"
"\n"
"Return the (never shown) root item.");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetRootItem(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetRootItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
             ::wxTreeListItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxTreeListItem(sipCpp->GetRootItem());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxTreeListItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetRootItem, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetItemParent, "GetItemParent(item) -> TreeListItem\n"
"\n"
"Return the parent of the given item.");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetItemParent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetItemParent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
        const  ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item))
        {
             ::wxTreeListItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxTreeListItem(sipCpp->GetItemParent(*item));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxTreeListItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetItemParent, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetFirstChild, "GetFirstChild(item) -> TreeListItem\n"
"\n"
"Return the first child of the given item.");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetFirstChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetFirstChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
        const  ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item))
        {
             ::wxTreeListItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxTreeListItem(sipCpp->GetFirstChild(*item));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxTreeListItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetFirstChild, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetNextSibling, "GetNextSibling(item) -> TreeListItem\n"
"\n"
"Return the next sibling of the given item.");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetNextSibling(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetNextSibling(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
        const  ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item))
        {
             ::wxTreeListItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxTreeListItem(sipCpp->GetNextSibling(*item));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxTreeListItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetNextSibling, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetFirstItem, "GetFirstItem() -> TreeListItem\n"
"\n"
"Return the first item in the tree.");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetFirstItem(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetFirstItem(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
             ::wxTreeListItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxTreeListItem(sipCpp->GetFirstItem());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxTreeListItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetFirstItem, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetNextItem, "GetNextItem(item) -> TreeListItem\n"
"\n"
"Get item after the given one in the depth-first tree-traversal order.");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetNextItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetNextItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
        const  ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item))
        {
             ::wxTreeListItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxTreeListItem(sipCpp->GetNextItem(*item));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxTreeListItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetNextItem, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetItemText, "GetItemText(item, col=0) -> String\n"
"\n"
"Return the text of the given item.");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetItemText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetItemText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
        uint col = 0;
        const  ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|u", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item, &col))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString(sipCpp->GetItemText(*item,col));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetItemText, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_SetItemText, "SetItemText(item, col, text)\n"
"SetItemText(item, text)\n"
"\n"
"Set the text of the specified column of the given item.\n"
"");

extern "C" {static PyObject *meth_wxTreeListCtrl_SetItemText(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_SetItemText(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
        uint col;
        const  ::wxString* text;
        int textState = 0;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_col,
            sipName_text,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9uJ1", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item, &col, sipType_wxString,&text, &textState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetItemText(*item,col,*text);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    {
         ::wxTreeListItem* item;
        const  ::wxString* text;
        int textState = 0;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_text,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J1", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item, sipType_wxString,&text, &textState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetItemText(*item,*text);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(text),sipType_wxString,textState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_SetItemText, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_SetItemImage, "SetItemImage(item, closed, opened=-1)\n"
"\n"
"Set the images for the given item.");

extern "C" {static PyObject *meth_wxTreeListCtrl_SetItemImage(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_SetItemImage(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
        int closed;
        int opened = -1;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_closed,
            sipName_opened,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9i|i", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item, &closed, &opened))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetItemImage(*item,closed,opened);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_SetItemImage, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetItemData, "GetItemData(item) -> ClientData\n"
"\n"
"Get the data associated with the given item.");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetItemData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetItemData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
        const  ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item))
        {
             ::wxClientData*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetItemData(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxClientData,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetItemData, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_SetItemData, "SetItemData(item, data)\n"
"\n"
"Set the data associated with the given item.");

extern "C" {static PyObject *meth_wxTreeListCtrl_SetItemData(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_SetItemData(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
         ::wxClientData* data;
        int dataState = 0;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_data,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9J2", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item, sipType_wxClientData,&data, &dataState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetItemData(*item,data);
            Py_END_ALLOW_THREADS
            sipReleaseType(data,sipType_wxClientData,dataState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_SetItemData, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_Expand, "Expand(item)\n"
"\n"
"Expand the given tree branch.");

extern "C" {static PyObject *meth_wxTreeListCtrl_Expand(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_Expand(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Expand(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_Expand, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_Collapse, "Collapse(item)\n"
"\n"
"Collapse the given tree branch.");

extern "C" {static PyObject *meth_wxTreeListCtrl_Collapse(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_Collapse(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Collapse(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_Collapse, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_IsExpanded, "IsExpanded(item) -> bool\n"
"\n"
"Return whether the given item is expanded.");

extern "C" {static PyObject *meth_wxTreeListCtrl_IsExpanded(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_IsExpanded(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
        const  ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsExpanded(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_IsExpanded, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetSelection, "GetSelection() -> TreeListItem\n"
"\n"
"Return the currently selected item.");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetSelection(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetSelection(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
             ::wxTreeListItem*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxTreeListItem(sipCpp->GetSelection());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxTreeListItem,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetSelection, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetSelections, "GetSelections() -> PyObject\n"
"\n"
"Returns a list of all selected items. This method can be used in\n"
"both single and multi-selection case.");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetSelections(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetSelections(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            PyObject * sipRes = 0;
            int sipIsErr = 0;

        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxTreeListCtrl_GetSelections(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;

            if (sipIsErr)
                return 0;

            return sipRes;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetSelections, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_Select, "Select(item)\n"
"\n"
"Select the given item.");

extern "C" {static PyObject *meth_wxTreeListCtrl_Select(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_Select(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Select(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_Select, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_Unselect, "Unselect(item)\n"
"\n"
"Deselect the given item.");

extern "C" {static PyObject *meth_wxTreeListCtrl_Unselect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_Unselect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Unselect(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_Unselect, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_IsSelected, "IsSelected(item) -> bool\n"
"\n"
"Return true if the item is selected.");

extern "C" {static PyObject *meth_wxTreeListCtrl_IsSelected(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_IsSelected(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
        const  ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->IsSelected(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_IsSelected, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_SelectAll, "SelectAll()\n"
"\n"
"Select all the control items.");

extern "C" {static PyObject *meth_wxTreeListCtrl_SelectAll(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_SelectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SelectAll();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_SelectAll, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_UnselectAll, "UnselectAll()\n"
"\n"
"Deselect all the control items.");

extern "C" {static PyObject *meth_wxTreeListCtrl_UnselectAll(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_UnselectAll(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->UnselectAll();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_UnselectAll, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_CheckItem, "CheckItem(item, state=wx.CHK_CHECKED)\n"
"\n"
"Change the item checked state.");

extern "C" {static PyObject *meth_wxTreeListCtrl_CheckItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_CheckItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
         ::wxCheckBoxState state = wxCHK_CHECKED;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item, sipType_wxCheckBoxState, &state))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->CheckItem(*item,state);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_CheckItem, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_CheckItemRecursively, "CheckItemRecursively(item, state=wx.CHK_CHECKED)\n"
"\n"
"Change the checked state of the given item and all its children.");

extern "C" {static PyObject *meth_wxTreeListCtrl_CheckItemRecursively(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_CheckItemRecursively(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
         ::wxCheckBoxState state = wxCHK_CHECKED;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9|E", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item, sipType_wxCheckBoxState, &state))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->CheckItemRecursively(*item,state);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_CheckItemRecursively, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_UncheckItem, "UncheckItem(item)\n"
"\n"
"Uncheck the given item.");

extern "C" {static PyObject *meth_wxTreeListCtrl_UncheckItem(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_UncheckItem(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->UncheckItem(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_UncheckItem, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_UpdateItemParentStateRecursively, "UpdateItemParentStateRecursively(item)\n"
"\n"
"Update the state of the parent item to reflect the checked state of\n"
"its children.");

extern "C" {static PyObject *meth_wxTreeListCtrl_UpdateItemParentStateRecursively(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_UpdateItemParentStateRecursively(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->UpdateItemParentStateRecursively(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_UpdateItemParentStateRecursively, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetCheckedState, "GetCheckedState(item) -> CheckBoxState\n"
"\n"
"Return the checked state of the item.");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetCheckedState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetCheckedState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
        const  ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item))
        {
             ::wxCheckBoxState sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetCheckedState(*item);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxCheckBoxState);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetCheckedState, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_AreAllChildrenInState, "AreAllChildrenInState(item, state) -> bool\n"
"\n"
"Return true if all children of the given item are in the specified\n"
"state.");

extern "C" {static PyObject *meth_wxTreeListCtrl_AreAllChildrenInState(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_AreAllChildrenInState(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItem* item;
         ::wxCheckBoxState state;
        const  ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_item,
            sipName_state,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9E", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItem, &item, sipType_wxCheckBoxState, &state))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->AreAllChildrenInState(*item,state);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_AreAllChildrenInState, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_SetSortColumn, "SetSortColumn(col, ascendingOrder=True)\n"
"\n"
"Set the column to use for sorting and the order in which to sort.");

extern "C" {static PyObject *meth_wxTreeListCtrl_SetSortColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_SetSortColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint col;
        bool ascendingOrder = 1;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
            sipName_ascendingOrder,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bu|b", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, &col, &ascendingOrder))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetSortColumn(col,ascendingOrder);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_SetSortColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetSortColumn, "GetSortColumn() -> (bool, col, ascendingOrder)\n"
"\n"
"Return the column currently used for sorting, if any.");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetSortColumn(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetSortColumn(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        uint col;
        bool ascendingOrder;
         ::wxTreeListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetSortColumn(&col,&ascendingOrder);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(bub)",sipRes,col,ascendingOrder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetSortColumn, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_SetItemComparator, "SetItemComparator(comparator)\n"
"\n"
"Set the object to use for comparing the items.");

extern "C" {static PyObject *meth_wxTreeListCtrl_SetItemComparator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_SetItemComparator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxTreeListItemComparator* comparator;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_comparator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxTreeListItemComparator, &comparator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetItemComparator(comparator);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_SetItemComparator, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetView, "GetView() -> wx.Window\n"
"\n"
"Return the view part of this control as a wxWindow.");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetView(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetView();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetView, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetDataView, "GetDataView() -> DataViewCtrl\n"
"\n"
"Return the view part of this control as wxDataViewCtrl.");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetDataView(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetDataView(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
             ::wxDataViewCtrl*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetDataView();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxDataViewCtrl,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetDataView, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_Create, "Create(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=TL_DEFAULT_STYLE, name=TreeListCtrlNameStr) -> bool\n"
"\n"
"Create the control window.");

extern "C" {static PyObject *meth_wxTreeListCtrl_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxTL_DEFAULT_STYLE;
        const  ::wxString& namedef = wxTreeListCtrlNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;
        sipWrapper *sipOwner = 0;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJH|iJ1J1lJ1", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxWindow, &parent, &sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxString,&name, &nameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,id,*pos,*size,style,*name);
            Py_END_ALLOW_THREADS

            if (sipOwner)
                sipTransferTo(sipSelf, (PyObject *)sipOwner);
            else
                sipTransferBack(sipSelf);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_Create, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxTreeListCtrl::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetClientAreaOrigin, doc_wxTreeListCtrl_GetClientAreaOrigin);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxTreeListCtrl_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxTreeListCtrl::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_Validate, doc_wxTreeListCtrl_Validate);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxTreeListCtrl_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxTreeListCtrl::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_TransferDataToWindow, doc_wxTreeListCtrl_TransferDataToWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxTreeListCtrl_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxTreeListCtrl::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_TransferDataFromWindow, doc_wxTreeListCtrl_TransferDataFromWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxTreeListCtrl_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxTreeListCtrl::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_InitDialog, doc_wxTreeListCtrl_InitDialog);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxTreeListCtrl_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxTreeListCtrl::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_AcceptsFocus, doc_wxTreeListCtrl_AcceptsFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxTreeListCtrl_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxTreeListCtrl::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_AcceptsFocusRecursively, doc_wxTreeListCtrl_AcceptsFocusRecursively);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxTreeListCtrl_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxTreeListCtrl::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_AcceptsFocusFromKeyboard, doc_wxTreeListCtrl_AcceptsFocusFromKeyboard);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxTreeListCtrl_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxTreeListCtrl::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_AddChild, doc_wxTreeListCtrl_AddChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxTreeListCtrl_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxTreeListCtrl::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_RemoveChild, doc_wxTreeListCtrl_RemoveChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxTreeListCtrl_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxTreeListCtrl::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_InheritAttributes, doc_wxTreeListCtrl_InheritAttributes);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxTreeListCtrl_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxTreeListCtrl::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_ShouldInheritColours, doc_wxTreeListCtrl_ShouldInheritColours);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxTreeListCtrl_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxTreeListCtrl::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_OnInternalIdle, doc_wxTreeListCtrl_OnInternalIdle);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxTreeListCtrl::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetMainWindowOfCompositeControl, doc_wxTreeListCtrl_GetMainWindowOfCompositeControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxTreeListCtrl_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biii", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxTreeListCtrl::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_InformFirstDirection, doc_wxTreeListCtrl_InformFirstDirection);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxTreeListCtrl_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxTreeListCtrl::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_SetCanFocus, doc_wxTreeListCtrl_SetCanFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxTreeListCtrl_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxTreeListCtrl::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_Destroy, doc_wxTreeListCtrl_Destroy);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxTreeListCtrl_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxTreeListCtrl::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_SetValidator, doc_wxTreeListCtrl_SetValidator);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxTreeListCtrl *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxTreeListCtrl::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetValidator, doc_wxTreeListCtrl_GetValidator);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxTreeListCtrl_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_ProcessEvent, doc_wxTreeListCtrl_ProcessEvent);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxTreeListCtrl_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_DoEnable, doc_wxTreeListCtrl_DoEnable);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxTreeListCtrl_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxTreeListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_DoGetPosition, doc_wxTreeListCtrl_DoGetPosition);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxTreeListCtrl_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxTreeListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_DoGetSize, doc_wxTreeListCtrl_DoGetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxTreeListCtrl_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxTreeListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_DoGetClientSize, doc_wxTreeListCtrl_DoGetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxTreeListCtrl_DoGetBestSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxTreeListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_DoGetBestSize, doc_wxTreeListCtrl_DoGetBestSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxTreeListCtrl_DoGetBestClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxTreeListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_DoGetBestClientSize, doc_wxTreeListCtrl_DoGetBestClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxTreeListCtrl_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiii", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_DoSetSize, doc_wxTreeListCtrl_DoSetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxTreeListCtrl_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_DoSetClientSize, doc_wxTreeListCtrl_DoSetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxTreeListCtrl_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiiii", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_DoSetSizeHints, doc_wxTreeListCtrl_DoSetSizeHints);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxTreeListCtrl_DoGetBorderSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxTreeListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_DoGetBorderSize, doc_wxTreeListCtrl_DoGetBorderSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxTreeListCtrl_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiii", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_DoMoveWindow, doc_wxTreeListCtrl_DoMoveWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxTreeListCtrl_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_DoSetWindowVariant, doc_wxTreeListCtrl_DoSetWindowVariant);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetDefaultBorder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxTreeListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetDefaultBorder, doc_wxTreeListCtrl_GetDefaultBorder);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetDefaultBorderForControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxTreeListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetDefaultBorderForControl, doc_wxTreeListCtrl_GetDefaultBorderForControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxTreeListCtrl_DoFreeze(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_DoFreeze(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxTreeListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_DoFreeze, doc_wxTreeListCtrl_DoFreeze);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxTreeListCtrl_DoThaw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_DoThaw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxTreeListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_DoThaw, doc_wxTreeListCtrl_DoThaw);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxTreeListCtrl_HasTransparentBackground(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxTreeListCtrl *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxTreeListCtrl, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_HasTransparentBackground, doc_wxTreeListCtrl_HasTransparentBackground);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxTreeListCtrl_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_TryBefore, doc_wxTreeListCtrl_TryBefore);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxTreeListCtrl_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxTreeListCtrl *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxTreeListCtrl, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_TryAfter, doc_wxTreeListCtrl_TryAfter);

    return NULL;
}


PyDoc_STRVAR(doc_wxTreeListCtrl_GetClassDefaultAttributes, "GetClassDefaultAttributes(variant: WindowVariant = wxWINDOW_VARIANT_NORMAL) -> VisualAttributes");

extern "C" {static PyObject *meth_wxTreeListCtrl_GetClassDefaultAttributes(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxTreeListCtrl_GetClassDefaultAttributes(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "|E", sipType_wxWindowVariant, &variant))
        {
             ::wxVisualAttributes*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxVisualAttributes( ::wxTreeListCtrl::GetClassDefaultAttributes(variant));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxVisualAttributes,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_TreeListCtrl, sipName_GetClassDefaultAttributes, doc_wxTreeListCtrl_GetClassDefaultAttributes);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxTreeListCtrl(void *, const sipTypeDef *);}
static void *cast_wxTreeListCtrl(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxTreeListCtrl *sipCpp = reinterpret_cast< ::wxTreeListCtrl *>(sipCppV);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxTreeListCtrl(void *, int);}
static void release_wxTreeListCtrl(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxTreeListCtrl *>(sipCppV);
    else
        delete reinterpret_cast< ::wxTreeListCtrl *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxTreeListCtrl(sipSimpleWrapper *);}
static void dealloc_wxTreeListCtrl(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxTreeListCtrl *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxTreeListCtrl(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxTreeListCtrl(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxTreeListCtrl(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxTreeListCtrl *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxTreeListCtrl();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID id = wxID_ANY;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxTL_DEFAULT_STYLE;
        const  ::wxString& namedef = wxTreeListCtrlNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_id,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "JH|iJ1J1lJ1", sipType_wxWindow, &parent, sipOwner, &id, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxString,&name, &nameState))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxTreeListCtrl(parent,id,*pos,*size,style,*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxTreeListCtrl[] = {{37, 0, 1}};


static PyMethodDef methods_wxTreeListCtrl[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxTreeListCtrl_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxTreeListCtrl_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxTreeListCtrl_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_AddChild), (PyCFunction)meth_wxTreeListCtrl_AddChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_AddChild)},
    {SIP_MLNAME_CAST(sipName_AppendColumn), (PyCFunction)meth_wxTreeListCtrl_AppendColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_AppendColumn)},
    {SIP_MLNAME_CAST(sipName_AppendItem), (PyCFunction)meth_wxTreeListCtrl_AppendItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_AppendItem)},
    {SIP_MLNAME_CAST(sipName_AreAllChildrenInState), (PyCFunction)meth_wxTreeListCtrl_AreAllChildrenInState, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_AreAllChildrenInState)},
    {SIP_MLNAME_CAST(sipName_AssignImageList), (PyCFunction)meth_wxTreeListCtrl_AssignImageList, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_AssignImageList)},
    {SIP_MLNAME_CAST(sipName_CheckItem), (PyCFunction)meth_wxTreeListCtrl_CheckItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_CheckItem)},
    {SIP_MLNAME_CAST(sipName_CheckItemRecursively), (PyCFunction)meth_wxTreeListCtrl_CheckItemRecursively, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_CheckItemRecursively)},
    {SIP_MLNAME_CAST(sipName_ClearColumns), meth_wxTreeListCtrl_ClearColumns, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_ClearColumns)},
    {SIP_MLNAME_CAST(sipName_Collapse), (PyCFunction)meth_wxTreeListCtrl_Collapse, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_Collapse)},
    {SIP_MLNAME_CAST(sipName_Create), (PyCFunction)meth_wxTreeListCtrl_Create, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_Create)},
    {SIP_MLNAME_CAST(sipName_DeleteAllItems), meth_wxTreeListCtrl_DeleteAllItems, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_DeleteAllItems)},
    {SIP_MLNAME_CAST(sipName_DeleteColumn), (PyCFunction)meth_wxTreeListCtrl_DeleteColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_DeleteColumn)},
    {SIP_MLNAME_CAST(sipName_DeleteItem), (PyCFunction)meth_wxTreeListCtrl_DeleteItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_DeleteItem)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxTreeListCtrl_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_Destroy)},
    {SIP_MLNAME_CAST(sipName_DoEnable), (PyCFunction)meth_wxTreeListCtrl_DoEnable, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), (PyCFunction)meth_wxTreeListCtrl_DoFreeze, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), (PyCFunction)meth_wxTreeListCtrl_DoGetBestClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), (PyCFunction)meth_wxTreeListCtrl_DoGetBestSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), (PyCFunction)meth_wxTreeListCtrl_DoGetBorderSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), (PyCFunction)meth_wxTreeListCtrl_DoGetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), (PyCFunction)meth_wxTreeListCtrl_DoGetPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), (PyCFunction)meth_wxTreeListCtrl_DoGetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), (PyCFunction)meth_wxTreeListCtrl_DoMoveWindow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), (PyCFunction)meth_wxTreeListCtrl_DoSetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), (PyCFunction)meth_wxTreeListCtrl_DoSetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), (PyCFunction)meth_wxTreeListCtrl_DoSetSizeHints, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), (PyCFunction)meth_wxTreeListCtrl_DoSetWindowVariant, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoThaw), (PyCFunction)meth_wxTreeListCtrl_DoThaw, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_DoThaw)},
    {SIP_MLNAME_CAST(sipName_Expand), (PyCFunction)meth_wxTreeListCtrl_Expand, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_Expand)},
    {SIP_MLNAME_CAST(sipName_GetCheckedState), (PyCFunction)meth_wxTreeListCtrl_GetCheckedState, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetCheckedState)},
    {SIP_MLNAME_CAST(sipName_GetClassDefaultAttributes), (PyCFunction)meth_wxTreeListCtrl_GetClassDefaultAttributes, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetClassDefaultAttributes)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxTreeListCtrl_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetColumnCount), meth_wxTreeListCtrl_GetColumnCount, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetColumnCount)},
    {SIP_MLNAME_CAST(sipName_GetColumnWidth), (PyCFunction)meth_wxTreeListCtrl_GetColumnWidth, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetColumnWidth)},
    {SIP_MLNAME_CAST(sipName_GetDataView), meth_wxTreeListCtrl_GetDataView, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetDataView)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), (PyCFunction)meth_wxTreeListCtrl_GetDefaultBorder, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), (PyCFunction)meth_wxTreeListCtrl_GetDefaultBorderForControl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetFirstChild), (PyCFunction)meth_wxTreeListCtrl_GetFirstChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetFirstChild)},
    {SIP_MLNAME_CAST(sipName_GetFirstItem), meth_wxTreeListCtrl_GetFirstItem, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetFirstItem)},
    {SIP_MLNAME_CAST(sipName_GetItemData), (PyCFunction)meth_wxTreeListCtrl_GetItemData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetItemData)},
    {SIP_MLNAME_CAST(sipName_GetItemParent), (PyCFunction)meth_wxTreeListCtrl_GetItemParent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetItemParent)},
    {SIP_MLNAME_CAST(sipName_GetItemText), (PyCFunction)meth_wxTreeListCtrl_GetItemText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetItemText)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxTreeListCtrl_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetNextItem), (PyCFunction)meth_wxTreeListCtrl_GetNextItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetNextItem)},
    {SIP_MLNAME_CAST(sipName_GetNextSibling), (PyCFunction)meth_wxTreeListCtrl_GetNextSibling, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetNextSibling)},
    {SIP_MLNAME_CAST(sipName_GetRootItem), meth_wxTreeListCtrl_GetRootItem, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetRootItem)},
    {SIP_MLNAME_CAST(sipName_GetSelection), meth_wxTreeListCtrl_GetSelection, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetSelection)},
    {SIP_MLNAME_CAST(sipName_GetSelections), meth_wxTreeListCtrl_GetSelections, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetSelections)},
    {SIP_MLNAME_CAST(sipName_GetSortColumn), (PyCFunction)meth_wxTreeListCtrl_GetSortColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetSortColumn)},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxTreeListCtrl_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetValidator)},
    {SIP_MLNAME_CAST(sipName_GetView), meth_wxTreeListCtrl_GetView, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_GetView)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), (PyCFunction)meth_wxTreeListCtrl_HasTransparentBackground, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), (PyCFunction)meth_wxTreeListCtrl_InformFirstDirection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxTreeListCtrl_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxTreeListCtrl_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_InitDialog)},
    {SIP_MLNAME_CAST(sipName_InsertItem), (PyCFunction)meth_wxTreeListCtrl_InsertItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_InsertItem)},
    {SIP_MLNAME_CAST(sipName_IsExpanded), (PyCFunction)meth_wxTreeListCtrl_IsExpanded, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_IsExpanded)},
    {SIP_MLNAME_CAST(sipName_IsSelected), (PyCFunction)meth_wxTreeListCtrl_IsSelected, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_IsSelected)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxTreeListCtrl_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_PrependItem), (PyCFunction)meth_wxTreeListCtrl_PrependItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_PrependItem)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), (PyCFunction)meth_wxTreeListCtrl_ProcessEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), (PyCFunction)meth_wxTreeListCtrl_RemoveChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_Select), (PyCFunction)meth_wxTreeListCtrl_Select, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_Select)},
    {SIP_MLNAME_CAST(sipName_SelectAll), meth_wxTreeListCtrl_SelectAll, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_SelectAll)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), (PyCFunction)meth_wxTreeListCtrl_SendDestroyEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), (PyCFunction)meth_wxTreeListCtrl_SetCanFocus, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetColumnWidth), (PyCFunction)meth_wxTreeListCtrl_SetColumnWidth, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_SetColumnWidth)},
    {SIP_MLNAME_CAST(sipName_SetImageList), (PyCFunction)meth_wxTreeListCtrl_SetImageList, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_SetImageList)},
    {SIP_MLNAME_CAST(sipName_SetItemComparator), (PyCFunction)meth_wxTreeListCtrl_SetItemComparator, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_SetItemComparator)},
    {SIP_MLNAME_CAST(sipName_SetItemData), (PyCFunction)meth_wxTreeListCtrl_SetItemData, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_SetItemData)},
    {SIP_MLNAME_CAST(sipName_SetItemImage), (PyCFunction)meth_wxTreeListCtrl_SetItemImage, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_SetItemImage)},
    {SIP_MLNAME_CAST(sipName_SetItemText), (PyCFunction)meth_wxTreeListCtrl_SetItemText, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_SetItemText)},
    {SIP_MLNAME_CAST(sipName_SetSortColumn), (PyCFunction)meth_wxTreeListCtrl_SetSortColumn, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_SetSortColumn)},
    {SIP_MLNAME_CAST(sipName_SetValidator), (PyCFunction)meth_wxTreeListCtrl_SetValidator, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_SetValidator)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxTreeListCtrl_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxTreeListCtrl_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxTreeListCtrl_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), (PyCFunction)meth_wxTreeListCtrl_TryAfter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), (PyCFunction)meth_wxTreeListCtrl_TryBefore, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_TryBefore)},
    {SIP_MLNAME_CAST(sipName_UncheckItem), (PyCFunction)meth_wxTreeListCtrl_UncheckItem, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_UncheckItem)},
    {SIP_MLNAME_CAST(sipName_Unselect), (PyCFunction)meth_wxTreeListCtrl_Unselect, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_Unselect)},
    {SIP_MLNAME_CAST(sipName_UnselectAll), meth_wxTreeListCtrl_UnselectAll, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_UnselectAll)},
    {SIP_MLNAME_CAST(sipName_UpdateItemParentStateRecursively), (PyCFunction)meth_wxTreeListCtrl_UpdateItemParentStateRecursively, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_UpdateItemParentStateRecursively)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxTreeListCtrl_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_Validate)},
    {SIP_MLNAME_CAST(sipName_WidthFor), (PyCFunction)meth_wxTreeListCtrl_WidthFor, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxTreeListCtrl_WidthFor)}
};


extern "C" {static PyObject *varget_wxTreeListCtrl_NO_IMAGE(void *, PyObject *, PyObject *);}
static PyObject *varget_wxTreeListCtrl_NO_IMAGE(void *sipSelf, PyObject *, PyObject *)
{
    int sipVal;
     ::wxTreeListCtrl *sipCpp = reinterpret_cast< ::wxTreeListCtrl *>(sipSelf);

    sipVal = sipCpp->NO_IMAGE;

    return SIPLong_FromLong(sipVal);
}

sipVariableDef variables_wxTreeListCtrl[] = {
    {PropertyVariable, sipName_View, &methods_wxTreeListCtrl[53], NULL, NULL, NULL},
    {PropertyVariable, sipName_SortColumn, &methods_wxTreeListCtrl[51], &methods_wxTreeListCtrl[75], NULL, NULL},
    {PropertyVariable, sipName_Selections, &methods_wxTreeListCtrl[50], NULL, NULL, NULL},
    {PropertyVariable, sipName_Selection, &methods_wxTreeListCtrl[49], NULL, NULL, NULL},
    {PropertyVariable, sipName_RootItem, &methods_wxTreeListCtrl[48], NULL, NULL, NULL},
    {PropertyVariable, sipName_FirstItem, &methods_wxTreeListCtrl[41], NULL, NULL, NULL},
    {PropertyVariable, sipName_DataView, &methods_wxTreeListCtrl[37], NULL, NULL, NULL},
    {PropertyVariable, sipName_ColumnCount, &methods_wxTreeListCtrl[35], NULL, NULL, NULL},
    {InstanceVariable, sipName_NO_IMAGE, (PyMethodDef *)varget_wxTreeListCtrl_NO_IMAGE, NULL, NULL, NULL},
};

PyDoc_STRVAR(doc_wxTreeListCtrl, "TreeListCtrl()\n"
"TreeListCtrl(parent, id=wx.ID_ANY, pos=wx.DefaultPosition, size=wx.DefaultSize, style=TL_DEFAULT_STYLE, name=TreeListCtrlNameStr)\n"
"\n"
"A control combining wxTreeCtrl and wxListCtrl features.");


sipClassTypeDef sipTypeDef__dataview_wxTreeListCtrl = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxTreeListCtrl,
        {0},
        0
    },
    {
        sipNameNr_TreeListCtrl,
        {0, 0, 1},
        88, methods_wxTreeListCtrl,
        0, 0,
        9, variables_wxTreeListCtrl,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxTreeListCtrl,
    -1,
    -1,
    supers_wxTreeListCtrl,
    0,
    init_type_wxTreeListCtrl,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxTreeListCtrl,
    0,
    0,
    0,
    release_wxTreeListCtrl,
    cast_wxTreeListCtrl,
    0,
    0,
    0,
    0,
    0,
    0
};
