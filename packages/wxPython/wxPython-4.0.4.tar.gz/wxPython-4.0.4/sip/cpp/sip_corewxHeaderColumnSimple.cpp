/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/headercol.h>

        #include <wx/bitmap.h>


class sipwxHeaderColumnSimple : public  ::wxHeaderColumnSimple
{
public:
    sipwxHeaderColumnSimple(const  ::wxString&,int, ::wxAlignment,int);
    sipwxHeaderColumnSimple(const  ::wxBitmap&,int, ::wxAlignment,int);
    sipwxHeaderColumnSimple(const  ::wxHeaderColumnSimple&);
    virtual ~sipwxHeaderColumnSimple();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool IsSortOrderAscending() const;
    bool IsSortKey() const;
    bool IsHidden() const;
    bool IsReorderable() const;
    bool IsSortable() const;
    bool IsResizeable() const;
    int GetFlags() const;
     ::wxAlignment GetAlignment() const;
    int GetMinWidth() const;
    int GetWidth() const;
     ::wxBitmap GetBitmap() const;
     ::wxString GetTitle() const;
    void SetTitle(const  ::wxString&);
    void SetBitmap(const  ::wxBitmap&);
    void SetWidth(int);
    void SetMinWidth(int);
    void SetAlignment( ::wxAlignment);
    void SetFlags(int);
    void SetResizeable(bool);
    void SetSortable(bool);
    void SetReorderable(bool);
    void SetHidden(bool);
    void SetSortOrder(bool);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxHeaderColumnSimple(const sipwxHeaderColumnSimple &);
    sipwxHeaderColumnSimple &operator = (const sipwxHeaderColumnSimple &);

    char sipPyMethods[23];
};

sipwxHeaderColumnSimple::sipwxHeaderColumnSimple(const  ::wxString& title,int width, ::wxAlignment align,int flags):  ::wxHeaderColumnSimple(title,width,align,flags), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxHeaderColumnSimple::sipwxHeaderColumnSimple(const  ::wxBitmap& bitmap,int width, ::wxAlignment align,int flags):  ::wxHeaderColumnSimple(bitmap,width,align,flags), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxHeaderColumnSimple::sipwxHeaderColumnSimple(const  ::wxHeaderColumnSimple& a0):  ::wxHeaderColumnSimple(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxHeaderColumnSimple::~sipwxHeaderColumnSimple()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxHeaderColumnSimple::IsSortOrderAscending() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_IsSortOrderAscending);

    if (!sipMeth)
        return  ::wxHeaderColumnSimple::IsSortOrderAscending();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHeaderColumnSimple::IsSortKey() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_IsSortKey);

    if (!sipMeth)
        return  ::wxHeaderColumnSimple::IsSortKey();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHeaderColumnSimple::IsHidden() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_IsHidden);

    if (!sipMeth)
        return  ::wxHeaderColumnSimple::IsHidden();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHeaderColumnSimple::IsReorderable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[3]),sipPySelf,NULL,sipName_IsReorderable);

    if (!sipMeth)
        return  ::wxHeaderColumnSimple::IsReorderable();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHeaderColumnSimple::IsSortable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[4]),sipPySelf,NULL,sipName_IsSortable);

    if (!sipMeth)
        return  ::wxHeaderColumnSimple::IsSortable();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxHeaderColumnSimple::IsResizeable() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_IsResizeable);

    if (!sipMeth)
        return  ::wxHeaderColumnSimple::IsResizeable();

    extern bool sipVH__core_8(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_8(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxHeaderColumnSimple::GetFlags() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_GetFlags);

    if (!sipMeth)
        return  ::wxHeaderColumnSimple::GetFlags();

    extern int sipVH__core_101(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_101(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxAlignment sipwxHeaderColumnSimple::GetAlignment() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[7]),sipPySelf,NULL,sipName_GetAlignment);

    if (!sipMeth)
        return  ::wxHeaderColumnSimple::GetAlignment();

    extern  ::wxAlignment sipVH__core_154(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_154(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxHeaderColumnSimple::GetMinWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[8]),sipPySelf,NULL,sipName_GetMinWidth);

    if (!sipMeth)
        return  ::wxHeaderColumnSimple::GetMinWidth();

    extern int sipVH__core_101(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_101(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxHeaderColumnSimple::GetWidth() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_GetWidth);

    if (!sipMeth)
        return  ::wxHeaderColumnSimple::GetWidth();

    extern int sipVH__core_101(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_101(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBitmap sipwxHeaderColumnSimple::GetBitmap() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[10]),sipPySelf,NULL,sipName_GetBitmap);

    if (!sipMeth)
        return  ::wxHeaderColumnSimple::GetBitmap();

    extern  ::wxBitmap sipVH__core_72(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_72(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxString sipwxHeaderColumnSimple::GetTitle() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[11]),sipPySelf,NULL,sipName_GetTitle);

    if (!sipMeth)
        return  ::wxHeaderColumnSimple::GetTitle();

    extern  ::wxString sipVH__core_13(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__core_13(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxHeaderColumnSimple::SetTitle(const  ::wxString& title)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_SetTitle);

    if (!sipMeth)
    {
         ::wxHeaderColumnSimple::SetTitle(title);
        return;
    }

    extern void sipVH__core_51(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxString&);

    sipVH__core_51(sipGILState, 0, sipPySelf, sipMeth, title);
}

void sipwxHeaderColumnSimple::SetBitmap(const  ::wxBitmap& bitmap)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,NULL,sipName_SetBitmap);

    if (!sipMeth)
    {
         ::wxHeaderColumnSimple::SetBitmap(bitmap);
        return;
    }

    extern void sipVH__core_73(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxBitmap&);

    sipVH__core_73(sipGILState, 0, sipPySelf, sipMeth, bitmap);
}

void sipwxHeaderColumnSimple::SetWidth(int width)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,NULL,sipName_SetWidth);

    if (!sipMeth)
    {
         ::wxHeaderColumnSimple::SetWidth(width);
        return;
    }

    extern void sipVH__core_102(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__core_102(sipGILState, 0, sipPySelf, sipMeth, width);
}

void sipwxHeaderColumnSimple::SetMinWidth(int minWidth)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,NULL,sipName_SetMinWidth);

    if (!sipMeth)
    {
         ::wxHeaderColumnSimple::SetMinWidth(minWidth);
        return;
    }

    extern void sipVH__core_102(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__core_102(sipGILState, 0, sipPySelf, sipMeth, minWidth);
}

void sipwxHeaderColumnSimple::SetAlignment( ::wxAlignment align)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_SetAlignment);

    if (!sipMeth)
    {
         ::wxHeaderColumnSimple::SetAlignment(align);
        return;
    }

    extern void sipVH__core_155(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxAlignment);

    sipVH__core_155(sipGILState, 0, sipPySelf, sipMeth, align);
}

void sipwxHeaderColumnSimple::SetFlags(int flags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_SetFlags);

    if (!sipMeth)
    {
         ::wxHeaderColumnSimple::SetFlags(flags);
        return;
    }

    extern void sipVH__core_102(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    sipVH__core_102(sipGILState, 0, sipPySelf, sipMeth, flags);
}

void sipwxHeaderColumnSimple::SetResizeable(bool resizable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_SetResizeable);

    if (!sipMeth)
    {
         ::wxHeaderColumnSimple::SetResizeable(resizable);
        return;
    }

    extern void sipVH__core_87(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_87(sipGILState, 0, sipPySelf, sipMeth, resizable);
}

void sipwxHeaderColumnSimple::SetSortable(bool sortable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_SetSortable);

    if (!sipMeth)
    {
         ::wxHeaderColumnSimple::SetSortable(sortable);
        return;
    }

    extern void sipVH__core_87(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_87(sipGILState, 0, sipPySelf, sipMeth, sortable);
}

void sipwxHeaderColumnSimple::SetReorderable(bool reorderable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_SetReorderable);

    if (!sipMeth)
    {
         ::wxHeaderColumnSimple::SetReorderable(reorderable);
        return;
    }

    extern void sipVH__core_87(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_87(sipGILState, 0, sipPySelf, sipMeth, reorderable);
}

void sipwxHeaderColumnSimple::SetHidden(bool hidden)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_SetHidden);

    if (!sipMeth)
    {
         ::wxHeaderColumnSimple::SetHidden(hidden);
        return;
    }

    extern void sipVH__core_87(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_87(sipGILState, 0, sipPySelf, sipMeth, hidden);
}

void sipwxHeaderColumnSimple::SetSortOrder(bool ascending)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_SetSortOrder);

    if (!sipMeth)
    {
         ::wxHeaderColumnSimple::SetSortOrder(ascending);
        return;
    }

    extern void sipVH__core_87(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__core_87(sipGILState, 0, sipPySelf, sipMeth, ascending);
}


PyDoc_STRVAR(doc_wxHeaderColumnSimple_SetTitle, "SetTitle(title)\n"
"\n"
"Trivial implementations of the base class pure virtual functions.");

extern "C" {static PyObject *meth_wxHeaderColumnSimple_SetTitle(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumnSimple_SetTitle(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxString* title;
        int titleState = 0;
         ::wxHeaderColumnSimple *sipCpp;

        static const char *sipKwdList[] = {
            sipName_title,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ1", &sipSelf, sipType_wxHeaderColumnSimple, &sipCpp, sipType_wxString,&title, &titleState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHeaderColumnSimple::SetTitle(*title) : sipCpp->SetTitle(*title));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(title),sipType_wxString,titleState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumnSimple, sipName_SetTitle, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumnSimple_GetTitle, "GetTitle() -> String\n"
"\n"
"Trivial implementations of the base class pure virtual functions.");

extern "C" {static PyObject *meth_wxHeaderColumnSimple_GetTitle(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumnSimple_GetTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHeaderColumnSimple *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderColumnSimple, &sipCpp))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxHeaderColumnSimple::GetTitle() : sipCpp->GetTitle()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumnSimple, sipName_GetTitle, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumnSimple_SetBitmap, "SetBitmap(bitmap)\n"
"\n"
"Trivial implementations of the base class pure virtual functions.");

extern "C" {static PyObject *meth_wxHeaderColumnSimple_SetBitmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumnSimple_SetBitmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxBitmap* bitmap;
         ::wxHeaderColumnSimple *sipCpp;

        static const char *sipKwdList[] = {
            sipName_bitmap,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxHeaderColumnSimple, &sipCpp, sipType_wxBitmap, &bitmap))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHeaderColumnSimple::SetBitmap(*bitmap) : sipCpp->SetBitmap(*bitmap));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumnSimple, sipName_SetBitmap, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumnSimple_GetBitmap, "GetBitmap() -> Bitmap\n"
"\n"
"Trivial implementations of the base class pure virtual functions.");

extern "C" {static PyObject *meth_wxHeaderColumnSimple_GetBitmap(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumnSimple_GetBitmap(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHeaderColumnSimple *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderColumnSimple, &sipCpp))
        {
             ::wxBitmap*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxBitmap((sipSelfWasArg ? sipCpp-> ::wxHeaderColumnSimple::GetBitmap() : sipCpp->GetBitmap()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxBitmap,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumnSimple, sipName_GetBitmap, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumnSimple_SetWidth, "SetWidth(width)\n"
"\n"
"Trivial implementations of the base class pure virtual functions.");

extern "C" {static PyObject *meth_wxHeaderColumnSimple_SetWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumnSimple_SetWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
         ::wxHeaderColumnSimple *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxHeaderColumnSimple, &sipCpp, &width))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHeaderColumnSimple::SetWidth(width) : sipCpp->SetWidth(width));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumnSimple, sipName_SetWidth, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumnSimple_GetWidth, "GetWidth() -> int\n"
"\n"
"Trivial implementations of the base class pure virtual functions.");

extern "C" {static PyObject *meth_wxHeaderColumnSimple_GetWidth(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumnSimple_GetWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHeaderColumnSimple *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderColumnSimple, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHeaderColumnSimple::GetWidth() : sipCpp->GetWidth());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumnSimple, sipName_GetWidth, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumnSimple_SetMinWidth, "SetMinWidth(minWidth)\n"
"\n"
"Trivial implementations of the base class pure virtual functions.");

extern "C" {static PyObject *meth_wxHeaderColumnSimple_SetMinWidth(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumnSimple_SetMinWidth(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minWidth;
         ::wxHeaderColumnSimple *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minWidth,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxHeaderColumnSimple, &sipCpp, &minWidth))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHeaderColumnSimple::SetMinWidth(minWidth) : sipCpp->SetMinWidth(minWidth));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumnSimple, sipName_SetMinWidth, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumnSimple_GetMinWidth, "GetMinWidth() -> int\n"
"\n"
"Trivial implementations of the base class pure virtual functions.");

extern "C" {static PyObject *meth_wxHeaderColumnSimple_GetMinWidth(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumnSimple_GetMinWidth(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHeaderColumnSimple *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderColumnSimple, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHeaderColumnSimple::GetMinWidth() : sipCpp->GetMinWidth());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumnSimple, sipName_GetMinWidth, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumnSimple_SetAlignment, "SetAlignment(align)\n"
"\n"
"Trivial implementations of the base class pure virtual functions.");

extern "C" {static PyObject *meth_wxHeaderColumnSimple_SetAlignment(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumnSimple_SetAlignment(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAlignment align;
         ::wxHeaderColumnSimple *sipCpp;

        static const char *sipKwdList[] = {
            sipName_align,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE", &sipSelf, sipType_wxHeaderColumnSimple, &sipCpp, sipType_wxAlignment, &align))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHeaderColumnSimple::SetAlignment(align) : sipCpp->SetAlignment(align));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumnSimple, sipName_SetAlignment, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumnSimple_GetAlignment, "GetAlignment() -> Alignment\n"
"\n"
"Trivial implementations of the base class pure virtual functions.");

extern "C" {static PyObject *meth_wxHeaderColumnSimple_GetAlignment(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumnSimple_GetAlignment(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHeaderColumnSimple *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderColumnSimple, &sipCpp))
        {
             ::wxAlignment sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHeaderColumnSimple::GetAlignment() : sipCpp->GetAlignment());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxAlignment);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumnSimple, sipName_GetAlignment, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumnSimple_SetFlags, "SetFlags(flags)\n"
"\n"
"Trivial implementations of the base class pure virtual functions.");

extern "C" {static PyObject *meth_wxHeaderColumnSimple_SetFlags(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumnSimple_SetFlags(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int flags;
         ::wxHeaderColumnSimple *sipCpp;

        static const char *sipKwdList[] = {
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bi", &sipSelf, sipType_wxHeaderColumnSimple, &sipCpp, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHeaderColumnSimple::SetFlags(flags) : sipCpp->SetFlags(flags));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumnSimple, sipName_SetFlags, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumnSimple_GetFlags, "GetFlags() -> int\n"
"\n"
"Trivial implementations of the base class pure virtual functions.");

extern "C" {static PyObject *meth_wxHeaderColumnSimple_GetFlags(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumnSimple_GetFlags(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHeaderColumnSimple *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderColumnSimple, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHeaderColumnSimple::GetFlags() : sipCpp->GetFlags());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumnSimple, sipName_GetFlags, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumnSimple_IsSortKey, "IsSortKey() -> bool\n"
"\n"
"Trivial implementations of the base class pure virtual functions.");

extern "C" {static PyObject *meth_wxHeaderColumnSimple_IsSortKey(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumnSimple_IsSortKey(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHeaderColumnSimple *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderColumnSimple, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHeaderColumnSimple::IsSortKey() : sipCpp->IsSortKey());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumnSimple, sipName_IsSortKey, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumnSimple_SetSortOrder, "SetSortOrder(ascending)\n"
"\n"
"Trivial implementations of the base class pure virtual functions.");

extern "C" {static PyObject *meth_wxHeaderColumnSimple_SetSortOrder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumnSimple_SetSortOrder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool ascending;
         ::wxHeaderColumnSimple *sipCpp;

        static const char *sipKwdList[] = {
            sipName_ascending,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxHeaderColumnSimple, &sipCpp, &ascending))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxHeaderColumnSimple::SetSortOrder(ascending) : sipCpp->SetSortOrder(ascending));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumnSimple, sipName_SetSortOrder, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxHeaderColumnSimple_IsSortOrderAscending, "IsSortOrderAscending() -> bool\n"
"\n"
"Trivial implementations of the base class pure virtual functions.");

extern "C" {static PyObject *meth_wxHeaderColumnSimple_IsSortOrderAscending(PyObject *, PyObject *);}
static PyObject *meth_wxHeaderColumnSimple_IsSortOrderAscending(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxHeaderColumnSimple *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxHeaderColumnSimple, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxHeaderColumnSimple::IsSortOrderAscending() : sipCpp->IsSortOrderAscending());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_HeaderColumnSimple, sipName_IsSortOrderAscending, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxHeaderColumnSimple(void *, const sipTypeDef *);}
static void *cast_wxHeaderColumnSimple(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxHeaderColumnSimple *sipCpp = reinterpret_cast< ::wxHeaderColumnSimple *>(sipCppV);

    if (targetType == sipType_wxSettableHeaderColumn)
        return static_cast< ::wxSettableHeaderColumn *>(sipCpp);

    if (targetType == sipType_wxHeaderColumn)
        return static_cast< ::wxHeaderColumn *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxHeaderColumnSimple(void *, int);}
static void release_wxHeaderColumnSimple(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxHeaderColumnSimple *>(sipCppV);
    else
        delete reinterpret_cast< ::wxHeaderColumnSimple *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxHeaderColumnSimple(sipSimpleWrapper *);}
static void dealloc_wxHeaderColumnSimple(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxHeaderColumnSimple *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxHeaderColumnSimple(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxHeaderColumnSimple(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxHeaderColumnSimple(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxHeaderColumnSimple *sipCpp = 0;

    {
        const  ::wxString* title;
        int titleState = 0;
        int width = wxCOL_WIDTH_DEFAULT;
         ::wxAlignment align = wxALIGN_NOT;
        int flags = wxCOL_DEFAULT_FLAGS;

        static const char *sipKwdList[] = {
            sipName_title,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J1|iEi", sipType_wxString,&title, &titleState, &width, sipType_wxAlignment, &align, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxHeaderColumnSimple(*title,width,align,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(title),sipType_wxString,titleState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxBitmap* bitmap;
        int width = wxCOL_WIDTH_DEFAULT;
         ::wxAlignment align = wxALIGN_CENTER;
        int flags = wxCOL_DEFAULT_FLAGS;

        static const char *sipKwdList[] = {
            sipName_bitmap,
            sipName_width,
            sipName_align,
            sipName_flags,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J9|iEi", sipType_wxBitmap, &bitmap, &width, sipType_wxAlignment, &align, &flags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxHeaderColumnSimple(*bitmap,width,align,flags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxHeaderColumnSimple* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "J9", sipType_wxHeaderColumnSimple, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxHeaderColumnSimple(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxHeaderColumnSimple[] = {{454, 255, 1}};


static PyMethodDef methods_wxHeaderColumnSimple[] = {
    {SIP_MLNAME_CAST(sipName_GetAlignment), meth_wxHeaderColumnSimple_GetAlignment, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderColumnSimple_GetAlignment)},
    {SIP_MLNAME_CAST(sipName_GetBitmap), meth_wxHeaderColumnSimple_GetBitmap, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderColumnSimple_GetBitmap)},
    {SIP_MLNAME_CAST(sipName_GetFlags), meth_wxHeaderColumnSimple_GetFlags, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderColumnSimple_GetFlags)},
    {SIP_MLNAME_CAST(sipName_GetMinWidth), meth_wxHeaderColumnSimple_GetMinWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderColumnSimple_GetMinWidth)},
    {SIP_MLNAME_CAST(sipName_GetTitle), meth_wxHeaderColumnSimple_GetTitle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderColumnSimple_GetTitle)},
    {SIP_MLNAME_CAST(sipName_GetWidth), meth_wxHeaderColumnSimple_GetWidth, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderColumnSimple_GetWidth)},
    {SIP_MLNAME_CAST(sipName_IsSortKey), meth_wxHeaderColumnSimple_IsSortKey, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderColumnSimple_IsSortKey)},
    {SIP_MLNAME_CAST(sipName_IsSortOrderAscending), meth_wxHeaderColumnSimple_IsSortOrderAscending, METH_VARARGS, SIP_MLDOC_CAST(doc_wxHeaderColumnSimple_IsSortOrderAscending)},
    {SIP_MLNAME_CAST(sipName_SetAlignment), (PyCFunction)meth_wxHeaderColumnSimple_SetAlignment, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderColumnSimple_SetAlignment)},
    {SIP_MLNAME_CAST(sipName_SetBitmap), (PyCFunction)meth_wxHeaderColumnSimple_SetBitmap, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderColumnSimple_SetBitmap)},
    {SIP_MLNAME_CAST(sipName_SetFlags), (PyCFunction)meth_wxHeaderColumnSimple_SetFlags, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderColumnSimple_SetFlags)},
    {SIP_MLNAME_CAST(sipName_SetMinWidth), (PyCFunction)meth_wxHeaderColumnSimple_SetMinWidth, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderColumnSimple_SetMinWidth)},
    {SIP_MLNAME_CAST(sipName_SetSortOrder), (PyCFunction)meth_wxHeaderColumnSimple_SetSortOrder, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderColumnSimple_SetSortOrder)},
    {SIP_MLNAME_CAST(sipName_SetTitle), (PyCFunction)meth_wxHeaderColumnSimple_SetTitle, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderColumnSimple_SetTitle)},
    {SIP_MLNAME_CAST(sipName_SetWidth), (PyCFunction)meth_wxHeaderColumnSimple_SetWidth, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxHeaderColumnSimple_SetWidth)}
};

sipVariableDef variables_wxHeaderColumnSimple[] = {
    {PropertyVariable, sipName_Width, &methods_wxHeaderColumnSimple[5], &methods_wxHeaderColumnSimple[14], NULL, NULL},
    {PropertyVariable, sipName_Title, &methods_wxHeaderColumnSimple[4], &methods_wxHeaderColumnSimple[13], NULL, NULL},
    {PropertyVariable, sipName_MinWidth, &methods_wxHeaderColumnSimple[3], &methods_wxHeaderColumnSimple[11], NULL, NULL},
    {PropertyVariable, sipName_Flags, &methods_wxHeaderColumnSimple[2], &methods_wxHeaderColumnSimple[10], NULL, NULL},
    {PropertyVariable, sipName_Bitmap, &methods_wxHeaderColumnSimple[1], &methods_wxHeaderColumnSimple[9], NULL, NULL},
    {PropertyVariable, sipName_Alignment, &methods_wxHeaderColumnSimple[0], &methods_wxHeaderColumnSimple[8], NULL, NULL},
};

PyDoc_STRVAR(doc_wxHeaderColumnSimple, "HeaderColumnSimple(title, width=COL_WIDTH_DEFAULT, align=ALIGN_NOT, flags=COL_DEFAULT_FLAGS)\n"
"HeaderColumnSimple(bitmap, width=COL_WIDTH_DEFAULT, align=ALIGN_CENTER, flags=COL_DEFAULT_FLAGS)\n"
"\n"
"Simple container for the information about the column.");


sipClassTypeDef sipTypeDef__core_wxHeaderColumnSimple = {
    {
        -1,
        0,
        0,
        SIP_TYPE_CLASS,
        sipNameNr_wxHeaderColumnSimple,
        {0},
        0
    },
    {
        sipNameNr_HeaderColumnSimple,
        {0, 0, 1},
        15, methods_wxHeaderColumnSimple,
        0, 0,
        6, variables_wxHeaderColumnSimple,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxHeaderColumnSimple,
    -1,
    -1,
    supers_wxHeaderColumnSimple,
    0,
    init_type_wxHeaderColumnSimple,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxHeaderColumnSimple,
    0,
    0,
    0,
    release_wxHeaderColumnSimple,
    cast_wxHeaderColumnSimple,
    0,
    0,
    0,
    0,
    0,
    0
};
