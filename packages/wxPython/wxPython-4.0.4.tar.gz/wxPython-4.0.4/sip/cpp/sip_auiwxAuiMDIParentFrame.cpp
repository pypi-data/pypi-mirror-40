/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.13
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_aui.h"

        #include <wx/aui/tabmdi.h>

        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/validate.h>
        #include <wx/aui/tabmdi.h>
        #include <wx/aui/tabmdi.h>
        #include <wx/menu.h>
        #include <wx/menu.h>
        #include <wx/aui/auibook.h>
        #include <wx/aui/auibook.h>
        #include <wx/toolbar.h>
        #include <wx/statusbr.h>
        #include <wx/iconbndl.h>
        #include <wx/icon.h>
        #include <wx/region.h>
        #include <wx/graphics.h>
        #include <wx/window.h>
        #include <wx/event.h>
    #include <wx/setup.h>
    #include <wxPython/wxpy_api.h>
        #include <wx/event.h>
        #include <wx/cursor.h>
        #include <wx/caret.h>
        #include <wx/layout.h>
        #include <wx/sizer.h>
        #include <wx/dnd.h>
        #include <wx/access.h>
        #include <wx/accel.h>
        #include <wx/tooltip.h>
        #include <wx/event.h>
        #include <wx/gdicmn.h>
        #include <wx/event.h>
        #include <wx/event.h>
        #include <wx/palette.h>
        #include <wx/colour.h>
        #include <wx/font.h>
        
        #include <wx/eventfilter.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxAuiMDIParentFrame : public  ::wxAuiMDIParentFrame
{
public:
    sipwxAuiMDIParentFrame();
    sipwxAuiMDIParentFrame( ::wxWindow*, ::wxWindowID,const  ::wxString&,const  ::wxPoint&,const  ::wxSize&,long,const  ::wxString&);
    virtual ~sipwxAuiMDIParentFrame();

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
    void sipProtect_SendDestroyEvent();
    bool sipProtectVirt_ProcessEvent(bool, ::wxEvent&);
    void sipProtectVirt_DoEnable(bool,bool);
    void sipProtectVirt_DoGetPosition(bool,int*,int*) const;
    void sipProtectVirt_DoGetSize(bool,int*,int*) const;
    void sipProtectVirt_DoGetClientSize(bool,int*,int*) const;
     ::wxSize sipProtectVirt_DoGetBestSize(bool) const;
     ::wxSize sipProtectVirt_DoGetBestClientSize(bool) const;
    void sipProtectVirt_DoSetSize(bool,int,int,int,int,int);
    void sipProtectVirt_DoSetClientSize(bool,int,int);
    void sipProtectVirt_DoSetSizeHints(bool,int,int,int,int,int,int);
     ::wxSize sipProtectVirt_DoGetBorderSize(bool) const;
    void sipProtectVirt_DoMoveWindow(bool,int,int,int,int);
    void sipProtectVirt_DoSetWindowVariant(bool, ::wxWindowVariant);
     ::wxBorder sipProtectVirt_GetDefaultBorder(bool) const;
     ::wxBorder sipProtectVirt_GetDefaultBorderForControl(bool) const;
    void sipProtectVirt_DoFreeze(bool);
    void sipProtectVirt_DoThaw(bool);
    bool sipProtectVirt_HasTransparentBackground(bool);
    bool sipProtectVirt_TryBefore(bool, ::wxEvent&);
    bool sipProtectVirt_TryAfter(bool, ::wxEvent&);

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool ShouldPreventAppExit() const;
     ::wxSize DoGetBestClientSize() const;
     ::wxSize DoGetBestSize() const;
    void DoThaw();
    void DoFreeze();
     ::wxBorder GetDefaultBorderForControl() const;
     ::wxBorder GetDefaultBorder() const;
    void DoSetWindowVariant( ::wxWindowVariant);
    void DoMoveWindow(int,int,int,int);
     ::wxSize DoGetBorderSize() const;
    void DoSetSizeHints(int,int,int,int,int,int);
    void DoSetClientSize(int,int);
    void DoSetSize(int,int,int,int,int);
    void DoGetClientSize(int*,int*) const;
    void DoGetSize(int*,int*) const;
    void DoGetPosition(int*,int*) const;
    void DoEnable(bool);
     ::wxWindow* GetMainWindowOfCompositeControl();
    void OnInternalIdle();
    void InitDialog();
    void InheritAttributes();
    bool Destroy();
    bool Validate();
    bool TransferDataToWindow();
    bool TransferDataFromWindow();
    void SetValidator(const  ::wxValidator&);
     ::wxValidator* GetValidator();
    bool ShouldInheritColours() const;
    bool HasTransparentBackground();
     ::wxPoint GetClientAreaOrigin() const;
    bool InformFirstDirection(int,int,int);
    void SetCanFocus(bool);
    bool AcceptsFocusRecursively() const;
    bool AcceptsFocusFromKeyboard() const;
    bool AcceptsFocus() const;
    bool TryAfter( ::wxEvent&);
    bool TryBefore( ::wxEvent&);
    bool ProcessEvent( ::wxEvent&);
    void AddChild( ::wxWindowBase*);
    void RemoveChild( ::wxWindowBase*);
     ::wxStatusBar* OnCreateStatusBar(int,long, ::wxWindowID,const  ::wxString&);
     ::wxToolBar* OnCreateToolBar(long, ::wxWindowID,const  ::wxString&);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxAuiMDIParentFrame(const sipwxAuiMDIParentFrame &);
    sipwxAuiMDIParentFrame &operator = (const sipwxAuiMDIParentFrame &);

    char sipPyMethods[42];
};

sipwxAuiMDIParentFrame::sipwxAuiMDIParentFrame():  ::wxAuiMDIParentFrame(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxAuiMDIParentFrame::sipwxAuiMDIParentFrame( ::wxWindow*parent, ::wxWindowID winid,const  ::wxString& title,const  ::wxPoint& pos,const  ::wxSize& size,long style,const  ::wxString& name):  ::wxAuiMDIParentFrame(parent,winid,title,pos,size,style,name), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxAuiMDIParentFrame::~sipwxAuiMDIParentFrame()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxAuiMDIParentFrame::ShouldPreventAppExit() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[0]),sipPySelf,NULL,sipName_ShouldPreventAppExit);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::ShouldPreventAppExit();

    extern bool sipVH__aui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_29(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxAuiMDIParentFrame::DoGetBestClientSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[1]),sipPySelf,NULL,sipName_DoGetBestClientSize);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::DoGetBestClientSize();

    extern  ::wxSize sipVH__aui_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_39(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxSize sipwxAuiMDIParentFrame::DoGetBestSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[2]),sipPySelf,NULL,sipName_DoGetBestSize);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::DoGetBestSize();

    extern  ::wxSize sipVH__aui_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_39(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiMDIParentFrame::DoThaw()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_DoThaw);

    if (!sipMeth)
    {
         ::wxAuiMDIParentFrame::DoThaw();
        return;
    }

    extern void sipVH__aui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_1(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiMDIParentFrame::DoFreeze()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_DoFreeze);

    if (!sipMeth)
    {
         ::wxAuiMDIParentFrame::DoFreeze();
        return;
    }

    extern void sipVH__aui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_1(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxAuiMDIParentFrame::GetDefaultBorderForControl() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[5]),sipPySelf,NULL,sipName_GetDefaultBorderForControl);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::GetDefaultBorderForControl();

    extern  ::wxBorder sipVH__aui_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_42(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxBorder sipwxAuiMDIParentFrame::GetDefaultBorder() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[6]),sipPySelf,NULL,sipName_GetDefaultBorder);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::GetDefaultBorder();

    extern  ::wxBorder sipVH__aui_42(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_42(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiMDIParentFrame::DoSetWindowVariant( ::wxWindowVariant variant)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,NULL,sipName_DoSetWindowVariant);

    if (!sipMeth)
    {
         ::wxAuiMDIParentFrame::DoSetWindowVariant(variant);
        return;
    }

    extern void sipVH__aui_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowVariant);

    sipVH__aui_41(sipGILState, 0, sipPySelf, sipMeth, variant);
}

void sipwxAuiMDIParentFrame::DoMoveWindow(int x,int y,int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,NULL,sipName_DoMoveWindow);

    if (!sipMeth)
    {
         ::wxAuiMDIParentFrame::DoMoveWindow(x,y,width,height);
        return;
    }

    extern void sipVH__aui_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int);

    sipVH__aui_40(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height);
}

 ::wxSize sipwxAuiMDIParentFrame::DoGetBorderSize() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[9]),sipPySelf,NULL,sipName_DoGetBorderSize);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::DoGetBorderSize();

    extern  ::wxSize sipVH__aui_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_39(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiMDIParentFrame::DoSetSizeHints(int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,NULL,sipName_DoSetSizeHints);

    if (!sipMeth)
    {
         ::wxAuiMDIParentFrame::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH);
        return;
    }

    extern void sipVH__aui_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int,int);

    sipVH__aui_38(sipGILState, 0, sipPySelf, sipMeth, minW, minH, maxW, maxH, incW, incH);
}

void sipwxAuiMDIParentFrame::DoSetClientSize(int width,int height)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,NULL,sipName_DoSetClientSize);

    if (!sipMeth)
    {
         ::wxAuiMDIParentFrame::DoSetClientSize(width,height);
        return;
    }

    extern void sipVH__aui_15(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    sipVH__aui_15(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxAuiMDIParentFrame::DoSetSize(int x,int y,int width,int height,int sizeFlags)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,NULL,sipName_DoSetSize);

    if (!sipMeth)
    {
         ::wxAuiMDIParentFrame::DoSetSize(x,y,width,height,sizeFlags);
        return;
    }

    extern void sipVH__aui_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int,int,int);

    sipVH__aui_37(sipGILState, 0, sipPySelf, sipMeth, x, y, width, height, sizeFlags);
}

void sipwxAuiMDIParentFrame::DoGetClientSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[13]),sipPySelf,NULL,sipName_DoGetClientSize);

    if (!sipMeth)
    {
         ::wxAuiMDIParentFrame::DoGetClientSize(width,height);
        return;
    }

    extern void sipVH__aui_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__aui_36(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxAuiMDIParentFrame::DoGetSize(int*width,int*height) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[14]),sipPySelf,NULL,sipName_DoGetSize);

    if (!sipMeth)
    {
         ::wxAuiMDIParentFrame::DoGetSize(width,height);
        return;
    }

    extern void sipVH__aui_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__aui_36(sipGILState, 0, sipPySelf, sipMeth, width, height);
}

void sipwxAuiMDIParentFrame::DoGetPosition(int*x,int*y) const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[15]),sipPySelf,NULL,sipName_DoGetPosition);

    if (!sipMeth)
    {
         ::wxAuiMDIParentFrame::DoGetPosition(x,y);
        return;
    }

    extern void sipVH__aui_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int*,int*);

    sipVH__aui_36(sipGILState, 0, sipPySelf, sipMeth, x, y);
}

void sipwxAuiMDIParentFrame::DoEnable(bool enable)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,NULL,sipName_DoEnable);

    if (!sipMeth)
    {
         ::wxAuiMDIParentFrame::DoEnable(enable);
        return;
    }

    extern void sipVH__aui_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__aui_30(sipGILState, 0, sipPySelf, sipMeth, enable);
}

 ::wxWindow* sipwxAuiMDIParentFrame::GetMainWindowOfCompositeControl()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,NULL,sipName_GetMainWindowOfCompositeControl);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::GetMainWindowOfCompositeControl();

    extern  ::wxWindow* sipVH__aui_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_35(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiMDIParentFrame::OnInternalIdle()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,NULL,sipName_OnInternalIdle);

    if (!sipMeth)
    {
         ::wxAuiMDIParentFrame::OnInternalIdle();
        return;
    }

    extern void sipVH__aui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_1(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiMDIParentFrame::InitDialog()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,NULL,sipName_InitDialog);

    if (!sipMeth)
    {
         ::wxAuiMDIParentFrame::InitDialog();
        return;
    }

    extern void sipVH__aui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_1(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiMDIParentFrame::InheritAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,NULL,sipName_InheritAttributes);

    if (!sipMeth)
    {
         ::wxAuiMDIParentFrame::InheritAttributes();
        return;
    }

    extern void sipVH__aui_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__aui_1(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiMDIParentFrame::Destroy()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,NULL,sipName_Destroy);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::Destroy();

    extern bool sipVH__aui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_29(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiMDIParentFrame::Validate()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,NULL,sipName_Validate);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::Validate();

    extern bool sipVH__aui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_29(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiMDIParentFrame::TransferDataToWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,NULL,sipName_TransferDataToWindow);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::TransferDataToWindow();

    extern bool sipVH__aui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_29(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiMDIParentFrame::TransferDataFromWindow()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,NULL,sipName_TransferDataFromWindow);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::TransferDataFromWindow();

    extern bool sipVH__aui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_29(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxAuiMDIParentFrame::SetValidator(const  ::wxValidator& validator)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,NULL,sipName_SetValidator);

    if (!sipMeth)
    {
         ::wxAuiMDIParentFrame::SetValidator(validator);
        return;
    }

    extern void sipVH__aui_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const  ::wxValidator&);

    sipVH__aui_34(sipGILState, 0, sipPySelf, sipMeth, validator);
}

 ::wxValidator* sipwxAuiMDIParentFrame::GetValidator()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,NULL,sipName_GetValidator);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::GetValidator();

    extern  ::wxValidator* sipVH__aui_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_33(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiMDIParentFrame::ShouldInheritColours() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[27]),sipPySelf,NULL,sipName_ShouldInheritColours);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::ShouldInheritColours();

    extern bool sipVH__aui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_29(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiMDIParentFrame::HasTransparentBackground()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,NULL,sipName_HasTransparentBackground);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::HasTransparentBackground();

    extern bool sipVH__aui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_29(sipGILState, 0, sipPySelf, sipMeth);
}

 ::wxPoint sipwxAuiMDIParentFrame::GetClientAreaOrigin() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[29]),sipPySelf,NULL,sipName_GetClientAreaOrigin);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::GetClientAreaOrigin();

    extern  ::wxPoint sipVH__aui_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_32(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiMDIParentFrame::InformFirstDirection(int direction,int size,int availableOtherDir)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[30],sipPySelf,NULL,sipName_InformFirstDirection);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::InformFirstDirection(direction,size,availableOtherDir);

    extern bool sipVH__aui_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,int);

    return sipVH__aui_31(sipGILState, 0, sipPySelf, sipMeth, direction, size, availableOtherDir);
}

void sipwxAuiMDIParentFrame::SetCanFocus(bool canFocus)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,NULL,sipName_SetCanFocus);

    if (!sipMeth)
    {
         ::wxAuiMDIParentFrame::SetCanFocus(canFocus);
        return;
    }

    extern void sipVH__aui_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, bool);

    sipVH__aui_30(sipGILState, 0, sipPySelf, sipMeth, canFocus);
}

bool sipwxAuiMDIParentFrame::AcceptsFocusRecursively() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[32]),sipPySelf,NULL,sipName_AcceptsFocusRecursively);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::AcceptsFocusRecursively();

    extern bool sipVH__aui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_29(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiMDIParentFrame::AcceptsFocusFromKeyboard() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[33]),sipPySelf,NULL,sipName_AcceptsFocusFromKeyboard);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::AcceptsFocusFromKeyboard();

    extern bool sipVH__aui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_29(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiMDIParentFrame::AcceptsFocus() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[34]),sipPySelf,NULL,sipName_AcceptsFocus);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::AcceptsFocus();

    extern bool sipVH__aui_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__aui_29(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxAuiMDIParentFrame::TryAfter( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[35],sipPySelf,NULL,sipName_TryAfter);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::TryAfter(event);

    extern bool sipVH__aui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__aui_0(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxAuiMDIParentFrame::TryBefore( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[36],sipPySelf,NULL,sipName_TryBefore);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::TryBefore(event);

    extern bool sipVH__aui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__aui_0(sipGILState, 0, sipPySelf, sipMeth, event);
}

bool sipwxAuiMDIParentFrame::ProcessEvent( ::wxEvent& event)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[37],sipPySelf,NULL,sipName_ProcessEvent);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::ProcessEvent(event);

    extern bool sipVH__aui_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxEvent&);

    return sipVH__aui_0(sipGILState, 0, sipPySelf, sipMeth, event);
}

void sipwxAuiMDIParentFrame::AddChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[38],sipPySelf,NULL,sipName_AddChild);

    if (!sipMeth)
    {
         ::wxAuiMDIParentFrame::AddChild(child);
        return;
    }

    extern void sipVH__aui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__aui_28(sipGILState, 0, sipPySelf, sipMeth, child);
}

void sipwxAuiMDIParentFrame::RemoveChild( ::wxWindowBase*child)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[39],sipPySelf,NULL,sipName_RemoveChild);

    if (!sipMeth)
    {
         ::wxAuiMDIParentFrame::RemoveChild(child);
        return;
    }

    extern void sipVH__aui_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxWindowBase*);

    sipVH__aui_28(sipGILState, 0, sipPySelf, sipMeth, child);
}

 ::wxStatusBar* sipwxAuiMDIParentFrame::OnCreateStatusBar(int number,long style, ::wxWindowID id,const  ::wxString& name)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[40],sipPySelf,NULL,sipName_OnCreateStatusBar);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::OnCreateStatusBar(number,style,id,name);

    extern  ::wxStatusBar* sipVH__aui_62(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,long, ::wxWindowID,const  ::wxString&);

    return sipVH__aui_62(sipGILState, 0, sipPySelf, sipMeth, number, style, id, name);
}

 ::wxToolBar* sipwxAuiMDIParentFrame::OnCreateToolBar(long style, ::wxWindowID id,const  ::wxString& name)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[41],sipPySelf,NULL,sipName_OnCreateToolBar);

    if (!sipMeth)
        return  ::wxAuiMDIParentFrame::OnCreateToolBar(style,id,name);

    extern  ::wxToolBar* sipVH__aui_61(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, long, ::wxWindowID,const  ::wxString&);

    return sipVH__aui_61(sipGILState, 0, sipPySelf, sipMeth, style, id, name);
}

void sipwxAuiMDIParentFrame::sipProtect_SendDestroyEvent()
{
     ::wxWindow::SendDestroyEvent();
}

bool sipwxAuiMDIParentFrame::sipProtectVirt_ProcessEvent(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxAuiMDIParentFrame::ProcessEvent(event) : ProcessEvent(event));
}

void sipwxAuiMDIParentFrame::sipProtectVirt_DoEnable(bool sipSelfWasArg,bool enable)
{
    (sipSelfWasArg ?  ::wxAuiMDIParentFrame::DoEnable(enable) : DoEnable(enable));
}

void sipwxAuiMDIParentFrame::sipProtectVirt_DoGetPosition(bool sipSelfWasArg,int*x,int*y) const
{
    (sipSelfWasArg ?  ::wxAuiMDIParentFrame::DoGetPosition(x,y) : DoGetPosition(x,y));
}

void sipwxAuiMDIParentFrame::sipProtectVirt_DoGetSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxAuiMDIParentFrame::DoGetSize(width,height) : DoGetSize(width,height));
}

void sipwxAuiMDIParentFrame::sipProtectVirt_DoGetClientSize(bool sipSelfWasArg,int*width,int*height) const
{
    (sipSelfWasArg ?  ::wxAuiMDIParentFrame::DoGetClientSize(width,height) : DoGetClientSize(width,height));
}

 ::wxSize sipwxAuiMDIParentFrame::sipProtectVirt_DoGetBestSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxAuiMDIParentFrame::DoGetBestSize() : DoGetBestSize());
}

 ::wxSize sipwxAuiMDIParentFrame::sipProtectVirt_DoGetBestClientSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxAuiMDIParentFrame::DoGetBestClientSize() : DoGetBestClientSize());
}

void sipwxAuiMDIParentFrame::sipProtectVirt_DoSetSize(bool sipSelfWasArg,int x,int y,int width,int height,int sizeFlags)
{
    (sipSelfWasArg ?  ::wxAuiMDIParentFrame::DoSetSize(x,y,width,height,sizeFlags) : DoSetSize(x,y,width,height,sizeFlags));
}

void sipwxAuiMDIParentFrame::sipProtectVirt_DoSetClientSize(bool sipSelfWasArg,int width,int height)
{
    (sipSelfWasArg ?  ::wxAuiMDIParentFrame::DoSetClientSize(width,height) : DoSetClientSize(width,height));
}

void sipwxAuiMDIParentFrame::sipProtectVirt_DoSetSizeHints(bool sipSelfWasArg,int minW,int minH,int maxW,int maxH,int incW,int incH)
{
    (sipSelfWasArg ?  ::wxAuiMDIParentFrame::DoSetSizeHints(minW,minH,maxW,maxH,incW,incH) : DoSetSizeHints(minW,minH,maxW,maxH,incW,incH));
}

 ::wxSize sipwxAuiMDIParentFrame::sipProtectVirt_DoGetBorderSize(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxAuiMDIParentFrame::DoGetBorderSize() : DoGetBorderSize());
}

void sipwxAuiMDIParentFrame::sipProtectVirt_DoMoveWindow(bool sipSelfWasArg,int x,int y,int width,int height)
{
    (sipSelfWasArg ?  ::wxAuiMDIParentFrame::DoMoveWindow(x,y,width,height) : DoMoveWindow(x,y,width,height));
}

void sipwxAuiMDIParentFrame::sipProtectVirt_DoSetWindowVariant(bool sipSelfWasArg, ::wxWindowVariant variant)
{
    (sipSelfWasArg ?  ::wxAuiMDIParentFrame::DoSetWindowVariant(variant) : DoSetWindowVariant(variant));
}

 ::wxBorder sipwxAuiMDIParentFrame::sipProtectVirt_GetDefaultBorder(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxAuiMDIParentFrame::GetDefaultBorder() : GetDefaultBorder());
}

 ::wxBorder sipwxAuiMDIParentFrame::sipProtectVirt_GetDefaultBorderForControl(bool sipSelfWasArg) const
{
    return (sipSelfWasArg ?  ::wxAuiMDIParentFrame::GetDefaultBorderForControl() : GetDefaultBorderForControl());
}

void sipwxAuiMDIParentFrame::sipProtectVirt_DoFreeze(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxAuiMDIParentFrame::DoFreeze() : DoFreeze());
}

void sipwxAuiMDIParentFrame::sipProtectVirt_DoThaw(bool sipSelfWasArg)
{
    (sipSelfWasArg ?  ::wxAuiMDIParentFrame::DoThaw() : DoThaw());
}

bool sipwxAuiMDIParentFrame::sipProtectVirt_HasTransparentBackground(bool sipSelfWasArg)
{
    return (sipSelfWasArg ?  ::wxAuiMDIParentFrame::HasTransparentBackground() : HasTransparentBackground());
}

bool sipwxAuiMDIParentFrame::sipProtectVirt_TryBefore(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxAuiMDIParentFrame::TryBefore(event) : TryBefore(event));
}

bool sipwxAuiMDIParentFrame::sipProtectVirt_TryAfter(bool sipSelfWasArg, ::wxEvent& event)
{
    return (sipSelfWasArg ?  ::wxAuiMDIParentFrame::TryAfter(event) : TryAfter(event));
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_SendDestroyEvent, "SendDestroyEvent()\n"
"\n"
"Generate wxWindowDestroyEvent for this window.");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_SendDestroyEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_SendDestroyEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        sipwxAuiMDIParentFrame *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtect_SendDestroyEvent();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_SendDestroyEvent, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_Create, "Create(parent, winid=wx.ID_ANY, title=wx.EmptyString, pos=wx.DefaultPosition, size=wx.DefaultSize, style=wx.DEFAULT_FRAME_STYLE|wx.VSCROLL|wx.HSCROLL, name=wx.FrameNameStr) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_Create(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_Create(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxWindow* parent;
         ::wxWindowID winid = wxID_ANY;
        const  ::wxString& titledef = wxEmptyString;
        const  ::wxString* title = &titledef;
        int titleState = 0;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxDEFAULT_FRAME_STYLE|wxVSCROLL|wxHSCROLL;
        const  ::wxString& namedef = wxFrameNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;
         ::wxAuiMDIParentFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_winid,
            sipName_title,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8|iJ1J1J1lJ1", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp, sipType_wxWindow, &parent, &winid, sipType_wxString,&title, &titleState, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxString,&name, &nameState))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->Create(parent,winid,*title,*pos,*size,style,*name);
            Py_END_ALLOW_THREADS

            sipTransferTo(sipSelf, NULL);
            sipReleaseType(const_cast< ::wxString *>(title),sipType_wxString,titleState);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_Create, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_SetArtProvider, "SetArtProvider(provider)");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_SetArtProvider(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_SetArtProvider(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxAuiTabArt* provider;
         ::wxAuiMDIParentFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_provider,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp, sipType_wxAuiTabArt, &provider))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetArtProvider(provider);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_SetArtProvider, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_GetArtProvider, "GetArtProvider() -> AuiTabArt");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_GetArtProvider(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_GetArtProvider(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
             ::wxAuiTabArt*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetArtProvider();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiTabArt,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_GetArtProvider, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_GetNotebook, "GetNotebook() -> AuiNotebook");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_GetNotebook(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_GetNotebook(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
             ::wxAuiNotebook*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetNotebook();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiNotebook,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_GetNotebook, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_GetWindowMenu, "GetWindowMenu() -> wx.Menu");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_GetWindowMenu(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_GetWindowMenu(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
             ::wxMenu*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetWindowMenu();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxMenu,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_GetWindowMenu, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_SetWindowMenu, "SetWindowMenu(pMenu)");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_SetWindowMenu(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_SetWindowMenu(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxMenu* pMenu;
         ::wxAuiMDIParentFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pMenu,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp, sipType_wxMenu, &pMenu))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetWindowMenu(pMenu);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_SetWindowMenu, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_SetMenuBar, "SetMenuBar(menuBar)\n"
"\n"
"Tells the frame to show the given menu bar.");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_SetMenuBar(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_SetMenuBar(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxMenuBar* menuBar;
         ::wxAuiMDIParentFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_menuBar,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ:", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp, sipType_wxMenuBar, &menuBar))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetMenuBar(menuBar);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_SetMenuBar, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_SetChildMenuBar, "SetChildMenuBar(pChild)");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_SetChildMenuBar(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_SetChildMenuBar(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxAuiMDIChildFrame* pChild;
         ::wxAuiMDIParentFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pChild,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp, sipType_wxAuiMDIChildFrame, &pChild))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetChildMenuBar(pChild);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_SetChildMenuBar, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_GetActiveChild, "GetActiveChild() -> AuiMDIChildFrame");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_GetActiveChild(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_GetActiveChild(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
             ::wxAuiMDIChildFrame*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetActiveChild();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiMDIChildFrame,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_GetActiveChild, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_SetActiveChild, "SetActiveChild(pChildFrame)");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_SetActiveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_SetActiveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxAuiMDIChildFrame* pChildFrame;
         ::wxAuiMDIParentFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pChildFrame,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp, sipType_wxAuiMDIChildFrame, &pChildFrame))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->SetActiveChild(pChildFrame);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_SetActiveChild, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_GetClientWindow, "GetClientWindow() -> AuiMDIClientWindow");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_GetClientWindow(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_GetClientWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
             ::wxAuiMDIClientWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetClientWindow();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiMDIClientWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_GetClientWindow, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_OnCreateClient, "OnCreateClient() -> AuiMDIClientWindow");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_OnCreateClient(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_OnCreateClient(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
             ::wxAuiMDIClientWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->OnCreateClient();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxAuiMDIClientWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_OnCreateClient, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_Cascade, "Cascade()");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_Cascade(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_Cascade(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Cascade();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_Cascade, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_Tile, "Tile(orient=wx.HORIZONTAL)");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_Tile(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_Tile(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxOrientation orient = wxHORIZONTAL;
         ::wxAuiMDIParentFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_orient,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "B|E", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp, sipType_wxOrientation, &orient))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->Tile(orient);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_Tile, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_ArrangeIcons, "ArrangeIcons()");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_ArrangeIcons(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_ArrangeIcons(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ArrangeIcons();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_ArrangeIcons, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_ActivateNext, "ActivateNext()");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_ActivateNext(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_ActivateNext(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ActivateNext();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_ActivateNext, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_ActivatePrevious, "ActivatePrevious()");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_ActivatePrevious(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_ActivatePrevious(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->ActivatePrevious();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_ActivatePrevious, NULL);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_GetClientAreaOrigin, "GetClientAreaOrigin(self) -> Point");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_GetClientAreaOrigin(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_GetClientAreaOrigin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
             ::wxPoint*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxPoint((sipSelfWasArg ? sipCpp-> ::wxAuiMDIParentFrame::GetClientAreaOrigin() : sipCpp->GetClientAreaOrigin()));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxPoint,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_GetClientAreaOrigin, doc_wxAuiMDIParentFrame_GetClientAreaOrigin);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_Validate, "Validate(self) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_Validate(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_Validate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIParentFrame::Validate() : sipCpp->Validate());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_Validate, doc_wxAuiMDIParentFrame_Validate);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_TransferDataToWindow, "TransferDataToWindow(self) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_TransferDataToWindow(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_TransferDataToWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIParentFrame::TransferDataToWindow() : sipCpp->TransferDataToWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_TransferDataToWindow, doc_wxAuiMDIParentFrame_TransferDataToWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_TransferDataFromWindow, "TransferDataFromWindow(self) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_TransferDataFromWindow(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_TransferDataFromWindow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIParentFrame::TransferDataFromWindow() : sipCpp->TransferDataFromWindow());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_TransferDataFromWindow, doc_wxAuiMDIParentFrame_TransferDataFromWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_InitDialog, "InitDialog(self)");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_InitDialog(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_InitDialog(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiMDIParentFrame::InitDialog() : sipCpp->InitDialog());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_InitDialog, doc_wxAuiMDIParentFrame_InitDialog);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_AcceptsFocus, "AcceptsFocus(self) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_AcceptsFocus(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_AcceptsFocus(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIParentFrame::AcceptsFocus() : sipCpp->AcceptsFocus());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_AcceptsFocus, doc_wxAuiMDIParentFrame_AcceptsFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_AcceptsFocusRecursively, "AcceptsFocusRecursively(self) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_AcceptsFocusRecursively(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_AcceptsFocusRecursively(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIParentFrame::AcceptsFocusRecursively() : sipCpp->AcceptsFocusRecursively());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_AcceptsFocusRecursively, doc_wxAuiMDIParentFrame_AcceptsFocusRecursively);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_AcceptsFocusFromKeyboard, "AcceptsFocusFromKeyboard(self) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_AcceptsFocusFromKeyboard(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_AcceptsFocusFromKeyboard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIParentFrame::AcceptsFocusFromKeyboard() : sipCpp->AcceptsFocusFromKeyboard());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_AcceptsFocusFromKeyboard, doc_wxAuiMDIParentFrame_AcceptsFocusFromKeyboard);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_AddChild, "AddChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_AddChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_AddChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxAuiMDIParentFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiMDIParentFrame::AddChild(child) : sipCpp->AddChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_AddChild, doc_wxAuiMDIParentFrame_AddChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_RemoveChild, "RemoveChild(self, child: WindowBase)");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_RemoveChild(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_RemoveChild(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowBase* child;
         ::wxAuiMDIParentFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_child,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ8", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp, sipType_wxWindowBase, &child))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiMDIParentFrame::RemoveChild(child) : sipCpp->RemoveChild(child));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_RemoveChild, doc_wxAuiMDIParentFrame_RemoveChild);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_InheritAttributes, "InheritAttributes(self)");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_InheritAttributes(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_InheritAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiMDIParentFrame::InheritAttributes() : sipCpp->InheritAttributes());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_InheritAttributes, doc_wxAuiMDIParentFrame_InheritAttributes);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_ShouldInheritColours, "ShouldInheritColours(self) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_ShouldInheritColours(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_ShouldInheritColours(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIParentFrame::ShouldInheritColours() : sipCpp->ShouldInheritColours());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_ShouldInheritColours, doc_wxAuiMDIParentFrame_ShouldInheritColours);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_OnInternalIdle, "OnInternalIdle(self)");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_OnInternalIdle(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_OnInternalIdle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiMDIParentFrame::OnInternalIdle() : sipCpp->OnInternalIdle());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_OnInternalIdle, doc_wxAuiMDIParentFrame_OnInternalIdle);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_GetMainWindowOfCompositeControl, "GetMainWindowOfCompositeControl(self) -> Window");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_GetMainWindowOfCompositeControl(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_GetMainWindowOfCompositeControl(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
             ::wxWindow*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIParentFrame::GetMainWindowOfCompositeControl() : sipCpp->GetMainWindowOfCompositeControl());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxWindow,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_GetMainWindowOfCompositeControl, doc_wxAuiMDIParentFrame_GetMainWindowOfCompositeControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_InformFirstDirection, "InformFirstDirection(self, direction: int, size: int, availableOtherDir: int) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_InformFirstDirection(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_InformFirstDirection(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int direction;
        int size;
        int availableOtherDir;
         ::wxAuiMDIParentFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_direction,
            sipName_size,
            sipName_availableOtherDir,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biii", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp, &direction, &size, &availableOtherDir))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIParentFrame::InformFirstDirection(direction,size,availableOtherDir) : sipCpp->InformFirstDirection(direction,size,availableOtherDir));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_InformFirstDirection, doc_wxAuiMDIParentFrame_InformFirstDirection);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_SetCanFocus, "SetCanFocus(self, canFocus: bool)");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_SetCanFocus(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_SetCanFocus(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool canFocus;
         ::wxAuiMDIParentFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_canFocus,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp, &canFocus))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiMDIParentFrame::SetCanFocus(canFocus) : sipCpp->SetCanFocus(canFocus));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_SetCanFocus, doc_wxAuiMDIParentFrame_SetCanFocus);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_Destroy, "Destroy(self) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_Destroy(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_Destroy(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIParentFrame::Destroy() : sipCpp->Destroy());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_Destroy, doc_wxAuiMDIParentFrame_Destroy);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_SetValidator, "SetValidator(self, validator: Validator)");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_SetValidator(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_SetValidator(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const  ::wxValidator* validator;
         ::wxAuiMDIParentFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_validator,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp, sipType_wxValidator, &validator))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxAuiMDIParentFrame::SetValidator(*validator) : sipCpp->SetValidator(*validator));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_SetValidator, doc_wxAuiMDIParentFrame_SetValidator);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_GetValidator, "GetValidator(self) -> Validator");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_GetValidator(PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_GetValidator(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxAuiMDIParentFrame *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
             ::wxValidator*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxAuiMDIParentFrame::GetValidator() : sipCpp->GetValidator());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxValidator,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_GetValidator, doc_wxAuiMDIParentFrame_GetValidator);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_ProcessEvent, "ProcessEvent(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_ProcessEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_ProcessEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxAuiMDIParentFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_ProcessEvent(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_ProcessEvent, doc_wxAuiMDIParentFrame_ProcessEvent);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_DoEnable, "DoEnable(self, enable: bool)");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_DoEnable(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_DoEnable(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        bool enable;
        sipwxAuiMDIParentFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_enable,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bb", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp, &enable))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoEnable(sipSelfWasArg,enable);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_DoEnable, doc_wxAuiMDIParentFrame_DoEnable);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_DoGetPosition, "DoGetPosition(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_DoGetPosition(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_DoGetPosition(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        const sipwxAuiMDIParentFrame *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetPosition(sipSelfWasArg,&x,&y);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",x,y);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_DoGetPosition, doc_wxAuiMDIParentFrame_DoGetPosition);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_DoGetSize, "DoGetSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_DoGetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_DoGetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxAuiMDIParentFrame *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_DoGetSize, doc_wxAuiMDIParentFrame_DoGetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_DoGetClientSize, "DoGetClientSize(self) -> Tuple[int, int]");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_DoGetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_DoGetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        const sipwxAuiMDIParentFrame *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoGetClientSize(sipSelfWasArg,&width,&height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipBuildResult(0,"(ii)",width,height);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_DoGetClientSize, doc_wxAuiMDIParentFrame_DoGetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_DoGetBestSize, "DoGetBestSize(self) -> Size");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_DoGetBestSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_DoGetBestSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxAuiMDIParentFrame *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_DoGetBestSize, doc_wxAuiMDIParentFrame_DoGetBestSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_DoGetBestClientSize, "DoGetBestClientSize(self) -> Size");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_DoGetBestClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_DoGetBestClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxAuiMDIParentFrame *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBestClientSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_DoGetBestClientSize, doc_wxAuiMDIParentFrame_DoGetBestClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_DoSetSize, "DoSetSize(self, x: int, y: int, width: int, height: int, sizeFlags: int)");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_DoSetSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_DoSetSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        int sizeFlags;
        sipwxAuiMDIParentFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
            sipName_sizeFlags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiii", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp, &x, &y, &width, &height, &sizeFlags))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSize(sipSelfWasArg,x,y,width,height,sizeFlags);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_DoSetSize, doc_wxAuiMDIParentFrame_DoSetSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_DoSetClientSize, "DoSetClientSize(self, width: int, height: int)");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_DoSetClientSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_DoSetClientSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int width;
        int height;
        sipwxAuiMDIParentFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Bii", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetClientSize(sipSelfWasArg,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_DoSetClientSize, doc_wxAuiMDIParentFrame_DoSetClientSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_DoSetSizeHints, "DoSetSizeHints(self, minW: int, minH: int, maxW: int, maxH: int, incW: int, incH: int)");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_DoSetSizeHints(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_DoSetSizeHints(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int minW;
        int minH;
        int maxW;
        int maxH;
        int incW;
        int incH;
        sipwxAuiMDIParentFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_minW,
            sipName_minH,
            sipName_maxW,
            sipName_maxH,
            sipName_incW,
            sipName_incH,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiiiii", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp, &minW, &minH, &maxW, &maxH, &incW, &incH))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetSizeHints(sipSelfWasArg,minW,minH,maxW,maxH,incW,incH);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_DoSetSizeHints, doc_wxAuiMDIParentFrame_DoSetSizeHints);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_DoGetBorderSize, "DoGetBorderSize(self) -> Size");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_DoGetBorderSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_DoGetBorderSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxAuiMDIParentFrame *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
             ::wxSize*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->sipProtectVirt_DoGetBorderSize(sipSelfWasArg));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_DoGetBorderSize, doc_wxAuiMDIParentFrame_DoGetBorderSize);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_DoMoveWindow, "DoMoveWindow(self, x: int, y: int, width: int, height: int)");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_DoMoveWindow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_DoMoveWindow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int x;
        int y;
        int width;
        int height;
        sipwxAuiMDIParentFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_x,
            sipName_y,
            sipName_width,
            sipName_height,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "Biiii", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp, &x, &y, &width, &height))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoMoveWindow(sipSelfWasArg,x,y,width,height);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_DoMoveWindow, doc_wxAuiMDIParentFrame_DoMoveWindow);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_DoSetWindowVariant, "DoSetWindowVariant(self, variant: WindowVariant)");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_DoSetWindowVariant(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_DoSetWindowVariant(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxWindowVariant variant;
        sipwxAuiMDIParentFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_variant,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BE", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp, sipType_wxWindowVariant, &variant))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoSetWindowVariant(sipSelfWasArg,variant);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_DoSetWindowVariant, doc_wxAuiMDIParentFrame_DoSetWindowVariant);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_GetDefaultBorder, "GetDefaultBorder(self) -> Border");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_GetDefaultBorder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_GetDefaultBorder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxAuiMDIParentFrame *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorder(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_GetDefaultBorder, doc_wxAuiMDIParentFrame_GetDefaultBorder);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_GetDefaultBorderForControl, "GetDefaultBorderForControl(self) -> Border");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_GetDefaultBorderForControl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_GetDefaultBorderForControl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        const sipwxAuiMDIParentFrame *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
             ::wxBorder sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_GetDefaultBorderForControl(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromEnum(static_cast<int>(sipRes), sipType_wxBorder);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_GetDefaultBorderForControl, doc_wxAuiMDIParentFrame_GetDefaultBorderForControl);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_DoFreeze, "DoFreeze(self)");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_DoFreeze(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_DoFreeze(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxAuiMDIParentFrame *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoFreeze(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_DoFreeze, doc_wxAuiMDIParentFrame_DoFreeze);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_DoThaw, "DoThaw(self)");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_DoThaw(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_DoThaw(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxAuiMDIParentFrame *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_DoThaw(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_DoThaw, doc_wxAuiMDIParentFrame_DoThaw);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_HasTransparentBackground, "HasTransparentBackground(self) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_HasTransparentBackground(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_HasTransparentBackground(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        sipwxAuiMDIParentFrame *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_HasTransparentBackground(sipSelfWasArg);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_HasTransparentBackground, doc_wxAuiMDIParentFrame_HasTransparentBackground);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_TryBefore, "TryBefore(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_TryBefore(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_TryBefore(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxAuiMDIParentFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryBefore(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_TryBefore, doc_wxAuiMDIParentFrame_TryBefore);

    return NULL;
}


PyDoc_STRVAR(doc_wxAuiMDIParentFrame_TryAfter, "TryAfter(self, event: Event) -> bool");

extern "C" {static PyObject *meth_wxAuiMDIParentFrame_TryAfter(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxAuiMDIParentFrame_TryAfter(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxEvent* event;
        sipwxAuiMDIParentFrame *sipCpp;

        static const char *sipKwdList[] = {
            sipName_event,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, NULL, "BJ9", &sipSelf, sipType_wxAuiMDIParentFrame, &sipCpp, sipType_wxEvent, &event))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtectVirt_TryAfter(sipSelfWasArg,*event);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_AuiMDIParentFrame, sipName_TryAfter, doc_wxAuiMDIParentFrame_TryAfter);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxAuiMDIParentFrame(void *, const sipTypeDef *);}
static void *cast_wxAuiMDIParentFrame(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxAuiMDIParentFrame *sipCpp = reinterpret_cast< ::wxAuiMDIParentFrame *>(sipCppV);

    if (targetType == sipType_wxFrame)
        return static_cast< ::wxFrame *>(sipCpp);

    if (targetType == sipType_wxTopLevelWindow)
        return static_cast< ::wxTopLevelWindow *>(sipCpp);

    if (targetType == sipType_wxNonOwnedWindow)
        return static_cast< ::wxNonOwnedWindow *>(sipCpp);

    if (targetType == sipType_wxWindow)
        return static_cast< ::wxWindow *>(sipCpp);

    if (targetType == sipType_wxWindowBase)
        return static_cast< ::wxWindowBase *>(sipCpp);

    if (targetType == sipType_wxEvtHandler)
        return static_cast< ::wxEvtHandler *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    if (targetType == sipType_wxTrackable)
        return static_cast< ::wxTrackable *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxAuiMDIParentFrame(void *, int);}
static void release_wxAuiMDIParentFrame(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxAuiMDIParentFrame *>(sipCppV);
    else
        delete reinterpret_cast< ::wxAuiMDIParentFrame *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxAuiMDIParentFrame(sipSimpleWrapper *);}
static void dealloc_wxAuiMDIParentFrame(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxAuiMDIParentFrame *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxAuiMDIParentFrame(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxAuiMDIParentFrame(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxAuiMDIParentFrame(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **sipOwner, PyObject **sipParseErr)
{
    sipwxAuiMDIParentFrame *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxAuiMDIParentFrame();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
         ::wxWindow* parent;
         ::wxWindowID winid = wxID_ANY;
        const  ::wxString& titledef = wxEmptyString;
        const  ::wxString* title = &titledef;
        int titleState = 0;
        const  ::wxPoint& posdef = wxDefaultPosition;
        const  ::wxPoint* pos = &posdef;
        int posState = 0;
        const  ::wxSize& sizedef = wxDefaultSize;
        const  ::wxSize* size = &sizedef;
        int sizeState = 0;
        long style = wxDEFAULT_FRAME_STYLE|wxVSCROLL|wxHSCROLL;
        const  ::wxString& namedef = wxFrameNameStr;
        const  ::wxString* name = &namedef;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_parent,
            sipName_winid,
            sipName_title,
            sipName_pos,
            sipName_size,
            sipName_style,
            sipName_name,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "J8|iJ1J1J1lJ1", sipType_wxWindow, &parent, &winid, sipType_wxString,&title, &titleState, sipType_wxPoint, &pos, &posState, sipType_wxSize, &size, &sizeState, &style, sipType_wxString,&name, &nameState))
        {

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxAuiMDIParentFrame(parent,winid,*title,*pos,*size,style,*name);
            Py_END_ALLOW_THREADS

            *sipOwner = Py_None;
            sipReleaseType(const_cast< ::wxString *>(title),sipType_wxString,titleState);
            sipReleaseType(const_cast< ::wxPoint *>(pos),sipType_wxPoint,posState);
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return NULL;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxAuiMDIParentFrame[] = {{14, 0, 1}};


static PyMethodDef methods_wxAuiMDIParentFrame[] = {
    {SIP_MLNAME_CAST(sipName_AcceptsFocus), meth_wxAuiMDIParentFrame_AcceptsFocus, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_AcceptsFocus)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusFromKeyboard), meth_wxAuiMDIParentFrame_AcceptsFocusFromKeyboard, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_AcceptsFocusFromKeyboard)},
    {SIP_MLNAME_CAST(sipName_AcceptsFocusRecursively), meth_wxAuiMDIParentFrame_AcceptsFocusRecursively, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_AcceptsFocusRecursively)},
    {SIP_MLNAME_CAST(sipName_ActivateNext), meth_wxAuiMDIParentFrame_ActivateNext, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_ActivateNext)},
    {SIP_MLNAME_CAST(sipName_ActivatePrevious), meth_wxAuiMDIParentFrame_ActivatePrevious, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_ActivatePrevious)},
    {SIP_MLNAME_CAST(sipName_AddChild), (PyCFunction)meth_wxAuiMDIParentFrame_AddChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_AddChild)},
    {SIP_MLNAME_CAST(sipName_ArrangeIcons), meth_wxAuiMDIParentFrame_ArrangeIcons, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_ArrangeIcons)},
    {SIP_MLNAME_CAST(sipName_Cascade), meth_wxAuiMDIParentFrame_Cascade, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_Cascade)},
    {SIP_MLNAME_CAST(sipName_Create), (PyCFunction)meth_wxAuiMDIParentFrame_Create, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_Create)},
    {SIP_MLNAME_CAST(sipName_Destroy), meth_wxAuiMDIParentFrame_Destroy, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_Destroy)},
    {SIP_MLNAME_CAST(sipName_DoEnable), (PyCFunction)meth_wxAuiMDIParentFrame_DoEnable, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_DoEnable)},
    {SIP_MLNAME_CAST(sipName_DoFreeze), (PyCFunction)meth_wxAuiMDIParentFrame_DoFreeze, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_DoFreeze)},
    {SIP_MLNAME_CAST(sipName_DoGetBestClientSize), (PyCFunction)meth_wxAuiMDIParentFrame_DoGetBestClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_DoGetBestClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBestSize), (PyCFunction)meth_wxAuiMDIParentFrame_DoGetBestSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_DoGetBestSize)},
    {SIP_MLNAME_CAST(sipName_DoGetBorderSize), (PyCFunction)meth_wxAuiMDIParentFrame_DoGetBorderSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_DoGetBorderSize)},
    {SIP_MLNAME_CAST(sipName_DoGetClientSize), (PyCFunction)meth_wxAuiMDIParentFrame_DoGetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_DoGetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoGetPosition), (PyCFunction)meth_wxAuiMDIParentFrame_DoGetPosition, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_DoGetPosition)},
    {SIP_MLNAME_CAST(sipName_DoGetSize), (PyCFunction)meth_wxAuiMDIParentFrame_DoGetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_DoGetSize)},
    {SIP_MLNAME_CAST(sipName_DoMoveWindow), (PyCFunction)meth_wxAuiMDIParentFrame_DoMoveWindow, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_DoMoveWindow)},
    {SIP_MLNAME_CAST(sipName_DoSetClientSize), (PyCFunction)meth_wxAuiMDIParentFrame_DoSetClientSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_DoSetClientSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSize), (PyCFunction)meth_wxAuiMDIParentFrame_DoSetSize, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_DoSetSize)},
    {SIP_MLNAME_CAST(sipName_DoSetSizeHints), (PyCFunction)meth_wxAuiMDIParentFrame_DoSetSizeHints, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_DoSetSizeHints)},
    {SIP_MLNAME_CAST(sipName_DoSetWindowVariant), (PyCFunction)meth_wxAuiMDIParentFrame_DoSetWindowVariant, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_DoSetWindowVariant)},
    {SIP_MLNAME_CAST(sipName_DoThaw), (PyCFunction)meth_wxAuiMDIParentFrame_DoThaw, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_DoThaw)},
    {SIP_MLNAME_CAST(sipName_GetActiveChild), meth_wxAuiMDIParentFrame_GetActiveChild, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_GetActiveChild)},
    {SIP_MLNAME_CAST(sipName_GetArtProvider), meth_wxAuiMDIParentFrame_GetArtProvider, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_GetArtProvider)},
    {SIP_MLNAME_CAST(sipName_GetClientAreaOrigin), meth_wxAuiMDIParentFrame_GetClientAreaOrigin, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_GetClientAreaOrigin)},
    {SIP_MLNAME_CAST(sipName_GetClientWindow), meth_wxAuiMDIParentFrame_GetClientWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_GetClientWindow)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorder), (PyCFunction)meth_wxAuiMDIParentFrame_GetDefaultBorder, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_GetDefaultBorder)},
    {SIP_MLNAME_CAST(sipName_GetDefaultBorderForControl), (PyCFunction)meth_wxAuiMDIParentFrame_GetDefaultBorderForControl, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_GetDefaultBorderForControl)},
    {SIP_MLNAME_CAST(sipName_GetMainWindowOfCompositeControl), meth_wxAuiMDIParentFrame_GetMainWindowOfCompositeControl, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_GetMainWindowOfCompositeControl)},
    {SIP_MLNAME_CAST(sipName_GetNotebook), meth_wxAuiMDIParentFrame_GetNotebook, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_GetNotebook)},
    {SIP_MLNAME_CAST(sipName_GetValidator), meth_wxAuiMDIParentFrame_GetValidator, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_GetValidator)},
    {SIP_MLNAME_CAST(sipName_GetWindowMenu), meth_wxAuiMDIParentFrame_GetWindowMenu, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_GetWindowMenu)},
    {SIP_MLNAME_CAST(sipName_HasTransparentBackground), (PyCFunction)meth_wxAuiMDIParentFrame_HasTransparentBackground, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_HasTransparentBackground)},
    {SIP_MLNAME_CAST(sipName_InformFirstDirection), (PyCFunction)meth_wxAuiMDIParentFrame_InformFirstDirection, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_InformFirstDirection)},
    {SIP_MLNAME_CAST(sipName_InheritAttributes), meth_wxAuiMDIParentFrame_InheritAttributes, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_InheritAttributes)},
    {SIP_MLNAME_CAST(sipName_InitDialog), meth_wxAuiMDIParentFrame_InitDialog, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_InitDialog)},
    {SIP_MLNAME_CAST(sipName_OnCreateClient), meth_wxAuiMDIParentFrame_OnCreateClient, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_OnCreateClient)},
    {SIP_MLNAME_CAST(sipName_OnInternalIdle), meth_wxAuiMDIParentFrame_OnInternalIdle, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_OnInternalIdle)},
    {SIP_MLNAME_CAST(sipName_ProcessEvent), (PyCFunction)meth_wxAuiMDIParentFrame_ProcessEvent, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_ProcessEvent)},
    {SIP_MLNAME_CAST(sipName_RemoveChild), (PyCFunction)meth_wxAuiMDIParentFrame_RemoveChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_RemoveChild)},
    {SIP_MLNAME_CAST(sipName_SendDestroyEvent), (PyCFunction)meth_wxAuiMDIParentFrame_SendDestroyEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_SetActiveChild), (PyCFunction)meth_wxAuiMDIParentFrame_SetActiveChild, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_SetActiveChild)},
    {SIP_MLNAME_CAST(sipName_SetArtProvider), (PyCFunction)meth_wxAuiMDIParentFrame_SetArtProvider, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_SetArtProvider)},
    {SIP_MLNAME_CAST(sipName_SetCanFocus), (PyCFunction)meth_wxAuiMDIParentFrame_SetCanFocus, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_SetCanFocus)},
    {SIP_MLNAME_CAST(sipName_SetChildMenuBar), (PyCFunction)meth_wxAuiMDIParentFrame_SetChildMenuBar, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_SetChildMenuBar)},
    {SIP_MLNAME_CAST(sipName_SetMenuBar), (PyCFunction)meth_wxAuiMDIParentFrame_SetMenuBar, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_SetMenuBar)},
    {SIP_MLNAME_CAST(sipName_SetValidator), (PyCFunction)meth_wxAuiMDIParentFrame_SetValidator, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_SetValidator)},
    {SIP_MLNAME_CAST(sipName_SetWindowMenu), (PyCFunction)meth_wxAuiMDIParentFrame_SetWindowMenu, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_SetWindowMenu)},
    {SIP_MLNAME_CAST(sipName_ShouldInheritColours), meth_wxAuiMDIParentFrame_ShouldInheritColours, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_ShouldInheritColours)},
    {SIP_MLNAME_CAST(sipName_Tile), (PyCFunction)meth_wxAuiMDIParentFrame_Tile, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_Tile)},
    {SIP_MLNAME_CAST(sipName_TransferDataFromWindow), meth_wxAuiMDIParentFrame_TransferDataFromWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_TransferDataFromWindow)},
    {SIP_MLNAME_CAST(sipName_TransferDataToWindow), meth_wxAuiMDIParentFrame_TransferDataToWindow, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_TransferDataToWindow)},
    {SIP_MLNAME_CAST(sipName_TryAfter), (PyCFunction)meth_wxAuiMDIParentFrame_TryAfter, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_TryAfter)},
    {SIP_MLNAME_CAST(sipName_TryBefore), (PyCFunction)meth_wxAuiMDIParentFrame_TryBefore, METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_TryBefore)},
    {SIP_MLNAME_CAST(sipName_Validate), meth_wxAuiMDIParentFrame_Validate, METH_VARARGS, SIP_MLDOC_CAST(doc_wxAuiMDIParentFrame_Validate)}
};

sipVariableDef variables_wxAuiMDIParentFrame[] = {
    {PropertyVariable, sipName_WindowMenu, &methods_wxAuiMDIParentFrame[33], &methods_wxAuiMDIParentFrame[49], NULL, NULL},
    {PropertyVariable, sipName_Notebook, &methods_wxAuiMDIParentFrame[31], NULL, NULL, NULL},
    {PropertyVariable, sipName_ClientWindow, &methods_wxAuiMDIParentFrame[27], NULL, NULL, NULL},
    {PropertyVariable, sipName_ArtProvider, &methods_wxAuiMDIParentFrame[25], &methods_wxAuiMDIParentFrame[44], NULL, NULL},
    {PropertyVariable, sipName_ActiveChild, &methods_wxAuiMDIParentFrame[24], &methods_wxAuiMDIParentFrame[43], NULL, NULL},
};

PyDoc_STRVAR(doc_wxAuiMDIParentFrame, "AuiMDIParentFrame()\n"
"AuiMDIParentFrame(parent, winid=wx.ID_ANY, title=wx.EmptyString, pos=wx.DefaultPosition, size=wx.DefaultSize, style=wx.DEFAULT_FRAME_STYLE|wx.VSCROLL|wx.HSCROLL, name=wx.FrameNameStr)");


sipClassTypeDef sipTypeDef__aui_wxAuiMDIParentFrame = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxAuiMDIParentFrame,
        {0},
        0
    },
    {
        sipNameNr_AuiMDIParentFrame,
        {0, 0, 1},
        57, methods_wxAuiMDIParentFrame,
        0, 0,
        5, variables_wxAuiMDIParentFrame,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    doc_wxAuiMDIParentFrame,
    -1,
    -1,
    supers_wxAuiMDIParentFrame,
    0,
    init_type_wxAuiMDIParentFrame,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_wxAuiMDIParentFrame,
    0,
    0,
    0,
    release_wxAuiMDIParentFrame,
    cast_wxAuiMDIParentFrame,
    0,
    0,
    0,
    0,
    0,
    0
};
