ccopy_reg
_reconstructor
p1
(csphinxtools.librarydescription
Library
p2
c__builtin__
object
p3
NtRp4
(dp5
S'kind'
p6
I0
sS'name'
p7
S'wx.tools-4.0.4'
p8
sS'parent'
p9
NsS'docs'
p10
S'Some useful tools and utilities for wxPython.'
p11
sS'is_redundant'
p12
I00
sS'comments'
p13
S''
sS'filename'
p14
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/wx/tools/__init__.py'
p15
sS'base_name'
p16
S'wx.tools'
p17
sS'obj_type'
p18
S'Library'
p19
sS'order'
p20
I0
sS'sphinx_file'
p21
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/docs/sphinx/wx.tools.txt'
p22
sS'children'
p23
(lp24
g1
(csphinxtools.librarydescription
Module
p25
g3
NtRp26
(dp27
g6
I2
sg7
S'wx.tools.dbg'
p28
sg9
g4
sg10
S'This module provides a useful debugging framework that supports\nshowing nesting of function calls and allows a program to contain\nlots of debugging print statements that can easily be turned on\nor off to debug the code.  It also supports the ability to\nhave each function indent the debugging statements contained\nwithin it, including those of any other function called within\nits scope, thus allowing you to see in what order functions are\nbeing called, and from where.\n\nThis capability is particularly useful in wxPython applications,\nwhere exactly events occur that cause functions to be called is\nnot entirely clear, and because wxPython programs can\'t be run\nfrom inside other debugging environments that have their own\nmessage loops.\n\nThis module defines a Logger class, responsible for managing\ndebugging output.  Each Logger instance can be given a name\nat construction; if this is done, \'<name>:\' will precede each\nlogging output made by that Logger instance.\n\nThe log() function this class provides takes a set of positional\narguments that are printed in order if debugging is enabled\n(just like print does), followed by a set of keyword arguments\nthat control the behavior of the log() function itself on subsequent\ncalls.  The current keyword arguments are:\n\nindent\n    When set to a value of 1, this increments the current\n    indentation level, causing all subsequent dbg() outputs to be\n    indented by 3 more spaces.  When set to a value of 0,\n    this process is reversed, causing the indent to decrease by\n    3 spaces.  The default indentation level is 0.\n\nenable\n    When set to a value of 1, this turns on dbg() output for\n    for program importing this module, until told to do otherwise.\n    When set to a value of 0, dbg output is turned off.  (dbg\n    output is off by default.)\n\nsuspend\n    When set to a value of 1, this increments the current\n    "suspension" level.  This makes it possible for a function\n    to temporarily suspend its and any of its dependents\'\n    potential outputs that use the same Logger instance.\n    When set to a value of 0, the suspension level is\n    decremented.  When the value goes back to 0, potential\n    logging is resumed (actual output depends on the\n    "enable" status of the Logger instance in question.)\n\nwxlog\n    When set to a value of 1, the output will be sent to the\n    active wxLog target.\n\nstream\n    When set to a non-None value, the current output stream\n    (default of sys.stdout) is pushed onto a stack of streams,\n    and is replaced in the dbg system with the specified stream.\n    When called with a value of None, the previous stream will\n    be restored (if stacked.)  If set to None without previously\n    changing it will result in no action being taken.\n\nYou can also call the log function implicitly on the Logger\ninstance, ie. you can type::\n\n    from wx.tools.dbg import Logger\n    dbg = Logger()\n    dbg(\'something to print\')\n\nUsing this fairly simple mechanism, it is possible to get fairly\nuseful debugging output in a program.  Consider the following\ncode example:\n\n>>> d = {1:\'a\', 2:\'dictionary\', 3:\'of\', 4:\'words\'}\n>>> dbg = dbg.Logger(\'module\')\n>>> dbg(enable=1)\nmodule: dbg enabled\n>>> def foo(d):\n...     dbg(\'foo\', indent=1)\n...     bar(d)\n...     dbg(\'end of foo\', indent=0)\n...\n>>> def bar(d):\n...     dbg(\'bar\', indent=1)\n...     dbg(\'contents of d:\', indent=1)\n...     l = d.items()\n...     l.sort()\n...     for key, value in l:\n...         dbg(\'%d =\' % key, value)\n...     dbg(indent=0)\n...     dbg(\'end of bar\', indent=0)\n...\n>>> foo(d)\nmodule: foo\n   module: bar\n      module: contents of d:\n         module: 1 = a\n         module: 2 = dictionary\n         module: 3 = of\n         module: 4 = words\n      module: end of bar\n   module: end of foo\n>>>'
p29
sg12
I00
sg13
S'#----------------------------------------------------------------------------\n# Name:         dbg.py\n# Author:       Will Sadkin\n# Email:        wsadkin@nameconnector.com\n# Created:      07/11/2002\n# Copyright:    (c) 2002 by Will Sadkin, 2002\n# License:      wxWindows license\n# Tags:         phoenix-port\n#----------------------------------------------------------------------------\n# 12/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)\n#\n# o V2.5 compatibility update\n#\n'
p30
sg14
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/wx/tools/dbg.py'
p31
sg18
S'Py_Module'
p32
sg20
I2
sg21
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/docs/sphinx/wx.tools.dbg.txt'
p33
sg23
(lp34
g1
(csphinxtools.librarydescription
Class
p35
g3
NtRp36
(dp37
g6
I6
sg18
S'Class'
p38
sg7
S'wx.tools.dbg.Logger'
p39
sg9
g26
sS'number_lines'
p40
S'104'
p41
sg10
S''
sS'signature'
p42
S'Logger:'
p43
sg12
I00
sg13
S''
sS'class_tree'
p44
(lp45
(lp46
S'Logger'
p47
aasg21
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/docs/sphinx/wx.tools.dbg.Logger.txt'
p48
sS'bases'
p49
(lp50
sS'superClasses'
p51
g50
sS'method_list'
p52
(lp53
S'__init__'
p54
aS'IsEnabled'
p55
aS'IsSuspended'
p56
aS'log'
p57
aS'SetEnabled'
p58
aS'SetIndent'
p59
aS'SetStream'
p60
aS'SetSuspend'
p61
aS'SetWxLog'
p62
asg20
I3
sS'subClasses'
p63
(lp64
sg23
(lp65
g1
(csphinxtools.librarydescription
Method
p66
g3
NtRp67
(dp68
g6
I11
sg18
S'Method/Function'
p69
sg7
S'wx.tools.dbg.Logger.__init__'
p70
sg9
g36
sg40
S'10'
p71
sg10
S''
sg12
I00
sg13
S''
sS'arguments'
p72
(lp73
(S'name'
S'None'
VNone
tp74
asg42
S'__init__(self, name=None)'
p75
sS'firstlineno'
p76
S'123'
p77
sg20
I5
sbag1
(g66
g3
NtRp78
(dp79
g6
I11
sg18
g69
sg7
S'wx.tools.dbg.Logger.IsEnabled'
p80
sg9
g36
sg40
S'3'
sg10
S''
sg12
I00
sg13
S''
sg72
(lp81
sg42
S'IsEnabled()'
p82
sg76
S'134'
p83
sg20
I5
sbag1
(g66
g3
NtRp84
(dp85
g6
I11
sg18
g69
sg7
S'wx.tools.dbg.Logger.IsSuspended'
p86
sg9
g36
sg40
S'3'
sg10
S''
sg12
I00
sg13
S''
sg72
(lp87
sg42
S'IsSuspended()'
p88
sg76
S'137'
p89
sg20
I5
sbag1
(g66
g3
NtRp90
(dp91
g6
I11
sg18
g69
sg7
S'wx.tools.dbg.Logger.log'
p92
sg9
g36
sg40
S'42'
p93
sg10
S'This function provides a useful framework for generating\noptional debugging output that can be displayed at an\narbitrary level of indentation.'
p94
sg12
I00
sg13
S''
sg72
(lp95
(S'*args'
S''
S''
tp96
a(S'**kwargs'
S''
S''
tp97
asg42
S'log(self, \\*args, \\*\\*kwargs)'
p98
sg76
S'141'
p99
sg20
I5
sbag1
(g66
g3
NtRp100
(dp101
g6
I11
sg18
g69
sg7
S'wx.tools.dbg.Logger.SetEnabled'
p102
sg9
g36
sg40
S'11'
p103
sg10
S''
sg12
I00
sg13
S''
sg72
(lp104
(S'value'
S''
S''
tp105
asg42
S'SetEnabled(self, value)'
p106
sg76
S'189'
p107
sg20
I5
sbag1
(g66
g3
NtRp108
(dp109
g6
I11
sg18
g69
sg7
S'wx.tools.dbg.Logger.SetIndent'
p110
sg9
g36
sg40
S'6'
sg10
S''
sg12
I00
sg13
S''
sg72
(lp111
(S'value'
S''
S''
tp112
asg42
S'SetIndent(self, value)'
p113
sg76
S'208'
p114
sg20
I5
sbag1
(g66
g3
NtRp115
(dp116
g6
I11
sg18
g69
sg7
S'wx.tools.dbg.Logger.SetStream'
p117
sg9
g36
sg40
S'7'
sg10
S''
sg12
I00
sg13
S''
sg72
(lp118
(S'value'
S''
S''
tp119
asg42
S'SetStream(self, value)'
p120
sg76
S'219'
p121
sg20
I5
sbag1
(g66
g3
NtRp122
(dp123
g6
I11
sg18
g69
sg7
S'wx.tools.dbg.Logger.SetSuspend'
p124
sg9
g36
sg40
S'6'
sg10
S''
sg12
I00
sg13
S''
sg72
(lp125
(S'value'
S''
S''
tp126
asg42
S'SetSuspend(self, value)'
p127
sg76
S'201'
p128
sg20
I5
sbag1
(g66
g3
NtRp129
(dp130
g6
I11
sg18
g69
sg7
S'wx.tools.dbg.Logger.SetWxLog'
p131
sg9
g36
sg40
S'3'
sg10
S''
sg12
I00
sg13
S''
sg72
(lp132
(S'value'
S''
S''
tp133
asg42
S'SetWxLog(self, value)'
p134
sg76
S'215'
p135
sg20
I5
sbasS'inheritance_diagram'
p136
g1
(csphinxtools.inheritance
InheritanceDiagram
p137
g3
NtRp138
(dp139
S'specials'
p140
(lp141
S'wx.tools.dbg.Logger'
p142
asS'main_class'
p143
g36
sS'class_info'
p144
(lp145
(S'wx.tools.dbg.Logger'
(ltp146
asbsbasg136
g1
(g137
g3
NtRp147
(dp148
g140
(lp149
S'wx.tools.dbg.Logger'
p150
asg143
g26
sg144
(lp151
(S'wx.tools.dbg.Logger'
(ltp152
asbsbag1
(g25
g3
NtRp153
(dp154
g6
I2
sg7
S'wx.tools.helpviewer'
p155
sg9
g4
sg10
S"helpviewer.py   --  Displays HTML Help in a wxHtmlHelpController window.\n\nUsage:\n    helpviewer [--cache=path] helpfile [helpfile(s)...]\n\n    Where helpfile is the path to either a .hhp file or a .zip file\n    which contains a .hhp file.  The .hhp files are the same as those\n    used by Microsoft's HTML Help Workshop for creating CHM files."
p156
sg12
I00
sg13
S'#----------------------------------------------------------------------\n# Name:        wx.tools.helpviewer\n# Purpose:     HTML Help viewer\n#\n# Author:      Robin Dunn\n#\n# Created:     11-Dec-2002\n# Copyright:   (c) 2002-2018 by Total Control Software\n# Licence:     wxWindows license\n# Tags:        phoenix-port, py3-port\n#----------------------------------------------------------------------\n'
p157
sg14
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/wx/tools/helpviewer.py'
p158
sg18
g32
sg20
I2
sg21
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/docs/sphinx/wx.tools.helpviewer.txt'
p159
sg23
(lp160
g1
(g66
g3
NtRp161
(dp162
g6
I7
sg18
g69
sg7
S'wx.tools.helpviewer.main'
p163
sg9
g153
sg40
S'53'
p164
sg10
S''
sg12
I00
sg13
S''
sg72
(lp165
(S'args'
S'sys.argv'
V['build.py', '2.7', 'setrev', 'dox', 'touch', 'etg', 'sip', 'build', 'wxlib', 'sdist', 'sdist_demo', '--upload', '--release']
tp166
asg42
S'main(args=sys.argv)'
p167
sg76
S'35'
p168
sg20
I5
sbag1
(g66
g3
NtRp169
(dp170
g6
I7
sg18
g69
sg7
S'wx.tools.helpviewer.makeOtherFrame'
p171
sg9
g153
sg40
S'5'
sg10
S''
sg12
I00
sg13
S''
sg72
(lp172
(S'helpctrl'
S''
S''
tp173
asg42
S'makeOtherFrame(helpctrl)'
p174
sg76
S'29'
p175
sg20
I5
sbasg136
Nsbag1
(g25
g3
NtRp176
(dp177
g6
I2
sg7
S'wx.tools.img2img'
p178
sg9
g4
sg10
S''
sg12
I00
sg13
S'#----------------------------------------------------------------------\n# Name:        wx.tools.img2img\n# Purpose:     Common routines for the image converter utilities.\n#\n# Author:      Robin Dunn\n#\n# Copyright:   (c) 2002-2018 by Total Control Software\n# Licence:     wxWindows license\n# Tags:        phoenix-port, py3-port\n#----------------------------------------------------------------------\n# 12/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)\n#\n# o V2.5 compatibility update\n#\n'
p179
sg14
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/wx/tools/img2img.py'
p180
sg18
g32
sg20
I2
sg21
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/docs/sphinx/wx.tools.img2img.txt'
p181
sg23
(lp182
g1
(g66
g3
NtRp183
(dp184
g6
I7
sg18
g69
sg7
S'wx.tools.img2img.convert'
p185
sg9
g176
sg40
S'25'
p186
sg10
S''
sg12
I00
sg13
S''
sg72
(lp187
(S'file'
S''
S''
tp188
a(S'maskClr'
S''
S''
tp189
a(S'outputDir'
S''
S''
tp190
a(S'outputName'
S''
S''
tp191
a(S'outType'
S''
S''
tp192
a(S'outExt'
S''
S''
tp193
asg42
S'convert(file, maskClr, outputDir, outputName, outType, outExt)'
p194
sg76
S'23'
p195
sg20
I5
sbag1
(g66
g3
NtRp196
(dp197
g6
I7
sg18
g69
sg7
S'wx.tools.img2img.main'
p198
sg9
g176
sg40
S'35'
p199
sg10
S''
sg12
I00
sg13
S''
sg72
(lp200
(S'args'
S''
S''
tp201
a(S'outType'
S''
S''
tp202
a(S'outExt'
S''
S''
tp203
a(S'doc'
S''
S''
tp204
asg42
S'main(args, outType, outExt, doc)'
p205
sg76
S'51'
p206
sg20
I5
sbasg136
Nsbag1
(g25
g3
NtRp207
(dp208
g6
I2
sg7
S'wx.tools.img2png'
p209
sg9
g4
sg10
S"img2png.py  -- convert several image formats to PNG format.\n\nUsage:\n\n    img2png.py [options] image_files...\n\nOptions:\n\n    -o <dir>       The directory to place the .png file(s), defaults to\n                   the current directory.\n\n    -m <#rrggbb>   If the original image has a mask or transparency defined\n                   it will be used by default.  You can use this option to\n                   override the default or provide a new mask by specifying\n                   a colour in the image to mark as transparent.\n\n    -n <name>      A filename to write the .png data to.  Defaults to the\n                   basename of the image file + '.png'  This option overrides\n                   the -o option."
p210
sg12
I00
sg13
S'#----------------------------------------------------------------------\n# Name:        wx.tools.img2png\n# Purpose:     Convert an image to PNG format\n#\n# Author:      Robin Dunn\n#\n# Copyright:   (c) 2002-2018 by Total Control Software\n# Licence:     wxWindows license\n#----------------------------------------------------------------------\n# 12/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)\n#\n# o V2.5 compatibility update\n#\n'
p211
sg14
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/wx/tools/img2png.py'
p212
sg18
g32
sg20
I2
sg21
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/docs/sphinx/wx.tools.img2png.txt'
p213
sg23
(lp214
g1
(g66
g3
NtRp215
(dp216
g6
I7
sg18
g69
sg7
S'wx.tools.img2png.main'
p217
sg9
g207
sg40
S'7'
sg10
S''
sg12
I00
sg13
S''
sg72
(lp218
sg42
S'main()'
p219
sg76
S'43'
p220
sg20
I5
sbag1
(csphinxtools.librarydescription
Attribute
p221
g3
NtRp222
(dp223
g6
I28
sg7
S'wx.tools.img2png.app'
p224
sg9
g207
sg10
S''
sg12
I00
sg13
S''
sS'specs'
p225
VNoneType
p226
sS'value'
p227
S'None'
p228
sg18
S'Attribute'
p229
sg20
I7
sbasg136
Nsbag1
(g25
g3
NtRp230
(dp231
g6
I2
sg7
S'wx.tools.img2py'
p232
sg9
g4
sg10
S"img2py.py  --  Convert an image to PNG format and embed it in a Python\n               module with appropriate code so it can be loaded into\n               a program at runtime.  The benefit is that since it is\n               Python source code it can be delivered as a .pyc or\n               'compiled' into the program using freeze, py2exe, etc.\n\nUsage:\n\n    img2py.py [options] image_file python_file\n\nOptions:\n\n    -m <#rrggbb>   If the original image has a mask or transparency defined\n                   it will be used by default.  You can use this option to\n                   override the default or provide a new mask by specifying\n                   a colour in the image to mark as transparent.\n\n    -n <name>      Normally generic names (getBitmap, etc.) are used for the\n                   image access functions.  If you use this option you can\n                   specify a name that should be used to customize the access\n                   functions, (getNameBitmap, etc.)\n\n    -c             Maintain a catalog of names that can be used to reference\n                   images.  Catalog can be accessed via catalog and\n                   index attributes of the module.\n                   If the -n <name> option is specified then <name>\n                   is used for the catalog key and index value, otherwise\n                   the filename without any path or extension is used\n                   as the key.\n\n    -a             This flag specifies that the python_file should be appended\n                   to instead of overwritten.  This in combination with -n will\n                   allow you to put multiple images in one Python source file.\n\n    -i             Also output a function to return the image as a wxIcon.\n\n    -f             Generate code compatible with the old function interface.\n                   (This option is ON by default in 2.8, use -f to turn off.)\n\nYou can also import this module from your Python scripts, and use its img2py()\nfunction. See its docstring for more info."
p233
sg12
I00
sg13
S'#----------------------------------------------------------------------\n# Name:        wx.tools.img2py\n# Purpose:     Convert an image to Python code.\n#\n# Author:      Robin Dunn\n#\n# Copyright:   (c) 2002-2018 by Total Control Software\n# Licence:     wxWindows license\n# Tags:        phoenix-port, py3-port\n#----------------------------------------------------------------------\n#\n# Changes:\n#    - Cliff Wells <LogiplexSoftware@earthlink.net>\n#      20021206: Added catalog (-c) option.\n#\n# 12/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)\n#        V2.5 compatibility update\n#\n# 2/25/2007 - Gianluca Costa (archimede86@katamail.com)\n#        -Refactorization of the script-creation code in a specific "img2py()" function\n#        -Added regex parsing instead of module importing\n#        -Added some "try/finally" statements\n#        -Added default values as named constants\n#        -Made some parts of code a bit easier to read\n#        -Updated the module docstring\n#        -Corrected a bug with EmptyIcon\n#\n# 11/26/2007 - Anthony Tuininga (anthony.tuininga@gmail.com)\n#        -Use base64 encoding instead of simple repr\n#        -Remove compression which doesn\'t buy anything in most cases and\n#         costs more in many cases\n#        -Use wx.lib.embeddedimage.PyEmbeddedImage class which has methods\n#         rather than using standalone methods\n#\n'
p234
sg14
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/wx/tools/img2py.py'
p235
sg18
g32
sg20
I2
sg21
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/docs/sphinx/wx.tools.img2py.txt'
p236
sg23
(lp237
g1
(g66
g3
NtRp238
(dp239
g6
I7
sg18
g69
sg7
S'wx.tools.img2py.b64encode'
p240
sg9
g230
sg40
S'16'
p241
sg10
S"Encode a string using Base64.\n\ns is the string to encode.  Optional altchars must be a string of at least\nlength 2 (additional characters are ignored) which specifies an\nalternative alphabet for the '+' and '/' characters.  This allows an\napplication to e.g. generate url or filesystem safe Base64 strings.\n\nThe encoded string is returned."
p242
sg12
I01
sg13
S''
sg72
(lp243
(S's'
S''
S''
tp244
a(S'altchars'
S'None'
VNone
tp245
asg42
S'b64encode(s, altchars=None)'
p246
sg76
S'43'
p247
sg20
I5
sbag1
(g66
g3
NtRp248
(dp249
g6
I7
sg18
g69
sg7
S'wx.tools.img2py.convert'
p250
sg9
g230
sg40
S'14'
p251
sg10
S''
sg12
I00
sg13
S''
sg72
(lp252
(S'fileName'
S''
S''
tp253
a(S'maskClr'
S''
S''
tp254
a(S'outputDir'
S''
S''
tp255
a(S'outputName'
S''
S''
tp256
a(S'outType'
S''
S''
tp257
a(S'outExt'
S''
S''
tp258
asg42
S'convert(fileName, maskClr, outputDir, outputName, outType, outExt)'
p259
sg76
S'112'
p260
sg20
I5
sbag1
(g66
g3
NtRp261
(dp262
g6
I7
sg18
g69
sg7
S'wx.tools.img2py.img2py'
p263
sg9
g230
sg40
S'144'
p264
sg10
S'Converts an image file to a data structure written in a Python file\n--image_file: string; the path of the source image file\n--python_file: string; the path of the destination python file\n--other arguments: they are equivalent to the command-line arguments'
p265
sg12
I00
sg13
S''
sg72
(lp266
(S'image_file'
S''
S''
tp267
a(S'python_file'
S''
S''
tp268
a(S'append'
S'DEFAULT_APPEND'
VFalse
tp269
a(S'compressed'
S'DEFAULT_COMPRESSED'
VTrue
tp270
a(S'maskClr'
S'DEFAULT_MASKCLR'
VNone
tp271
a(S'imgName'
S'DEFAULT_IMGNAME'
V
tp272
a(S'icon'
S'DEFAULT_ICON'
VFalse
tp273
a(S'catalog'
S'DEFAULT_CATALOG'
VFalse
tp274
a(S'functionCompatible'
S'DEFAULT_COMPATIBLE'
VFalse
tp275
a(S'functionCompatibile'
S'-1'
V-1
tp276
a(S''
S''
S''
tp277
asg42
S'img2py(image_file, python_file, append=DEFAULT_APPEND, compressed=DEFAULT_COMPRESSED, maskClr=DEFAULT_MASKCLR, imgName=DEFAULT_IMGNAME, icon=DEFAULT_ICON, catalog=DEFAULT_CATALOG, functionCompatible=DEFAULT_COMPATIBLE, functionCompatibile=-1, )'
p278
sg76
S'127'
p279
sg20
I5
sbag1
(g66
g3
NtRp280
(dp281
g6
I7
sg18
g69
sg7
S'wx.tools.img2py.main'
p282
sg9
g230
sg40
S'46'
p283
sg10
S''
sg12
I00
sg13
S''
sg72
(lp284
(S'args'
S'None'
VNone
tp285
asg42
S'main(args=None)'
p286
sg76
S'273'
p287
sg20
I5
sbag1
(g221
g3
NtRp288
(dp289
g6
I28
sg7
S'wx.tools.img2py.app'
p290
sg9
g230
sg10
S''
sg12
I00
sg13
S''
sg225
VNoneType
p291
sg227
S'None'
p292
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp293
(dp294
g6
I16
sg7
S'wx.tools.img2py.DEFAULT_APPEND'
p295
sg9
g230
sg10
S'bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.'
p296
sg12
I00
sg13
S''
sg225
Vbool
p297
sg227
S'False'
p298
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp299
(dp300
g6
I16
sg7
S'wx.tools.img2py.DEFAULT_CATALOG'
p301
sg9
g230
sg10
S'bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.'
p302
sg12
I00
sg13
S''
sg225
Vbool
p303
sg227
g298
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp304
(dp305
g6
I16
sg7
S'wx.tools.img2py.DEFAULT_COMPATIBLE'
p306
sg9
g230
sg10
S'bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.'
p307
sg12
I00
sg13
S''
sg225
Vbool
p308
sg227
g298
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp309
(dp310
g6
I16
sg7
S'wx.tools.img2py.DEFAULT_COMPRESSED'
p311
sg9
g230
sg10
S'bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.'
p312
sg12
I00
sg13
S''
sg225
Vbool
p313
sg227
S'True'
p314
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp315
(dp316
g6
I16
sg7
S'wx.tools.img2py.DEFAULT_ICON'
p317
sg9
g230
sg10
S'bool(x) -> bool\n\nReturns True when the argument x is true, False otherwise.\nThe builtins True and False are the only two instances of the class bool.\nThe class bool is a subclass of the class int, and cannot be subclassed.'
p318
sg12
I00
sg13
S''
sg225
Vbool
p319
sg227
g298
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp320
(dp321
g6
I31
sg7
S'wx.tools.img2py.DEFAULT_IMGNAME'
p322
sg9
g230
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p323
sg12
I00
sg13
S''
sg225
Vstr
p324
sg227
S"''"
p325
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp326
(dp327
g6
I28
sg7
S'wx.tools.img2py.DEFAULT_MASKCLR'
p328
sg9
g230
sg10
S''
sg12
I00
sg13
S''
sg225
VNoneType
p329
sg227
S'None'
p330
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp331
(dp332
g6
I36
sg7
S'wx.tools.img2py.indexPattern'
p333
sg9
g230
sg10
S'Compiled regular expression objects'
p334
sg12
I00
sg13
S''
sg225
V_sre.SRE_Pattern
p335
sg227
S'<_sre.SRE_Pattern object at 0x7f142fea5738>'
p336
sg18
g229
sg20
I7
sbasg136
Nsbag1
(g25
g3
NtRp337
(dp338
g6
I2
sg7
S'wx.tools.img2xpm'
p339
sg9
g4
sg10
S"img2xpm.py  -- convert several image formats to XPM.\n\nUsage:\n\n    img2xpm.py [options] image_files...\n\nOptions:\n\n    -o <dir>       The directory to place the .xpm file(s), defaults to\n                   the current directory.\n\n    -m <#rrggbb>   If the original image has a mask or transparency defined\n                   it will be used by default.  You can use this option to\n                   override the default or provide a new mask by specifying\n                   a colour in the image to mark as transparent.\n\n    -n <name>      A filename to write the .xpm data to.  Defaults to the\n                   basename of the image file + '.xpm'  This option overrides\n                   the -o option."
p340
sg12
I00
sg13
S'#----------------------------------------------------------------------\n# Name:        wx.tools.img2xpm\n# Purpose:     Convert an image to XPM format\n#\n# Author:      Robin Dunn\n#\n# Copyright:   (c) 2002-2018 by Total Control Software\n# Licence:     wxWindows license\n#----------------------------------------------------------------------\n# 12/21/2003 - Jeff Grimmett (grimmtooth@softhome.net)\n#\n# o V2.5 compatibility update\n#\n'
p341
sg14
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/wx/tools/img2xpm.py'
p342
sg18
g32
sg20
I2
sg21
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/docs/sphinx/wx.tools.img2xpm.txt'
p343
sg23
(lp344
g1
(g66
g3
NtRp345
(dp346
g6
I7
sg18
g69
sg7
S'wx.tools.img2xpm.main'
p347
sg9
g337
sg40
S'7'
sg10
S''
sg12
I00
sg13
S''
sg72
(lp348
sg42
S'main()'
p349
sg76
S'42'
p350
sg20
I5
sbag1
(g221
g3
NtRp351
(dp352
g6
I28
sg7
S'wx.tools.img2xpm.app'
p353
sg9
g337
sg10
S''
sg12
I00
sg13
S''
sg225
VNoneType
p354
sg227
S'None'
p355
sg18
g229
sg20
I7
sbasg136
Nsbag1
(g25
g3
NtRp356
(dp357
g6
I2
sg7
S'wx.tools.pywxrc'
p358
sg9
g4
sg10
S'pywxrc -- Python XML resource compiler\n          (see http://wiki.wxpython.org/index.cgi/pywxrc for more info)\n\nUsage: python pywxrc.py -h\n       python pywxrc.py [-p] [-g] [-e] [-v] [-o filename] xrc input files...\n\n  -h, --help     show help message\n  -p, --python   generate python module\n  -g, --gettext  output list of translatable strings (may be combined with -p)\n  -e, --embed    embed XRC resources in the output file\n  -v, --novar    suppress default assignment of variables\n  -o, --output   output filename, or - for stdout'
p359
sg12
I00
sg13
S'#----------------------------------------------------------------------\n# Name:        wx.tools.pywxrc\n# Purpose:     XML resource compiler\n#\n# Author:      Robin Dunn\n#              Based on wxrc.cpp by Vaclav Slavik, Eduardo Marques\n#              Ported to Python in order to not require yet another\n#              binary in wxPython distributions\n#\n#              Massive rework by Eli Golovinsky\n#\n#              Editable blocks by Roman Rolinsky\n#\n# Copyright:   (c) 2004-2018 by Total Control Software, 2000 Vaclav Slavik\n# Licence:     wxWindows license\n# Tags:        phoenix-port\n#----------------------------------------------------------------------\n'
p360
sg14
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/wx/tools/pywxrc.py'
p361
sg18
g32
sg20
I2
sg21
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/docs/sphinx/wx.tools.pywxrc.txt'
p362
sg23
(lp363
g1
(g35
g3
NtRp364
(dp365
g6
I6
sg18
g38
sg7
S'wx.tools.pywxrc.PythonTemplates'
p366
sg9
g356
sg40
S'208'
p367
sg10
S''
sg42
S'PythonTemplates'
p368
sg12
I00
sg13
S''
sg44
(lp369
(lp370
S'PythonTemplates'
p371
aasg21
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/docs/sphinx/wx.tools.pywxrc.PythonTemplates.txt'
p372
sg49
(lp373
sg51
g373
sg52
(lp374
sg20
I3
sg63
(lp375
sg23
(lp376
g1
(g221
g3
NtRp377
(dp378
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.ADD_FILE_TO_MEMFS'
p379
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p380
sg12
I01
sg13
S''
sg225
Vstr
p381
sg227
S'"    wx.MemoryFSHandler.AddFile(\'XRC/%(memoryPath)s/%(filename)s\', %(filename)s)\\n"'
p382
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp383
(dp384
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.BIND_EVENT'
p385
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p386
sg12
I01
sg13
S''
sg225
Vstr
p387
sg227
S"'        self.Bind(wx.%(event)s, self.%(eventHandler)s)\\n'"
p388
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp389
(dp390
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.BIND_WIDGET_EVENT'
p391
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p392
sg12
I01
sg13
S''
sg225
Vstr
p393
sg227
S"'        self.Bind(wx.%(event)s, self.%(eventHandler)s, %(eventObject)s)\\n'"
p394
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp395
(dp396
g6
I23
sg7
S'wx.tools.pywxrc.PythonTemplates.CLASS_HEADER'
p397
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p398
sg12
I01
sg13
S''
sg225
Vstr
p399
sg227
S'\'class xrc%(windowName)s(wx.%(windowClass)s):\\n#!XRCED:begin-block:xrc%(windowName)s.PreCreate\\n    def PreCreate(self):\\n        """ This function is called during the class\\\'s initialization.\\n\\n        Override it for custom setup before the window is created usually to\\n        set additional window styles using SetWindowStyle() and SetExtraStyle().\\n        """\\n        pass\\n\\n#!XRCED:end-block:xrc%(windowName)s.PreCreate\\n\\n    def __init__(self, parent):\\n        wx.%(windowClass)s.__init__(self)\\n        self.PreCreate()\\n        get_resources().Load%(windowClass)s(self, parent, "%(windowName)s")\\n\\n        # Define variables for the controls, bind event handlers\\n\''
p400
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp401
(dp402
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.CREATE_EVENT_HANDLER'
p403
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p404
sg12
I01
sg13
S''
sg225
Vstr
p405
sg227
S'\'#!XRCED:begin-block:xrc%(windowName)s.%(eventHandler)s\\n    def %(eventHandler)s(self, evt):\\n        # Replace with event handler code\\n        print("%(eventHandler)s()")\\n#!XRCED:end-block:xrc%(windowName)s.%(eventHandler)s\\n\''
p406
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp407
(dp408
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.CREATE_WIDGET_VAR'
p409
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p410
sg12
I01
sg13
S''
sg225
Vstr
p411
sg227
S'\'        self.%(widgetName)s = xrc.XRCCTRL(self, "%(widgetName)s")\\n\''
p412
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp413
(dp414
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.FILE_AS_STRING'
p415
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p416
sg12
I01
sg13
S''
sg225
Vstr
p417
sg227
S'"    %(filename)s = \'\'\'\\\\\\n%(fileData)s\'\'\'\\n\\n"'
p418
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp419
(dp420
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.FILE_HEADER'
p421
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p422
sg12
I01
sg13
S''
sg225
Vstr
p423
sg227
S'\'# This file was automatically generated by pywxrc.\\n# -*- coding: UTF-8 -*-\\n\\nimport wx\\nimport wx.xrc as xrc\\n\\n__res = None\\n\\ndef get_resources():\\n    """ This function provides access to the XML resources in this module."""\\n    global __res\\n    if __res == None:\\n        __init_resources()\\n    return __res\\n\\n\''
p424
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp425
(dp426
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.FRAME_MENUBAR_MENU_VAR'
p427
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p428
sg12
I01
sg13
S''
sg225
Vstr
p429
sg227
S'\'        idx = self.GetMenuBar().FindMenu("%(label)s")\\n        if idx != wx.NOT_FOUND:\\n            self.%(widgetName)s = self.GetMenuBar().GetMenu(idx)\\n        else:\\n            self.%(widgetName)s = self.GetMenuBar().FindItemById(xrc.XRCID("%(widgetName)s")).GetSubMenu()\\n\''
p430
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp431
(dp432
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.FRAME_MENUBAR_MENUITEM_VAR'
p433
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p434
sg12
I01
sg13
S''
sg225
Vstr
p435
sg227
S'\'        self.%(widgetName)s = self.GetMenuBar().FindItemById(xrc.XRCID("%(widgetName)s"))\\n\''
p436
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp437
(dp438
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.FRAME_MENUBAR_VAR'
p439
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p440
sg12
I01
sg13
S''
sg225
Vstr
p441
sg227
S"'        self.%(widgetName)s = self.GetMenuBar()\\n'"
p442
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp443
(dp444
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.FRAME_TOOLBAR_TOOL_VAR'
p445
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p446
sg12
I01
sg13
S''
sg225
Vstr
p447
sg227
S'\'        self.%(widgetName)s = self.GetToolBar().FindById(xrc.XRCID("%(widgetName)s"))\\n\''
p448
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp449
(dp450
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.FRAME_TOOLBAR_VAR'
p451
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p452
sg12
I01
sg13
S''
sg225
Vstr
p453
sg227
S"'        self.%(widgetName)s = self.GetToolBar()\\n'"
p454
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp455
(dp456
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.GETTEXT_DUMMY_FUNC'
p457
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p458
sg12
I01
sg13
S''
sg225
Vstr
p459
sg227
S'\'\\n# ----------------------- Gettext strings ---------------------\\n\\ndef __gettext_strings():\\n    # This is a dummy function that lists all the strings that are used in\\n    # the XRC file in the _("a string") format to be recognized by GNU\\n    # gettext utilities (specificaly the xgettext utility) and the\\n    # mki18n.py script.  For more information see:\\n    # http://wiki.wxpython.org/index.cgi/Internationalization\\n\\n    def _(str): pass\\n\\n%s\\n\''
p460
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp461
(dp462
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.INIT_RESOURE_HEADER'
p463
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p464
sg12
I01
sg13
S''
sg225
Vstr
p465
sg227
S"'# ------------------------ Resource data ----------------------\\n\\ndef __init_resources():\\n    global __res\\n    __res = xrc.XmlResource()\\n'"
p466
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp467
(dp468
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.LOAD_RES_FILE'
p469
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p470
sg12
I01
sg13
S''
sg225
Vstr
p471
sg227
S'"    __res.Load(\'%(resourceFilename)s\')"'
p472
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp473
(dp474
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.LOAD_RES_MEMFS'
p475
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p476
sg12
I01
sg13
S''
sg225
Vstr
p477
sg227
S'"    __res.Load(\'memory:XRC/%(memoryPath)s/%(resourceFilename)s\')\\n"'
p478
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp479
(dp480
g6
I23
sg7
S'wx.tools.pywxrc.PythonTemplates.MENU_CLASS_HEADER'
p481
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p482
sg12
I01
sg13
S''
sg225
Vstr
p483
sg227
S'\'class xrc%(windowName)s(wx.%(windowClass)s):\\n    def __init__(self):\\n        pre = get_resources().LoadMenu("%(windowName)s")\\n\\n        # This is a copy of Robin\\\'s PostCreate voodoo magic in wx.Window that\\n        # relinks the self object with the menu object.\\n        self.this = pre.this\\n        self.thisown = pre.thisown\\n        pre.thisown = 0\\n        if hasattr(self, \\\'_setOORInfo\\\'):\\n            self._setOORInfo(self)\\n\\n        # Define variables for the menu items\\n\''
p484
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp485
(dp486
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.MENU_MENU_VAR'
p487
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p488
sg12
I01
sg13
S''
sg225
Vstr
p489
sg227
S'\'        self.%(widgetName)s = self.FindItemById(xrc.XRCID("%(widgetName)s")).GetSubMenu()\\n\''
p490
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp491
(dp492
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.MENU_MENUITEM_VAR'
p493
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p494
sg12
I01
sg13
S''
sg225
Vstr
p495
sg227
S'\'        self.%(widgetName)s = self.FindItemById(xrc.XRCID("%(widgetName)s"))\\n\''
p496
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp497
(dp498
g6
I23
sg7
S'wx.tools.pywxrc.PythonTemplates.MENUBAR_CLASS_HEADER'
p499
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p500
sg12
I01
sg13
S''
sg225
Vstr
p501
sg227
S'\'class xrc%(windowName)s(wx.%(windowClass)s):\\n    def __init__(self):\\n        pre = get_resources().LoadMenuBar("%(windowName)s")\\n        self.PostCreate(pre)\\n\\n        # Define variables for the menu items\\n\''
p502
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp503
(dp504
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.MENUBAR_MENU_VAR'
p505
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p506
sg12
I01
sg13
S''
sg225
Vstr
p507
sg227
S'\'        idx = self.FindMenu("%(label)s")\\n        if idx != wx.NOT_FOUND:\\n            self.%(widgetName)s = self.GetMenu(idx)\\n        else:\\n            self.%(widgetName)s = self.FindItemById(xrc.XRCID("%(widgetName)s")).GetSubMenu()\\n\''
p508
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp509
(dp510
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.MENUBAR_MENUITEM_VAR'
p511
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p512
sg12
I01
sg13
S''
sg225
Vstr
p513
sg227
S'\'        self.%(widgetName)s = self.FindItemById(xrc.XRCID("%(widgetName)s"))\\n\''
p514
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp515
(dp516
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.PREPARE_MEMFS'
p517
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p518
sg12
I01
sg13
S''
sg225
Vstr
p519
sg227
S"'    wx.FileSystem.AddHandler(wx.MemoryFSHandler())\\n'"
p520
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp521
(dp522
g6
I23
sg7
S'wx.tools.pywxrc.PythonTemplates.SUBCLASS_HEADER'
p523
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p524
sg12
I01
sg13
S''
sg225
Vstr
p525
sg227
S'\'class %(subclass)s(wx.%(windowClass)s):\\n    def __init__(self):\\n        wx.%(windowClass)s.__init__(self)\\n        self.Bind(wx.EVT_WINDOW_CREATE, self.OnCreate)\\n\\n#!XRCED:begin-block:%(subclass)s._PostInit\\n    def _PostInit(self):\\n        """ This function is called after the subclassed object is created.\\n\\n        Override it for custom setup before the window is created usually to\\n        set additional window styles using SetWindowStyle() and SetExtraStyle().\\n        """\\n        pass\\n#!XRCED:end-block:%(subclass)s._PostInit\\n\\n    def OnCreate(self, evt):\\n        self.Unbind(wx.EVT_WINDOW_CREATE)\\n        self._PostInit()\\n\''
p526
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp527
(dp528
g6
I23
sg7
S'wx.tools.pywxrc.PythonTemplates.TOOLBAR_CLASS_HEADER'
p529
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p530
sg12
I01
sg13
S''
sg225
Vstr
p531
sg227
S'\'class xrc%(windowName)s(wx.%(windowClass)s):\\n    def __init__(self, parent):\\n        pre = get_resources().LoadToolBar(parent, "%(windowName)s")\\n        self.PostCreate(pre)\\n\\n        # Define variables for the toolbar items\\n\''
p532
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp533
(dp534
g6
I31
sg7
S'wx.tools.pywxrc.PythonTemplates.TOOLBAR_TOOL_VAR'
p535
sg9
g364
sg10
S"str(object='') -> string\n\nReturn a nice string representation of the object.\nIf the argument is a string, the return value is the same object."
p536
sg12
I01
sg13
S''
sg225
Vstr
p537
sg227
S'\'        self.%(widgetName)s = self.FindById(xrc.XRCID("%(widgetName)s"))\\n\''
p538
sg18
g229
sg20
I7
sbasg136
g1
(g137
g3
NtRp539
(dp540
g140
(lp541
S'wx.tools.pywxrc.PythonTemplates'
p542
asg143
g364
sg144
(lp543
(S'wx.tools.pywxrc.PythonTemplates'
(ltp544
asbsbag1
(g35
g3
NtRp545
(dp546
g6
I6
sg18
g38
sg7
S'wx.tools.pywxrc.XmlResourceCompiler'
p547
sg9
g356
sg40
S'596'
p548
sg10
S''
sg42
S'XmlResourceCompiler:  templates = PythonTemplates()'
p549
sg12
I00
sg13
S''
sg44
(lp550
(lp551
S'XmlResourceCompiler'
p552
aasg21
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/docs/sphinx/wx.tools.pywxrc.XmlResourceCompiler.txt'
p553
sg49
(lp554
sg51
g554
sg52
(lp555
S'CheckAssignVar'
p556
aS'ConvertText'
p557
aS'FileToString'
p558
aS'FindStringsInNode'
p559
aS'GenerateClasses'
p560
aS'GenerateEventHandlers'
p561
aS'GenerateInitResourcesEmbedded'
p562
aS'GenerateInitResourcesFile'
p563
aS'GenerateMenuBarClass'
p564
aS'GenerateMenuClass'
p565
aS'GenerateSubclasses'
p566
aS'GenerateToolBarClass'
p567
aS'GenerateWidgetClass'
p568
aS'GetMemoryFilename'
p569
aS'MakeGetTextOutput'
p570
aS'MakePythonModule'
p571
aS'NodeContainsFilename'
p572
aS'ReplaceBlocks'
p573
aS'ReplaceFilenamesInXRC'
p574
asg20
I3
sg63
(lp575
sg23
(lp576
g1
(g66
g3
NtRp577
(dp578
g6
I11
sg18
g69
sg7
S'wx.tools.pywxrc.XmlResourceCompiler.CheckAssignVar'
p579
sg9
g545
sg40
S'15'
p580
sg10
S''
sg12
I00
sg13
S''
sg72
(lp581
(S'widget'
S''
S''
tp582
asg42
S'CheckAssignVar(self, widget)'
p583
sg76
S'366'
p584
sg20
I5
sbag1
(g66
g3
NtRp585
(dp586
g6
I11
sg18
g69
sg7
S'wx.tools.pywxrc.XmlResourceCompiler.ConvertText'
p587
sg9
g545
sg40
S'34'
p588
sg10
S''
sg12
I00
sg13
S''
sg72
(lp589
(S'st'
S''
S''
tp590
asg42
S'ConvertText(self, st)'
p591
sg76
S'760'
p592
sg20
I5
sbag1
(g66
g3
NtRp593
(dp594
g6
I11
sg18
g69
sg7
S'wx.tools.pywxrc.XmlResourceCompiler.FileToString'
p595
sg9
g545
sg40
S'29'
p596
sg10
S''
sg12
I00
sg13
S''
sg72
(lp597
(S'filename'
S''
S''
tp598
asg42
S'FileToString(self, filename)'
p599
sg76
S'625'
p600
sg20
I5
sbag1
(g66
g3
NtRp601
(dp602
g6
I11
sg18
g69
sg7
S'wx.tools.pywxrc.XmlResourceCompiler.FindStringsInNode'
p603
sg9
g545
sg40
S'39'
p604
sg10
S''
sg12
I00
sg13
S''
sg72
(lp605
(S'parent'
S''
S''
tp606
asg42
S'FindStringsInNode(self, parent)'
p607
sg76
S'719'
p608
sg20
I5
sbag1
(g66
g3
NtRp609
(dp610
g6
I11
sg18
g69
sg7
S'wx.tools.pywxrc.XmlResourceCompiler.GenerateClasses'
p611
sg9
g545
sg40
S'32'
p612
sg10
S''
sg12
I00
sg13
S''
sg72
(lp613
(S'resourceDocument'
S''
S''
tp614
asg42
S'GenerateClasses(self, resourceDocument)'
p615
sg76
S'332'
p616
sg20
I5
sbag1
(g66
g3
NtRp617
(dp618
g6
I11
sg18
g69
sg7
S'wx.tools.pywxrc.XmlResourceCompiler.GenerateEventHandlers'
p619
sg9
g545
sg40
S'48'
p620
sg10
S''
sg12
I00
sg13
S''
sg72
(lp621
(S'windowClass'
S''
S''
tp622
a(S'windowName'
S''
S''
tp623
a(S'topWindow'
S''
S''
tp624
a(S'vars'
S''
S''
tp625
asg42
S'GenerateEventHandlers(self, windowClass, windowName, topWindow, vars)'
p626
sg76
S'531'
p627
sg20
I5
sbag1
(g66
g3
NtRp628
(dp629
g6
I11
sg18
g69
sg7
S'wx.tools.pywxrc.XmlResourceCompiler.GenerateInitResourcesEmbedded'
p630
sg9
g545
sg40
S'27'
p631
sg10
S''
sg12
I00
sg13
S''
sg72
(lp632
(S'resourceFilename'
S''
S''
tp633
a(S'resourceDocument'
S''
S''
tp634
asg42
S'GenerateInitResourcesEmbedded(self, resourceFilename, resourceDocument)'
p635
sg76
S'581'
p636
sg20
I5
sbag1
(g66
g3
NtRp637
(dp638
g6
I11
sg18
g69
sg7
S'wx.tools.pywxrc.XmlResourceCompiler.GenerateInitResourcesFile'
p639
sg9
g545
sg40
S'7'
sg10
S''
sg12
I00
sg13
S''
sg72
(lp640
(S'resourceFilename'
S''
S''
tp641
a(S'resourceDocument'
S''
S''
tp642
asg42
S'GenerateInitResourcesFile(self, resourceFilename, resourceDocument)'
p643
sg76
S'610'
p644
sg20
I5
sbag1
(g66
g3
NtRp645
(dp646
g6
I11
sg18
g69
sg7
S'wx.tools.pywxrc.XmlResourceCompiler.GenerateMenuBarClass'
p647
sg9
g545
sg40
S'28'
p648
sg10
S''
sg12
I00
sg13
S''
sg72
(lp649
(S'windowClass'
S''
S''
tp650
a(S'windowName'
S''
S''
tp651
a(S'topWindow'
S''
S''
tp652
a(S'vars'
S''
S''
tp653
asg42
S'GenerateMenuBarClass(self, windowClass, windowName, topWindow, vars)'
p654
sg76
S'382'
p655
sg20
I5
sbag1
(g66
g3
NtRp656
(dp657
g6
I11
sg18
g69
sg7
S'wx.tools.pywxrc.XmlResourceCompiler.GenerateMenuClass'
p658
sg9
g545
sg40
S'26'
p659
sg10
S''
sg12
I00
sg13
S''
sg72
(lp660
(S'windowClass'
S''
S''
tp661
a(S'windowName'
S''
S''
tp662
a(S'topWindow'
S''
S''
tp663
a(S'vars'
S''
S''
tp664
asg42
S'GenerateMenuClass(self, windowClass, windowName, topWindow, vars)'
p665
sg76
S'411'
p666
sg20
I5
sbag1
(g66
g3
NtRp667
(dp668
g6
I11
sg18
g69
sg7
S'wx.tools.pywxrc.XmlResourceCompiler.GenerateSubclasses'
p669
sg9
g545
sg40
S'30'
p670
sg10
S''
sg12
I00
sg13
S''
sg72
(lp671
(S'resourceDocument'
S''
S''
tp672
asg42
S'GenerateSubclasses(self, resourceDocument)'
p673
sg76
S'499'
p674
sg20
I5
sbag1
(g66
g3
NtRp675
(dp676
g6
I11
sg18
g69
sg7
S'wx.tools.pywxrc.XmlResourceCompiler.GenerateToolBarClass'
p677
sg9
g545
sg40
S'21'
p678
sg10
S''
sg12
I00
sg13
S''
sg72
(lp679
(S'windowClass'
S''
S''
tp680
a(S'windowName'
S''
S''
tp681
a(S'topWindow'
S''
S''
tp682
a(S'vars'
S''
S''
tp683
asg42
S'GenerateToolBarClass(self, windowClass, windowName, topWindow, vars)'
p684
sg76
S'438'
p685
sg20
I5
sbag1
(g66
g3
NtRp686
(dp687
g6
I11
sg18
g69
sg7
S'wx.tools.pywxrc.XmlResourceCompiler.GenerateWidgetClass'
p688
sg9
g545
sg40
S'37'
p689
sg10
S''
sg12
I00
sg13
S''
sg72
(lp690
(S'windowClass'
S''
S''
tp691
a(S'windowName'
S''
S''
tp692
a(S'topWindow'
S''
S''
tp693
a(S'vars'
S''
S''
tp694
asg42
S'GenerateWidgetClass(self, windowClass, windowName, topWindow, vars)'
p695
sg76
S'460'
p696
sg20
I5
sbag1
(g66
g3
NtRp697
(dp698
g6
I11
sg18
g69
sg7
S'wx.tools.pywxrc.XmlResourceCompiler.GetMemoryFilename'
p699
sg9
g545
sg40
S'4'
sg10
S''
sg12
I00
sg13
S''
sg72
(lp700
(S'filename'
S''
S''
tp701
asg42
S'GetMemoryFilename(self, filename)'
p702
sg76
S'619'
p703
sg20
I5
sbag1
(g66
g3
NtRp704
(dp705
g6
I11
sg18
g69
sg7
S'wx.tools.pywxrc.XmlResourceCompiler.MakeGetTextOutput'
p706
sg9
g545
sg40
S'13'
p707
sg10
S'Just output the gettext strings by themselves, with no other\ncode generation.'
p708
sg12
I00
sg13
S''
sg72
(lp709
(S'inputFiles'
S''
S''
tp710
a(S'outputFilename'
S''
S''
tp711
asg42
S'MakeGetTextOutput(self, inputFiles, outputFilename)'
p712
sg76
S'317'
p713
sg20
I5
sbag1
(g66
g3
NtRp714
(dp715
g6
I11
sg18
g69
sg7
S'wx.tools.pywxrc.XmlResourceCompiler.MakePythonModule'
p716
sg9
g545
sg40
S'56'
p717
sg10
S''
sg12
I00
sg13
S''
sg72
(lp718
(S'inputFiles'
S''
S''
tp719
a(S'outputFilename'
S''
S''
tp720
a(S'embedResources'
S'False'
VFalse
tp721
a(S'generateGetText'
S'False'
VFalse
tp722
a(S'assignVariables'
S'True'
VTrue
tp723
asg42
S'MakePythonModule(self, inputFiles, outputFilename, embedResources=False, generateGetText=False, assignVariables=True)'
p724
sg76
S'259'
p725
sg20
I5
sbag1
(g66
g3
NtRp726
(dp727
g6
I11
sg18
g69
sg7
S'wx.tools.pywxrc.XmlResourceCompiler.NodeContainsFilename'
p728
sg9
g545
sg40
S'30'
p729
sg10
S"Does 'node' contain filename information at all? "
p730
sg12
I00
sg13
S''
sg72
(lp731
(S'node'
S''
S''
tp732
asg42
S'NodeContainsFilename(self, node)'
p733
sg76
S'656'
p734
sg20
I5
sbag1
(g66
g3
NtRp735
(dp736
g6
I11
sg18
g69
sg7
S'wx.tools.pywxrc.XmlResourceCompiler.ReplaceBlocks'
p737
sg9
g545
sg40
S'20'
p738
sg10
S''
sg12
I00
sg13
S''
sg72
(lp739
(S'input'
S''
S''
tp740
asg42
S'ReplaceBlocks(self, input)'
p741
sg76
S'797'
p742
sg20
I5
sbag1
(g66
g3
NtRp743
(dp744
g6
I11
sg18
g69
sg7
S'wx.tools.pywxrc.XmlResourceCompiler.ReplaceFilenamesInXRC'
p745
sg9
g545
sg40
S'29'
p746
sg10
S'Finds all files mentioned in resource file, e.g. <bitmap>filename</bitmap>\nand replaces them with the memory filenames.\n\nFills a list of the filenames found.'
p747
sg12
I00
sg13
S''
sg72
(lp748
(S'node'
S''
S''
tp749
a(S'files'
S''
S''
tp750
a(S'resourcePath'
S''
S''
tp751
asg42
S'ReplaceFilenamesInXRC(self, node, files, resourcePath)'
p752
sg76
S'688'
p753
sg20
I5
sbag1
(g221
g3
NtRp754
(dp755
g6
I23
sg7
S'wx.tools.pywxrc.XmlResourceCompiler.templates'
p756
sg9
g545
sg10
S''
sg12
I01
sg13
S''
sg225
Vinstance
p757
sg227
S'<wx.tools.pywxrc.PythonTemplates instance at 0x7f142a144290>'
p758
sg18
g229
sg20
I7
sbasg136
g1
(g137
g3
NtRp759
(dp760
g140
(lp761
S'wx.tools.pywxrc.XmlResourceCompiler'
p762
asg143
g545
sg144
(lp763
(S'wx.tools.pywxrc.XmlResourceCompiler'
(ltp764
asbsbag1
(g66
g3
NtRp765
(dp766
g6
I7
sg18
g69
sg7
S'wx.tools.pywxrc.main'
p767
sg9
g356
sg40
S'80'
p768
sg10
S''
sg12
I00
sg13
S''
sg72
(lp769
(S'args'
S'None'
VNone
tp770
asg42
S'main(args=None)'
p771
sg76
S'855'
p772
sg20
I5
sbag1
(g66
g3
NtRp773
(dp774
g6
I7
sg18
g69
sg7
S'wx.tools.pywxrc.print_'
p775
sg9
g356
sg40
S'7'
sg10
S''
sg12
I01
sg13
S''
sg72
(lp776
(S'*args'
S''
S''
tp777
a(S'**kwargs'
S''
S''
tp778
asg42
S'print_(\\*args, \\*\\*kwargs)'
p779
sg76
S'779'
p780
sg20
I5
sbag1
(g221
g3
NtRp781
(dp782
g6
I36
sg7
S'wx.tools.pywxrc.reBeginBlock'
p783
sg9
g356
sg10
S'Compiled regular expression objects'
p784
sg12
I00
sg13
S''
sg225
V_sre.SRE_Pattern
p785
sg227
S'<_sre.SRE_Pattern object at 0x7f142a8d3180>'
p786
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp787
(dp788
g6
I36
sg7
S'wx.tools.pywxrc.reEndBlock'
p789
sg9
g356
sg10
S'Compiled regular expression objects'
p790
sg12
I00
sg13
S''
sg225
V_sre.SRE_Pattern
p791
sg227
S'<_sre.SRE_Pattern object at 0x7f143ca03170>'
p792
sg18
g229
sg20
I7
sbasg136
g1
(g137
g3
NtRp793
(dp794
g140
(lp795
S'wx.tools.pywxrc.PythonTemplates'
p796
aS'wx.tools.pywxrc.XmlResourceCompiler'
p797
asg143
g356
sg144
(lp798
(S'wx.tools.pywxrc.XmlResourceCompiler'
(ltp799
a(S'wx.tools.pywxrc.PythonTemplates'
(ltp800
asbsbag1
(g25
g3
NtRp801
(dp802
g6
I2
sg7
S'wx.tools.wxget'
p803
sg9
g4
sg10
Vwxget.py -- wx Version of wget utility for platform that don't have it already.\u000a\u000aUsage:\u000a    wxget URL [DEST_DIR]\u000a\u000aWhere URL is a file URL and the optional DEST_DIR is a destination directory to\u000adownload to, (default is to prompt the user).\u000aThe --trusted option can be used to surpress certificate checks.
p804
sg12
I00
sg13
S'# -*- coding: utf-8 -*-\n#----------------------------------------------------------------------\n# Name:        wx.tools.wxget\n# Purpose:     wx Based alternative to wget\n#\n# Author:      Steve Barnes\n#\n# Created:     06-Aug-2017\n# Copyright:   (c) 2017-2018 by Steve Barnes\n# Licence:     wxWindows license\n# Tags:        phoenix-port, py3-port\n#\n# Module to allow cross platform downloads originally from answers to:\n# https://stackoverflow.com/questions/22676/how-do-i-download-a-file-over-http-using-python\n# by Stan and PabloG then converted to wx.\n#----------------------------------------------------------------------\n'
p805
sg14
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/wx/tools/wxget.py'
p806
sg18
g32
sg20
I2
sg21
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/docs/sphinx/wx.tools.wxget.txt'
p807
sg23
(lp808
g1
(g35
g3
NtRp809
(dp810
g6
I6
sg18
g38
sg7
S'wx.tools.wxget.HTTPError'
p811
sg9
g801
sg40
S'29'
p812
sg10
S'Raised when HTTP error occurs, but also acts like non-error return'
p813
sg42
S'HTTPError(URLError, addinfourl)'
p814
sg12
I01
sg13
S''
sg44
(lp815
(lp816
S'object'
p817
aa(lp818
(lp819
S'BaseException'
p820
aa(lp821
(lp822
S'Exception'
p823
aa(lp824
(lp825
S'StandardError'
p826
aa(lp827
(lp828
S'EnvironmentError'
p829
aa(lp830
(lp831
S'IOError'
p832
aa(lp833
(lp834
S'URLError'
p835
aa(lp836
(lp837
S'HTTPError'
p838
aaaaaaaaa(lp839
S'addbase'
p840
aa(lp841
(lp842
S'addinfourl'
p843
aa(lp844
(lp845
g838
aaaasg21
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/docs/sphinx/wx.tools.wxget.HTTPError.txt'
p846
sg51
(lp847
S'urllib.addinfourl'
p848
aS'urllib2.URLError'
p849
asg20
I3
sg63
(lp850
sg23
(lp851
g1
(g66
g3
NtRp852
(dp853
g6
I11
sg18
g69
sg7
S'wx.tools.wxget.HTTPError.__init__'
p854
sg9
g809
sg40
S'13'
p855
sg10
S''
sg12
I01
sg13
S''
sg72
(lp856
(S'url'
S''
S''
tp857
a(S'code'
S''
S''
tp858
a(S'msg'
S''
S''
tp859
a(S'hdrs'
S''
S''
tp860
a(S'fp'
S''
S''
tp861
asg42
S'__init__(self, url, code, msg, hdrs, fp)'
p862
sg76
S'181'
p863
sg20
I5
sbag1
(g66
g3
NtRp864
(dp865
g6
I11
sg18
g69
sg7
S'wx.tools.wxget.HTTPError.info'
p866
sg9
g809
sg40
S'3'
sg10
S''
sg12
I01
sg13
S''
sg72
(lp867
sg42
S'info(self)'
p868
sg76
S'203'
p869
sg20
I5
sbag1
(csphinxtools.librarydescription
Property
p870
g3
NtRp871
(dp872
g6
I15
sg7
S'wx.tools.wxget.HTTPError.reason'
p873
sg9
g809
sg10
S''
sg12
I01
sg13
S''
sS'getter'
p874
S'reason'
p875
sg18
S'Property'
p876
sg20
I6
sS'deleter'
p877
S''
sS'setter'
p878
S''
sbasg136
Nsbag1
(g35
g3
NtRp879
(dp880
g6
I6
sg18
g38
sg7
S'wx.tools.wxget.URLError'
p881
sg9
g801
sg40
S'13'
p882
sg10
S''
sg42
S'URLError(IOError)'
p883
sg12
I01
sg13
S''
sg44
(lp884
(lp885
S'object'
p886
aa(lp887
(lp888
S'BaseException'
p889
aa(lp890
(lp891
S'Exception'
p892
aa(lp893
(lp894
S'StandardError'
p895
aa(lp896
(lp897
S'EnvironmentError'
p898
aa(lp899
(lp900
S'IOError'
p901
aa(lp902
(lp903
g835
aaaaaaaasg21
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/docs/sphinx/wx.tools.wxget.URLError.txt'
p904
sg51
(lp905
S'exceptions.IOError'
p906
asg20
I3
sg63
(lp907
S'urllib2.HTTPError'
p908
asg23
(lp909
g1
(g66
g3
NtRp910
(dp911
g6
I11
sg18
g69
sg7
S'wx.tools.wxget.URLError.__init__'
p912
sg9
g879
sg40
S'4'
sg10
S''
sg12
I01
sg13
S''
sg72
(lp913
(S'reason'
S''
S''
tp914
asg42
S'__init__(self, reason)'
p915
sg76
S'170'
p916
sg20
I5
sbasg136
Nsbag1
(g66
g3
NtRp917
(dp918
g6
I7
sg18
g69
sg7
S'wx.tools.wxget.download_file'
p919
sg9
g801
sg40
S'33'
p920
sg10
VDownload and save a file specified by url to dest directory, with force will\u000aoperate silently and overwrite any existing file.
p921
sg12
I00
sg13
S''
sg72
(lp922
(S'url'
S''
S''
tp923
a(S'dest'
S'None'
VNone
tp924
a(S'force'
S'False'
VFalse
tp925
a(S'trusted'
S'False'
VFalse
tp926
asg42
S'download_file(url, dest=None, force=False, trusted=False)'
p927
sg76
S'184'
p928
sg20
I5
sbag1
(g66
g3
NtRp929
(dp930
g6
I7
sg18
g69
sg7
S'wx.tools.wxget.download_pip'
p931
sg9
g801
sg40
S'28'
p932
sg10
VTry to donwload via pip.
p933
sg12
I00
sg13
S''
sg72
(lp934
(S'url'
S''
S''
tp935
a(S'filename'
S''
S''
tp936
a(S'force'
S'False'
VFalse
tp937
a(S'trusted'
S'False'
VFalse
tp938
asg42
S'download_pip(url, filename, force=False, trusted=False)'
p939
sg76
S'156'
p940
sg20
I5
sbag1
(g66
g3
NtRp941
(dp942
g6
I7
sg18
g69
sg7
S'wx.tools.wxget.download_urllib'
p943
sg9
g801
sg40
S'47'
p944
sg10
VTry to donwload via urllib.
p945
sg12
I00
sg13
S''
sg72
(lp946
(S'url'
S''
S''
tp947
a(S'filename'
S''
S''
tp948
asg42
S'download_urllib(url, filename)'
p949
sg76
S'109'
p950
sg20
I5
sbag1
(g66
g3
NtRp951
(dp952
g6
I7
sg18
g69
sg7
S'wx.tools.wxget.download_wget'
p953
sg9
g801
sg40
S'15'
p954
sg10
VTry to donwload via wget.
p955
sg12
I00
sg13
S''
sg72
(lp956
(S'url'
S''
S''
tp957
a(S'filename'
S''
S''
tp958
a(S'trusted'
S'False'
VFalse
tp959
asg42
S'download_wget(url, filename, trusted=False)'
p960
sg76
S'94'
p961
sg20
I5
sbag1
(g66
g3
NtRp962
(dp963
g6
I7
sg18
g69
sg7
S'wx.tools.wxget.get_docs_demo_url'
p964
sg9
g801
sg40
S'13'
p965
sg10
VGet the URL for the docs or demo.
p966
sg12
I00
sg13
S''
sg72
(lp967
(S'demo'
S'False'
VFalse
tp968
asg42
S'get_docs_demo_url(demo=False)'
p969
sg76
S'47'
p970
sg20
I5
sbag1
(g66
g3
NtRp971
(dp972
g6
I7
sg18
g69
sg7
S'wx.tools.wxget.get_save_path'
p973
sg9
g801
sg40
S'34'
p974
sg10
VGet the file save location.
p975
sg12
I00
sg13
S''
sg72
(lp976
(S'url'
S''
S''
tp977
a(S'dest_dir'
S''
S''
tp978
a(S'force'
S'False'
VFalse
tp979
asg42
S'get_save_path(url, dest_dir, force=False)'
p980
sg76
S'60'
p981
sg20
I5
sbag1
(g66
g3
NtRp982
(dp983
g6
I7
sg18
g69
sg7
S'wx.tools.wxget.main'
p984
sg9
g801
sg40
S'36'
p985
sg10
VEntry point for wxget.
p986
sg12
I00
sg13
S''
sg72
(lp987
(S'args'
S'sys.argv'
V['build.py', '2.7', 'setrev', 'dox', 'touch', 'etg', 'sip', 'build', 'wxlib', 'sdist', 'sdist_demo', '--upload', '--release']
tp988
asg42
S'main(args=sys.argv)'
p989
sg76
S'217'
p990
sg20
I5
sbag1
(g221
g3
NtRp991
(dp992
g6
I23
sg7
S'wx.tools.wxget.absolute_import'
p993
sg9
g801
sg10
S''
sg12
I01
sg13
S''
sg225
Vinstance
p994
sg227
S"_Feature((2, 5, 0, 'alpha', 1), (3, 0, 0, 'alpha', 0), 16384)"
p995
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp996
(dp997
g6
I23
sg7
S'wx.tools.wxget.division'
p998
sg9
g801
sg10
S''
sg12
I01
sg13
S''
sg225
Vinstance
p999
sg227
S"_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)"
p1000
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp1001
(dp1002
g6
I23
sg7
S'wx.tools.wxget.print_function'
p1003
sg9
g801
sg10
S''
sg12
I01
sg13
S''
sg225
Vinstance
p1004
sg227
S"_Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 65536)"
p1005
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp1006
(dp1007
g6
I23
sg7
S'wx.tools.wxget.unicode_literals'
p1008
sg9
g801
sg10
S''
sg12
I01
sg13
S''
sg225
Vinstance
p1009
sg227
S"_Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 131072)"
p1010
sg18
g229
sg20
I7
sbasg136
Nsbag1
(g25
g3
NtRp1011
(dp1012
g6
I2
sg7
S'wx.tools.wxget_docs_demo'
p1013
sg9
g4
sg10
Vwxget_docs_demo.py -- Launch the appropriate wx Docs or Demo.\u000a\u000aUsage:\u000a    wxget_docs_demo [docs|demo]\u000a\u000aWill install if missing, the requested item for the current version and then\u000alaunch it.\u000a\u000aUse: doc|demo --force to force a fresh download.
p1014
sg12
I00
sg13
S'# -*- coding: utf-8 -*-\n#----------------------------------------------------------------------\n# Name:        wx.tools.wxget_docs_demo\n# Purpose:     wx fetch and launch demo or docs\n#\n# Author:      Steve Barnes\n#\n# Created:     06-Aug-2017\n# Copyright:   (c) 2017-2018 by Steve Barnes\n# Licence:     wxWindows license\n# Tags:        phoenix-port, py3-port\n#\n# Module to allow the correct version of the documents and/or demos to be\n# launched after, if necessarily being fetched.\n#----------------------------------------------------------------------\n'
p1015
sg14
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/wx/tools/wxget_docs_demo.py'
p1016
sg18
g32
sg20
I2
sg21
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/docs/sphinx/wx.tools.wxget_docs_demo.txt'
p1017
sg23
(lp1018
g1
(g35
g3
NtRp1019
(dp1020
g6
I6
sg18
g38
sg7
S'wx.tools.wxget_docs_demo.HTTPError'
p1021
sg9
g1011
sg40
S'29'
p1022
sg10
S'Raised when HTTP error occurs, but also acts like non-error return'
p1023
sg42
S'HTTPError(URLError, addinfourl)'
p1024
sg12
I01
sg13
S''
sg44
(lp1025
(lp1026
S'object'
p1027
aa(lp1028
(lp1029
S'BaseException'
p1030
aa(lp1031
(lp1032
S'Exception'
p1033
aa(lp1034
(lp1035
S'StandardError'
p1036
aa(lp1037
(lp1038
S'EnvironmentError'
p1039
aa(lp1040
(lp1041
S'IOError'
p1042
aa(lp1043
(lp1044
g835
aa(lp1045
(lp1046
g838
aaaaaaaaa(lp1047
g840
aa(lp1048
(lp1049
g843
aa(lp1050
(lp1051
g838
aaaasg21
S'/home/robind/projects/buildbots/ubuntu-x64_86-py27/dist-src/Phoenix/docs/sphinx/wx.tools.wxget_docs_demo.HTTPError.txt'
p1052
sg51
(lp1053
S'urllib.addinfourl'
p1054
aS'urllib2.URLError'
p1055
asg20
I3
sg63
(lp1056
sg23
(lp1057
g1
(g66
g3
NtRp1058
(dp1059
g6
I11
sg18
g69
sg7
S'wx.tools.wxget_docs_demo.HTTPError.__init__'
p1060
sg9
g1019
sg40
S'13'
p1061
sg10
S''
sg12
I01
sg13
S''
sg72
(lp1062
(S'url'
S''
S''
tp1063
a(S'code'
S''
S''
tp1064
a(S'msg'
S''
S''
tp1065
a(S'hdrs'
S''
S''
tp1066
a(S'fp'
S''
S''
tp1067
asg42
S'__init__(self, url, code, msg, hdrs, fp)'
p1068
sg76
S'181'
p1069
sg20
I5
sbag1
(g66
g3
NtRp1070
(dp1071
g6
I11
sg18
g69
sg7
S'wx.tools.wxget_docs_demo.HTTPError.info'
p1072
sg9
g1019
sg40
S'3'
sg10
S''
sg12
I01
sg13
S''
sg72
(lp1073
sg42
S'info(self)'
p1074
sg76
S'203'
p1075
sg20
I5
sbag1
(g870
g3
NtRp1076
(dp1077
g6
I15
sg7
S'wx.tools.wxget_docs_demo.HTTPError.reason'
p1078
sg9
g1019
sg10
S''
sg12
I01
sg13
S''
sg874
g875
sg18
g876
sg20
I6
sg877
S''
sg878
S''
sbasg136
Nsbag1
(g66
g3
NtRp1079
(dp1080
g6
I7
sg18
g69
sg7
S'wx.tools.wxget_docs_demo.demo_main'
p1081
sg9
g1011
sg40
S'19'
p1082
sg10
VGet/Launch Demo.
p1083
sg12
I00
sg13
S''
sg72
(lp1084
(S'args'
S'sys.argv'
V['build.py', '2.7', 'setrev', 'dox', 'touch', 'etg', 'sip', 'build', 'wxlib', 'sdist', 'sdist_demo', '--upload', '--release']
tp1085
asg42
S'demo_main(args=sys.argv)'
p1086
sg76
S'157'
p1087
sg20
I5
sbag1
(g66
g3
NtRp1088
(dp1089
g6
I7
sg18
g69
sg7
S'wx.tools.wxget_docs_demo.docs_main'
p1090
sg9
g1011
sg40
S'18'
p1091
sg10
VGet/Launch Docs.
p1092
sg12
I00
sg13
S''
sg72
(lp1093
(S'args'
S'sys.argv'
V['build.py', '2.7', 'setrev', 'dox', 'touch', 'etg', 'sip', 'build', 'wxlib', 'sdist', 'sdist_demo', '--upload', '--release']
tp1094
asg42
S'docs_main(args=sys.argv)'
p1095
sg76
S'139'
p1096
sg20
I5
sbag1
(g66
g3
NtRp1097
(dp1098
g6
I7
sg18
g69
sg7
S'wx.tools.wxget_docs_demo.done'
p1099
sg9
g1011
sg40
S'11'
p1100
sg10
VTidy up and exit.
p1101
sg12
I00
sg13
S''
sg72
(lp1102
(S'result'
S'0'
V0
tp1103
asg42
S'done(result=0)'
p1104
sg76
S'128'
p1105
sg20
I5
sbag1
(g66
g3
NtRp1106
(dp1107
g6
I7
sg18
g69
sg7
S'wx.tools.wxget_docs_demo.ensure_wx_app'
p1108
sg9
g1011
sg40
S'8'
sg10
VEnsure that there is a wx.App instance.
p1109
sg12
I00
sg13
S''
sg72
(lp1110
sg42
S'ensure_wx_app()'
p1111
sg76
S'58'
p1112
sg20
I5
sbag1
(g66
g3
NtRp1113
(dp1114
g6
I7
sg18
g69
sg7
S'wx.tools.wxget_docs_demo.get_item'
p1115
sg9
g1011
sg40
S'28'
p1116
sg10
VGet the item 
p1117
sg12
I00
sg13
S''
sg72
(lp1118
(S'final'
S''
S''
tp1119
a(S'url'
S''
S''
tp1120
a(S'cache'
S''
S''
tp1121
a(S'name'
S''
S''
tp1122
a(S'ext'
S''
S''
tp1123
a(S'forced'
S'False'
VFalse
tp1124
asg42
S'get_item(final, url, cache, name, ext, forced=False)'
p1125
sg76
S'94'
p1126
sg20
I5
sbag1
(g66
g3
NtRp1127
(dp1128
g6
I7
sg18
g69
sg7
S'wx.tools.wxget_docs_demo.get_paths_dict'
p1129
sg9
g1011
sg40
S'20'
p1130
sg10
VGet a dictionary of the required paths.
p1131
sg12
I00
sg13
S''
sg72
(lp1132
sg42
S'get_paths_dict()'
p1133
sg76
S'66'
p1134
sg20
I5
sbag1
(g66
g3
NtRp1135
(dp1136
g6
I7
sg18
g69
sg7
S'wx.tools.wxget_docs_demo.main'
p1137
sg9
g1011
sg40
S'10'
p1138
sg10
VCommand line main.
p1139
sg12
I00
sg13
S''
sg72
(lp1140
(S'args'
S'sys.argv'
V['build.py', '2.7', 'setrev', 'dox', 'touch', 'etg', 'sip', 'build', 'wxlib', 'sdist', 'sdist_demo', '--upload', '--release']
tp1141
asg42
S'main(args=sys.argv)'
p1142
sg76
S'176'
p1143
sg20
I5
sbag1
(g66
g3
NtRp1144
(dp1145
g6
I7
sg18
g69
sg7
S'wx.tools.wxget_docs_demo.pathname2url'
p1146
sg9
g1011
sg40
S'5'
sg10
S"OS-specific conversion from a file system path to a relative URL\nof the 'file' scheme; not recommended for general use."
p1147
sg12
I01
sg13
S''
sg72
(lp1148
(S'pathname'
S''
S''
tp1149
asg42
S'pathname2url(pathname)'
p1150
sg76
S'58'
p1151
sg20
I5
sbag1
(g66
g3
NtRp1152
(dp1153
g6
I7
sg18
g69
sg7
S'wx.tools.wxget_docs_demo.report_error'
p1154
sg9
g1011
sg40
S'6'
sg10
VReport a problem.
p1155
sg12
I00
sg13
S''
sg72
(lp1156
(S'err_text'
S''
S''
tp1157
asg42
S'report_error(err_text)'
p1158
sg76
S'122'
p1159
sg20
I5
sbag1
(g66
g3
NtRp1160
(dp1161
g6
I7
sg18
g69
sg7
S'wx.tools.wxget_docs_demo.unpack_cached'
p1162
sg9
g1011
sg40
S'8'
sg10
VUnpack from the cache.
p1163
sg12
I00
sg13
S''
sg72
(lp1164
(S'cached'
S''
S''
tp1165
a(S'dest_dir'
S''
S''
tp1166
asg42
S'unpack_cached(cached, dest_dir)'
p1167
sg76
S'86'
p1168
sg20
I5
sbag1
(g221
g3
NtRp1169
(dp1170
g6
I23
sg7
S'wx.tools.wxget_docs_demo.absolute_import'
p1171
sg9
g1011
sg10
S''
sg12
I01
sg13
S''
sg225
Vinstance
p1172
sg227
S"_Feature((2, 5, 0, 'alpha', 1), (3, 0, 0, 'alpha', 0), 16384)"
p1173
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp1174
(dp1175
g6
I28
sg7
S'wx.tools.wxget_docs_demo.APP'
p1176
sg9
g1011
sg10
S''
sg12
I00
sg13
S''
sg225
VNoneType
p1177
sg227
S'None'
p1178
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp1179
(dp1180
g6
I23
sg7
S'wx.tools.wxget_docs_demo.division'
p1181
sg9
g1011
sg10
S''
sg12
I01
sg13
S''
sg225
Vinstance
p1182
sg227
S"_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)"
p1183
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp1184
(dp1185
g6
I23
sg7
S'wx.tools.wxget_docs_demo.print_function'
p1186
sg9
g1011
sg10
S''
sg12
I01
sg13
S''
sg225
Vinstance
p1187
sg227
S"_Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 65536)"
p1188
sg18
g229
sg20
I7
sbag1
(g221
g3
NtRp1189
(dp1190
g6
I23
sg7
S'wx.tools.wxget_docs_demo.unicode_literals'
p1191
sg9
g1011
sg10
S''
sg12
I01
sg13
S''
sg225
Vinstance
p1192
sg227
S"_Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 131072)"
p1193
sg18
g229
sg20
I7
sbasg136
NsbasS'python_version'
p1194
S'2.7.11-final'
p1195
sb.