# coding: utf-8

"""
    Qc API

    QC API  # noqa: E501

    OpenAPI spec version: 2.0.3
    Contact: cloudsupport@telestream.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.models.job_details import JobDetails  # noqa: F401,E501


class Job(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'project_id': 'str',
        'status': 'str',
        'state': 'str',
        'duration': 'int',
        'type': 'str',
        'progress': 'int',
        'filename': 'str',
        'source_url': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'error_class': 'str',
        'error_message': 'str',
        'payload': 'str',
        'details': 'JobDetails'
    }

    attribute_map = {
        'id': 'id',
        'project_id': 'project_id',
        'status': 'status',
        'state': 'state',
        'duration': 'duration',
        'type': 'type',
        'progress': 'progress',
        'filename': 'filename',
        'source_url': 'source_url',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'error_class': 'error_class',
        'error_message': 'error_message',
        'payload': 'payload',
        'details': 'details'
    }

    def __init__(self, id=None, project_id=None, status=None, state=None, duration=None, type=None, progress=None, filename=None, source_url=None, created_at=None, updated_at=None, error_class=None, error_message=None, payload=None, details=None):  # noqa: E501
        """Job - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._project_id = None
        self._status = None
        self._state = None
        self._duration = None
        self._type = None
        self._progress = None
        self._filename = None
        self._source_url = None
        self._created_at = None
        self._updated_at = None
        self._error_class = None
        self._error_message = None
        self._payload = None
        self._details = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if project_id is not None:
            self.project_id = project_id
        if status is not None:
            self.status = status
        if state is not None:
            self.state = state
        if duration is not None:
            self.duration = duration
        if type is not None:
            self.type = type
        if progress is not None:
            self.progress = progress
        if filename is not None:
            self.filename = filename
        if source_url is not None:
            self.source_url = source_url
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if error_class is not None:
            self.error_class = error_class
        if error_message is not None:
            self.error_message = error_message
        if payload is not None:
            self.payload = payload
        if details is not None:
            self.details = details

    @property
    def id(self):
        """Gets the id of this Job.  # noqa: E501


        :return: The id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.


        :param id: The id of this Job.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def project_id(self):
        """Gets the project_id of this Job.  # noqa: E501


        :return: The project_id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this Job.


        :param project_id: The project_id of this Job.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def status(self):
        """Gets the status of this Job.  # noqa: E501


        :return: The status of this Job.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.


        :param status: The status of this Job.  # noqa: E501
        :type: str
        """
        allowed_values = ["pending", "transferring", "queued", "downloading", "uploading", "processing", "success", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def state(self):
        """Gets the state of this Job.  # noqa: E501


        :return: The state of this Job.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Job.


        :param state: The state of this Job.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def duration(self):
        """Gets the duration of this Job.  # noqa: E501


        :return: The duration of this Job.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Job.


        :param duration: The duration of this Job.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def type(self):
        """Gets the type of this Job.  # noqa: E501


        :return: The type of this Job.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Job.


        :param type: The type of this Job.  # noqa: E501
        :type: str
        """
        allowed_values = ["vidchecker", "lipsync"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def progress(self):
        """Gets the progress of this Job.  # noqa: E501


        :return: The progress of this Job.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this Job.


        :param progress: The progress of this Job.  # noqa: E501
        :type: int
        """

        self._progress = progress

    @property
    def filename(self):
        """Gets the filename of this Job.  # noqa: E501


        :return: The filename of this Job.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this Job.


        :param filename: The filename of this Job.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def source_url(self):
        """Gets the source_url of this Job.  # noqa: E501


        :return: The source_url of this Job.  # noqa: E501
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url):
        """Sets the source_url of this Job.


        :param source_url: The source_url of this Job.  # noqa: E501
        :type: str
        """

        self._source_url = source_url

    @property
    def created_at(self):
        """Gets the created_at of this Job.  # noqa: E501


        :return: The created_at of this Job.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Job.


        :param created_at: The created_at of this Job.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Job.  # noqa: E501


        :return: The updated_at of this Job.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Job.


        :param updated_at: The updated_at of this Job.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def error_class(self):
        """Gets the error_class of this Job.  # noqa: E501


        :return: The error_class of this Job.  # noqa: E501
        :rtype: str
        """
        return self._error_class

    @error_class.setter
    def error_class(self, error_class):
        """Sets the error_class of this Job.


        :param error_class: The error_class of this Job.  # noqa: E501
        :type: str
        """

        self._error_class = error_class

    @property
    def error_message(self):
        """Gets the error_message of this Job.  # noqa: E501


        :return: The error_message of this Job.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this Job.


        :param error_message: The error_message of this Job.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def payload(self):
        """Gets the payload of this Job.  # noqa: E501


        :return: The payload of this Job.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this Job.


        :param payload: The payload of this Job.  # noqa: E501
        :type: str
        """

        self._payload = payload

    @property
    def details(self):
        """Gets the details of this Job.  # noqa: E501


        :return: The details of this Job.  # noqa: E501
        :rtype: JobDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Job.


        :param details: The details of this Job.  # noqa: E501
        :type: JobDetails
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
