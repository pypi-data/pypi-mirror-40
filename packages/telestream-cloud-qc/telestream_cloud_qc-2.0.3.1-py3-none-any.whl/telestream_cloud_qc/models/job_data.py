# coding: utf-8

"""
    Qc API

    QC API  # noqa: E501

    OpenAPI spec version: 2.0.3
    Contact: cloudsupport@telestream.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.models.options import Options  # noqa: F401,E501


class JobData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'options': 'Options',
        'url': 'str',
        'payload': 'str'
    }

    attribute_map = {
        'options': 'options',
        'url': 'url',
        'payload': 'payload'
    }

    def __init__(self, options=None, url=None, payload=None):  # noqa: E501
        """JobData - a model defined in Swagger"""  # noqa: E501

        self._options = None
        self._url = None
        self._payload = None
        self.discriminator = None

        if options is not None:
            self.options = options
        if url is not None:
            self.url = url
        if payload is not None:
            self.payload = payload

    @property
    def options(self):
        """Gets the options of this JobData.  # noqa: E501


        :return: The options of this JobData.  # noqa: E501
        :rtype: Options
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this JobData.


        :param options: The options of this JobData.  # noqa: E501
        :type: Options
        """

        self._options = options

    @property
    def url(self):
        """Gets the url of this JobData.  # noqa: E501


        :return: The url of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this JobData.


        :param url: The url of this JobData.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def payload(self):
        """Gets the payload of this JobData.  # noqa: E501

        Payload is an arbitrary text of length 256 or shorter that you can store along the Media. It is typically used to retain an association with one of your own DB record ID.  # noqa: E501

        :return: The payload of this JobData.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this JobData.

        Payload is an arbitrary text of length 256 or shorter that you can store along the Media. It is typically used to retain an association with one of your own DB record ID.  # noqa: E501

        :param payload: The payload of this JobData.  # noqa: E501
        :type: str
        """

        self._payload = payload

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
