# coding: utf-8

"""
    Qc API

    QC API  # noqa: E501

    OpenAPI spec version: 2.0.3
    Contact: cloudsupport@telestream.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from telestream_cloud_qc.models.audio_stream import AudioStream  # noqa: F401,E501
from telestream_cloud_qc.models.container import Container  # noqa: F401,E501
from telestream_cloud_qc.models.video_stream import VideoStream  # noqa: F401,E501


class Media(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audio': 'list[AudioStream]',
        'video': 'list[VideoStream]',
        'container': 'Container'
    }

    attribute_map = {
        'audio': 'audio',
        'video': 'video',
        'container': 'container'
    }

    def __init__(self, audio=None, video=None, container=None):  # noqa: E501
        """Media - a model defined in Swagger"""  # noqa: E501

        self._audio = None
        self._video = None
        self._container = None
        self.discriminator = None

        if audio is not None:
            self.audio = audio
        if video is not None:
            self.video = video
        if container is not None:
            self.container = container

    @property
    def audio(self):
        """Gets the audio of this Media.  # noqa: E501


        :return: The audio of this Media.  # noqa: E501
        :rtype: list[AudioStream]
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this Media.


        :param audio: The audio of this Media.  # noqa: E501
        :type: list[AudioStream]
        """

        self._audio = audio

    @property
    def video(self):
        """Gets the video of this Media.  # noqa: E501


        :return: The video of this Media.  # noqa: E501
        :rtype: list[VideoStream]
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this Media.


        :param video: The video of this Media.  # noqa: E501
        :type: list[VideoStream]
        """

        self._video = video

    @property
    def container(self):
        """Gets the container of this Media.  # noqa: E501


        :return: The container of this Media.  # noqa: E501
        :rtype: Container
        """
        return self._container

    @container.setter
    def container(self, container):
        """Sets the container of this Media.


        :param container: The container of this Media.  # noqa: E501
        :type: Container
        """

        self._container = container

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Media):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
