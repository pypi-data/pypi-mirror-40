# coding: utf-8

"""
    Qc API

    QC API  # noqa: E501

    OpenAPI spec version: 2.0.3
    Contact: cloudsupport@telestream.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Alert(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'level': 'str',
        'info': 'str',
        'begin': 'float',
        'end': 'float',
        'stream': 'int',
        'detail': 'str'
    }

    attribute_map = {
        'level': 'level',
        'info': 'info',
        'begin': 'begin',
        'end': 'end',
        'stream': 'stream',
        'detail': 'detail'
    }

    def __init__(self, level=None, info=None, begin=None, end=None, stream=None, detail=None):  # noqa: E501
        """Alert - a model defined in Swagger"""  # noqa: E501

        self._level = None
        self._info = None
        self._begin = None
        self._end = None
        self._stream = None
        self._detail = None
        self.discriminator = None

        if level is not None:
            self.level = level
        if info is not None:
            self.info = info
        if begin is not None:
            self.begin = begin
        if end is not None:
            self.end = end
        if stream is not None:
            self.stream = stream
        if detail is not None:
            self.detail = detail

    @property
    def level(self):
        """Gets the level of this Alert.  # noqa: E501


        :return: The level of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Alert.


        :param level: The level of this Alert.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def info(self):
        """Gets the info of this Alert.  # noqa: E501

        Extra information for an alert.  # noqa: E501

        :return: The info of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this Alert.

        Extra information for an alert.  # noqa: E501

        :param info: The info of this Alert.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def begin(self):
        """Gets the begin of this Alert.  # noqa: E501

        Start time of alert.  # noqa: E501

        :return: The begin of this Alert.  # noqa: E501
        :rtype: float
        """
        return self._begin

    @begin.setter
    def begin(self, begin):
        """Sets the begin of this Alert.

        Start time of alert.  # noqa: E501

        :param begin: The begin of this Alert.  # noqa: E501
        :type: float
        """

        self._begin = begin

    @property
    def end(self):
        """Gets the end of this Alert.  # noqa: E501

        End time of alert.  # noqa: E501

        :return: The end of this Alert.  # noqa: E501
        :rtype: float
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this Alert.

        End time of alert.  # noqa: E501

        :param end: The end of this Alert.  # noqa: E501
        :type: float
        """

        self._end = end

    @property
    def stream(self):
        """Gets the stream of this Alert.  # noqa: E501


        :return: The stream of this Alert.  # noqa: E501
        :rtype: int
        """
        return self._stream

    @stream.setter
    def stream(self, stream):
        """Sets the stream of this Alert.


        :param stream: The stream of this Alert.  # noqa: E501
        :type: int
        """

        self._stream = stream

    @property
    def detail(self):
        """Gets the detail of this Alert.  # noqa: E501


        :return: The detail of this Alert.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this Alert.


        :param detail: The detail of this Alert.  # noqa: E501
        :type: str
        """

        self._detail = detail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Alert):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
