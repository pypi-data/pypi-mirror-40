# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class Arg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsArg(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Arg()
        x.Init(buf, n + offset)
        return x

    # Arg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Arg
    def ObjectIds(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Arg
    def ObjectIdsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Arg
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ArgStart(builder): builder.StartObject(2)
def ArgAddObjectIds(builder, objectIds): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(objectIds), 0)
def ArgStartObjectIdsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ArgAddData(builder, data): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def ArgEnd(builder): return builder.EndObject()
