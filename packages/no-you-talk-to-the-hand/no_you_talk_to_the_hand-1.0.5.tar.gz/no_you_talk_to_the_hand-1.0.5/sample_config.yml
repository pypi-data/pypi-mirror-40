#
#
#     Sample configuration for 'no YOU talk to the hand' (nyttth)
#
#



#
#     Define variables
#

CORP_USER: &CORP_USER youruser
CORP_PASS: &CORP_PASS yourpass


URL_PERSONAL_PROXY_CHECK: &URL_PERSONAL_PROXY_CHECK https://twitter.com/

SUBNETS_LOCAL: &SUBNETS_LOCAL
    - 192.168.0.0/16

SUBNETS_CORP_RESTRICTED: &SUBNETS_CORP_RESTRICTED
    # Forward all private addresses as an example
    - 172.16.0.0/12
    - 10.0.0.0/8



# The jump server to access subnets not provided by simple VPN access
HOST_CORP_JUMP: &HOST_CORP_JUMP 10.1.1.1

# Once we can access the internal subnet though the initial jump server, we need
# another forward to access a secure db instance via a privileged app server
HOST_CORP_PRIVILEGED_APP: &HOST_CORP_PRIVILEGED_APP 10.1.2.1
HOST_CORP_SECURE_DB: &HOST_CORP_SECURE_DB 10.1.3.0/24

# Finally, a proxy server for all other traffic like web browsing and skype.
HOST_PERSONAL_PROXY: &HOST_PERSONAL_PROXY 192.168.1.2


log_level: DEBUG

#
#   Setup the forwarding rules (tunnels/proxies)
#
tunnels:

  # vpn is an external condition that we simply check for
  vpn:
    check:
      host: *HOST_CORP_JUMP
      port: 22

  # If vpn is up, the forward traffic to restricted corporate subnets through the jump server.
  corporate:
    depends: vpn
    proxy:
      host: *HOST_CORP_JUMP
      user: *CORP_USER
      pass: *CORP_PASS
    # verify by checking ssh access to the privileged app server
    check:
      host: *HOST_CORP_PRIVILEGED_APP
      port: 22
    forwards:
      # includes and excludes. items can be ips, subnets, or lists of ip/subnets.
      include:
        - *SUBNETS_CORP_RESTRICTED
      exclude:
        - *HOST_CORP_SECURE_DB

  # another forward to access a secure server from a whitelisted machine. A common scenario is accessing
  # a database that only allows connections from specific application servers.
  whitelisted:
    depends: corporate
    proxy:
      host: *HOST_CORP_PRIVILEGED_APP
      user: *CORP_USER
      pass: *CORP_PASS
    # Skip the check config since there is no direct way to test since it's not simply ssh access we're looking
    # for, but rather access to a whiltelisted service that we don't generically know how to talk to.
    forwards:
      # includes and excludes. items can be ips, subnets, or lists of ip/subnets.
      include:
        - *HOST_CORP_SECURE_DB


  # Forward everything not destined for a corporate networks though a non-corporate proxy
  personal:
    depends: vpn
    proxy:
      host: *HOST_PERSONAL_PROXY
      user:
      pass:
    # check access to Twitter to determine if corp web proxy is being properly bypassed
    check:
      # instead of an ip and port, a check target can be a url for an http check
      url: *URL_PERSONAL_PROXY_CHECK
    forwards:
      # includes and excludes. items can be ips, subnets, or lists of ip/subnets.
      include:
        - 0/0
      exclude:
        - *SUBNETS_LOCAL
        - *SUBNETS_CORP_RESTRICTED
        - *HOST_CORP_SECURE_DB
        