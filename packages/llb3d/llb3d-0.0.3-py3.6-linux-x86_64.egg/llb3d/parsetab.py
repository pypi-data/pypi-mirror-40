
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "programAFTER AND BEFORE CASE CONST DATA DEFAULT DELETE DIM EACH ELSE ELSEIF END ENDIF EXIT FALSE FIELD FIRST FLOAT FLOATLIT FOR FOREVER FUNCTION GLOBAL GOSUB GOTO ID IF INCLUDE INSERT INT INTLIT LAST LOCAL MOD NEW NEXT NOT NULL OR PI READ REPEAT RESTORE RETURN SAR SELECT SHL SHR STEP STR STRLIT THEN TO TRUE TYPE UNTIL WEND WHILE XORempty : global_statement : statement\n        local_statement : statement\n    global_statements : global_statement\n        local_statements : local_statement\n    global_statements : global_statements '\\n' global_statement\n        local_statements : local_statements '\\n' local_statement\n    id : IDatom : INTLITatom : FLOATLITatom : STRLITatom : idexpression : atom\n        statement : expression\n    exprlist : expressionexprlist : exprlist ',' expressionstatement : proccallproccall : id exprlist\n                 | id empty\n    program : global_statements"
    
_lr_action_items = {'FLOATLIT':([0,2,12,13,19,],[1,-8,1,1,1,]),'ID':([0,2,12,13,19,],[2,-8,2,2,2,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,20,],[-10,-8,-17,-14,-20,-9,-13,0,-2,-4,-11,-1,-18,-19,-15,-12,-6,-16,]),'STRLIT':([0,2,12,13,19,],[11,-8,11,11,11,]),'\n':([1,2,3,4,5,6,7,9,10,11,12,14,15,16,17,18,20,],[-10,-8,-17,-14,13,-9,-13,-2,-4,-11,-1,-18,-19,-15,-12,-6,-16,]),',':([1,2,6,7,11,14,16,17,20,],[-10,-8,-9,-13,-11,19,-15,-12,-16,]),'INTLIT':([0,2,12,13,19,],[6,-8,6,6,6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'exprlist':([12,],[14,]),'proccall':([0,13,],[3,3,]),'program':([0,],[8,]),'expression':([0,12,13,19,],[4,16,4,20,]),'statement':([0,13,],[9,9,]),'global_statement':([0,13,],[10,18,]),'global_statements':([0,],[5,]),'empty':([12,],[15,]),'id':([0,12,13,19,],[12,17,12,17,]),'atom':([0,12,13,19,],[7,7,7,7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',25),
  ('global_statement -> statement','global_statement',1,'p_statement_descent','parser.py',31),
  ('local_statement -> statement','local_statement',1,'p_statement_descent','parser.py',32),
  ('global_statements -> global_statement','global_statements',1,'p_statements_start','parser.py',37),
  ('local_statements -> local_statement','local_statements',1,'p_statements_start','parser.py',38),
  ('global_statements -> global_statements \n global_statement','global_statements',3,'p_statement_rest','parser.py',43),
  ('local_statements -> local_statements \n local_statement','local_statements',3,'p_statement_rest','parser.py',44),
  ('id -> ID','id',1,'p_id','parser.py',52),
  ('atom -> INTLIT','atom',1,'p_atom_int','parser.py',58),
  ('atom -> FLOATLIT','atom',1,'p_atom_float','parser.py',62),
  ('atom -> STRLIT','atom',1,'p_atom_string','parser.py',66),
  ('atom -> id','atom',1,'p_atom_id','parser.py',70),
  ('expression -> atom','expression',1,'p_expression_descent','parser.py',76),
  ('statement -> expression','statement',1,'p_expression_descent','parser.py',77),
  ('exprlist -> expression','exprlist',1,'p_exprlist_start','parser.py',82),
  ('exprlist -> exprlist , expression','exprlist',3,'p_exprlist_rest','parser.py',86),
  ('statement -> proccall','statement',1,'p_statement_proccall','parser.py',92),
  ('proccall -> id exprlist','proccall',2,'p_proccall','parser.py',96),
  ('proccall -> id empty','proccall',2,'p_proccall','parser.py',97),
  ('program -> global_statements','program',1,'p_start','parser.py',107),
]
