{"version":3,"sources":["webpack:///./node_modules/@data-exp-lab/yt-tools/yt_tools.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACsC;;AAEtC;AACA;AACA,uEAAuE,mDAAW;AAClF,6CAA6C,mDAAW;AACxD;AACA;AACA;;AAEA;;AAEA;AACA,gBAAgB,8DAAsB;AACtC;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,gBAAgB,8DAAsB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA,2EAA2E,mDAAW;AACtF,iDAAiD,mDAAW;AAC5D;AACA;AACA;;AAEA;AACA,gBAAgB,8DAAsB;AACtC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,IAAI,6EAAqC;AACzC;AACA;AACA;AACO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB;AACA;AACA;AACA,mBAAmB,sEAA8B;AACjD;AACA;AACA,cAAc,aAAa;AAC3B,cAAc,aAAa;AAC3B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,0EAAkC;;AAErD,SAAS;AACT;AACA,YAAY,4DAAoB;;AAEhC;;AAEA;AACA;;AAEA;;AAEA,IAAI,gEAAwB;AAC5B;AACA;AACA;AACO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA,mBAAmB,yDAAiB;AACpC;AACA;;AAEA;;AAEA,IAAI,oEAA4B;AAChC;AACA;AACA;AACO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,aAAa;AAC3B,cAAc,aAAa;AAC3B,cAAc,aAAa;AAC3B,cAAc,aAAa;AAC3B,cAAc,aAAa;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6DAAqB;AACxC;AACA;;AAEA;;AAEA,IAAI,0EAAkC;AACtC;AACA;AACA;AACO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,mEAA2B;AAC9C;AACA;AACA,cAAc,OAAO;AACrB,cAAc,WAAW;AACzB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,4EAAoC;AACnD;AACA;AACA,cAAc,OAAO;AACrB,cAAc,aAAa;AAC3B,cAAc,WAAW;AACzB,cAAc,OAAO;AACrB,cAAc,OAAO;AACrB,cAAc,QAAQ;AACtB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,yEAAiC;;AAEpD,SAAS;AACT;AACA,YAAY,4DAAoB;;AAEhC;;AAEA;AACA;;AAEA;;AAEA,IAAI,iEAAyB;AAC7B;AACA;AACA;AACO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEO;AACP;AACA","file":"0.index.js","sourcesContent":["/* tslint:disable */\nimport * as wasm from './yt_tools_bg';\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm(arg) {\n    const ptr = wasm.__wbindgen_malloc(arg.length * 1);\n    getUint8Memory().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nfunction passStringToWasm(arg) {\n\n    const buf = cachedTextEncoder.encode(arg);\n    const ptr = wasm.__wbindgen_malloc(buf.length);\n    getUint8Memory().set(buf, ptr);\n    WASM_VECTOR_LEN = buf.length;\n    return ptr;\n}\n\nlet cachegetFloat64Memory = null;\nfunction getFloat64Memory() {\n    if (cachegetFloat64Memory === null || cachegetFloat64Memory.buffer !== wasm.memory.buffer) {\n        cachegetFloat64Memory = new Float64Array(wasm.memory.buffer);\n    }\n    return cachegetFloat64Memory;\n}\n\nfunction passArrayF64ToWasm(arg) {\n    const ptr = wasm.__wbindgen_malloc(arg.length * 8);\n    getFloat64Memory().set(arg, ptr / 8);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nfunction freeFixedResolutionBuffer(ptr) {\n\n    wasm.__wbg_fixedresolutionbuffer_free(ptr);\n}\n/**\n*/\nexport class FixedResolutionBuffer {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeFixedResolutionBuffer(ptr);\n    }\n\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @param {number} arg2\n    * @param {number} arg3\n    * @param {number} arg4\n    * @param {number} arg5\n    * @returns {}\n    */\n    constructor(arg0, arg1, arg2, arg3, arg4, arg5) {\n        this.ptr = wasm.fixedresolutionbuffer_new(arg0, arg1, arg2, arg3, arg4, arg5);\n    }\n    /**\n    * @param {VariableMesh} arg0\n    * @param {Float64Array} arg1\n    * @returns {number}\n    */\n    deposit(arg0, arg1) {\n        const ptr1 = passArrayF64ToWasm(arg1);\n        const len1 = WASM_VECTOR_LEN;\n        try {\n            return wasm.fixedresolutionbuffer_deposit(this.ptr, arg0.ptr, ptr1, len1);\n\n        } finally {\n            arg1.set(getFloat64Memory().subarray(ptr1 / 8, ptr1 / 8 + len1));\n            wasm.__wbindgen_free(ptr1, len1 * 8);\n\n        }\n\n    }\n}\n\nfunction freeColormap(ptr) {\n\n    wasm.__wbg_colormap_free(ptr);\n}\n/**\n*/\nexport class Colormap {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeColormap(ptr);\n    }\n\n    /**\n    * @param {Uint8Array} arg0\n    * @returns {}\n    */\n    constructor(arg0) {\n        const ptr0 = passArray8ToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        this.ptr = wasm.colormap_new(ptr0, len0);\n    }\n}\n\nfunction freeVariableMesh(ptr) {\n\n    wasm.__wbg_variablemesh_free(ptr);\n}\n/**\n*/\nexport class VariableMesh {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeVariableMesh(ptr);\n    }\n\n    /**\n    * @param {Float64Array} arg0\n    * @param {Float64Array} arg1\n    * @param {Float64Array} arg2\n    * @param {Float64Array} arg3\n    * @param {Float64Array} arg4\n    * @returns {}\n    */\n    constructor(arg0, arg1, arg2, arg3, arg4) {\n        const ptr0 = passArrayF64ToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArrayF64ToWasm(arg1);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passArrayF64ToWasm(arg2);\n        const len2 = WASM_VECTOR_LEN;\n        const ptr3 = passArrayF64ToWasm(arg3);\n        const len3 = WASM_VECTOR_LEN;\n        const ptr4 = passArrayF64ToWasm(arg4);\n        const len4 = WASM_VECTOR_LEN;\n        this.ptr = wasm.variablemesh_new(ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, ptr4, len4);\n    }\n}\n\nfunction freeColormapCollection(ptr) {\n\n    wasm.__wbg_colormapcollection_free(ptr);\n}\n/**\n*/\nexport class ColormapCollection {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeColormapCollection(ptr);\n    }\n\n    /**\n    * @returns {}\n    */\n    constructor() {\n        this.ptr = wasm.colormapcollection_new();\n    }\n    /**\n    * @param {string} arg0\n    * @param {Uint8Array} arg1\n    * @returns {void}\n    */\n    add_colormap(arg0, arg1) {\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm(arg1);\n        const len1 = WASM_VECTOR_LEN;\n        return wasm.colormapcollection_add_colormap(this.ptr, ptr0, len0, ptr1, len1);\n    }\n    /**\n    * @param {string} arg0\n    * @param {Float64Array} arg1\n    * @param {Uint8Array} arg2\n    * @param {number} arg3\n    * @param {number} arg4\n    * @param {boolean} arg5\n    * @returns {void}\n    */\n    normalize(arg0, arg1, arg2, arg3, arg4, arg5) {\n        const ptr0 = passStringToWasm(arg0);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArrayF64ToWasm(arg1);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passArray8ToWasm(arg2);\n        const len2 = WASM_VECTOR_LEN;\n        try {\n            return wasm.colormapcollection_normalize(this.ptr, ptr0, len0, ptr1, len1, ptr2, len2, !isLikeNone(arg3), isLikeNone(arg3) ? 0 : arg3, !isLikeNone(arg4), isLikeNone(arg4) ? 0 : arg4, arg5);\n\n        } finally {\n            arg2.set(getUint8Memory().subarray(ptr2 / 1, ptr2 / 1 + len2));\n            wasm.__wbindgen_free(ptr2, len2 * 1);\n\n        }\n\n    }\n}\n\nfunction freeRGBAValue(ptr) {\n\n    wasm.__wbg_rgbavalue_free(ptr);\n}\n/**\n*/\nexport class RGBAValue {\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeRGBAValue(ptr);\n    }\n\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nexport function __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\n"],"sourceRoot":""}