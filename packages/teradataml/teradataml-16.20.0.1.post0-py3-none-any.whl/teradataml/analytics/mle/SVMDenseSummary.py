#!/usr/bin/python
# ################################################################## 
# 
# Copyright 2018 Teradata. All rights reserved.
# TERADATA CONFIDENTIAL AND TRADE SECRET
# 
# Primary Owner: Pankaj Purandare (pankajvinod.purandare@teradata.com)
# Secondary Owner: N Bhavana (bhavana.n@teradata.com)
# 
# Version: 1.2
# Function Version: 1.5
# 
# ################################################################## 

from teradataml.common.wrapper_utils import AnalyticsWrapperUtils
from teradataml.common.utils import UtilFuncs
from teradataml.context.context import *
from teradataml.dataframe.dataframe import DataFrame
from teradataml.common.aed_utils import AedUtils
from teradataml.analytics.analytic_query_generator import AnalyticQueryGenerator
from teradataml.common.exceptions import TeradataMlException
from teradataml.common.messages import Messages
from teradataml.common.messagecodes import MessageCodes
from teradataml.common.constants import TeradataConstants
from teradataml.dataframe.dataframe_utils import DataFrameUtils as df_utils
from teradataml.options.display import display
from teradataml.analytics.mle.SVMDense import SVMDense

class SVMDenseSummary:
    
    def __init__(self,
        object = None,
        data = None,
        attribute_columns = None,
        summary = False,
        data_sequence_column = None,
        object_sequence_column = None) :
        """
        DESCRIPTION:
            SVMDenseSummary extracts readable information from the model 
            produced by SVMDense. The function can display either a 
            summary of the model training results or a teradataml DataFrame 
            containing the weights for each attribute.
        
        
        PARAMETERS:
            object:
                Required Argument.
                Specifies the teradataml DataFrame containing the model
                data generated by SVMDense or instance of SVMDense,
                which contains the model.
            
            data:
                Required Argument.
                Specifies the teradataml DataFrame containing the input test data.
                It should be the training dataset, otherwise the result may be 
                incomplete.
            
            attribute_columns:
                Required Argument.
                Specifies the input teradataml DataFrame columns that contain the 
                attributes of the test samples. Attribute columns must be 
                numeric (int, real, bigint,smallint, or float).
                Python teradataml DataFrame column types accepted: (int, float, long).
                Types: str OR list of Strings (str)
            
            summary:
                Optional Argument.
                If True, the output contains only summary information of the model. 
                If False, the output contains the weight of each attribute in the 
                model. 
                Default Value: False
                Types: bool
            
            data_sequence_column:
                Optional Argument.
                Specifies the list of column(s) that uniquely identifies each row of 
                the input argument "data". The argument is used to ensure 
                deterministic results for functions which produce results that vary 
                from run to run.
                Types: str OR list of Strings (str)
            
            object_sequence_column:
                Optional Argument.
                Specifies the list of column(s) that uniquely identifies each row of 
                the input argument "object". The argument is used to ensure 
                deterministic results for functions which produce results that vary 
                from run to run.
                Types: str OR list of Strings (str)
        
        RETURNS:
            Instance of SVMDenseSummary.
            Output teradataml DataFrames can be accessed using attribute 
            references, such as SVMDenseSummaryObj.<attribute_name>.
            Output teradataml DataFrame attribute name is:
                result
        
        
        RAISES:
            TeradataMlException
        
        
        EXAMPLES:
            
            # Create teradataml DataFrame objects.
            svm_iris_train = DataFrame.from_table("svm_iris_train")

            # Generate Radial Basis Model (RBF) Model
            densesvm_iris_rbf_model = svm_dense(data = svm_iris_train,
                                                 sample_id_colum = "id",
                                                 attribute_columnss = ['sepal_length', 'sepal_width' , 'petal_length' , 'petal_width'],
                                                 kernel_function = "rbf",
                                                 gamma = 0.1,
                                                 subspace.dimension = 120,
                                                 hash.bits = 512,
                                                 label_column = "species",
                                                 cost = 1.0,
                                                 bias = 0.0,
                                                 max_step = 100,
                                                 seed = 1
                                                 )
    
            # Example 1 - Display the model parameters (weights, attributes etc). 
            svm_dense_summary_out1 = SVMDenseSummary(object = densesvm_iris_rbf_model,
                                                             data = svm_iris_train,
                                                             attribute.columns=['sepal_length','sepal_width','petal_length','petal_width'],
                                                             summary = False
                                                             )
            
            # Print the result DataFrame
            print (svm_dense_summary_out1)
        """
        self.object  = object 
        self.data  = data 
        self.attribute_columns  = attribute_columns 
        self.summary  = summary 
        self.data_sequence_column  = data_sequence_column 
        self.object_sequence_column  = object_sequence_column 
        
        # Create TeradataPyWrapperUtils instance which contains validation functions.
        self.__awu = AnalyticsWrapperUtils()
        self.__aed_utils = AedUtils()
        
        # Create argument information matrix to do parameter checking
        self.__arg_info_matrix = []
        self.__arg_info_matrix.append(["object", self.object, False, "DataFrame"])
        self.__arg_info_matrix.append(["data", self.data, False, "DataFrame"])
        self.__arg_info_matrix.append(["attribute_columns", self.attribute_columns, False, "str"])
        self.__arg_info_matrix.append(["summary", self.summary, True, "bool"])
        self.__arg_info_matrix.append(["data_sequence_column", self.data_sequence_column, True, "str"])
        self.__arg_info_matrix.append(["object_sequence_column", self.object_sequence_column, True, "str"])
        
        # Perform the function validations
        self.__validate()
        # Generate the ML query
        self.__form_tdml_query()
        # Execute ML query
        self.__execute()
        
    def __validate(self) :
        """
        Function to validate sqlmr function arguments, which verifies missing 
        arguments, input argument and table types. Also processes the 
        argument values.
        """
        if isinstance(self.object, SVMDense):
            self.object = self.object._mlresults[0]
        
        # Make sure that a non-NULL value has been supplied for all mandatory arguments
        self.__awu._validate_missing_required_arguments(self.__arg_info_matrix)
        
        # Make sure that a non-NULL value has been supplied correct type of argument
        self.__awu._validate_argument_types(self.__arg_info_matrix)
        
        # Check to make sure input table types are strings or data frame objects or of valid type.
        self.__awu._validate_input_table_datatype(self.data, "data", None)
        self.__awu._validate_input_table_datatype(self.object, "object", SVMDense)
        
        # Check whether the input columns passed to the argument are not empty.
        # Also check whether the input columns passed to the argument valid or not.
        self.__awu._validate_input_columns_not_empty(self.attribute_columns, "attribute_columns")
        self.__awu._validate_dataframe_has_argument_columns(self.attribute_columns, "attribute_columns", self.data, "data")
        
        self.__awu._validate_input_columns_not_empty(self.data_sequence_column, "data_sequence_column")
        self.__awu._validate_dataframe_has_argument_columns(self.data_sequence_column, "data_sequence_column", self.data, "data")
        
        self.__awu._validate_input_columns_not_empty(self.object_sequence_column, "object_sequence_column")
        self.__awu._validate_dataframe_has_argument_columns(self.object_sequence_column, "object_sequence_column", self.object, "object")
        
        
    def __form_tdml_query(self) :
        """
        Function to generate the analytical function queries. The function defines 
        variables and list of arguments required to form the query.
        """
        
        # Output table arguments list
        self.__func_output_args_sql_names = []
        self.__func_output_args = []
        
        # Generate lists for rest of the function arguments
        self.__func_other_arg_sql_names = []
        self.__func_other_args = []
        self.__func_other_arg_json_datatypes = []
        
        self.__func_other_arg_sql_names.append("AttributeColumns")
        self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(UtilFuncs._teradata_quote_arg(self.attribute_columns,"\""),"'"))
        self.__func_other_arg_json_datatypes.append("COLUMNS")
        
        if self.summary is not None and self.summary != False:
            self.__func_other_arg_sql_names.append("OutputSummary")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(self.summary,"'"))
            self.__func_other_arg_json_datatypes.append("BOOLEAN")
        
        # Generate lists for rest of the function arguments
        sequence_input_by_list = []
        if self.data_sequence_column is not None:
            sequence_input_by_list.append("input:" + UtilFuncs._teradata_collapse_arglist(self.data_sequence_column,""))
        
        if self.object_sequence_column is not None:
            sequence_input_by_list.append("model:" + UtilFuncs._teradata_collapse_arglist(self.object_sequence_column,""))
        
        if len(sequence_input_by_list) > 0:
            self.__func_other_arg_sql_names.append("SequenceInputBy")
            self.__func_other_args.append(UtilFuncs._teradata_collapse_arglist(sequence_input_by_list,"'"))
            self.__func_other_arg_json_datatypes.append("STRING")
        
        
        # Declare empty lists to hold input table information.
        self.__func_input_arg_sql_names = []
        self.__func_input_table_view_query = []
        self.__func_input_dataframe_type = []
        self.__func_input_distribution = []
        self.__func_input_partition_by_cols = []
        self.__func_input_order_by_cols = []
        
        # Process data
        self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.data, False)
        self.__func_input_distribution.append("FACT")
        self.__func_input_arg_sql_names.append("input")
        self.__func_input_table_view_query.append(self.__table_ref["ref"])
        self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
        self.__func_input_partition_by_cols.append('1')
        self.__func_input_order_by_cols.append("NA_character_")
        
        # Process object
        self.__table_ref = self.__awu._teradata_on_clause_from_dataframe(self.object, False)
        self.__func_input_distribution.append("DIMENSION")
        self.__func_input_arg_sql_names.append("model")
        self.__func_input_table_view_query.append(self.__table_ref["ref"])
        self.__func_input_dataframe_type.append(self.__table_ref["ref_type"])
        self.__func_input_partition_by_cols.append("NA_character_")
        self.__func_input_order_by_cols.append("NA_character_")
        
        function_name = "SVMDenseSummary"
        # Create instance to generate SQLMR.
        aqg_obj = AnalyticQueryGenerator(function_name 
                ,self.__func_input_arg_sql_names 
                ,self.__func_input_table_view_query 
                ,self.__func_input_dataframe_type 
                ,self.__func_input_distribution 
                ,self.__func_input_partition_by_cols 
                ,self.__func_input_order_by_cols 
                ,self.__func_other_arg_sql_names 
                ,self.__func_other_args 
                ,self.__func_other_arg_json_datatypes 
                ,self.__func_output_args_sql_names 
                ,self.__func_output_args)
        # Invoke call to SQL-MR generation.
        self.sqlmr_query = aqg_obj._gen_sqlmr_select_stmt_sql()
        
        # Print SQL-MR query if requested to do so.
        if display.print_sqlmr_query:
            print(self.sqlmr_query)
        
    def __execute(self) :
        """
        Function to execute SQL-MR queries. 
        Create DataFrames for the required SQL-MR outputs.
        """
        # Generate STDOUT table name and add it to the output table list.
        sqlmr_stdout_temp_tablename = UtilFuncs._generate_temp_table_name(prefix = "td_sqlmr_out_", use_default_database = True, gc_on_quit = True, quote=False)
        try:
            UtilFuncs._create_view(sqlmr_stdout_temp_tablename, self.sqlmr_query)
        except Exception as emsg:
            raise TeradataMlException(Messages.get_message(MessageCodes.TDMLDF_EXEC_SQL_FAILED, str(emsg)), MessageCodes.TDMLDF_EXEC_SQL_FAILED)
        
        # Update output table data frames.
        self._mlresults = []
        self.result = self.__awu._create_data_set_object(df_input=UtilFuncs._extract_table_name(sqlmr_stdout_temp_tablename), source_type="table", database_name=UtilFuncs._extract_db_name(sqlmr_stdout_temp_tablename))
        self._mlresults.append(self.result)
        
    def __repr__(self) :
        """
        Returns the string representation for a SVMDenseSummary class instance.
        """
        repr_string="############ STDOUT Output ############"
        repr_string = "{}\n\n{}".format(repr_string,self.result)
        return repr_string
        
