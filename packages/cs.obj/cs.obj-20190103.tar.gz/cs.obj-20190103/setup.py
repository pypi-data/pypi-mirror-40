#!/usr/bin/env python
from setuptools import setup
setup(
  name = 'cs.obj',
  description = 'Convenience facilities for objects.',
  author = 'Cameron Simpson',
  author_email = 'cs@cskk.id.au',
  version = '20190103',
  url = 'https://bitbucket.org/cameron_simpson/css/commits/all',
  classifiers = ['Programming Language :: Python', 'Programming Language :: Python :: 2', 'Programming Language :: Python :: 3', 'Development Status :: 4 - Beta', 'Intended Audience :: Developers', 'Operating System :: OS Independent', 'Topic :: Software Development :: Libraries :: Python Modules', 'License :: OSI Approved :: GNU General Public License v3 (GPLv3)'],
  install_requires = ['cs.py3'],
  keywords = ['python2', 'python3'],
  long_description = "Convenience facilities for objects.\n\nPresents:\n* flavour, for deciding whether an object resembles a mapping or sequence.\n* O, an object subclass with a nice __str__ and convenient __init__.\n* Some O_* functions for working with objects, particularly O subclasses.\n* Proxy, a very simple minded object proxy intended to aid debugging.\n\n## Function `copy(obj, *a, **kw)`\n\nConvenient function to shallow copy an object with simple modifications.\n\nPerforms a shallow copy of `self` using copy.copy.\n\nTreat all positional parameters as attribute names, and\nreplace those attributes with shallow copies of the original\nattribute.\n\nTreat all keyword arguments as (attribute,value) tuples and\nreplace those attributes with the supplied values.\n\n## Function `flavour(obj)`\n\nReturn constants indicating the ``flavour'' of an object:\n* `T_MAP`: DictType, DictionaryType, objects with an __keys__ or keys attribute.\n* `T_SEQ`: TupleType, ListType, objects with an __iter__ attribute.\n* `T_SCALAR`: Anything else.\n\n## Class `O`\n\nA bare object subclass to allow storing arbitrary attributes.\n\nIt also has a nice default `__str__`\nand `__eq__` and `__ne__` based on the `O_attrs` of the object.\n\n## Function `O_attritems(o)`\n\nGenerator yielding `(attr,value)` for relevant attributes of `o`.\n\n## Function `O_attrs(o)`\n\nYield attribute names from `o` which are pertinent to `O_str`.\n\nNote: this calls `getattr(o,attr)` to inspect it in order to\nprune callables.\n\n## Function `O_merge(o, _conflict=None, _overwrite=False, **kw)`\n\nMerge key:value pairs from a mapping into an O as attributes.\n\nIgnore keys that do not start with a letter.\nNew attributes or attributes whose values compare equal are\nmerged in. Unequal values are passed to:\n\n    _conflict(o, attr, old_value, new_value)\n\nto resolve the conflict. If _conflict is omitted or None\nthen the new value overwrites the old if _overwrite is true.\n\n## Function `O_str(o, no_recurse=False, seen=None)`\n\nReturn a `str` representation of the object `o`.\n\nParameters:\n* `o`: the object to describe.\n* `no_recurse`: if true, do not recurse into the object's structure.\n  Default: `False`.\n* `seen`: a set of previously sighted objects\n  to prevent recursion loops.\n\n## Function `obj_as_dict(o, attr_prefix=None, attr_match=None)`\n\nReturn a dictionary with keys mapping to `o` attributes.\n\n## Class `Proxy`\n\nAn extremely simple proxy object\nthat passes all unmatched attribute accesses to the proxied object.\n\nNote that setattr and delattr work directly on the proxy, not the proxied object.\n\n## Class `TrackedClassMixin`\n\nA mixin to track all instances of a particular class.\n\nThis is aimed at checking the global state of objects of a\nparticular type, particularly states like counters. The\ntracking is attached to the class itself.\n\nThe class to be tracked includes this mixin as a superclass and calls:\n\n    TrackedClassMixin.__init__(class_to_track)\n\nfrom its __init__ method. Note that `class_to_track` is\ntypically the class name itself, not `type(self)` which would\ntrack the specific subclass. At some relevant point one can call:\n\n    self.tcm_dump(class_to_track[, file])\n\n`class_to_track` needs a `tcm_get_state` method to return the\nsalient information, such as this from cs.resources.MultiOpenMixin:\n\n    def tcm_get_state(self):\n        return {'opened': self.opened, 'opens': self._opens}\n\nSee cs.resources.MultiOpenMixin for example use.",
  long_description_content_type = 'text/markdown',
  package_dir = {'': 'lib/python'},
  py_modules = ['cs.obj'],
)
