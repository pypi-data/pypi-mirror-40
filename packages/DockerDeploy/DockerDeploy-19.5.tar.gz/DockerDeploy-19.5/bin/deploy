# Encapsulate the docker command as the deployment command
#
#
#
cmd=$1

p_result=$(echo ${cmd:0:2})
# 确保输入正确的命令
if [ "$p_result" != "--" ];then
	echo "请输入正确命令！"
	echo "	你可以输入 --help获取帮助"
	exit
fi
# 获取帮助的命令
if [ "$cmd" == "--help" ];then
    echo "Usage:"
    echo "	--docker-command:	docker基本命令"
    echo "	--docker-install:	安装本机docker"
    echo "	--make-project:		创建一个部署项目"
    echo "		e.g : deploy --make-project baidu"
    echo "	--docker-uninstall:	卸载本机docker"
    echo "	--docker-start:		启动docker服务"
    echo "	--docker-restart:	重启docker服务"
    echo "	--docker-stop:		终止docker服务"
    echo "      --help:     		获取帮助"
    exit
fi



# 制作项目
if [ "$cmd" == "--make-project" ];then
	if [ -n "$2" ];then
		git clone https://....
	else
		echo "ERROR：请为你的项目命名！"
		echo "你可以 --help 获取帮助"
	fi
	
# 查询部署docker的使用命令
elif [ "$cmd" == "--docker-command" ];then
	echo "	docker镜像的基础命令(相关的参数选项option请查看官方文档):
			======================================================================================
			1.docker run -it {images id} bash    
				# 创建并运行容器  //  docker run -it sdffasddfsdfe bash
			2.docker exec -it {container id} bash  
				# 进入正在运行的容器 // docker exec -it wcsds345fdaszx bash
			3.docker start {container id}  
				# 启动容器  //  docker start wcsds345fdaszx
			4.docker stop {container id}  
				# 终止容器  // docker stop wcsds345fdaszx
			5.docker restart {container id}  
				# 重启容器
			6.docker cp  SRC_PATH|- CONTAINER:DEST_PATH  
				# 宿主机拷贝文件到docker内部  // docker cp ./update.tar gdb0802:/home/work
			7.docker ps  
				# 查看运行中的容器
			8.docker ps -a 
				# 查看所有状态的容器
			9.docker rm {container id}  
				# 删除容器
			10.docker rmi {image id} 
				# 删除镜像
			========================================================================================

			"

	echo "	docker-compose基础命令:
			==========================================================================================
			1.docker-compose -f docker.yaml up -d {your service}  
				# 创建并运行你的某一容器，注意service为yaml文件中的service
			2.docker-compo -f docker.yaml up -d  
				# 创建并运行yaml文件中的所有容器,如果你使用这个命令启动某一容器，则其他容器会更新。
			3.其他命令同理：
				docker-compose -f kg.yaml stop {your service}   
					# 停止某一容器
				docker-compose -f kg.yaml start {your service}	
					# 启动某一容器
				docker-compose -f kg.yaml down {your service}   
				# 停止并删除某一容器
			===========================================================================================

			"

	echo "	相关基础命令文档可以参考:
			===========================================================================================
			官方文档：https://docs.docker.com/engine/reference/commandline/docker/
			国内菜鸟教程简洁版：http://www.runoob.com/docker/docker-command-manual.html
			docker资料汇总：http://www.runoob.com/docker/docker-resources.html
			===========================================================================================
			"
elif [ "$cmd" == "--docker-install" ];then
	if [ "$USER" == "root" ];then
		yum install -y yum-utils device-mapper-persistent-data lvm2
        	# Add software source information
                yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
                # Update yum cache
                yum makecache fast && yum -y install docker-ce
                # install docker-compose
                pip install docker-compose
                echo "-----------Install docker successfully--------------"
	else
		echo "ERROR：You are not root!"
	fi
elif [ "$cmd" == "--docker-uninstall" ];then
	if [ "$USER" == "root" ];then
		yum remove docker*
        	pip uninstall docker-compose
        	echo "-----------Uninstall docker successfully--------------"
	else
		echo "ERROR：You are not root!"
	fi
elif [ "$cmd" == "--docker-start" ];then
        systemctl start docker
        echo "-----------Start docker successfully-------------"
elif [ "$cmd" == "--docker-stop" ];then
        systemctl stop docker
        echo "-----------Stop docker successfully-------------"
elif [ "$cmd" == "--docker-restart" ];then
        systemctl restart docker
        echo "------------Restart docker successfully-------------"
else				
    	echo "ERROR:你输入的命令不支持"
	echo "	你可以输入 --help 获取帮助"

fi
