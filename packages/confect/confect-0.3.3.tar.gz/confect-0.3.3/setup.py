# -*- coding: utf-8 -*-
from distutils.core import setup

packages = \
['confect']

package_data = \
{'': ['*']}

install_requires = \
['pendulum>=1.4.0']

extras_require = \
{'click': ['click>=2.0']}

setup_kwargs = {
    'name': 'confect',
    'version': '0.3.3',
    'description': 'a Python configuration library loads Python configuration files',
    'long_description': "\nConfect - a Python configuration library loads Python configuration files\n=============================================================================\n\nWhy you need a configuration library?\n-------------------------------------\n\n\n- **For storing secrets**\n\n  You have a project that needs to access database or other services with password or some secret keys.\n  Storing secrets and passwords in your code is not smart.\n  You need a configuration file and a library for loading and using it in the runtime.\n\n- **For different runtime environments**\n\n  For example, database IP addresses and passwords in development environment normally differs from production environment.\n  You need multiple configuration files for storing those information for different environment, and load one of them in the run time.\n\n- **For better parameter management**\n\n  You're running some experiments, e.g. working on Machine Learning projects.\n  There're a bunch of parameters needs to be changed in the run time.\n  And you want to manage them in a smarter and more elegant way.\n\nHow confect differs from others?\n-------------------------------------\n\n- **Python configuration files**\n\n  This makes it possible to\n\n  + have complex type objects as configuration values, like Decimal, timedelta\n    or any class instance\n  + dynamically handle complicated logic, you can use conditional statements\n    like ``if`` in it.\n  + read other TOML/YMAL/JSON/ini files or even environment variables in the\n    configuration file.\n\n- **can load configuration file through module importing**\n\n  Confect loads configuration file through a given file path, or through module importing.\n  It's easy to control the source of configuration file through ``PYTHONPATH``.\n\n- **can load configuration file multiple times**\n\n  Sometimes we need multiple configuration files — one for project,\n  one for team and one for personal use.\n  And we want that the personal configuration file has the highest priority.\n  If there's a configuration setting existing in that file, it would override values\n  from other files.\n\n- **loads configurations properties from environment variable**\n\n  This feature is convenient if you want to change a single or some properties values,\n  and don't want to modify the configuration file.\n\n- **attachs command line options to some click_ command**\n\n  You can change any configuration value through command line options, if your command is created by click_.\n\n- **better maintainability**\n\n  Confect forces users to define configuration properties and set a default value before using them.\n  And the ``conf`` object is immutable for reducing the possibility of making errors.\n\n\nInstall\n========\n\n``confect`` is a Python package hosted on PyPI and works only with Python 3.6 up.\n\nJust like other Python packages, install it by pip_ into a virtualenv_\n, or use poetry_ to manage project dependencies and virtualenv.\n\n.. code:: console\n\n   $ pip install confect\n\n\nBasic Usage\n===========\n\nInitialize Conf object\n----------------------\n\nCalling ``conf = confect.Conf()`` creates a new configuration manager object.\n\nFor example, suppose ``proj_X`` is your top-level package name.\nPut the following lines into ``proj_X/core.py``.\n\n.. code:: python\n\n   import confect\n   conf = confect.Conf()\n\n   # load configuration files through importing\n   try:\n       conf.load_module('proj_X_conf')\n   except ImportError:\n       pass\n\n   # overrides configuration with environment variables with the prefix `proj_X`\n   conf.load_envvars('proj_X')\n\nAnd import the ``conf`` object module in any other module\n\n.. code:: python\n\n   from proj_X.core import conf\n\nIt is possible to create multiple ``Conf`` objects, but normally you don't need\nit. In most cases, initialize only one ``Conf`` object in one module of your\npackage, then import and use it anywhere in your application.\n\nUse ``PYTHONPATH`` environment varibale to control the source of configuration file.\n\n.. code:: console\n\n   $ vi proj_X_conf.py\n   $ export PYTHONPATH=.\n   $ python your_application.py\n\nDeclare Configuration Groups and Properties\n-------------------------------------------\n\n**Configuration properties should be declared before using it.** This feature\nmakes your code more readable and maintainable.\n\nUse ``Conf.declare_group(group_name)`` context manager to declare a new\nconfiguration group along with all properties and corresponding default values.\nDefault values can be any type. The group name should be a valid attribute name.\nNormally, the group name is your class name, module name\nor subpackage name.\n\nThe following code can be in the ``proj_X/core.py`` module after ``conf =\nconfect.Conf()``, or in those modules where you need these configuration, like\n``proj_X/db.py`` or ``proj_X/api.py``.\n\n.. code:: python\n\n   with conf.declare_group('api') as cg: # `cg` stands for conf_group\n       cg.cache_expire = 60 * 60 * 24\n       cg.cache_prefix = 'proj_X_cache'\n       cg.url_base_path = 'api/v2/'\n\n   with conf.declare_group('db') as cg:\n       cg.db_name = 'proj_x'\n       cg.username = 'proj_x_admin'\n       cg.password = 'your_password'\n       cg.host = '127.0.0.1'\n\n\nMake sure that the declaration is before all the lines that access these\nproperties. If not, exceptions would be raised.\n\nDefault values of all properties should be defined along with the configuration\ndeclaration. It doesn't have to be a workable value (e.g. fake secret keys or\npasswords), the true workable value can be defined in the configuration file.\nHowever, even if it's not a workable value, the mock default values still makes\nthe declaration and the code more readable and maintainable.\n\n\nAccess Configuration\n--------------------\n\nAfter the group and properties are declared, they are accessable through\ngetting attribute from the ``Conf`` object, like this ``conf.group_name.prop_name``.\n\n``proj_X/api.py``\n.................\n\n.. code:: python\n\n   from proj_X.core import conf\n\n   @routes(conf.api.url_base_path + 'add')\n   @redis_cache(key=conf.api.cache_prefix, expire=conf.api.cache_expire)\n   def add(a, b)\n       return a + b\n\n``proj_X/db.py``\n.................\n\n.. code:: python\n\n   from proj_X.core import conf\n\n   engine = create_engine(\n        f'mysql://{conf.db.username}:{conf.db.password}'\n        f'@{conf.db.host}/{conf.db.db_name}')\n\n\n**Configuration properties and groups are immutable.** They can only be globally\nchanged by loading configuration files. Otherwise, they are always default\nvalues.\n\n>>> conf.api.cache_expire = 60 * 60 * 3\nTraceback (most recent call last):\n   ...\nconfect.error.FrozenConfPropError: Configuration properties are frozen.\n\nConfiguration File\n------------------\n\nConfect loads configuration files is in Python. That makes your configuration file\nprogrammable and unrestricted as we described in the section `How confect differs from others?`_.\n\nIt's not necessary and is unusual to have all configuration properties be defined in the\nconfiguration file. *Put only those configuration properties and corresponding\nvalues that you want to override to the configuration file.*\n\nIn configuration file, import ``confect.c`` object and set all properties on it\nas if ``c`` is the conf object. Here's an example of configuration file.\n\n.. code:: python\n\n   from confect import c\n\n   import os\n\n   DEBUG = True\n\n   if DEBUG:\n       c.cache.expire = 1\n\n   c.cache.key = os.environ['CACHE_KEY']\n\n   # loading some secret file and set configuration\n   import json\n   with open('db_secret.json') as f:\n       db_secret = json.load(f)\n\n   c.db.username = db_secret['username']\n   c.db.password = db_secret['password']\n\n\nYou can set any property in any configuration group onto the ``c`` object.\nHowever, **they are only accessable if you declared it in the source code with**\n``Conf.declare_group(group_name)``.\n\nThe ``c`` object only exits when loading a python configuration file, it's not\npossible to import it in your source code.\n\n\nAdd command line options\n-------------------------\n\n``conf.click_options`` decorator attachs all declared configuration to a click_\ncommand.\n\n\n``proj_X/cli.py``\n.................\n\n.. code:: python\n\n   import click\n   from proj_X.core import conf\n\n   @click.command()\n   @conf.click_options\n   def cli():\n       click.echo(f'cache_expire = {conf.api.cache_expire}')\n\n   if __name__ == '__main__':\n       cli()\n\nIt automatically creates a comprehensive help message with all properties and default values.\n\n.. code:: console\n\n   $ python -m proj_X.cli --help\n   Usage: cli.py [OPTIONS]\n\n   Options:\n     --api-cache_expire INTEGER  [default: 86400]\n     --api-cache_prefix TEXT     [default: proj_X_cache]\n     --api-url_base_path TEXT    [default: api/v2/]\n     --db-db_name TEXT           [default: proj_x]\n     --db-username TEXT          [default: proj_x_admin]\n     --db-password TEXT          [default: your_password]\n     --db-host TEXT              [default: 127.0.0.1]\n     --help                      Show this message and exit.\n\n\nThe option do change the value of configuration property.\n\n.. code:: console\n\n   $ python -m proj_X.cli\n   cache_expire = 86400\n   $ python -m proj_X.cli --api-cache_expire 33\n   cache_expire = 33\n\n\nAdvanced Usage\n==============\n\nLoading Configuration\n---------------------\n\nConfiguration properties and groups are immutable. The standard way to change it\nis to load configuration from files or environment variables.\n\nUse ``Conf.load_conf_file(path)`` or ``Conf.load_conf_module(module_name)`` to\nload configuration files, or use ``Conf.load_envvars(prefix)`` to load\nconfiguration from environment variable. No matter the loading statement is\nlocated before or after groups/properties declaration, property values in\nconfiguration file always override default values. It's possible to load\nconfiguration multiple times, the latter one would replace values from former loading.\n\nBe aware, *you should access your configuration properties after load\nconfiguration files.* If not, you might get wrong/default value. Therefore, we\nusually load configuration file right after the statement of creating the\n``Conf`` object.\n\nThe code in the section `Initialize Conf object`_ is a simple example that loads only through module importing.\nHere's an much more complex example that demostrates how to dynamically select and load configurations.\n\n.. code:: python\n\n   import sys\n   import confect\n\n   conf = confect.Conf()\n\n   # load configuration file\n   if len(sys.argv) == 2:\n       conf.load_conf_file(sys.argv[1])\n   else:\n       try:\n          conf.load_conf_file('path/to/team_conf.py')\n       FileNotFoundError:\n          logger.warning('Unable to find team configuration file')\n\n       try:\n          conf.load_conf_file('path/to/personal_conf.py')\n       FileNotFoundError:\n          logger.info('Unable to find personal configuration file')\n\n   # load configuration file through importing\n   try:\n       conf.load_module('proj_X_conf')\n   except ImportError:\n       logger.warning('Unable to load find configuration module %r',\n                      'proj_x_conf')\n\n   # overrides configuration with environment variables\n   conf.load_envvars('proj_X')\n\n\nLoad Environment Variables\n---------------------------\n\n``Conf.load_envvars(prefix: str)`` automatically searches environment variables\nin ``<prefix>__<group>__<prop>`` format. All of these three identifier are case\nsensitive. If you have a configuration property ``conf.cache.expire_time`` and\nyou call ``Conf.load_envvars('proj_X')``. It will set that ``expire_time``\nproperty to the parsed value of ``proj_X__cache__expire_time`` environment\nvariable.\n\n>>> import os\n>>> os.environ['proj_X__cache__expire'] = '3600'\n\n>>> conf = confect.Conf()\n>>> conf.load_envvars('proj_X')  # doctest: +SKIP\n\nIf ``cache.expire`` has been declared, then\n\n>>> conf.cache.expire\n3600\n\nConfect includes predefined parsers of these primitive types.\n\n- ``str``: ``s``\n- ``int``: ``int(s)``\n- ``float``: ``float(s)``\n- ``bytes``: ``s.decode()``\n- ``datetime.datetime`` : ``pendulum.parse(s)``\n- ``datetime.date`` : ``pendulum.parse(s).date()``\n- ``Decimal`` : ``decimal.Decimal(s)``\n- ``tuple`` : ``json.loads(s)``\n- ``dict``: ``json.loads(s)``\n- ``list``: ``json.loads(s)``\n\nMutable Environment\n-----------------\n\n``Conf.mutate_locally()`` context manager creates an environment that makes\n``Conf`` object temporarily mutable. All changes would be restored when it\nleaves the block. It is usaful on writing test case or testing configuration\nproperties in Python REPL.\n\n>>> conf = Conf()\n>>> conf.declare_group(  # declare group through keyword arguments\n...      'dummy',\n...      prop1=3,\n...      prop2='some string')\n...\n>>> with conf.mutate_locally():\n...      conf.dummy.prop1 = 5\n...      print(conf.dummy.prop1)\n5\n...     call_some_function_use_this_property()\n>>> print(conf.dummy.prop1)  # all configuration restored\n3\n\n\nTo-Dos\n======\n\n- A public interface for exporting a conf group into a dictionary\n- A plugin for `Click <http://click.pocoo.org/5/>`_ arg `argparse <https://docs.python.org/3/library/argparse.html>`_  that adds command line options for altering configuration properties.\n- Copy-on-write mechenism in ``conf.mutate_locally()`` for better performance and memory usage.\n- API reference page\n\n\n.. _click: http://click.pocoo.org/\n.. _pip: https://pip.pypa.io/en/stable/\n.. _virtualenv: https://hynek.me/articles/virtualenv-lives/\n.. _poetry: https://poetry.eustace.io/\n",
    'author': '顏孜羲',
    'author_email': 'joseph.yen@gmail.com',
    'url': 'https://github.com/d2207197/confect',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'python_requires': '>=3.6',
}


setup(**setup_kwargs)
