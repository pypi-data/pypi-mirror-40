# Copyright 2018 TensorHub, Inc. and contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ===================================================================
# Package def
# ===================================================================

- package: gpkg.mnist
  version: 0.6.0.dev1
  description:
    CNN and multinomial logistic regression classifiers for
    MNIST digits (Guild AI)
  url: https://github.com/guildai/index/tree/master/gpkg/mnist
  author: Guild AI
  author-email: packages@guild.ai
  license: Apache 2.0

# ===================================================================
# Shared resources
# ===================================================================

- config: dataset-support
  resources:
    mnist-dataset:
      description: "Yann Lecun's MNIST dataset in compressed IDX format"
      private: yes
      path: mnist-idx-data
      sources:
        - url: http://yann.lecun.com/exdb/mnist/train-images-idx3-ubyte.gz
          sha256: 440fcabf73cc546fa21475e81ea370265605f56be210a4024d2ca8f203523609
        - url: http://yann.lecun.com/exdb/mnist/train-labels-idx1-ubyte.gz
          sha256: 3552534a0a558bbed6aed32b30c495cca23d567ec52cac8be1a0730e8010255c
        - url: http://yann.lecun.com/exdb/mnist/t10k-images-idx3-ubyte.gz
          sha256: 8d422c7b0a1c1c79245a5bcf07fe86e33eeafee792b84584aec276f5a2dbc4e6
        - url: http://yann.lecun.com/exdb/mnist/t10k-labels-idx1-ubyte.gz
          sha256: f7ae60f92e00ec6debd23a6088c31dbd2371eca3ffa0defaefb259924204aec6

# ===================================================================
# Model base
# ===================================================================

- config: model-base
  extends: dataset-support
  operations:
    train:
      description: 'Train the {{model_desc}}'
      main: '{{train_cmd}} --data-dir mnist-idx-data --run-dir .'
      requires: mnist-dataset
      compare: ['loss step as step', loss, val_acc]
      flags:
        batch-size:
          description: Number of images to include in a training batch
          default: 100
        epochs:
          description: Number of epochs to train
          default: 10
    evaluate:
      description: 'Evaluate a trained {{model_desc}}'
      main: '{{train_cmd}} --test --data-dir mnist-idx-data --run-dir .'
      requires:
        - trained-model
        - mnist-dataset
  resources:
    trained-model:
      private: yes
      sources:
        - operation: train
          select:
            - model.ckpt.*
            - checkpoint

# ===================================================================
# Architecture specific models
# ===================================================================

- model: logreg
  extends: model-base
  description: Multinomial logistic regression classifier for MNIST
  params:
    model_desc: logistic regression
    train_cmd: logreg

- model: cnn
  extends: model-base
  description: CNN classifier for MNIST
  params:
    model_desc: CNN
    train_cmd: cnn

# ===================================================================
# Sample image generator
# ===================================================================

- model: samples
  extends: dataset-support
  description: Sample MNIST images
  operations:
    prepare:
      description: Generate a set of sample MNIST images
      main: samples --data-dir mnist-idx-data --sample-dir .
      flags:
        count:
          description: Number of images to generate
          default: 100
          arg-name: sample-count
      requires: mnist-dataset

# ===================================================================
# Tests
# ===================================================================

- test: all
  steps:
    - run: samples:prepare
    - for-each-model:
        models:
          - logreg
          - cnn
        steps:
          - run: train
            flags:
              epochs: 1
          - run: evaluate
