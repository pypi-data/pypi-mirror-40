#!/usr/bin/env python
# -*- coding: utf-8 -*-
""" TcEx Framework Package Module """
import argparse
import ast
import json
import os
import re
import shutil
import sys
import traceback
import zipfile
from collections import OrderedDict

import colorama as c
from jsonschema import SchemaError, ValidationError, validate

# Python 2 unicode
if sys.version_info[0] == 2:
    reload(sys)  # noqa: F821; pylint: disable=E0602
    sys.setdefaultencoding('utf-8')  # pylint: disable=E1101

parser = argparse.ArgumentParser()
parser.add_argument('--bundle', action='store_true', help='Build a bundle file.')
parser.add_argument(
    '--exclude', action='append', default=[], help='File and directories to exclude from build.'
)
parser.add_argument(
    '--config', default='tcex.json', help='Build configuration file. (Default: tcex.json)'
)
parser.add_argument(
    '--install_json', help='The install.json file name for the App that should be built.'
)
parser.add_argument(
    '--outdir', default='target', help='Directory to write the outfile. (Default: target)'
)
args, extra_args = parser.parse_known_args()

# Load Schema
# schema_file = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'tcex_json_schema.json')


# TODO: Clean this up when time allows
class TcPackage(object):
    """Package the app for deployment

    This method will package the app for deployment to ThreatConnect. Validation of the
    install.json file or files will be automatically run before packaging the app.
    """

    def __init__(self, _args):
        """Init Class properties"""
        self._args = _args
        self.app_path = os.getcwd()
        self.exit_code = 0
        self.features = ['secureParams', 'aotExecutionEnabled']

        # defaults
        self._app_packages = []
        self.config = {}
        self.schema = None
        self.schema_file = 'tcex_json_schema.json'

        # initialize colorama
        c.init(autoreset=True, strip=False)

        # load config
        self._load_config()

        # load schema
        self._load_schema()

    def _load_config(self):
        """ """
        # load config
        if os.path.isfile(args.config):
            with open(args.config, 'r') as fh:
                try:
                    self.config = json.load(fh).get('package', {})
                except ValueError as e:
                    print('Invalid JSON File {}{}({})'.format(c.Style.BRIGHT, c.Fore.RED, e))
                    sys.exit(1)

    def _load_schema(self):
        """Load JSON schema file"""
        if os.path.isfile(self.schema_file):
            with open(self.schema_file) as fh:
                self.schema = json.load(fh)
        else:
            print(
                '{}{}Packager can not validate install.json without {} schema file.'.format(
                    c.Style.BRIGHT, c.Fore.YELLOW, self.schema_file
                )
            )

    @staticmethod
    def _load_install_json(file):
        """Load install.json file"""
        install_data = {}
        if os.path.isfile(file):
            with open(file) as fh:
                install_data = json.load(fh, object_pairs_hook=OrderedDict)
        else:
            print('{}{}Could not load {} file.'.format(c.Style.BRIGHT, c.Fore.YELLOW, file))

        # if not install_data.get('apiUserTokenParam'):
        #     print('{}{}The current install.json file is missing param "apiUserTokenParam"'.format(
        #         c.Style.BRIGHT, c.Fore.YELLOW))

        return install_data

    def _update_install_json(self, install_json):
        """Write install.json file"""
        updated = False
        # Update features
        install_json.setdefault('features', [])
        for feature in self.features:
            if feature not in install_json.get('features'):
                install_json['features'].append(feature)
                updated = True
                print(
                    'Updating install.json for feature: {}{}{}'.format(
                        c.Style.BRIGHT, c.Fore.CYAN, feature
                    )
                )

        return install_json, updated

    @staticmethod
    def _write_install_json(filename, install_json):
        """Write install.json file"""
        # TODO: why check if it exists?
        if os.path.isfile(filename):
            with open(filename, 'w') as fh:
                json.dump(install_json, fh, indent=4, sort_keys=True)
        else:
            print('{}{}Could not write {} file.'.format(c.Style.BRIGHT, c.Fore.YELLOW, filename))

    @staticmethod
    def check_ast(app_path=None):
        """Run ast on each Python file.

        Args:
            app_path (str, optional): Defaults to None. The path of Python files.
        """
        print('{}{}Validating File Syntax:'.format(c.Style.BRIGHT, c.Fore.BLUE))

        app_path = app_path or '.'
        error = False

        print('{!s:<60}{!s:<25}'.format('File:', 'Status:'))
        for filename in sorted(os.listdir(app_path)):
            status = 'passed'
            status_color = c.Fore.GREEN
            if filename.endswith('.py'):
                errors = []

                try:
                    with open(filename, 'rb') as f:
                        ast.parse(f.read(), filename=filename)
                except SyntaxError:
                    status = 'failed'
                    status_color = c.Fore.RED
                    errors = traceback.format_exc().split('\n')[-5:-2]
                    error = True

            elif filename.endswith('.json'):
                try:
                    with open(filename, 'r') as fh:
                        json.load(fh)
                except Exception:
                    status = 'failed'
                    status_color = c.Fore.RED
                    error = True
            else:
                # skip unsupported file types
                continue

            # display results
            print('{!s:<60}{}{!s:<25}'.format(filename, status_color, status))
            for line in errors:
                print('{}{}{}'.format(c.Style.BRIGHT, c.Fore.RED, line))

        if error:
            sys.exit(1)

    @property
    def commit_hash(self):
        """Return the current commit hash if available.

        This is not a required task so best effort is fine. In other words this is not guaranteed
        to work 100% of the time.
        """
        commit_hash = None
        branch = None
        branch_file = '.git/HEAD'  # ref: refs/heads/develop

        # get current branch
        if os.path.isfile(branch_file):
            with open(branch_file, 'r') as f:
                try:
                    branch = f.read().strip().split('/')[2]
                except IndexError:
                    pass

            # get commit hash
            if branch:
                hash_file = '.git/refs/heads/{}'.format(branch)
                if os.path.isfile(hash_file):
                    with open(hash_file, 'r') as f:
                        commit_hash = f.read().strip()
        return commit_hash

    def package(self):
        """Package the App for deployment in TcEx"""

        #
        # create build directory
        #
        tmp_path = os.path.join(self.app_path, self._args.outdir, 'build')
        if not os.path.isdir(tmp_path):
            os.makedirs(tmp_path)

        #
        # temp path and cleanup
        #
        template_app_path = os.path.join(tmp_path, 'template')
        if os.access(template_app_path, os.W_OK):
            # cleanup any previous failed builds
            shutil.rmtree(template_app_path)
        print('\n{}{}Packaging App:'.format(c.Style.BRIGHT, c.Fore.BLUE))
        print(
            'Building App Template: {}{}{}'.format(c.Style.BRIGHT, c.Fore.CYAN, template_app_path)
        )

        #
        # build exclude file/directory list
        #
        excludes = [
            self._args.config,
            self._args.outdir,
            '__pycache__',
            '.c9',  # C9 IDE
            '.git',  # git directory
            '.gitmodules',  # git modules
            '*.pyc',  # any pyc file
            '.python-version',  # pyenv
            '.vscode',  # Visual Studio Code
            'log',  # log directory
        ]
        excludes.extend(self._args.exclude)
        excludes.extend(self.config.get('excludes', []))
        patterns = ', '.join(excludes)
        print('Excluding: {}{}{}'.format(c.Style.BRIGHT, c.Fore.CYAN, patterns))

        #
        # copy project directory to temp location to use as template for multiple builds
        #
        ignore_patterns = shutil.ignore_patterns(*excludes)
        shutil.copytree(self.app_path, template_app_path, False, ignore_patterns)

        #
        # build list of app json files
        #
        if self._args.install_json is not None:
            contents = [self._args.install_json]
        else:
            contents = os.listdir(self.app_path)

        #
        # package app
        #
        for install_json in sorted(contents):
            # skip files that are not install.json files
            if 'install.json' not in install_json:
                continue

            # divider
            print('{}{}'.format(c.Style.BRIGHT, '-' * 100))

            # get App Name from config, install.json prefix or directory name.
            if install_json == 'install.json':
                app_name = self.config.get('app_name', os.path.basename(self.app_path))
            else:
                app_name = install_json.split('.')[0]

            print('Processing: {}{}{}'.format(c.Style.BRIGHT, c.Fore.CYAN, app_name))

            #
            # validate install json
            #
            if self.schema is not None:
                self.validate(install_json)

            #
            # load install json
            #
            ij = self._load_install_json(install_json)

            # automatically update install.json for feature sets supported by the SDK
            ij, ij_modified = self._update_install_json(ij)

            #
            # write update install.json
            #
            if ij_modified:
                self._write_install_json(install_json, ij)

            # find a usable app version
            program_version = ij.get('programVersion', '1.0.0').split('.')
            major_version = program_version[0]
            try:
                minor_version = program_version[1]
            except IndexError:
                minor_version = 0
            app_version = '{}'.format(
                self.config.get('app_version', 'v{}.{}'.format(major_version, minor_version))
            )

            # !!! The name of the folder in the zip is the *key* for an App. This value must
            # !!! remain consistent for the App to upgrade successfully.
            app_name_version = '{}_{}'.format(app_name, app_version)

            #
            # build app directory
            #
            tmp_app_path = os.path.join(tmp_path, app_name_version)
            if os.access(tmp_app_path, os.W_OK):
                # cleanup any previous failed builds
                shutil.rmtree(tmp_app_path)
            shutil.copytree(template_app_path, tmp_app_path)

            # Copy install.json
            # TODO: do we need copy if writing the data in the next step?
            shutil.copy(install_json, os.path.join(tmp_app_path, 'install.json'))

            # Update commit hash after install.json has been copied.
            ij.setdefault('commitHash', self.commit_hash)
            self._write_install_json(os.path.join(tmp_app_path, 'install.json'), ij)

            # zip file
            self.zip_file(self.app_path, app_name_version, tmp_path)
            # cleanup build directory
            shutil.rmtree(tmp_app_path)

        # bundle zips (must have more than 1 app)
        if len(self._app_packages) > 1:
            self.bundle(self.config.get('bundle_name', app_name))

    def zip_file(self, app_path, app_name, tmp_path):
        """Zip App"""
        # zip build directory
        zip_file = os.path.join(app_path, self._args.outdir, app_name)
        zip_file_zip = '{}.zip'.format(zip_file)
        zip_file_tcx = '{}.tcx'.format(zip_file)
        print(
            'Creating zip: {}{}{}'.format(
                c.Style.BRIGHT, c.Fore.CYAN, os.path.basename(zip_file_tcx)
            )
        )
        shutil.make_archive(zip_file, 'zip', tmp_path, app_name)
        shutil.move(zip_file_zip, zip_file_tcx)
        self._app_packages.append(zip_file_tcx)

    def bundle(self, bundle_name):
        """Bundle App"""
        if self._args.bundle or self.config.get('bundle', False):
            print('{}{}'.format(c.Style.BRIGHT, '-' * 100))
            if self.config.get('bundle_packages') is not None:
                for bundle in self.config.get('bundle_packages') or []:
                    bundle_name = bundle.get('name')
                    bundle_patterns = bundle.get('patterns')

                    bundle_apps = []
                    for app in self._app_packages:
                        for app_pattern in bundle_patterns:
                            p = re.compile(app_pattern, re.IGNORECASE)
                            if p.match(app):
                                bundle_apps.append(app)

                    # bundle app in zip
                    if bundle_apps:
                        self.bundle_apps(bundle_name, bundle_apps)
            else:
                self.bundle_apps(bundle_name, self._app_packages)

    def bundle_apps(self, bundle_name, bundle_apps):
        """Bundle zip (tcx) file"""
        bundle_file = os.path.join(
            self.app_path, self._args.outdir, '{}-bundle.zip'.format(bundle_name)
        )
        print(
            'Creating bundle: {}{}{}'.format(
                c.Style.BRIGHT, c.Fore.CYAN, os.path.basename(bundle_file)
            )
        )
        z = zipfile.ZipFile(bundle_file, 'w')
        for app in bundle_apps:
            print('  Adding: {}{}{}'.format(c.Style.BRIGHT, c.Fore.GREEN, os.path.basename(app)))
            z.write(app, os.path.basename(app))
        z.close()

    def validate(self, install_json):
        """Validate install.json file for required parameters"""
        # install.json validation
        try:
            with open(install_json) as fh:
                data = json.loads(fh.read())
            validate(data, self.schema)
            print(
                'Validating: {}{}{} {}({})'.format(
                    c.Style.BRIGHT, c.Fore.CYAN, install_json, c.Fore.GREEN, 'valid'
                )
            )
        except SchemaError as e:
            print(
                'Validating: {}{}{} {}({})'.format(
                    c.Style.BRIGHT, c.Fore.CYAN, install_json, c.Fore.RED, e
                )
            )
        except ValidationError as e:
            print(
                'Validating: {}{}{} {}({})'.format(
                    c.Style.BRIGHT, c.Fore.CYAN, install_json, c.Fore.RED, e
                )
            )


if __name__ == '__main__':
    try:
        tcp = TcPackage(args)
        tcp.check_ast()
        tcp.package()
        sys.exit(tcp.exit_code)
    except Exception:
        # TODO: Update this, possibly raise
        print('{}{}{}'.format(c.Style.BRIGHT, c.Fore.RED, traceback.format_exc()))
        sys.exit(1)
