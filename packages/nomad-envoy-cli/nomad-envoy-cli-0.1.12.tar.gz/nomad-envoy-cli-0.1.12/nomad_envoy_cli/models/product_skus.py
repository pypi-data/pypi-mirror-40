# coding: utf-8

"""
    Nomad Envoy

    This is the API descriptor for the Nomad Envoy API, responsible for order creation and product lists.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: paul@samarkand.global
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from nomad_envoy_cli.models.images import Images  # noqa: F401,E501


class ProductSkus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sku_number': 'str',
        'price': 'float',
        'images': 'Images',
        'barcode': 'str',
        'color': 'str',
        'quantity': 'float',
        'is_onsale': 'bool'
    }

    attribute_map = {
        'sku_number': 'skuNumber',
        'price': 'price',
        'images': 'images',
        'barcode': 'barcode',
        'color': 'color',
        'quantity': 'quantity',
        'is_onsale': 'is_onsale'
    }

    def __init__(self, sku_number=None, price=None, images=None, barcode=None, color=None, quantity=None, is_onsale=None):  # noqa: E501
        """ProductSkus - a model defined in Swagger"""  # noqa: E501

        self._sku_number = None
        self._price = None
        self._images = None
        self._barcode = None
        self._color = None
        self._quantity = None
        self._is_onsale = None
        self.discriminator = None

        if sku_number is not None:
            self.sku_number = sku_number
        if price is not None:
            self.price = price
        if images is not None:
            self.images = images
        if barcode is not None:
            self.barcode = barcode
        if color is not None:
            self.color = color
        if quantity is not None:
            self.quantity = quantity
        if is_onsale is not None:
            self.is_onsale = is_onsale

    @property
    def sku_number(self):
        """Gets the sku_number of this ProductSkus.  # noqa: E501


        :return: The sku_number of this ProductSkus.  # noqa: E501
        :rtype: str
        """
        return self._sku_number

    @sku_number.setter
    def sku_number(self, sku_number):
        """Sets the sku_number of this ProductSkus.


        :param sku_number: The sku_number of this ProductSkus.  # noqa: E501
        :type: str
        """

        self._sku_number = sku_number

    @property
    def price(self):
        """Gets the price of this ProductSkus.  # noqa: E501

        Current unit is Yuan), it's like one Pound in GBP.  # noqa: E501

        :return: The price of this ProductSkus.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProductSkus.

        Current unit is Yuan), it's like one Pound in GBP.  # noqa: E501

        :param price: The price of this ProductSkus.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def images(self):
        """Gets the images of this ProductSkus.  # noqa: E501


        :return: The images of this ProductSkus.  # noqa: E501
        :rtype: Images
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this ProductSkus.


        :param images: The images of this ProductSkus.  # noqa: E501
        :type: Images
        """

        self._images = images

    @property
    def barcode(self):
        """Gets the barcode of this ProductSkus.  # noqa: E501


        :return: The barcode of this ProductSkus.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this ProductSkus.


        :param barcode: The barcode of this ProductSkus.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def color(self):
        """Gets the color of this ProductSkus.  # noqa: E501


        :return: The color of this ProductSkus.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ProductSkus.


        :param color: The color of this ProductSkus.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def quantity(self):
        """Gets the quantity of this ProductSkus.  # noqa: E501


        :return: The quantity of this ProductSkus.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProductSkus.


        :param quantity: The quantity of this ProductSkus.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def is_onsale(self):
        """Gets the is_onsale of this ProductSkus.  # noqa: E501


        :return: The is_onsale of this ProductSkus.  # noqa: E501
        :rtype: bool
        """
        return self._is_onsale

    @is_onsale.setter
    def is_onsale(self, is_onsale):
        """Sets the is_onsale of this ProductSkus.


        :param is_onsale: The is_onsale of this ProductSkus.  # noqa: E501
        :type: bool
        """

        self._is_onsale = is_onsale

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductSkus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductSkus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
